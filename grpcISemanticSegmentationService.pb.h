// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcISemanticSegmentationService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcISemanticSegmentationService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcISemanticSegmentationService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcISemanticSegmentationService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcISemanticSegmentationService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcISemanticSegmentationService_2eproto;
namespace grpcISemanticSegmentation {
class segmentRequest;
struct segmentRequestDefaultTypeInternal;
extern segmentRequestDefaultTypeInternal _segmentRequest_default_instance_;
class segmentResponse;
struct segmentResponseDefaultTypeInternal;
extern segmentResponseDefaultTypeInternal _segmentResponse_default_instance_;
}  // namespace grpcISemanticSegmentation
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcISemanticSegmentation::segmentRequest* Arena::CreateMaybeMessage<::grpcISemanticSegmentation::segmentRequest>(Arena*);
template<> ::grpcISemanticSegmentation::segmentResponse* Arena::CreateMaybeMessage<::grpcISemanticSegmentation::segmentResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcISemanticSegmentation {

// ===================================================================

class segmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcISemanticSegmentation.segmentRequest) */ {
 public:
  inline segmentRequest() : segmentRequest(nullptr) {}
  ~segmentRequest() override;
  explicit PROTOBUF_CONSTEXPR segmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  segmentRequest(const segmentRequest& from);
  segmentRequest(segmentRequest&& from) noexcept
    : segmentRequest() {
    *this = ::std::move(from);
  }

  inline segmentRequest& operator=(const segmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline segmentRequest& operator=(segmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const segmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const segmentRequest* internal_default_instance() {
    return reinterpret_cast<const segmentRequest*>(
               &_segmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(segmentRequest& a, segmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(segmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(segmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  segmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<segmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const segmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const segmentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(segmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcISemanticSegmentation.segmentRequest";
  }
  protected:
  explicit segmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kMaskFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes mask = 3;
  void clear_mask();
  const std::string& mask() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mask(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mask();
  PROTOBUF_NODISCARD std::string* release_mask();
  void set_allocated_mask(std::string* mask);
  private:
  const std::string& _internal_mask() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mask(const std::string& value);
  std::string* _internal_mutable_mask();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcISemanticSegmentation.segmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcISemanticSegmentationService_2eproto;
};
// -------------------------------------------------------------------

class segmentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcISemanticSegmentation.segmentResponse) */ {
 public:
  inline segmentResponse() : segmentResponse(nullptr) {}
  ~segmentResponse() override;
  explicit PROTOBUF_CONSTEXPR segmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  segmentResponse(const segmentResponse& from);
  segmentResponse(segmentResponse&& from) noexcept
    : segmentResponse() {
    *this = ::std::move(from);
  }

  inline segmentResponse& operator=(const segmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline segmentResponse& operator=(segmentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const segmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const segmentResponse* internal_default_instance() {
    return reinterpret_cast<const segmentResponse*>(
               &_segmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(segmentResponse& a, segmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(segmentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(segmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  segmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<segmentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const segmentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const segmentResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(segmentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcISemanticSegmentation.segmentResponse";
  }
  protected:
  explicit segmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes mask = 1;
  void clear_mask();
  const std::string& mask() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mask(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mask();
  PROTOBUF_NODISCARD std::string* release_mask();
  void set_allocated_mask(std::string* mask);
  private:
  const std::string& _internal_mask() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mask(const std::string& value);
  std::string* _internal_mutable_mask();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcISemanticSegmentation.segmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcISemanticSegmentationService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// segmentRequest

// int32 grpcServerCompressionFormat = 1;
inline void segmentRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t segmentRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t segmentRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcISemanticSegmentation.segmentRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void segmentRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void segmentRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcISemanticSegmentation.segmentRequest.grpcServerCompressionFormat)
}

// bytes image = 2;
inline void segmentRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& segmentRequest::image() const {
  // @@protoc_insertion_point(field_get:grpcISemanticSegmentation.segmentRequest.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void segmentRequest::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcISemanticSegmentation.segmentRequest.image)
}
inline std::string* segmentRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:grpcISemanticSegmentation.segmentRequest.image)
  return _s;
}
inline const std::string& segmentRequest::_internal_image() const {
  return image_.Get();
}
inline void segmentRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(value, GetArenaForAllocation());
}
inline std::string* segmentRequest::_internal_mutable_image() {
  
  return image_.Mutable(GetArenaForAllocation());
}
inline std::string* segmentRequest::release_image() {
  // @@protoc_insertion_point(field_release:grpcISemanticSegmentation.segmentRequest.image)
  return image_.Release();
}
inline void segmentRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcISemanticSegmentation.segmentRequest.image)
}

// bytes mask = 3;
inline void segmentRequest::clear_mask() {
  mask_.ClearToEmpty();
}
inline const std::string& segmentRequest::mask() const {
  // @@protoc_insertion_point(field_get:grpcISemanticSegmentation.segmentRequest.mask)
  return _internal_mask();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void segmentRequest::set_mask(ArgT0&& arg0, ArgT... args) {
 
 mask_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcISemanticSegmentation.segmentRequest.mask)
}
inline std::string* segmentRequest::mutable_mask() {
  std::string* _s = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:grpcISemanticSegmentation.segmentRequest.mask)
  return _s;
}
inline const std::string& segmentRequest::_internal_mask() const {
  return mask_.Get();
}
inline void segmentRequest::_internal_set_mask(const std::string& value) {
  
  mask_.Set(value, GetArenaForAllocation());
}
inline std::string* segmentRequest::_internal_mutable_mask() {
  
  return mask_.Mutable(GetArenaForAllocation());
}
inline std::string* segmentRequest::release_mask() {
  // @@protoc_insertion_point(field_release:grpcISemanticSegmentation.segmentRequest.mask)
  return mask_.Release();
}
inline void segmentRequest::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    
  } else {
    
  }
  mask_.SetAllocated(mask, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mask_.IsDefault()) {
    mask_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcISemanticSegmentation.segmentRequest.mask)
}

// -------------------------------------------------------------------

// segmentResponse

// bytes mask = 1;
inline void segmentResponse::clear_mask() {
  mask_.ClearToEmpty();
}
inline const std::string& segmentResponse::mask() const {
  // @@protoc_insertion_point(field_get:grpcISemanticSegmentation.segmentResponse.mask)
  return _internal_mask();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void segmentResponse::set_mask(ArgT0&& arg0, ArgT... args) {
 
 mask_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcISemanticSegmentation.segmentResponse.mask)
}
inline std::string* segmentResponse::mutable_mask() {
  std::string* _s = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:grpcISemanticSegmentation.segmentResponse.mask)
  return _s;
}
inline const std::string& segmentResponse::_internal_mask() const {
  return mask_.Get();
}
inline void segmentResponse::_internal_set_mask(const std::string& value) {
  
  mask_.Set(value, GetArenaForAllocation());
}
inline std::string* segmentResponse::_internal_mutable_mask() {
  
  return mask_.Mutable(GetArenaForAllocation());
}
inline std::string* segmentResponse::release_mask() {
  // @@protoc_insertion_point(field_release:grpcISemanticSegmentation.segmentResponse.mask)
  return mask_.Release();
}
inline void segmentResponse::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    
  } else {
    
  }
  mask_.SetAllocated(mask, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mask_.IsDefault()) {
    mask_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcISemanticSegmentation.segmentResponse.mask)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void segmentResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t segmentResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t segmentResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcISemanticSegmentation.segmentResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void segmentResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void segmentResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcISemanticSegmentation.segmentResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcISemanticSegmentation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcISemanticSegmentationService_2eproto
