// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIKeyframesManagerService.proto

#include "grpcIKeyframesManagerService.pb.h"
#include "grpcIKeyframesManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIKeyframesManager {

static const char* grpcIKeyframesManagerService_method_names[] = {
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/addKeyframe_grpc0",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/addKeyframe_grpc1",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/getKeyframe",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/getKeyframes",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/getAllKeyframes",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/suppressKeyframe",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/getDescriptorType",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/setDescriptorType",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/isExistKeyframe",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/getNbKeyframes",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/saveToFile",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/loadFromFile",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/getConstKeyframeCollection",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/getKeyframeCollection",
  "/grpcIKeyframesManager.grpcIKeyframesManagerService/setKeyframeCollection",
};

std::unique_ptr< grpcIKeyframesManagerService::Stub> grpcIKeyframesManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIKeyframesManagerService::Stub> stub(new grpcIKeyframesManagerService::Stub(channel));
  return stub;
}

grpcIKeyframesManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_addKeyframe_grpc0_(grpcIKeyframesManagerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addKeyframe_grpc1_(grpcIKeyframesManagerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getKeyframe_(grpcIKeyframesManagerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getKeyframes_(grpcIKeyframesManagerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllKeyframes_(grpcIKeyframesManagerService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_suppressKeyframe_(grpcIKeyframesManagerService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDescriptorType_(grpcIKeyframesManagerService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDescriptorType_(grpcIKeyframesManagerService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isExistKeyframe_(grpcIKeyframesManagerService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNbKeyframes_(grpcIKeyframesManagerService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveToFile_(grpcIKeyframesManagerService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadFromFile_(grpcIKeyframesManagerService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getConstKeyframeCollection_(grpcIKeyframesManagerService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getKeyframeCollection_(grpcIKeyframesManagerService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setKeyframeCollection_(grpcIKeyframesManagerService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIKeyframesManagerService::Stub::addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::addKeyframe_grpc0Request, ::grpcIKeyframesManager::addKeyframe_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addKeyframe_grpc0_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::addKeyframe_grpc0Request, ::grpcIKeyframesManager::addKeyframe_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addKeyframe_grpc0_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addKeyframe_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc0Response>* grpcIKeyframesManagerService::Stub::PrepareAsyncaddKeyframe_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::addKeyframe_grpc0Response, ::grpcIKeyframesManager::addKeyframe_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addKeyframe_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc0Response>* grpcIKeyframesManagerService::Stub::AsyncaddKeyframe_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddKeyframe_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::addKeyframe_grpc1Request, ::grpcIKeyframesManager::addKeyframe_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addKeyframe_grpc1_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::addKeyframe_grpc1Request, ::grpcIKeyframesManager::addKeyframe_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addKeyframe_grpc1_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addKeyframe_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc1Response>* grpcIKeyframesManagerService::Stub::PrepareAsyncaddKeyframe_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::addKeyframe_grpc1Response, ::grpcIKeyframesManager::addKeyframe_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addKeyframe_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc1Response>* grpcIKeyframesManagerService::Stub::AsyncaddKeyframe_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddKeyframe_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpcIKeyframesManager::getKeyframeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::getKeyframeRequest, ::grpcIKeyframesManager::getKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getKeyframe_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::getKeyframeRequest, ::grpcIKeyframesManager::getKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getKeyframe_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getKeyframe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncgetKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::getKeyframeResponse, ::grpcIKeyframesManager::getKeyframeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getKeyframe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeResponse>* grpcIKeyframesManagerService::Stub::AsyncgetKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetKeyframeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpcIKeyframesManager::getKeyframesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::getKeyframesRequest, ::grpcIKeyframesManager::getKeyframesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getKeyframes_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::getKeyframesRequest, ::grpcIKeyframesManager::getKeyframesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getKeyframes_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getKeyframes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframesResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncgetKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::getKeyframesResponse, ::grpcIKeyframesManager::getKeyframesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getKeyframes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframesResponse>* grpcIKeyframesManagerService::Stub::AsyncgetKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetKeyframesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpcIKeyframesManager::getAllKeyframesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::getAllKeyframesRequest, ::grpcIKeyframesManager::getAllKeyframesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllKeyframes_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::getAllKeyframesRequest, ::grpcIKeyframesManager::getAllKeyframesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllKeyframes_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllKeyframes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getAllKeyframesResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncgetAllKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::getAllKeyframesResponse, ::grpcIKeyframesManager::getAllKeyframesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllKeyframes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getAllKeyframesResponse>* grpcIKeyframesManagerService::Stub::AsyncgetAllKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllKeyframesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpcIKeyframesManager::suppressKeyframeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::suppressKeyframeRequest, ::grpcIKeyframesManager::suppressKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_suppressKeyframe_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::suppressKeyframeRequest, ::grpcIKeyframesManager::suppressKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressKeyframe_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressKeyframe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::suppressKeyframeResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::suppressKeyframeResponse, ::grpcIKeyframesManager::suppressKeyframeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_suppressKeyframe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::suppressKeyframeResponse>* grpcIKeyframesManagerService::Stub::AsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsuppressKeyframeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::getDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getDescriptorTypeRequest& request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::getDescriptorTypeRequest, ::grpcIKeyframesManager::getDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDescriptorType_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::getDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getDescriptorTypeRequest* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::getDescriptorTypeRequest, ::grpcIKeyframesManager::getDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDescriptorType_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::getDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getDescriptorTypeRequest* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDescriptorType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getDescriptorTypeResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::getDescriptorTypeResponse, ::grpcIKeyframesManager::getDescriptorTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDescriptorType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getDescriptorTypeResponse>* grpcIKeyframesManagerService::Stub::AsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDescriptorTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::setDescriptorTypeRequest, ::grpcIKeyframesManager::setDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDescriptorType_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::setDescriptorTypeRequest, ::grpcIKeyframesManager::setDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDescriptorType_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDescriptorType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::setDescriptorTypeResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::setDescriptorTypeResponse, ::grpcIKeyframesManager::setDescriptorTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDescriptorType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::setDescriptorTypeResponse>* grpcIKeyframesManagerService::Stub::AsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDescriptorTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpcIKeyframesManager::isExistKeyframeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::isExistKeyframeRequest, ::grpcIKeyframesManager::isExistKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isExistKeyframe_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::isExistKeyframeRequest, ::grpcIKeyframesManager::isExistKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isExistKeyframe_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isExistKeyframe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::isExistKeyframeResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncisExistKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::isExistKeyframeResponse, ::grpcIKeyframesManager::isExistKeyframeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isExistKeyframe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::isExistKeyframeResponse>* grpcIKeyframesManagerService::Stub::AsyncisExistKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisExistKeyframeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::getNbKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getNbKeyframesRequest& request, ::grpcIKeyframesManager::getNbKeyframesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::getNbKeyframesRequest, ::grpcIKeyframesManager::getNbKeyframesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNbKeyframes_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::getNbKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getNbKeyframesRequest* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::getNbKeyframesRequest, ::grpcIKeyframesManager::getNbKeyframesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNbKeyframes_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::getNbKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getNbKeyframesRequest* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNbKeyframes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getNbKeyframesResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncgetNbKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getNbKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::getNbKeyframesResponse, ::grpcIKeyframesManager::getNbKeyframesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNbKeyframes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getNbKeyframesResponse>* grpcIKeyframesManagerService::Stub::AsyncgetNbKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getNbKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNbKeyframesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpcIKeyframesManager::saveToFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::saveToFileRequest, ::grpcIKeyframesManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveToFile_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::saveToFileRequest, ::grpcIKeyframesManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::saveToFileResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::saveToFileResponse, ::grpcIKeyframesManager::saveToFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveToFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::saveToFileResponse>* grpcIKeyframesManagerService::Stub::AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveToFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpcIKeyframesManager::loadFromFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::loadFromFileRequest, ::grpcIKeyframesManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadFromFile_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::loadFromFileRequest, ::grpcIKeyframesManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::loadFromFileResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::loadFromFileResponse, ::grpcIKeyframesManager::loadFromFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadFromFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::loadFromFileResponse>* grpcIKeyframesManagerService::Stub::AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadFromFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::getConstKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getConstKeyframeCollectionRequest& request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::getConstKeyframeCollectionRequest, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getConstKeyframeCollection_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::getConstKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getConstKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::getConstKeyframeCollectionRequest, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConstKeyframeCollection_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::getConstKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getConstKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConstKeyframeCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncgetConstKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getConstKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse, ::grpcIKeyframesManager::getConstKeyframeCollectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getConstKeyframeCollection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* grpcIKeyframesManagerService::Stub::AsyncgetConstKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getConstKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetConstKeyframeCollectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::getKeyframeCollectionRequest, ::grpcIKeyframesManager::getKeyframeCollectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getKeyframeCollection_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::getKeyframeCollectionRequest, ::grpcIKeyframesManager::getKeyframeCollectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getKeyframeCollection_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getKeyframeCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeCollectionResponse>* grpcIKeyframesManagerService::Stub::PrepareAsyncgetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeyframesManager::getKeyframeCollectionResponse, ::grpcIKeyframesManager::getKeyframeCollectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getKeyframeCollection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeCollectionResponse>* grpcIKeyframesManagerService::Stub::AsyncgetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetKeyframeCollectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeyframesManagerService::Stub::setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeyframesManager::setKeyframeCollectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setKeyframeCollection_, context, request, response);
}

void grpcIKeyframesManagerService::Stub::experimental_async::setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeyframesManager::setKeyframeCollectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setKeyframeCollection_, context, request, response, std::move(f));
}

void grpcIKeyframesManagerService::Stub::experimental_async::setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setKeyframeCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIKeyframesManagerService::Stub::PrepareAsyncsetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIKeyframesManager::setKeyframeCollectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setKeyframeCollection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIKeyframesManagerService::Stub::AsyncsetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetKeyframeCollectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIKeyframesManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::addKeyframe_grpc0Request, ::grpcIKeyframesManager::addKeyframe_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::addKeyframe_grpc0Request* req,
             ::grpcIKeyframesManager::addKeyframe_grpc0Response* resp) {
               return service->addKeyframe_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::addKeyframe_grpc1Request, ::grpcIKeyframesManager::addKeyframe_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::addKeyframe_grpc1Request* req,
             ::grpcIKeyframesManager::addKeyframe_grpc1Response* resp) {
               return service->addKeyframe_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::getKeyframeRequest, ::grpcIKeyframesManager::getKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::getKeyframeRequest* req,
             ::grpcIKeyframesManager::getKeyframeResponse* resp) {
               return service->getKeyframe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::getKeyframesRequest, ::grpcIKeyframesManager::getKeyframesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::getKeyframesRequest* req,
             ::grpcIKeyframesManager::getKeyframesResponse* resp) {
               return service->getKeyframes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::getAllKeyframesRequest, ::grpcIKeyframesManager::getAllKeyframesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::getAllKeyframesRequest* req,
             ::grpcIKeyframesManager::getAllKeyframesResponse* resp) {
               return service->getAllKeyframes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::suppressKeyframeRequest, ::grpcIKeyframesManager::suppressKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::suppressKeyframeRequest* req,
             ::grpcIKeyframesManager::suppressKeyframeResponse* resp) {
               return service->suppressKeyframe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::getDescriptorTypeRequest, ::grpcIKeyframesManager::getDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::getDescriptorTypeRequest* req,
             ::grpcIKeyframesManager::getDescriptorTypeResponse* resp) {
               return service->getDescriptorType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::setDescriptorTypeRequest, ::grpcIKeyframesManager::setDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::setDescriptorTypeRequest* req,
             ::grpcIKeyframesManager::setDescriptorTypeResponse* resp) {
               return service->setDescriptorType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::isExistKeyframeRequest, ::grpcIKeyframesManager::isExistKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::isExistKeyframeRequest* req,
             ::grpcIKeyframesManager::isExistKeyframeResponse* resp) {
               return service->isExistKeyframe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::getNbKeyframesRequest, ::grpcIKeyframesManager::getNbKeyframesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::getNbKeyframesRequest* req,
             ::grpcIKeyframesManager::getNbKeyframesResponse* resp) {
               return service->getNbKeyframes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::saveToFileRequest, ::grpcIKeyframesManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::saveToFileRequest* req,
             ::grpcIKeyframesManager::saveToFileResponse* resp) {
               return service->saveToFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::loadFromFileRequest, ::grpcIKeyframesManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::loadFromFileRequest* req,
             ::grpcIKeyframesManager::loadFromFileResponse* resp) {
               return service->loadFromFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::getConstKeyframeCollectionRequest, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::getConstKeyframeCollectionRequest* req,
             ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* resp) {
               return service->getConstKeyframeCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::getKeyframeCollectionRequest, ::grpcIKeyframesManager::getKeyframeCollectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::getKeyframeCollectionRequest* req,
             ::grpcIKeyframesManager::getKeyframeCollectionResponse* resp) {
               return service->getKeyframeCollection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeyframesManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeyframesManagerService::Service, ::grpcIKeyframesManager::setKeyframeCollectionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeyframesManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeyframesManager::setKeyframeCollectionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setKeyframeCollection(ctx, req, resp);
             }, this)));
}

grpcIKeyframesManagerService::Service::~Service() {
}

::grpc::Status grpcIKeyframesManagerService::Service::addKeyframe_grpc0(::grpc::ServerContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::addKeyframe_grpc1(::grpc::ServerContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::getKeyframe(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::getKeyframes(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::getAllKeyframes(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::suppressKeyframe(::grpc::ServerContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::getDescriptorType(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getDescriptorTypeRequest* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::setDescriptorType(::grpc::ServerContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::isExistKeyframe(::grpc::ServerContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::getNbKeyframes(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getNbKeyframesRequest* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::saveToFile(::grpc::ServerContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::loadFromFile(::grpc::ServerContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::getConstKeyframeCollection(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getConstKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::getKeyframeCollection(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeyframesManagerService::Service::setKeyframeCollection(::grpc::ServerContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIKeyframesManager

