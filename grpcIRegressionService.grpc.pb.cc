// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIRegressionService.proto

#include "grpcIRegressionService.pb.h"
#include "grpcIRegressionService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIRegression {

static const char* grpcIRegressionService_method_names[] = {
  "/grpcIRegression.grpcIRegressionService/setCameraParameters",
  "/grpcIRegression.grpcIRegressionService/add",
  "/grpcIRegression.grpcIRegressionService/regress",
  "/grpcIRegression.grpcIRegressionService/update",
  "/grpcIRegression.grpcIRegressionService/loadModel",
  "/grpcIRegression.grpcIRegressionService/getTrainingStatus",
  "/grpcIRegression.grpcIRegressionService/getNumActiveLeaves",
  "/grpcIRegression.grpcIRegressionService/getNumPassiveLeaves",
};

std::unique_ptr< grpcIRegressionService::Stub> grpcIRegressionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIRegressionService::Stub> stub(new grpcIRegressionService::Stub(channel));
  return stub;
}

grpcIRegressionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setCameraParameters_(grpcIRegressionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_add_(grpcIRegressionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_regress_(grpcIRegressionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_update_(grpcIRegressionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadModel_(grpcIRegressionService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTrainingStatus_(grpcIRegressionService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNumActiveLeaves_(grpcIRegressionService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNumPassiveLeaves_(grpcIRegressionService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIRegressionService::Stub::setCameraParameters(::grpc::ClientContext* context, const ::grpcIRegression::setCameraParametersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRegression::setCameraParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCameraParameters_, context, request, response);
}

void grpcIRegressionService::Stub::experimental_async::setCameraParameters(::grpc::ClientContext* context, const ::grpcIRegression::setCameraParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRegression::setCameraParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_, context, request, response, std::move(f));
}

void grpcIRegressionService::Stub::experimental_async::setCameraParameters(::grpc::ClientContext* context, const ::grpcIRegression::setCameraParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRegressionService::Stub::PrepareAsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRegression::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIRegression::setCameraParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIRegressionService::Stub::AsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRegression::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRegressionService::Stub::add(::grpc::ClientContext* context, const ::grpcIRegression::addRequest& request, ::grpcIRegression::addResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRegression::addRequest, ::grpcIRegression::addResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_add_, context, request, response);
}

void grpcIRegressionService::Stub::experimental_async::add(::grpc::ClientContext* context, const ::grpcIRegression::addRequest* request, ::grpcIRegression::addResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRegression::addRequest, ::grpcIRegression::addResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_, context, request, response, std::move(f));
}

void grpcIRegressionService::Stub::experimental_async::add(::grpc::ClientContext* context, const ::grpcIRegression::addRequest* request, ::grpcIRegression::addResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::addResponse>* grpcIRegressionService::Stub::PrepareAsyncaddRaw(::grpc::ClientContext* context, const ::grpcIRegression::addRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRegression::addResponse, ::grpcIRegression::addRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_add_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::addResponse>* grpcIRegressionService::Stub::AsyncaddRaw(::grpc::ClientContext* context, const ::grpcIRegression::addRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRegressionService::Stub::regress(::grpc::ClientContext* context, const ::grpcIRegression::regressRequest& request, ::grpcIRegression::regressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRegression::regressRequest, ::grpcIRegression::regressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_regress_, context, request, response);
}

void grpcIRegressionService::Stub::experimental_async::regress(::grpc::ClientContext* context, const ::grpcIRegression::regressRequest* request, ::grpcIRegression::regressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRegression::regressRequest, ::grpcIRegression::regressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_regress_, context, request, response, std::move(f));
}

void grpcIRegressionService::Stub::experimental_async::regress(::grpc::ClientContext* context, const ::grpcIRegression::regressRequest* request, ::grpcIRegression::regressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_regress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::regressResponse>* grpcIRegressionService::Stub::PrepareAsyncregressRaw(::grpc::ClientContext* context, const ::grpcIRegression::regressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRegression::regressResponse, ::grpcIRegression::regressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_regress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::regressResponse>* grpcIRegressionService::Stub::AsyncregressRaw(::grpc::ClientContext* context, const ::grpcIRegression::regressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRegressionService::Stub::update(::grpc::ClientContext* context, const ::grpcIRegression::updateRequest& request, ::grpcIRegression::updateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRegression::updateRequest, ::grpcIRegression::updateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_update_, context, request, response);
}

void grpcIRegressionService::Stub::experimental_async::update(::grpc::ClientContext* context, const ::grpcIRegression::updateRequest* request, ::grpcIRegression::updateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRegression::updateRequest, ::grpcIRegression::updateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, std::move(f));
}

void grpcIRegressionService::Stub::experimental_async::update(::grpc::ClientContext* context, const ::grpcIRegression::updateRequest* request, ::grpcIRegression::updateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::updateResponse>* grpcIRegressionService::Stub::PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::grpcIRegression::updateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRegression::updateResponse, ::grpcIRegression::updateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::updateResponse>* grpcIRegressionService::Stub::AsyncupdateRaw(::grpc::ClientContext* context, const ::grpcIRegression::updateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRegressionService::Stub::loadModel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRegression::loadModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRegression::loadModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadModel_, context, request, response);
}

void grpcIRegressionService::Stub::experimental_async::loadModel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::loadModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRegression::loadModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadModel_, context, request, response, std::move(f));
}

void grpcIRegressionService::Stub::experimental_async::loadModel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::loadModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::loadModelResponse>* grpcIRegressionService::Stub::PrepareAsyncloadModelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRegression::loadModelResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadModel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::loadModelResponse>* grpcIRegressionService::Stub::AsyncloadModelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadModelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRegressionService::Stub::getTrainingStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRegression::getTrainingStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRegression::getTrainingStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTrainingStatus_, context, request, response);
}

void grpcIRegressionService::Stub::experimental_async::getTrainingStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::getTrainingStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRegression::getTrainingStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTrainingStatus_, context, request, response, std::move(f));
}

void grpcIRegressionService::Stub::experimental_async::getTrainingStatus(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::getTrainingStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTrainingStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::getTrainingStatusResponse>* grpcIRegressionService::Stub::PrepareAsyncgetTrainingStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRegression::getTrainingStatusResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTrainingStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::getTrainingStatusResponse>* grpcIRegressionService::Stub::AsyncgetTrainingStatusRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTrainingStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRegressionService::Stub::getNumActiveLeaves(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRegression::getNumActiveLeavesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRegression::getNumActiveLeavesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNumActiveLeaves_, context, request, response);
}

void grpcIRegressionService::Stub::experimental_async::getNumActiveLeaves(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::getNumActiveLeavesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRegression::getNumActiveLeavesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNumActiveLeaves_, context, request, response, std::move(f));
}

void grpcIRegressionService::Stub::experimental_async::getNumActiveLeaves(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::getNumActiveLeavesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNumActiveLeaves_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::getNumActiveLeavesResponse>* grpcIRegressionService::Stub::PrepareAsyncgetNumActiveLeavesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRegression::getNumActiveLeavesResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNumActiveLeaves_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::getNumActiveLeavesResponse>* grpcIRegressionService::Stub::AsyncgetNumActiveLeavesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNumActiveLeavesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRegressionService::Stub::getNumPassiveLeaves(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIRegression::getNumPassiveLeavesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIRegression::getNumPassiveLeavesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNumPassiveLeaves_, context, request, response);
}

void grpcIRegressionService::Stub::experimental_async::getNumPassiveLeaves(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::getNumPassiveLeavesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIRegression::getNumPassiveLeavesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNumPassiveLeaves_, context, request, response, std::move(f));
}

void grpcIRegressionService::Stub::experimental_async::getNumPassiveLeaves(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::getNumPassiveLeavesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNumPassiveLeaves_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::getNumPassiveLeavesResponse>* grpcIRegressionService::Stub::PrepareAsyncgetNumPassiveLeavesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRegression::getNumPassiveLeavesResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNumPassiveLeaves_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRegression::getNumPassiveLeavesResponse>* grpcIRegressionService::Stub::AsyncgetNumPassiveLeavesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNumPassiveLeavesRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIRegressionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRegressionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRegressionService::Service, ::grpcIRegression::setCameraParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRegressionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRegression::setCameraParametersRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setCameraParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRegressionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRegressionService::Service, ::grpcIRegression::addRequest, ::grpcIRegression::addResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRegressionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRegression::addRequest* req,
             ::grpcIRegression::addResponse* resp) {
               return service->add(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRegressionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRegressionService::Service, ::grpcIRegression::regressRequest, ::grpcIRegression::regressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRegressionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRegression::regressRequest* req,
             ::grpcIRegression::regressResponse* resp) {
               return service->regress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRegressionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRegressionService::Service, ::grpcIRegression::updateRequest, ::grpcIRegression::updateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRegressionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRegression::updateRequest* req,
             ::grpcIRegression::updateResponse* resp) {
               return service->update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRegressionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRegressionService::Service, ::google::protobuf::Empty, ::grpcIRegression::loadModelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRegressionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRegression::loadModelResponse* resp) {
               return service->loadModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRegressionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRegressionService::Service, ::google::protobuf::Empty, ::grpcIRegression::getTrainingStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRegressionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRegression::getTrainingStatusResponse* resp) {
               return service->getTrainingStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRegressionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRegressionService::Service, ::google::protobuf::Empty, ::grpcIRegression::getNumActiveLeavesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRegressionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRegression::getNumActiveLeavesResponse* resp) {
               return service->getNumActiveLeaves(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRegressionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRegressionService::Service, ::google::protobuf::Empty, ::grpcIRegression::getNumPassiveLeavesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRegressionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIRegression::getNumPassiveLeavesResponse* resp) {
               return service->getNumPassiveLeaves(ctx, req, resp);
             }, this)));
}

grpcIRegressionService::Service::~Service() {
}

::grpc::Status grpcIRegressionService::Service::setCameraParameters(::grpc::ServerContext* context, const ::grpcIRegression::setCameraParametersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRegressionService::Service::add(::grpc::ServerContext* context, const ::grpcIRegression::addRequest* request, ::grpcIRegression::addResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRegressionService::Service::regress(::grpc::ServerContext* context, const ::grpcIRegression::regressRequest* request, ::grpcIRegression::regressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRegressionService::Service::update(::grpc::ServerContext* context, const ::grpcIRegression::updateRequest* request, ::grpcIRegression::updateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRegressionService::Service::loadModel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::loadModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRegressionService::Service::getTrainingStatus(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::getTrainingStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRegressionService::Service::getNumActiveLeaves(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::getNumActiveLeavesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRegressionService::Service::getNumPassiveLeaves(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIRegression::getNumPassiveLeavesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIRegression

