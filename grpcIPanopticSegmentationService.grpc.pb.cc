// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIPanopticSegmentationService.proto

#include "grpcIPanopticSegmentationService.pb.h"
#include "grpcIPanopticSegmentationService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIPanopticSegmentation {

static const char* grpcIPanopticSegmentationService_method_names[] = {
  "/grpcIPanopticSegmentation.grpcIPanopticSegmentationService/segment",
};

std::unique_ptr< grpcIPanopticSegmentationService::Stub> grpcIPanopticSegmentationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIPanopticSegmentationService::Stub> stub(new grpcIPanopticSegmentationService::Stub(channel, options));
  return stub;
}

grpcIPanopticSegmentationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_segment_(grpcIPanopticSegmentationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIPanopticSegmentationService::Stub::segment(::grpc::ClientContext* context, const ::grpcIPanopticSegmentation::segmentRequest& request, ::grpcIPanopticSegmentation::segmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPanopticSegmentation::segmentRequest, ::grpcIPanopticSegmentation::segmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_segment_, context, request, response);
}

void grpcIPanopticSegmentationService::Stub::async::segment(::grpc::ClientContext* context, const ::grpcIPanopticSegmentation::segmentRequest* request, ::grpcIPanopticSegmentation::segmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPanopticSegmentation::segmentRequest, ::grpcIPanopticSegmentation::segmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_segment_, context, request, response, std::move(f));
}

void grpcIPanopticSegmentationService::Stub::async::segment(::grpc::ClientContext* context, const ::grpcIPanopticSegmentation::segmentRequest* request, ::grpcIPanopticSegmentation::segmentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_segment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPanopticSegmentation::segmentResponse>* grpcIPanopticSegmentationService::Stub::PrepareAsyncsegmentRaw(::grpc::ClientContext* context, const ::grpcIPanopticSegmentation::segmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPanopticSegmentation::segmentResponse, ::grpcIPanopticSegmentation::segmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_segment_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPanopticSegmentation::segmentResponse>* grpcIPanopticSegmentationService::Stub::AsyncsegmentRaw(::grpc::ClientContext* context, const ::grpcIPanopticSegmentation::segmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsegmentRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIPanopticSegmentationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPanopticSegmentationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPanopticSegmentationService::Service, ::grpcIPanopticSegmentation::segmentRequest, ::grpcIPanopticSegmentation::segmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPanopticSegmentationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPanopticSegmentation::segmentRequest* req,
             ::grpcIPanopticSegmentation::segmentResponse* resp) {
               return service->segment(ctx, req, resp);
             }, this)));
}

grpcIPanopticSegmentationService::Service::~Service() {
}

::grpc::Status grpcIPanopticSegmentationService::Service::segment(::grpc::ServerContext* context, const ::grpcIPanopticSegmentation::segmentRequest* request, ::grpcIPanopticSegmentation::segmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIPanopticSegmentation

