// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcI3DPointsViewerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcI3DPointsViewerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcI3DPointsViewerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcI3DPointsViewerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcI3DPointsViewerService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcI3DPointsViewerService_2eproto;
namespace grpcI3DPointsViewer {
class display_grpc0Request;
struct display_grpc0RequestDefaultTypeInternal;
extern display_grpc0RequestDefaultTypeInternal _display_grpc0Request_default_instance_;
class display_grpc0Response;
struct display_grpc0ResponseDefaultTypeInternal;
extern display_grpc0ResponseDefaultTypeInternal _display_grpc0Response_default_instance_;
class display_grpc1Request;
struct display_grpc1RequestDefaultTypeInternal;
extern display_grpc1RequestDefaultTypeInternal _display_grpc1Request_default_instance_;
class display_grpc1Response;
struct display_grpc1ResponseDefaultTypeInternal;
extern display_grpc1ResponseDefaultTypeInternal _display_grpc1Response_default_instance_;
}  // namespace grpcI3DPointsViewer
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcI3DPointsViewer::display_grpc0Request* Arena::CreateMaybeMessage<::grpcI3DPointsViewer::display_grpc0Request>(Arena*);
template<> ::grpcI3DPointsViewer::display_grpc0Response* Arena::CreateMaybeMessage<::grpcI3DPointsViewer::display_grpc0Response>(Arena*);
template<> ::grpcI3DPointsViewer::display_grpc1Request* Arena::CreateMaybeMessage<::grpcI3DPointsViewer::display_grpc1Request>(Arena*);
template<> ::grpcI3DPointsViewer::display_grpc1Response* Arena::CreateMaybeMessage<::grpcI3DPointsViewer::display_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcI3DPointsViewer {

// ===================================================================

class display_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DPointsViewer.display_grpc0Request) */ {
 public:
  inline display_grpc0Request() : display_grpc0Request(nullptr) {}
  ~display_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR display_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  display_grpc0Request(const display_grpc0Request& from);
  display_grpc0Request(display_grpc0Request&& from) noexcept
    : display_grpc0Request() {
    *this = ::std::move(from);
  }

  inline display_grpc0Request& operator=(const display_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline display_grpc0Request& operator=(display_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const display_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const display_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const display_grpc0Request*>(
               &_display_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(display_grpc0Request& a, display_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(display_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(display_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  display_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<display_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const display_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const display_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(display_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DPointsViewer.display_grpc0Request";
  }
  protected:
  explicit display_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kPoseFieldNumber = 3,
    kKeyframePosesFieldNumber = 4,
    kFramePosesFieldNumber = 5,
    kPoints2FieldNumber = 6,
    kKeyframePoses2FieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes points = 2;
  void clear_points();
  const std::string& points() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points();
  PROTOBUF_NODISCARD std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // bytes pose = 3;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes keyframePoses = 4;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // bytes framePoses = 5;
  void clear_frameposes();
  const std::string& frameposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frameposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frameposes();
  PROTOBUF_NODISCARD std::string* release_frameposes();
  void set_allocated_frameposes(std::string* frameposes);
  private:
  const std::string& _internal_frameposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frameposes(const std::string& value);
  std::string* _internal_mutable_frameposes();
  public:

  // bytes points2 = 6;
  void clear_points2();
  const std::string& points2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points2();
  PROTOBUF_NODISCARD std::string* release_points2();
  void set_allocated_points2(std::string* points2);
  private:
  const std::string& _internal_points2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points2(const std::string& value);
  std::string* _internal_mutable_points2();
  public:

  // bytes keyframePoses2 = 7;
  void clear_keyframeposes2();
  const std::string& keyframeposes2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes2();
  PROTOBUF_NODISCARD std::string* release_keyframeposes2();
  void set_allocated_keyframeposes2(std::string* keyframeposes2);
  private:
  const std::string& _internal_keyframeposes2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes2(const std::string& value);
  std::string* _internal_mutable_keyframeposes2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DPointsViewer.display_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frameposes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes2_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI3DPointsViewerService_2eproto;
};
// -------------------------------------------------------------------

class display_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DPointsViewer.display_grpc0Response) */ {
 public:
  inline display_grpc0Response() : display_grpc0Response(nullptr) {}
  ~display_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR display_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  display_grpc0Response(const display_grpc0Response& from);
  display_grpc0Response(display_grpc0Response&& from) noexcept
    : display_grpc0Response() {
    *this = ::std::move(from);
  }

  inline display_grpc0Response& operator=(const display_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline display_grpc0Response& operator=(display_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const display_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const display_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const display_grpc0Response*>(
               &_display_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(display_grpc0Response& a, display_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(display_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(display_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  display_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<display_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const display_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const display_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(display_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DPointsViewer.display_grpc0Response";
  }
  protected:
  explicit display_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DPointsViewer.display_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI3DPointsViewerService_2eproto;
};
// -------------------------------------------------------------------

class display_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DPointsViewer.display_grpc1Request) */ {
 public:
  inline display_grpc1Request() : display_grpc1Request(nullptr) {}
  ~display_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR display_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  display_grpc1Request(const display_grpc1Request& from);
  display_grpc1Request(display_grpc1Request&& from) noexcept
    : display_grpc1Request() {
    *this = ::std::move(from);
  }

  inline display_grpc1Request& operator=(const display_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline display_grpc1Request& operator=(display_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const display_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const display_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const display_grpc1Request*>(
               &_display_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(display_grpc1Request& a, display_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(display_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(display_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  display_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<display_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const display_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const display_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(display_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DPointsViewer.display_grpc1Request";
  }
  protected:
  explicit display_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 2,
    kPoseFieldNumber = 3,
    kKeyframePosesFieldNumber = 4,
    kFramePosesFieldNumber = 5,
    kPoints2FieldNumber = 6,
    kKeyframePoses2FieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes points = 2;
  void clear_points();
  const std::string& points() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points();
  PROTOBUF_NODISCARD std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // bytes pose = 3;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes keyframePoses = 4;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // bytes framePoses = 5;
  void clear_frameposes();
  const std::string& frameposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frameposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frameposes();
  PROTOBUF_NODISCARD std::string* release_frameposes();
  void set_allocated_frameposes(std::string* frameposes);
  private:
  const std::string& _internal_frameposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frameposes(const std::string& value);
  std::string* _internal_mutable_frameposes();
  public:

  // bytes points2 = 6;
  void clear_points2();
  const std::string& points2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_points2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_points2();
  PROTOBUF_NODISCARD std::string* release_points2();
  void set_allocated_points2(std::string* points2);
  private:
  const std::string& _internal_points2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_points2(const std::string& value);
  std::string* _internal_mutable_points2();
  public:

  // bytes keyframePoses2 = 7;
  void clear_keyframeposes2();
  const std::string& keyframeposes2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes2();
  PROTOBUF_NODISCARD std::string* release_keyframeposes2();
  void set_allocated_keyframeposes2(std::string* keyframeposes2);
  private:
  const std::string& _internal_keyframeposes2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes2(const std::string& value);
  std::string* _internal_mutable_keyframeposes2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DPointsViewer.display_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frameposes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes2_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI3DPointsViewerService_2eproto;
};
// -------------------------------------------------------------------

class display_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DPointsViewer.display_grpc1Response) */ {
 public:
  inline display_grpc1Response() : display_grpc1Response(nullptr) {}
  ~display_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR display_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  display_grpc1Response(const display_grpc1Response& from);
  display_grpc1Response(display_grpc1Response&& from) noexcept
    : display_grpc1Response() {
    *this = ::std::move(from);
  }

  inline display_grpc1Response& operator=(const display_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline display_grpc1Response& operator=(display_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const display_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const display_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const display_grpc1Response*>(
               &_display_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(display_grpc1Response& a, display_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(display_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(display_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  display_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<display_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const display_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const display_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(display_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DPointsViewer.display_grpc1Response";
  }
  protected:
  explicit display_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DPointsViewer.display_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI3DPointsViewerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// display_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void display_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t display_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t display_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void display_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void display_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc0Request.grpcServerCompressionFormat)
}

// bytes points = 2;
inline void display_grpc0Request::clear_points() {
  points_.ClearToEmpty();
}
inline const std::string& display_grpc0Request::points() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc0Request.points)
  return _internal_points();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc0Request::set_points(ArgT0&& arg0, ArgT... args) {
 
 points_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc0Request.points)
}
inline std::string* display_grpc0Request::mutable_points() {
  std::string* _s = _internal_mutable_points();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc0Request.points)
  return _s;
}
inline const std::string& display_grpc0Request::_internal_points() const {
  return points_.Get();
}
inline void display_grpc0Request::_internal_set_points(const std::string& value) {
  
  points_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc0Request::_internal_mutable_points() {
  
  return points_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc0Request::release_points() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc0Request.points)
  return points_.Release();
}
inline void display_grpc0Request::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocated(points, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points_.IsDefault()) {
    points_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc0Request.points)
}

// bytes pose = 3;
inline void display_grpc0Request::clear_pose() {
  pose_.ClearToEmpty();
}
inline const std::string& display_grpc0Request::pose() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc0Request.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc0Request::set_pose(ArgT0&& arg0, ArgT... args) {
 
 pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc0Request.pose)
}
inline std::string* display_grpc0Request::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc0Request.pose)
  return _s;
}
inline const std::string& display_grpc0Request::_internal_pose() const {
  return pose_.Get();
}
inline void display_grpc0Request::_internal_set_pose(const std::string& value) {
  
  pose_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc0Request::_internal_mutable_pose() {
  
  return pose_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc0Request::release_pose() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc0Request.pose)
  return pose_.Release();
}
inline void display_grpc0Request::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pose_.IsDefault()) {
    pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc0Request.pose)
}

// bytes keyframePoses = 4;
inline void display_grpc0Request::clear_keyframeposes() {
  keyframeposes_.ClearToEmpty();
}
inline const std::string& display_grpc0Request::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc0Request.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc0Request::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc0Request.keyframePoses)
}
inline std::string* display_grpc0Request::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc0Request.keyframePoses)
  return _s;
}
inline const std::string& display_grpc0Request::_internal_keyframeposes() const {
  return keyframeposes_.Get();
}
inline void display_grpc0Request::_internal_set_keyframeposes(const std::string& value) {
  
  keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc0Request::_internal_mutable_keyframeposes() {
  
  return keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc0Request::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc0Request.keyframePoses)
  return keyframeposes_.Release();
}
inline void display_grpc0Request::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframeposes_.IsDefault()) {
    keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc0Request.keyframePoses)
}

// bytes framePoses = 5;
inline void display_grpc0Request::clear_frameposes() {
  frameposes_.ClearToEmpty();
}
inline const std::string& display_grpc0Request::frameposes() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc0Request.framePoses)
  return _internal_frameposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc0Request::set_frameposes(ArgT0&& arg0, ArgT... args) {
 
 frameposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc0Request.framePoses)
}
inline std::string* display_grpc0Request::mutable_frameposes() {
  std::string* _s = _internal_mutable_frameposes();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc0Request.framePoses)
  return _s;
}
inline const std::string& display_grpc0Request::_internal_frameposes() const {
  return frameposes_.Get();
}
inline void display_grpc0Request::_internal_set_frameposes(const std::string& value) {
  
  frameposes_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc0Request::_internal_mutable_frameposes() {
  
  return frameposes_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc0Request::release_frameposes() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc0Request.framePoses)
  return frameposes_.Release();
}
inline void display_grpc0Request::set_allocated_frameposes(std::string* frameposes) {
  if (frameposes != nullptr) {
    
  } else {
    
  }
  frameposes_.SetAllocated(frameposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frameposes_.IsDefault()) {
    frameposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc0Request.framePoses)
}

// bytes points2 = 6;
inline void display_grpc0Request::clear_points2() {
  points2_.ClearToEmpty();
}
inline const std::string& display_grpc0Request::points2() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc0Request.points2)
  return _internal_points2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc0Request::set_points2(ArgT0&& arg0, ArgT... args) {
 
 points2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc0Request.points2)
}
inline std::string* display_grpc0Request::mutable_points2() {
  std::string* _s = _internal_mutable_points2();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc0Request.points2)
  return _s;
}
inline const std::string& display_grpc0Request::_internal_points2() const {
  return points2_.Get();
}
inline void display_grpc0Request::_internal_set_points2(const std::string& value) {
  
  points2_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc0Request::_internal_mutable_points2() {
  
  return points2_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc0Request::release_points2() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc0Request.points2)
  return points2_.Release();
}
inline void display_grpc0Request::set_allocated_points2(std::string* points2) {
  if (points2 != nullptr) {
    
  } else {
    
  }
  points2_.SetAllocated(points2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points2_.IsDefault()) {
    points2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc0Request.points2)
}

// bytes keyframePoses2 = 7;
inline void display_grpc0Request::clear_keyframeposes2() {
  keyframeposes2_.ClearToEmpty();
}
inline const std::string& display_grpc0Request::keyframeposes2() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc0Request.keyframePoses2)
  return _internal_keyframeposes2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc0Request::set_keyframeposes2(ArgT0&& arg0, ArgT... args) {
 
 keyframeposes2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc0Request.keyframePoses2)
}
inline std::string* display_grpc0Request::mutable_keyframeposes2() {
  std::string* _s = _internal_mutable_keyframeposes2();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc0Request.keyframePoses2)
  return _s;
}
inline const std::string& display_grpc0Request::_internal_keyframeposes2() const {
  return keyframeposes2_.Get();
}
inline void display_grpc0Request::_internal_set_keyframeposes2(const std::string& value) {
  
  keyframeposes2_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc0Request::_internal_mutable_keyframeposes2() {
  
  return keyframeposes2_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc0Request::release_keyframeposes2() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc0Request.keyframePoses2)
  return keyframeposes2_.Release();
}
inline void display_grpc0Request::set_allocated_keyframeposes2(std::string* keyframeposes2) {
  if (keyframeposes2 != nullptr) {
    
  } else {
    
  }
  keyframeposes2_.SetAllocated(keyframeposes2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframeposes2_.IsDefault()) {
    keyframeposes2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc0Request.keyframePoses2)
}

// -------------------------------------------------------------------

// display_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void display_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t display_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t display_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void display_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void display_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// display_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void display_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t display_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t display_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void display_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void display_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc1Request.grpcServerCompressionFormat)
}

// bytes points = 2;
inline void display_grpc1Request::clear_points() {
  points_.ClearToEmpty();
}
inline const std::string& display_grpc1Request::points() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc1Request.points)
  return _internal_points();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc1Request::set_points(ArgT0&& arg0, ArgT... args) {
 
 points_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc1Request.points)
}
inline std::string* display_grpc1Request::mutable_points() {
  std::string* _s = _internal_mutable_points();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc1Request.points)
  return _s;
}
inline const std::string& display_grpc1Request::_internal_points() const {
  return points_.Get();
}
inline void display_grpc1Request::_internal_set_points(const std::string& value) {
  
  points_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc1Request::_internal_mutable_points() {
  
  return points_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc1Request::release_points() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc1Request.points)
  return points_.Release();
}
inline void display_grpc1Request::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocated(points, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points_.IsDefault()) {
    points_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc1Request.points)
}

// bytes pose = 3;
inline void display_grpc1Request::clear_pose() {
  pose_.ClearToEmpty();
}
inline const std::string& display_grpc1Request::pose() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc1Request.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc1Request::set_pose(ArgT0&& arg0, ArgT... args) {
 
 pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc1Request.pose)
}
inline std::string* display_grpc1Request::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc1Request.pose)
  return _s;
}
inline const std::string& display_grpc1Request::_internal_pose() const {
  return pose_.Get();
}
inline void display_grpc1Request::_internal_set_pose(const std::string& value) {
  
  pose_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc1Request::_internal_mutable_pose() {
  
  return pose_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc1Request::release_pose() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc1Request.pose)
  return pose_.Release();
}
inline void display_grpc1Request::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pose_.IsDefault()) {
    pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc1Request.pose)
}

// bytes keyframePoses = 4;
inline void display_grpc1Request::clear_keyframeposes() {
  keyframeposes_.ClearToEmpty();
}
inline const std::string& display_grpc1Request::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc1Request.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc1Request::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc1Request.keyframePoses)
}
inline std::string* display_grpc1Request::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc1Request.keyframePoses)
  return _s;
}
inline const std::string& display_grpc1Request::_internal_keyframeposes() const {
  return keyframeposes_.Get();
}
inline void display_grpc1Request::_internal_set_keyframeposes(const std::string& value) {
  
  keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc1Request::_internal_mutable_keyframeposes() {
  
  return keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc1Request::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc1Request.keyframePoses)
  return keyframeposes_.Release();
}
inline void display_grpc1Request::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframeposes_.IsDefault()) {
    keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc1Request.keyframePoses)
}

// bytes framePoses = 5;
inline void display_grpc1Request::clear_frameposes() {
  frameposes_.ClearToEmpty();
}
inline const std::string& display_grpc1Request::frameposes() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc1Request.framePoses)
  return _internal_frameposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc1Request::set_frameposes(ArgT0&& arg0, ArgT... args) {
 
 frameposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc1Request.framePoses)
}
inline std::string* display_grpc1Request::mutable_frameposes() {
  std::string* _s = _internal_mutable_frameposes();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc1Request.framePoses)
  return _s;
}
inline const std::string& display_grpc1Request::_internal_frameposes() const {
  return frameposes_.Get();
}
inline void display_grpc1Request::_internal_set_frameposes(const std::string& value) {
  
  frameposes_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc1Request::_internal_mutable_frameposes() {
  
  return frameposes_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc1Request::release_frameposes() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc1Request.framePoses)
  return frameposes_.Release();
}
inline void display_grpc1Request::set_allocated_frameposes(std::string* frameposes) {
  if (frameposes != nullptr) {
    
  } else {
    
  }
  frameposes_.SetAllocated(frameposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frameposes_.IsDefault()) {
    frameposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc1Request.framePoses)
}

// bytes points2 = 6;
inline void display_grpc1Request::clear_points2() {
  points2_.ClearToEmpty();
}
inline const std::string& display_grpc1Request::points2() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc1Request.points2)
  return _internal_points2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc1Request::set_points2(ArgT0&& arg0, ArgT... args) {
 
 points2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc1Request.points2)
}
inline std::string* display_grpc1Request::mutable_points2() {
  std::string* _s = _internal_mutable_points2();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc1Request.points2)
  return _s;
}
inline const std::string& display_grpc1Request::_internal_points2() const {
  return points2_.Get();
}
inline void display_grpc1Request::_internal_set_points2(const std::string& value) {
  
  points2_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc1Request::_internal_mutable_points2() {
  
  return points2_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc1Request::release_points2() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc1Request.points2)
  return points2_.Release();
}
inline void display_grpc1Request::set_allocated_points2(std::string* points2) {
  if (points2 != nullptr) {
    
  } else {
    
  }
  points2_.SetAllocated(points2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (points2_.IsDefault()) {
    points2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc1Request.points2)
}

// bytes keyframePoses2 = 7;
inline void display_grpc1Request::clear_keyframeposes2() {
  keyframeposes2_.ClearToEmpty();
}
inline const std::string& display_grpc1Request::keyframeposes2() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc1Request.keyframePoses2)
  return _internal_keyframeposes2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void display_grpc1Request::set_keyframeposes2(ArgT0&& arg0, ArgT... args) {
 
 keyframeposes2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc1Request.keyframePoses2)
}
inline std::string* display_grpc1Request::mutable_keyframeposes2() {
  std::string* _s = _internal_mutable_keyframeposes2();
  // @@protoc_insertion_point(field_mutable:grpcI3DPointsViewer.display_grpc1Request.keyframePoses2)
  return _s;
}
inline const std::string& display_grpc1Request::_internal_keyframeposes2() const {
  return keyframeposes2_.Get();
}
inline void display_grpc1Request::_internal_set_keyframeposes2(const std::string& value) {
  
  keyframeposes2_.Set(value, GetArenaForAllocation());
}
inline std::string* display_grpc1Request::_internal_mutable_keyframeposes2() {
  
  return keyframeposes2_.Mutable(GetArenaForAllocation());
}
inline std::string* display_grpc1Request::release_keyframeposes2() {
  // @@protoc_insertion_point(field_release:grpcI3DPointsViewer.display_grpc1Request.keyframePoses2)
  return keyframeposes2_.Release();
}
inline void display_grpc1Request::set_allocated_keyframeposes2(std::string* keyframeposes2) {
  if (keyframeposes2 != nullptr) {
    
  } else {
    
  }
  keyframeposes2_.SetAllocated(keyframeposes2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (keyframeposes2_.IsDefault()) {
    keyframeposes2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DPointsViewer.display_grpc1Request.keyframePoses2)
}

// -------------------------------------------------------------------

// display_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void display_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t display_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t display_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI3DPointsViewer.display_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void display_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void display_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI3DPointsViewer.display_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcI3DPointsViewer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcI3DPointsViewerService_2eproto
