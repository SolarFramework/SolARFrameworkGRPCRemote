// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMatchesOverlayService.proto
#ifndef GRPC_grpcIMatchesOverlayService_2eproto__INCLUDED
#define GRPC_grpcIMatchesOverlayService_2eproto__INCLUDED

#include "grpcIMatchesOverlayService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIMatchesOverlay {

class grpcIMatchesOverlayService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIMatchesOverlay.grpcIMatchesOverlayService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status draw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpcIMatchesOverlay::draw_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc0Response>> Asyncdraw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc0Response>>(Asyncdraw_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc0Response>> PrepareAsyncdraw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc0Response>>(PrepareAsyncdraw_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status draw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpcIMatchesOverlay::draw_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc1Response>> Asyncdraw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc1Response>>(Asyncdraw_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc1Response>> PrepareAsyncdraw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc1Response>>(PrepareAsyncdraw_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status draw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpcIMatchesOverlay::draw_grpc2Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc2Response>> Asyncdraw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc2Response>>(Asyncdraw_grpc2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc2Response>> PrepareAsyncdraw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc2Response>>(PrepareAsyncdraw_grpc2Raw(context, request, cq));
    }
    virtual ::grpc::Status draw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpcIMatchesOverlay::draw_grpc3Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc3Response>> Asyncdraw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc3Response>>(Asyncdraw_grpc3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc3Response>> PrepareAsyncdraw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc3Response>>(PrepareAsyncdraw_grpc3Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void draw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request* request, ::grpcIMatchesOverlay::draw_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void draw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request* request, ::grpcIMatchesOverlay::draw_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void draw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request* request, ::grpcIMatchesOverlay::draw_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void draw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request* request, ::grpcIMatchesOverlay::draw_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void draw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request* request, ::grpcIMatchesOverlay::draw_grpc2Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void draw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request* request, ::grpcIMatchesOverlay::draw_grpc2Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void draw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request* request, ::grpcIMatchesOverlay::draw_grpc3Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void draw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request* request, ::grpcIMatchesOverlay::draw_grpc3Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc0Response>* Asyncdraw_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc0Response>* PrepareAsyncdraw_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc1Response>* Asyncdraw_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc1Response>* PrepareAsyncdraw_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc2Response>* Asyncdraw_grpc2Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc2Response>* PrepareAsyncdraw_grpc2Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc3Response>* Asyncdraw_grpc3Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMatchesOverlay::draw_grpc3Response>* PrepareAsyncdraw_grpc3Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status draw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpcIMatchesOverlay::draw_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc0Response>> Asyncdraw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc0Response>>(Asyncdraw_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc0Response>> PrepareAsyncdraw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc0Response>>(PrepareAsyncdraw_grpc0Raw(context, request, cq));
    }
    ::grpc::Status draw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpcIMatchesOverlay::draw_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc1Response>> Asyncdraw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc1Response>>(Asyncdraw_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc1Response>> PrepareAsyncdraw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc1Response>>(PrepareAsyncdraw_grpc1Raw(context, request, cq));
    }
    ::grpc::Status draw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpcIMatchesOverlay::draw_grpc2Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc2Response>> Asyncdraw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc2Response>>(Asyncdraw_grpc2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc2Response>> PrepareAsyncdraw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc2Response>>(PrepareAsyncdraw_grpc2Raw(context, request, cq));
    }
    ::grpc::Status draw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpcIMatchesOverlay::draw_grpc3Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc3Response>> Asyncdraw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc3Response>>(Asyncdraw_grpc3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc3Response>> PrepareAsyncdraw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc3Response>>(PrepareAsyncdraw_grpc3Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void draw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request* request, ::grpcIMatchesOverlay::draw_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void draw_grpc0(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request* request, ::grpcIMatchesOverlay::draw_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void draw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request* request, ::grpcIMatchesOverlay::draw_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void draw_grpc1(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request* request, ::grpcIMatchesOverlay::draw_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void draw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request* request, ::grpcIMatchesOverlay::draw_grpc2Response* response, std::function<void(::grpc::Status)>) override;
      void draw_grpc2(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request* request, ::grpcIMatchesOverlay::draw_grpc2Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void draw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request* request, ::grpcIMatchesOverlay::draw_grpc3Response* response, std::function<void(::grpc::Status)>) override;
      void draw_grpc3(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request* request, ::grpcIMatchesOverlay::draw_grpc3Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc0Response>* Asyncdraw_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc0Response>* PrepareAsyncdraw_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc1Response>* Asyncdraw_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc1Response>* PrepareAsyncdraw_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc2Response>* Asyncdraw_grpc2Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc2Response>* PrepareAsyncdraw_grpc2Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc3Response>* Asyncdraw_grpc3Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMatchesOverlay::draw_grpc3Response>* PrepareAsyncdraw_grpc3Raw(::grpc::ClientContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_draw_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_draw_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_draw_grpc2_;
    const ::grpc::internal::RpcMethod rpcmethod_draw_grpc3_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status draw_grpc0(::grpc::ServerContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request* request, ::grpcIMatchesOverlay::draw_grpc0Response* response);
    virtual ::grpc::Status draw_grpc1(::grpc::ServerContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request* request, ::grpcIMatchesOverlay::draw_grpc1Response* response);
    virtual ::grpc::Status draw_grpc2(::grpc::ServerContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request* request, ::grpcIMatchesOverlay::draw_grpc2Response* response);
    virtual ::grpc::Status draw_grpc3(::grpc::ServerContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request* request, ::grpcIMatchesOverlay::draw_grpc3Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_draw_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_draw_grpc0() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_draw_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc0Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdraw_grpc0(::grpc::ServerContext* context, ::grpcIMatchesOverlay::draw_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMatchesOverlay::draw_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_draw_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_draw_grpc1() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_draw_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc1Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdraw_grpc1(::grpc::ServerContext* context, ::grpcIMatchesOverlay::draw_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMatchesOverlay::draw_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_draw_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_draw_grpc2() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_draw_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc2Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdraw_grpc2(::grpc::ServerContext* context, ::grpcIMatchesOverlay::draw_grpc2Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMatchesOverlay::draw_grpc2Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_draw_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_draw_grpc3() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_draw_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc3(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc3Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdraw_grpc3(::grpc::ServerContext* context, ::grpcIMatchesOverlay::draw_grpc3Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMatchesOverlay::draw_grpc3Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_draw_grpc0<WithAsyncMethod_draw_grpc1<WithAsyncMethod_draw_grpc2<WithAsyncMethod_draw_grpc3<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_draw_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_draw_grpc0() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMatchesOverlay::draw_grpc0Request, ::grpcIMatchesOverlay::draw_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMatchesOverlay::draw_grpc0Request* request, ::grpcIMatchesOverlay::draw_grpc0Response* response) { return this->draw_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_draw_grpc0(
        ::grpc::MessageAllocator< ::grpcIMatchesOverlay::draw_grpc0Request, ::grpcIMatchesOverlay::draw_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMatchesOverlay::draw_grpc0Request, ::grpcIMatchesOverlay::draw_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_draw_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc0Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* draw_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc0Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_draw_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_draw_grpc1() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMatchesOverlay::draw_grpc1Request, ::grpcIMatchesOverlay::draw_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMatchesOverlay::draw_grpc1Request* request, ::grpcIMatchesOverlay::draw_grpc1Response* response) { return this->draw_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_draw_grpc1(
        ::grpc::MessageAllocator< ::grpcIMatchesOverlay::draw_grpc1Request, ::grpcIMatchesOverlay::draw_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMatchesOverlay::draw_grpc1Request, ::grpcIMatchesOverlay::draw_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_draw_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc1Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* draw_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc1Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_draw_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_draw_grpc2() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMatchesOverlay::draw_grpc2Request, ::grpcIMatchesOverlay::draw_grpc2Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMatchesOverlay::draw_grpc2Request* request, ::grpcIMatchesOverlay::draw_grpc2Response* response) { return this->draw_grpc2(context, request, response); }));}
    void SetMessageAllocatorFor_draw_grpc2(
        ::grpc::MessageAllocator< ::grpcIMatchesOverlay::draw_grpc2Request, ::grpcIMatchesOverlay::draw_grpc2Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMatchesOverlay::draw_grpc2Request, ::grpcIMatchesOverlay::draw_grpc2Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_draw_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc2Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* draw_grpc2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc2Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc2Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_draw_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_draw_grpc3() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMatchesOverlay::draw_grpc3Request, ::grpcIMatchesOverlay::draw_grpc3Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMatchesOverlay::draw_grpc3Request* request, ::grpcIMatchesOverlay::draw_grpc3Response* response) { return this->draw_grpc3(context, request, response); }));}
    void SetMessageAllocatorFor_draw_grpc3(
        ::grpc::MessageAllocator< ::grpcIMatchesOverlay::draw_grpc3Request, ::grpcIMatchesOverlay::draw_grpc3Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMatchesOverlay::draw_grpc3Request, ::grpcIMatchesOverlay::draw_grpc3Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_draw_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc3(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc3Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* draw_grpc3(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc3Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc3Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_draw_grpc0<WithCallbackMethod_draw_grpc1<WithCallbackMethod_draw_grpc2<WithCallbackMethod_draw_grpc3<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_draw_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_draw_grpc0() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_draw_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc0Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_draw_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_draw_grpc1() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_draw_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc1Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_draw_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_draw_grpc2() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_draw_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc2Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_draw_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_draw_grpc3() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_draw_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc3(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc3Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_draw_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_draw_grpc0() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_draw_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc0Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdraw_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_draw_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_draw_grpc1() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_draw_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc1Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdraw_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_draw_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_draw_grpc2() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_draw_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc2Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdraw_grpc2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_draw_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_draw_grpc3() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_draw_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc3(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc3Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdraw_grpc3(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_draw_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_draw_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->draw_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_draw_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc0Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* draw_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_draw_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_draw_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->draw_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_draw_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc1Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* draw_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_draw_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_draw_grpc2() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->draw_grpc2(context, request, response); }));
    }
    ~WithRawCallbackMethod_draw_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc2Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* draw_grpc2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_draw_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_draw_grpc3() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->draw_grpc3(context, request, response); }));
    }
    ~WithRawCallbackMethod_draw_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status draw_grpc3(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc3Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* draw_grpc3(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_draw_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_draw_grpc0() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMatchesOverlay::draw_grpc0Request, ::grpcIMatchesOverlay::draw_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMatchesOverlay::draw_grpc0Request, ::grpcIMatchesOverlay::draw_grpc0Response>* streamer) {
                       return this->Streameddraw_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_draw_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status draw_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc0Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddraw_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMatchesOverlay::draw_grpc0Request,::grpcIMatchesOverlay::draw_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_draw_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_draw_grpc1() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMatchesOverlay::draw_grpc1Request, ::grpcIMatchesOverlay::draw_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMatchesOverlay::draw_grpc1Request, ::grpcIMatchesOverlay::draw_grpc1Response>* streamer) {
                       return this->Streameddraw_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_draw_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status draw_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc1Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddraw_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMatchesOverlay::draw_grpc1Request,::grpcIMatchesOverlay::draw_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_draw_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_draw_grpc2() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMatchesOverlay::draw_grpc2Request, ::grpcIMatchesOverlay::draw_grpc2Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMatchesOverlay::draw_grpc2Request, ::grpcIMatchesOverlay::draw_grpc2Response>* streamer) {
                       return this->Streameddraw_grpc2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_draw_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status draw_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc2Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddraw_grpc2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMatchesOverlay::draw_grpc2Request,::grpcIMatchesOverlay::draw_grpc2Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_draw_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_draw_grpc3() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMatchesOverlay::draw_grpc3Request, ::grpcIMatchesOverlay::draw_grpc3Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMatchesOverlay::draw_grpc3Request, ::grpcIMatchesOverlay::draw_grpc3Response>* streamer) {
                       return this->Streameddraw_grpc3(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_draw_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status draw_grpc3(::grpc::ServerContext* /*context*/, const ::grpcIMatchesOverlay::draw_grpc3Request* /*request*/, ::grpcIMatchesOverlay::draw_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddraw_grpc3(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMatchesOverlay::draw_grpc3Request,::grpcIMatchesOverlay::draw_grpc3Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_draw_grpc0<WithStreamedUnaryMethod_draw_grpc1<WithStreamedUnaryMethod_draw_grpc2<WithStreamedUnaryMethod_draw_grpc3<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_draw_grpc0<WithStreamedUnaryMethod_draw_grpc1<WithStreamedUnaryMethod_draw_grpc2<WithStreamedUnaryMethod_draw_grpc3<Service > > > > StreamedService;
};

}  // namespace grpcIMatchesOverlay


#endif  // GRPC_grpcIMatchesOverlayService_2eproto__INCLUDED
