// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIIMUService.proto

#include "grpcIIMUService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpcIIMU {
constexpr startRequest::startRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grpcservercompressionformat_(0){}
struct startRequestDefaultTypeInternal {
  constexpr startRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~startRequestDefaultTypeInternal() {}
  union {
    startRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT startRequestDefaultTypeInternal _startRequest_default_instance_;
constexpr startResponse::startResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct startResponseDefaultTypeInternal {
  constexpr startResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~startResponseDefaultTypeInternal() {}
  union {
    startResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT startResponseDefaultTypeInternal _startResponse_default_instance_;
constexpr stopRequest::stopRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grpcservercompressionformat_(0){}
struct stopRequestDefaultTypeInternal {
  constexpr stopRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~stopRequestDefaultTypeInternal() {}
  union {
    stopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT stopRequestDefaultTypeInternal _stopRequest_default_instance_;
constexpr stopResponse::stopResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct stopResponseDefaultTypeInternal {
  constexpr stopResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~stopResponseDefaultTypeInternal() {}
  union {
    stopResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT stopResponseDefaultTypeInternal _stopResponse_default_instance_;
constexpr getGyroscopeDataRequest::getGyroscopeDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gyrodata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , grpcservercompressionformat_(0){}
struct getGyroscopeDataRequestDefaultTypeInternal {
  constexpr getGyroscopeDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getGyroscopeDataRequestDefaultTypeInternal() {}
  union {
    getGyroscopeDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getGyroscopeDataRequestDefaultTypeInternal _getGyroscopeDataRequest_default_instance_;
constexpr getGyroscopeDataResponse::getGyroscopeDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gyrodata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xpcfgrpcreturnvalue_(0){}
struct getGyroscopeDataResponseDefaultTypeInternal {
  constexpr getGyroscopeDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getGyroscopeDataResponseDefaultTypeInternal() {}
  union {
    getGyroscopeDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getGyroscopeDataResponseDefaultTypeInternal _getGyroscopeDataResponse_default_instance_;
constexpr getAccelerometerDataRequest::getAccelerometerDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acceldata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , grpcservercompressionformat_(0){}
struct getAccelerometerDataRequestDefaultTypeInternal {
  constexpr getAccelerometerDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getAccelerometerDataRequestDefaultTypeInternal() {}
  union {
    getAccelerometerDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getAccelerometerDataRequestDefaultTypeInternal _getAccelerometerDataRequest_default_instance_;
constexpr getAccelerometerDataResponse::getAccelerometerDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acceldata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xpcfgrpcreturnvalue_(0){}
struct getAccelerometerDataResponseDefaultTypeInternal {
  constexpr getAccelerometerDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getAccelerometerDataResponseDefaultTypeInternal() {}
  union {
    getAccelerometerDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getAccelerometerDataResponseDefaultTypeInternal _getAccelerometerDataResponse_default_instance_;
constexpr getMagnetometerDataRequest::getMagnetometerDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : magdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , grpcservercompressionformat_(0){}
struct getMagnetometerDataRequestDefaultTypeInternal {
  constexpr getMagnetometerDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getMagnetometerDataRequestDefaultTypeInternal() {}
  union {
    getMagnetometerDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getMagnetometerDataRequestDefaultTypeInternal _getMagnetometerDataRequest_default_instance_;
constexpr getMagnetometerDataResponse::getMagnetometerDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : magdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xpcfgrpcreturnvalue_(0){}
struct getMagnetometerDataResponseDefaultTypeInternal {
  constexpr getMagnetometerDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getMagnetometerDataResponseDefaultTypeInternal() {}
  union {
    getMagnetometerDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getMagnetometerDataResponseDefaultTypeInternal _getMagnetometerDataResponse_default_instance_;
constexpr getAllSensorsDataRequest::getAllSensorsDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gyrodata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , acceldata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , magdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , grpcservercompressionformat_(0){}
struct getAllSensorsDataRequestDefaultTypeInternal {
  constexpr getAllSensorsDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getAllSensorsDataRequestDefaultTypeInternal() {}
  union {
    getAllSensorsDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getAllSensorsDataRequestDefaultTypeInternal _getAllSensorsDataRequest_default_instance_;
constexpr getAllSensorsDataResponse::getAllSensorsDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gyrodata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , acceldata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , magdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xpcfgrpcreturnvalue_(0){}
struct getAllSensorsDataResponseDefaultTypeInternal {
  constexpr getAllSensorsDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getAllSensorsDataResponseDefaultTypeInternal() {}
  union {
    getAllSensorsDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getAllSensorsDataResponseDefaultTypeInternal _getAllSensorsDataResponse_default_instance_;
constexpr isGyroscopeAvailableRequest::isGyroscopeAvailableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grpcservercompressionformat_(0){}
struct isGyroscopeAvailableRequestDefaultTypeInternal {
  constexpr isGyroscopeAvailableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~isGyroscopeAvailableRequestDefaultTypeInternal() {}
  union {
    isGyroscopeAvailableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT isGyroscopeAvailableRequestDefaultTypeInternal _isGyroscopeAvailableRequest_default_instance_;
constexpr isGyroscopeAvailableResponse::isGyroscopeAvailableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xpcfgrpcreturnvalue_(false){}
struct isGyroscopeAvailableResponseDefaultTypeInternal {
  constexpr isGyroscopeAvailableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~isGyroscopeAvailableResponseDefaultTypeInternal() {}
  union {
    isGyroscopeAvailableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT isGyroscopeAvailableResponseDefaultTypeInternal _isGyroscopeAvailableResponse_default_instance_;
constexpr isAccelerometerAvailableRequest::isAccelerometerAvailableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grpcservercompressionformat_(0){}
struct isAccelerometerAvailableRequestDefaultTypeInternal {
  constexpr isAccelerometerAvailableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~isAccelerometerAvailableRequestDefaultTypeInternal() {}
  union {
    isAccelerometerAvailableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT isAccelerometerAvailableRequestDefaultTypeInternal _isAccelerometerAvailableRequest_default_instance_;
constexpr isAccelerometerAvailableResponse::isAccelerometerAvailableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xpcfgrpcreturnvalue_(false){}
struct isAccelerometerAvailableResponseDefaultTypeInternal {
  constexpr isAccelerometerAvailableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~isAccelerometerAvailableResponseDefaultTypeInternal() {}
  union {
    isAccelerometerAvailableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT isAccelerometerAvailableResponseDefaultTypeInternal _isAccelerometerAvailableResponse_default_instance_;
constexpr isMagnetometerAvailableRequest::isMagnetometerAvailableRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grpcservercompressionformat_(0){}
struct isMagnetometerAvailableRequestDefaultTypeInternal {
  constexpr isMagnetometerAvailableRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~isMagnetometerAvailableRequestDefaultTypeInternal() {}
  union {
    isMagnetometerAvailableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT isMagnetometerAvailableRequestDefaultTypeInternal _isMagnetometerAvailableRequest_default_instance_;
constexpr isMagnetometerAvailableResponse::isMagnetometerAvailableResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xpcfgrpcreturnvalue_(false){}
struct isMagnetometerAvailableResponseDefaultTypeInternal {
  constexpr isMagnetometerAvailableResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~isMagnetometerAvailableResponseDefaultTypeInternal() {}
  union {
    isMagnetometerAvailableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT isMagnetometerAvailableResponseDefaultTypeInternal _isMagnetometerAvailableResponse_default_instance_;
}  // namespace grpcIIMU
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpcIIMUService_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpcIIMUService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpcIIMUService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpcIIMUService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::startRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::startRequest, grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::startResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::startResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::stopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::stopRequest, grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::stopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::stopResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataRequest, gyrodata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataResponse, gyrodata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataRequest, acceldata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataResponse, acceldata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataRequest, magdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataResponse, magdata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, gyrodata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, acceldata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, magdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, gyrodata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, acceldata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, magdata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isGyroscopeAvailableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isGyroscopeAvailableRequest, grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isGyroscopeAvailableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isGyroscopeAvailableResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isAccelerometerAvailableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isAccelerometerAvailableRequest, grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isAccelerometerAvailableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isAccelerometerAvailableResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isMagnetometerAvailableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isMagnetometerAvailableRequest, grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isMagnetometerAvailableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isMagnetometerAvailableResponse, xpcfgrpcreturnvalue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpcIIMU::startRequest)},
  { 6, -1, sizeof(::grpcIIMU::startResponse)},
  { 12, -1, sizeof(::grpcIIMU::stopRequest)},
  { 18, -1, sizeof(::grpcIIMU::stopResponse)},
  { 24, -1, sizeof(::grpcIIMU::getGyroscopeDataRequest)},
  { 31, -1, sizeof(::grpcIIMU::getGyroscopeDataResponse)},
  { 38, -1, sizeof(::grpcIIMU::getAccelerometerDataRequest)},
  { 45, -1, sizeof(::grpcIIMU::getAccelerometerDataResponse)},
  { 52, -1, sizeof(::grpcIIMU::getMagnetometerDataRequest)},
  { 59, -1, sizeof(::grpcIIMU::getMagnetometerDataResponse)},
  { 66, -1, sizeof(::grpcIIMU::getAllSensorsDataRequest)},
  { 75, -1, sizeof(::grpcIIMU::getAllSensorsDataResponse)},
  { 84, -1, sizeof(::grpcIIMU::isGyroscopeAvailableRequest)},
  { 90, -1, sizeof(::grpcIIMU::isGyroscopeAvailableResponse)},
  { 96, -1, sizeof(::grpcIIMU::isAccelerometerAvailableRequest)},
  { 102, -1, sizeof(::grpcIIMU::isAccelerometerAvailableResponse)},
  { 108, -1, sizeof(::grpcIIMU::isMagnetometerAvailableRequest)},
  { 114, -1, sizeof(::grpcIIMU::isMagnetometerAvailableResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_startRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_startResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_stopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_stopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_getGyroscopeDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_getGyroscopeDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_getAccelerometerDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_getAccelerometerDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_getMagnetometerDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_getMagnetometerDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_getAllSensorsDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_getAllSensorsDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_isGyroscopeAvailableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_isGyroscopeAvailableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_isAccelerometerAvailableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_isAccelerometerAvailableResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_isMagnetometerAvailableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIIMU::_isMagnetometerAvailableResponse_default_instance_),
};

const char descriptor_table_protodef_grpcIIMUService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025grpcIIMUService.proto\022\010grpcIIMU\032\033googl"
  "e/protobuf/empty.proto\"3\n\014startRequest\022#"
  "\n\033grpcServerCompressionFormat\030\001 \001(\005\",\n\rs"
  "tartResponse\022\033\n\023xpcfGrpcReturnValue\030\001 \001("
  "\021\"2\n\013stopRequest\022#\n\033grpcServerCompressio"
  "nFormat\030\001 \001(\005\"+\n\014stopResponse\022\033\n\023xpcfGrp"
  "cReturnValue\030\001 \001(\021\"P\n\027getGyroscopeDataRe"
  "quest\022#\n\033grpcServerCompressionFormat\030\001 \001"
  "(\005\022\020\n\010gyroData\030\002 \001(\014\"I\n\030getGyroscopeData"
  "Response\022\020\n\010gyroData\030\001 \001(\014\022\033\n\023xpcfGrpcRe"
  "turnValue\030\002 \001(\021\"U\n\033getAccelerometerDataR"
  "equest\022#\n\033grpcServerCompressionFormat\030\001 "
  "\001(\005\022\021\n\taccelData\030\002 \001(\014\"N\n\034getAcceleromet"
  "erDataResponse\022\021\n\taccelData\030\001 \001(\014\022\033\n\023xpc"
  "fGrpcReturnValue\030\002 \001(\021\"R\n\032getMagnetomete"
  "rDataRequest\022#\n\033grpcServerCompressionFor"
  "mat\030\001 \001(\005\022\017\n\007magData\030\002 \001(\014\"K\n\033getMagneto"
  "meterDataResponse\022\017\n\007magData\030\001 \001(\014\022\033\n\023xp"
  "cfGrpcReturnValue\030\002 \001(\021\"u\n\030getAllSensors"
  "DataRequest\022#\n\033grpcServerCompressionForm"
  "at\030\001 \001(\005\022\020\n\010gyroData\030\002 \001(\014\022\021\n\taccelData\030"
  "\003 \001(\014\022\017\n\007magData\030\004 \001(\014\"n\n\031getAllSensorsD"
  "ataResponse\022\020\n\010gyroData\030\001 \001(\014\022\021\n\taccelDa"
  "ta\030\002 \001(\014\022\017\n\007magData\030\003 \001(\014\022\033\n\023xpcfGrpcRet"
  "urnValue\030\004 \001(\021\"B\n\033isGyroscopeAvailableRe"
  "quest\022#\n\033grpcServerCompressionFormat\030\001 \001"
  "(\005\";\n\034isGyroscopeAvailableResponse\022\033\n\023xp"
  "cfGrpcReturnValue\030\001 \001(\010\"F\n\037isAcceleromet"
  "erAvailableRequest\022#\n\033grpcServerCompress"
  "ionFormat\030\001 \001(\005\"\?\n isAccelerometerAvaila"
  "bleResponse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\010"
  "\"E\n\036isMagnetometerAvailableRequest\022#\n\033gr"
  "pcServerCompressionFormat\030\001 \001(\005\">\n\037isMag"
  "netometerAvailableResponse\022\033\n\023xpcfGrpcRe"
  "turnValue\030\001 \001(\0102\342\006\n\017grpcIIMUService\022:\n\005s"
  "tart\022\026.grpcIIMU.startRequest\032\027.grpcIIMU."
  "startResponse\"\000\0227\n\004stop\022\025.grpcIIMU.stopR"
  "equest\032\026.grpcIIMU.stopResponse\"\000\022[\n\020getG"
  "yroscopeData\022!.grpcIIMU.getGyroscopeData"
  "Request\032\".grpcIIMU.getGyroscopeDataRespo"
  "nse\"\000\022g\n\024getAccelerometerData\022%.grpcIIMU"
  ".getAccelerometerDataRequest\032&.grpcIIMU."
  "getAccelerometerDataResponse\"\000\022d\n\023getMag"
  "netometerData\022$.grpcIIMU.getMagnetometer"
  "DataRequest\032%.grpcIIMU.getMagnetometerDa"
  "taResponse\"\000\022^\n\021getAllSensorsData\022\".grpc"
  "IIMU.getAllSensorsDataRequest\032#.grpcIIMU"
  ".getAllSensorsDataResponse\"\000\022g\n\024isGyrosc"
  "opeAvailable\022%.grpcIIMU.isGyroscopeAvail"
  "ableRequest\032&.grpcIIMU.isGyroscopeAvaila"
  "bleResponse\"\000\022s\n\030isAccelerometerAvailabl"
  "e\022).grpcIIMU.isAccelerometerAvailableReq"
  "uest\032*.grpcIIMU.isAccelerometerAvailable"
  "Response\"\000\022p\n\027isMagnetometerAvailable\022(."
  "grpcIIMU.isMagnetometerAvailableRequest\032"
  ").grpcIIMU.isMagnetometerAvailableRespon"
  "se\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpcIIMUService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpcIIMUService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIIMUService_2eproto = {
  false, false, 2252, descriptor_table_protodef_grpcIIMUService_2eproto, "grpcIIMUService.proto", 
  &descriptor_table_grpcIIMUService_2eproto_once, descriptor_table_grpcIIMUService_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_grpcIIMUService_2eproto::offsets,
  file_level_metadata_grpcIIMUService_2eproto, file_level_enum_descriptors_grpcIIMUService_2eproto, file_level_service_descriptors_grpcIIMUService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_grpcIIMUService_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grpcIIMUService_2eproto);
  return descriptor_table_grpcIIMUService_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_grpcIIMUService_2eproto(&descriptor_table_grpcIIMUService_2eproto);
namespace grpcIIMU {

// ===================================================================

class startRequest::_Internal {
 public:
};

startRequest::startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.startRequest)
}
startRequest::startRequest(const startRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.startRequest)
}

void startRequest::SharedCtor() {
grpcservercompressionformat_ = 0;
}

startRequest::~startRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.startRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void startRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void startRequest::ArenaDtor(void* object) {
  startRequest* _this = reinterpret_cast< startRequest* >(object);
  (void)_this;
}
void startRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void startRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void startRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.startRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* startRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* startRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.startRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.startRequest)
  return target;
}

size_t startRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.startRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void startRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.startRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const startRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<startRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.startRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.startRequest)
    MergeFrom(*source);
  }
}

void startRequest::MergeFrom(const startRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.startRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void startRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.startRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void startRequest::CopyFrom(const startRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.startRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool startRequest::IsInitialized() const {
  return true;
}

void startRequest::InternalSwap(startRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata startRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class startResponse::_Internal {
 public:
};

startResponse::startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.startResponse)
}
startResponse::startResponse(const startResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.startResponse)
}

void startResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

startResponse::~startResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.startResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void startResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void startResponse::ArenaDtor(void* object) {
  startResponse* _this = reinterpret_cast< startResponse* >(object);
  (void)_this;
}
void startResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void startResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void startResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.startResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* startResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* startResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.startResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.startResponse)
  return target;
}

size_t startResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.startResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void startResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.startResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const startResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<startResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.startResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.startResponse)
    MergeFrom(*source);
  }
}

void startResponse::MergeFrom(const startResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.startResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void startResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.startResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void startResponse::CopyFrom(const startResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.startResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool startResponse::IsInitialized() const {
  return true;
}

void startResponse::InternalSwap(startResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata startResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class stopRequest::_Internal {
 public:
};

stopRequest::stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.stopRequest)
}
stopRequest::stopRequest(const stopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.stopRequest)
}

void stopRequest::SharedCtor() {
grpcservercompressionformat_ = 0;
}

stopRequest::~stopRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.stopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void stopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void stopRequest::ArenaDtor(void* object) {
  stopRequest* _this = reinterpret_cast< stopRequest* >(object);
  (void)_this;
}
void stopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void stopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void stopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.stopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* stopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.stopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.stopRequest)
  return target;
}

size_t stopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.stopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.stopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const stopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<stopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.stopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.stopRequest)
    MergeFrom(*source);
  }
}

void stopRequest::MergeFrom(const stopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.stopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void stopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.stopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stopRequest::CopyFrom(const stopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.stopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopRequest::IsInitialized() const {
  return true;
}

void stopRequest::InternalSwap(stopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class stopResponse::_Internal {
 public:
};

stopResponse::stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.stopResponse)
}
stopResponse::stopResponse(const stopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.stopResponse)
}

void stopResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

stopResponse::~stopResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.stopResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void stopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void stopResponse::ArenaDtor(void* object) {
  stopResponse* _this = reinterpret_cast< stopResponse* >(object);
  (void)_this;
}
void stopResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void stopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void stopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.stopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* stopResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.stopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.stopResponse)
  return target;
}

size_t stopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.stopResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.stopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const stopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<stopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.stopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.stopResponse)
    MergeFrom(*source);
  }
}

void stopResponse::MergeFrom(const stopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.stopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void stopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.stopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stopResponse::CopyFrom(const stopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.stopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopResponse::IsInitialized() const {
  return true;
}

void stopResponse::InternalSwap(stopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getGyroscopeDataRequest::_Internal {
 public:
};

getGyroscopeDataRequest::getGyroscopeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getGyroscopeDataRequest)
}
getGyroscopeDataRequest::getGyroscopeDataRequest(const getGyroscopeDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gyrodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gyrodata().empty()) {
    gyrodata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gyrodata(), 
      GetArena());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getGyroscopeDataRequest)
}

void getGyroscopeDataRequest::SharedCtor() {
gyrodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
grpcservercompressionformat_ = 0;
}

getGyroscopeDataRequest::~getGyroscopeDataRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getGyroscopeDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getGyroscopeDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gyrodata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getGyroscopeDataRequest::ArenaDtor(void* object) {
  getGyroscopeDataRequest* _this = reinterpret_cast< getGyroscopeDataRequest* >(object);
  (void)_this;
}
void getGyroscopeDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getGyroscopeDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getGyroscopeDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getGyroscopeDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gyrodata_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGyroscopeDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gyroData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gyrodata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getGyroscopeDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getGyroscopeDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes gyroData = 2;
  if (this->gyrodata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_gyrodata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getGyroscopeDataRequest)
  return target;
}

size_t getGyroscopeDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getGyroscopeDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gyroData = 2;
  if (this->gyrodata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gyrodata());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getGyroscopeDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.getGyroscopeDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const getGyroscopeDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getGyroscopeDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.getGyroscopeDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.getGyroscopeDataRequest)
    MergeFrom(*source);
  }
}

void getGyroscopeDataRequest::MergeFrom(const getGyroscopeDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getGyroscopeDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gyrodata().size() > 0) {
    _internal_set_gyrodata(from._internal_gyrodata());
  }
  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void getGyroscopeDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.getGyroscopeDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getGyroscopeDataRequest::CopyFrom(const getGyroscopeDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getGyroscopeDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGyroscopeDataRequest::IsInitialized() const {
  return true;
}

void getGyroscopeDataRequest::InternalSwap(getGyroscopeDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gyrodata_.Swap(&other->gyrodata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGyroscopeDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getGyroscopeDataResponse::_Internal {
 public:
};

getGyroscopeDataResponse::getGyroscopeDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getGyroscopeDataResponse)
}
getGyroscopeDataResponse::getGyroscopeDataResponse(const getGyroscopeDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gyrodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gyrodata().empty()) {
    gyrodata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gyrodata(), 
      GetArena());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getGyroscopeDataResponse)
}

void getGyroscopeDataResponse::SharedCtor() {
gyrodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xpcfgrpcreturnvalue_ = 0;
}

getGyroscopeDataResponse::~getGyroscopeDataResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getGyroscopeDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getGyroscopeDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gyrodata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getGyroscopeDataResponse::ArenaDtor(void* object) {
  getGyroscopeDataResponse* _this = reinterpret_cast< getGyroscopeDataResponse* >(object);
  (void)_this;
}
void getGyroscopeDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getGyroscopeDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getGyroscopeDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getGyroscopeDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gyrodata_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGyroscopeDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes gyroData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gyrodata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getGyroscopeDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getGyroscopeDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes gyroData = 1;
  if (this->gyrodata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_gyrodata(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getGyroscopeDataResponse)
  return target;
}

size_t getGyroscopeDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getGyroscopeDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gyroData = 1;
  if (this->gyrodata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gyrodata());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getGyroscopeDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.getGyroscopeDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const getGyroscopeDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getGyroscopeDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.getGyroscopeDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.getGyroscopeDataResponse)
    MergeFrom(*source);
  }
}

void getGyroscopeDataResponse::MergeFrom(const getGyroscopeDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getGyroscopeDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gyrodata().size() > 0) {
    _internal_set_gyrodata(from._internal_gyrodata());
  }
  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void getGyroscopeDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.getGyroscopeDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getGyroscopeDataResponse::CopyFrom(const getGyroscopeDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getGyroscopeDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGyroscopeDataResponse::IsInitialized() const {
  return true;
}

void getGyroscopeDataResponse::InternalSwap(getGyroscopeDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gyrodata_.Swap(&other->gyrodata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGyroscopeDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getAccelerometerDataRequest::_Internal {
 public:
};

getAccelerometerDataRequest::getAccelerometerDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getAccelerometerDataRequest)
}
getAccelerometerDataRequest::getAccelerometerDataRequest(const getAccelerometerDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acceldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_acceldata().empty()) {
    acceldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_acceldata(), 
      GetArena());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getAccelerometerDataRequest)
}

void getAccelerometerDataRequest::SharedCtor() {
acceldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
grpcservercompressionformat_ = 0;
}

getAccelerometerDataRequest::~getAccelerometerDataRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getAccelerometerDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getAccelerometerDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  acceldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getAccelerometerDataRequest::ArenaDtor(void* object) {
  getAccelerometerDataRequest* _this = reinterpret_cast< getAccelerometerDataRequest* >(object);
  (void)_this;
}
void getAccelerometerDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getAccelerometerDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getAccelerometerDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getAccelerometerDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acceldata_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAccelerometerDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes accelData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_acceldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getAccelerometerDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getAccelerometerDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes accelData = 2;
  if (this->acceldata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_acceldata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getAccelerometerDataRequest)
  return target;
}

size_t getAccelerometerDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getAccelerometerDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes accelData = 2;
  if (this->acceldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_acceldata());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getAccelerometerDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.getAccelerometerDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const getAccelerometerDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getAccelerometerDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.getAccelerometerDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.getAccelerometerDataRequest)
    MergeFrom(*source);
  }
}

void getAccelerometerDataRequest::MergeFrom(const getAccelerometerDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getAccelerometerDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acceldata().size() > 0) {
    _internal_set_acceldata(from._internal_acceldata());
  }
  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void getAccelerometerDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.getAccelerometerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getAccelerometerDataRequest::CopyFrom(const getAccelerometerDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getAccelerometerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAccelerometerDataRequest::IsInitialized() const {
  return true;
}

void getAccelerometerDataRequest::InternalSwap(getAccelerometerDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  acceldata_.Swap(&other->acceldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAccelerometerDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getAccelerometerDataResponse::_Internal {
 public:
};

getAccelerometerDataResponse::getAccelerometerDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getAccelerometerDataResponse)
}
getAccelerometerDataResponse::getAccelerometerDataResponse(const getAccelerometerDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acceldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_acceldata().empty()) {
    acceldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_acceldata(), 
      GetArena());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getAccelerometerDataResponse)
}

void getAccelerometerDataResponse::SharedCtor() {
acceldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xpcfgrpcreturnvalue_ = 0;
}

getAccelerometerDataResponse::~getAccelerometerDataResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getAccelerometerDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getAccelerometerDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  acceldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getAccelerometerDataResponse::ArenaDtor(void* object) {
  getAccelerometerDataResponse* _this = reinterpret_cast< getAccelerometerDataResponse* >(object);
  (void)_this;
}
void getAccelerometerDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getAccelerometerDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getAccelerometerDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getAccelerometerDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acceldata_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAccelerometerDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes accelData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_acceldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getAccelerometerDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getAccelerometerDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes accelData = 1;
  if (this->acceldata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_acceldata(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getAccelerometerDataResponse)
  return target;
}

size_t getAccelerometerDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getAccelerometerDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes accelData = 1;
  if (this->acceldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_acceldata());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getAccelerometerDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.getAccelerometerDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const getAccelerometerDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getAccelerometerDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.getAccelerometerDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.getAccelerometerDataResponse)
    MergeFrom(*source);
  }
}

void getAccelerometerDataResponse::MergeFrom(const getAccelerometerDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getAccelerometerDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.acceldata().size() > 0) {
    _internal_set_acceldata(from._internal_acceldata());
  }
  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void getAccelerometerDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.getAccelerometerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getAccelerometerDataResponse::CopyFrom(const getAccelerometerDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getAccelerometerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAccelerometerDataResponse::IsInitialized() const {
  return true;
}

void getAccelerometerDataResponse::InternalSwap(getAccelerometerDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  acceldata_.Swap(&other->acceldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAccelerometerDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getMagnetometerDataRequest::_Internal {
 public:
};

getMagnetometerDataRequest::getMagnetometerDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getMagnetometerDataRequest)
}
getMagnetometerDataRequest::getMagnetometerDataRequest(const getMagnetometerDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  magdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_magdata().empty()) {
    magdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_magdata(), 
      GetArena());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getMagnetometerDataRequest)
}

void getMagnetometerDataRequest::SharedCtor() {
magdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
grpcservercompressionformat_ = 0;
}

getMagnetometerDataRequest::~getMagnetometerDataRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getMagnetometerDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getMagnetometerDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  magdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getMagnetometerDataRequest::ArenaDtor(void* object) {
  getMagnetometerDataRequest* _this = reinterpret_cast< getMagnetometerDataRequest* >(object);
  (void)_this;
}
void getMagnetometerDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getMagnetometerDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getMagnetometerDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getMagnetometerDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magdata_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMagnetometerDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes magData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_magdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getMagnetometerDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getMagnetometerDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes magData = 2;
  if (this->magdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_magdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getMagnetometerDataRequest)
  return target;
}

size_t getMagnetometerDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getMagnetometerDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes magData = 2;
  if (this->magdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_magdata());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getMagnetometerDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.getMagnetometerDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const getMagnetometerDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getMagnetometerDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.getMagnetometerDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.getMagnetometerDataRequest)
    MergeFrom(*source);
  }
}

void getMagnetometerDataRequest::MergeFrom(const getMagnetometerDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getMagnetometerDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magdata().size() > 0) {
    _internal_set_magdata(from._internal_magdata());
  }
  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void getMagnetometerDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.getMagnetometerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getMagnetometerDataRequest::CopyFrom(const getMagnetometerDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getMagnetometerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMagnetometerDataRequest::IsInitialized() const {
  return true;
}

void getMagnetometerDataRequest::InternalSwap(getMagnetometerDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  magdata_.Swap(&other->magdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getMagnetometerDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getMagnetometerDataResponse::_Internal {
 public:
};

getMagnetometerDataResponse::getMagnetometerDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getMagnetometerDataResponse)
}
getMagnetometerDataResponse::getMagnetometerDataResponse(const getMagnetometerDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  magdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_magdata().empty()) {
    magdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_magdata(), 
      GetArena());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getMagnetometerDataResponse)
}

void getMagnetometerDataResponse::SharedCtor() {
magdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xpcfgrpcreturnvalue_ = 0;
}

getMagnetometerDataResponse::~getMagnetometerDataResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getMagnetometerDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getMagnetometerDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  magdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getMagnetometerDataResponse::ArenaDtor(void* object) {
  getMagnetometerDataResponse* _this = reinterpret_cast< getMagnetometerDataResponse* >(object);
  (void)_this;
}
void getMagnetometerDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getMagnetometerDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getMagnetometerDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getMagnetometerDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magdata_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMagnetometerDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes magData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_magdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getMagnetometerDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getMagnetometerDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes magData = 1;
  if (this->magdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_magdata(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getMagnetometerDataResponse)
  return target;
}

size_t getMagnetometerDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getMagnetometerDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes magData = 1;
  if (this->magdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_magdata());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getMagnetometerDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.getMagnetometerDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const getMagnetometerDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getMagnetometerDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.getMagnetometerDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.getMagnetometerDataResponse)
    MergeFrom(*source);
  }
}

void getMagnetometerDataResponse::MergeFrom(const getMagnetometerDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getMagnetometerDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.magdata().size() > 0) {
    _internal_set_magdata(from._internal_magdata());
  }
  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void getMagnetometerDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.getMagnetometerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getMagnetometerDataResponse::CopyFrom(const getMagnetometerDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getMagnetometerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMagnetometerDataResponse::IsInitialized() const {
  return true;
}

void getMagnetometerDataResponse::InternalSwap(getMagnetometerDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  magdata_.Swap(&other->magdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getMagnetometerDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getAllSensorsDataRequest::_Internal {
 public:
};

getAllSensorsDataRequest::getAllSensorsDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getAllSensorsDataRequest)
}
getAllSensorsDataRequest::getAllSensorsDataRequest(const getAllSensorsDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gyrodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gyrodata().empty()) {
    gyrodata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gyrodata(), 
      GetArena());
  }
  acceldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_acceldata().empty()) {
    acceldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_acceldata(), 
      GetArena());
  }
  magdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_magdata().empty()) {
    magdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_magdata(), 
      GetArena());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getAllSensorsDataRequest)
}

void getAllSensorsDataRequest::SharedCtor() {
gyrodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
acceldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
magdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
grpcservercompressionformat_ = 0;
}

getAllSensorsDataRequest::~getAllSensorsDataRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getAllSensorsDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getAllSensorsDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gyrodata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acceldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  magdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getAllSensorsDataRequest::ArenaDtor(void* object) {
  getAllSensorsDataRequest* _this = reinterpret_cast< getAllSensorsDataRequest* >(object);
  (void)_this;
}
void getAllSensorsDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getAllSensorsDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getAllSensorsDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getAllSensorsDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gyrodata_.ClearToEmpty();
  acceldata_.ClearToEmpty();
  magdata_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllSensorsDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes gyroData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gyrodata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes accelData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_acceldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes magData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_magdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getAllSensorsDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getAllSensorsDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes gyroData = 2;
  if (this->gyrodata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_gyrodata(), target);
  }

  // bytes accelData = 3;
  if (this->acceldata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_acceldata(), target);
  }

  // bytes magData = 4;
  if (this->magdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_magdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getAllSensorsDataRequest)
  return target;
}

size_t getAllSensorsDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getAllSensorsDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gyroData = 2;
  if (this->gyrodata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gyrodata());
  }

  // bytes accelData = 3;
  if (this->acceldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_acceldata());
  }

  // bytes magData = 4;
  if (this->magdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_magdata());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getAllSensorsDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.getAllSensorsDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const getAllSensorsDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getAllSensorsDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.getAllSensorsDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.getAllSensorsDataRequest)
    MergeFrom(*source);
  }
}

void getAllSensorsDataRequest::MergeFrom(const getAllSensorsDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getAllSensorsDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gyrodata().size() > 0) {
    _internal_set_gyrodata(from._internal_gyrodata());
  }
  if (from.acceldata().size() > 0) {
    _internal_set_acceldata(from._internal_acceldata());
  }
  if (from.magdata().size() > 0) {
    _internal_set_magdata(from._internal_magdata());
  }
  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void getAllSensorsDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.getAllSensorsDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getAllSensorsDataRequest::CopyFrom(const getAllSensorsDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getAllSensorsDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllSensorsDataRequest::IsInitialized() const {
  return true;
}

void getAllSensorsDataRequest::InternalSwap(getAllSensorsDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gyrodata_.Swap(&other->gyrodata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  acceldata_.Swap(&other->acceldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  magdata_.Swap(&other->magdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllSensorsDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getAllSensorsDataResponse::_Internal {
 public:
};

getAllSensorsDataResponse::getAllSensorsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getAllSensorsDataResponse)
}
getAllSensorsDataResponse::getAllSensorsDataResponse(const getAllSensorsDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gyrodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gyrodata().empty()) {
    gyrodata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gyrodata(), 
      GetArena());
  }
  acceldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_acceldata().empty()) {
    acceldata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_acceldata(), 
      GetArena());
  }
  magdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_magdata().empty()) {
    magdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_magdata(), 
      GetArena());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getAllSensorsDataResponse)
}

void getAllSensorsDataResponse::SharedCtor() {
gyrodata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
acceldata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
magdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xpcfgrpcreturnvalue_ = 0;
}

getAllSensorsDataResponse::~getAllSensorsDataResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getAllSensorsDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getAllSensorsDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gyrodata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acceldata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  magdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getAllSensorsDataResponse::ArenaDtor(void* object) {
  getAllSensorsDataResponse* _this = reinterpret_cast< getAllSensorsDataResponse* >(object);
  (void)_this;
}
void getAllSensorsDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getAllSensorsDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getAllSensorsDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getAllSensorsDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gyrodata_.ClearToEmpty();
  acceldata_.ClearToEmpty();
  magdata_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllSensorsDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes gyroData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gyrodata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes accelData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_acceldata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes magData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_magdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getAllSensorsDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getAllSensorsDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes gyroData = 1;
  if (this->gyrodata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_gyrodata(), target);
  }

  // bytes accelData = 2;
  if (this->acceldata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_acceldata(), target);
  }

  // bytes magData = 3;
  if (this->magdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_magdata(), target);
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getAllSensorsDataResponse)
  return target;
}

size_t getAllSensorsDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getAllSensorsDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gyroData = 1;
  if (this->gyrodata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gyrodata());
  }

  // bytes accelData = 2;
  if (this->acceldata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_acceldata());
  }

  // bytes magData = 3;
  if (this->magdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_magdata());
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getAllSensorsDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.getAllSensorsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const getAllSensorsDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getAllSensorsDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.getAllSensorsDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.getAllSensorsDataResponse)
    MergeFrom(*source);
  }
}

void getAllSensorsDataResponse::MergeFrom(const getAllSensorsDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getAllSensorsDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gyrodata().size() > 0) {
    _internal_set_gyrodata(from._internal_gyrodata());
  }
  if (from.acceldata().size() > 0) {
    _internal_set_acceldata(from._internal_acceldata());
  }
  if (from.magdata().size() > 0) {
    _internal_set_magdata(from._internal_magdata());
  }
  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void getAllSensorsDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.getAllSensorsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getAllSensorsDataResponse::CopyFrom(const getAllSensorsDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getAllSensorsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllSensorsDataResponse::IsInitialized() const {
  return true;
}

void getAllSensorsDataResponse::InternalSwap(getAllSensorsDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gyrodata_.Swap(&other->gyrodata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  acceldata_.Swap(&other->acceldata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  magdata_.Swap(&other->magdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllSensorsDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class isGyroscopeAvailableRequest::_Internal {
 public:
};

isGyroscopeAvailableRequest::isGyroscopeAvailableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isGyroscopeAvailableRequest)
}
isGyroscopeAvailableRequest::isGyroscopeAvailableRequest(const isGyroscopeAvailableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isGyroscopeAvailableRequest)
}

void isGyroscopeAvailableRequest::SharedCtor() {
grpcservercompressionformat_ = 0;
}

isGyroscopeAvailableRequest::~isGyroscopeAvailableRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isGyroscopeAvailableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void isGyroscopeAvailableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void isGyroscopeAvailableRequest::ArenaDtor(void* object) {
  isGyroscopeAvailableRequest* _this = reinterpret_cast< isGyroscopeAvailableRequest* >(object);
  (void)_this;
}
void isGyroscopeAvailableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void isGyroscopeAvailableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void isGyroscopeAvailableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isGyroscopeAvailableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isGyroscopeAvailableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* isGyroscopeAvailableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isGyroscopeAvailableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isGyroscopeAvailableRequest)
  return target;
}

size_t isGyroscopeAvailableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isGyroscopeAvailableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void isGyroscopeAvailableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.isGyroscopeAvailableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const isGyroscopeAvailableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<isGyroscopeAvailableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.isGyroscopeAvailableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.isGyroscopeAvailableRequest)
    MergeFrom(*source);
  }
}

void isGyroscopeAvailableRequest::MergeFrom(const isGyroscopeAvailableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isGyroscopeAvailableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void isGyroscopeAvailableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.isGyroscopeAvailableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isGyroscopeAvailableRequest::CopyFrom(const isGyroscopeAvailableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isGyroscopeAvailableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isGyroscopeAvailableRequest::IsInitialized() const {
  return true;
}

void isGyroscopeAvailableRequest::InternalSwap(isGyroscopeAvailableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isGyroscopeAvailableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class isGyroscopeAvailableResponse::_Internal {
 public:
};

isGyroscopeAvailableResponse::isGyroscopeAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isGyroscopeAvailableResponse)
}
isGyroscopeAvailableResponse::isGyroscopeAvailableResponse(const isGyroscopeAvailableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isGyroscopeAvailableResponse)
}

void isGyroscopeAvailableResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = false;
}

isGyroscopeAvailableResponse::~isGyroscopeAvailableResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isGyroscopeAvailableResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void isGyroscopeAvailableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void isGyroscopeAvailableResponse::ArenaDtor(void* object) {
  isGyroscopeAvailableResponse* _this = reinterpret_cast< isGyroscopeAvailableResponse* >(object);
  (void)_this;
}
void isGyroscopeAvailableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void isGyroscopeAvailableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void isGyroscopeAvailableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isGyroscopeAvailableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isGyroscopeAvailableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* isGyroscopeAvailableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isGyroscopeAvailableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isGyroscopeAvailableResponse)
  return target;
}

size_t isGyroscopeAvailableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isGyroscopeAvailableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void isGyroscopeAvailableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.isGyroscopeAvailableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const isGyroscopeAvailableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<isGyroscopeAvailableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.isGyroscopeAvailableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.isGyroscopeAvailableResponse)
    MergeFrom(*source);
  }
}

void isGyroscopeAvailableResponse::MergeFrom(const isGyroscopeAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isGyroscopeAvailableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void isGyroscopeAvailableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.isGyroscopeAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isGyroscopeAvailableResponse::CopyFrom(const isGyroscopeAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isGyroscopeAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isGyroscopeAvailableResponse::IsInitialized() const {
  return true;
}

void isGyroscopeAvailableResponse::InternalSwap(isGyroscopeAvailableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isGyroscopeAvailableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class isAccelerometerAvailableRequest::_Internal {
 public:
};

isAccelerometerAvailableRequest::isAccelerometerAvailableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isAccelerometerAvailableRequest)
}
isAccelerometerAvailableRequest::isAccelerometerAvailableRequest(const isAccelerometerAvailableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isAccelerometerAvailableRequest)
}

void isAccelerometerAvailableRequest::SharedCtor() {
grpcservercompressionformat_ = 0;
}

isAccelerometerAvailableRequest::~isAccelerometerAvailableRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isAccelerometerAvailableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void isAccelerometerAvailableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void isAccelerometerAvailableRequest::ArenaDtor(void* object) {
  isAccelerometerAvailableRequest* _this = reinterpret_cast< isAccelerometerAvailableRequest* >(object);
  (void)_this;
}
void isAccelerometerAvailableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void isAccelerometerAvailableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void isAccelerometerAvailableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isAccelerometerAvailableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isAccelerometerAvailableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* isAccelerometerAvailableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isAccelerometerAvailableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isAccelerometerAvailableRequest)
  return target;
}

size_t isAccelerometerAvailableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isAccelerometerAvailableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void isAccelerometerAvailableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.isAccelerometerAvailableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const isAccelerometerAvailableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<isAccelerometerAvailableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.isAccelerometerAvailableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.isAccelerometerAvailableRequest)
    MergeFrom(*source);
  }
}

void isAccelerometerAvailableRequest::MergeFrom(const isAccelerometerAvailableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isAccelerometerAvailableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void isAccelerometerAvailableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.isAccelerometerAvailableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isAccelerometerAvailableRequest::CopyFrom(const isAccelerometerAvailableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isAccelerometerAvailableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isAccelerometerAvailableRequest::IsInitialized() const {
  return true;
}

void isAccelerometerAvailableRequest::InternalSwap(isAccelerometerAvailableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isAccelerometerAvailableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class isAccelerometerAvailableResponse::_Internal {
 public:
};

isAccelerometerAvailableResponse::isAccelerometerAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isAccelerometerAvailableResponse)
}
isAccelerometerAvailableResponse::isAccelerometerAvailableResponse(const isAccelerometerAvailableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isAccelerometerAvailableResponse)
}

void isAccelerometerAvailableResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = false;
}

isAccelerometerAvailableResponse::~isAccelerometerAvailableResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isAccelerometerAvailableResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void isAccelerometerAvailableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void isAccelerometerAvailableResponse::ArenaDtor(void* object) {
  isAccelerometerAvailableResponse* _this = reinterpret_cast< isAccelerometerAvailableResponse* >(object);
  (void)_this;
}
void isAccelerometerAvailableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void isAccelerometerAvailableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void isAccelerometerAvailableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isAccelerometerAvailableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isAccelerometerAvailableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* isAccelerometerAvailableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isAccelerometerAvailableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isAccelerometerAvailableResponse)
  return target;
}

size_t isAccelerometerAvailableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isAccelerometerAvailableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void isAccelerometerAvailableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.isAccelerometerAvailableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const isAccelerometerAvailableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<isAccelerometerAvailableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.isAccelerometerAvailableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.isAccelerometerAvailableResponse)
    MergeFrom(*source);
  }
}

void isAccelerometerAvailableResponse::MergeFrom(const isAccelerometerAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isAccelerometerAvailableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void isAccelerometerAvailableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.isAccelerometerAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isAccelerometerAvailableResponse::CopyFrom(const isAccelerometerAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isAccelerometerAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isAccelerometerAvailableResponse::IsInitialized() const {
  return true;
}

void isAccelerometerAvailableResponse::InternalSwap(isAccelerometerAvailableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isAccelerometerAvailableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class isMagnetometerAvailableRequest::_Internal {
 public:
};

isMagnetometerAvailableRequest::isMagnetometerAvailableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isMagnetometerAvailableRequest)
}
isMagnetometerAvailableRequest::isMagnetometerAvailableRequest(const isMagnetometerAvailableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isMagnetometerAvailableRequest)
}

void isMagnetometerAvailableRequest::SharedCtor() {
grpcservercompressionformat_ = 0;
}

isMagnetometerAvailableRequest::~isMagnetometerAvailableRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isMagnetometerAvailableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void isMagnetometerAvailableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void isMagnetometerAvailableRequest::ArenaDtor(void* object) {
  isMagnetometerAvailableRequest* _this = reinterpret_cast< isMagnetometerAvailableRequest* >(object);
  (void)_this;
}
void isMagnetometerAvailableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void isMagnetometerAvailableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void isMagnetometerAvailableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isMagnetometerAvailableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isMagnetometerAvailableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* isMagnetometerAvailableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isMagnetometerAvailableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isMagnetometerAvailableRequest)
  return target;
}

size_t isMagnetometerAvailableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isMagnetometerAvailableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void isMagnetometerAvailableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.isMagnetometerAvailableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const isMagnetometerAvailableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<isMagnetometerAvailableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.isMagnetometerAvailableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.isMagnetometerAvailableRequest)
    MergeFrom(*source);
  }
}

void isMagnetometerAvailableRequest::MergeFrom(const isMagnetometerAvailableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isMagnetometerAvailableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void isMagnetometerAvailableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.isMagnetometerAvailableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isMagnetometerAvailableRequest::CopyFrom(const isMagnetometerAvailableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isMagnetometerAvailableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isMagnetometerAvailableRequest::IsInitialized() const {
  return true;
}

void isMagnetometerAvailableRequest::InternalSwap(isMagnetometerAvailableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isMagnetometerAvailableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class isMagnetometerAvailableResponse::_Internal {
 public:
};

isMagnetometerAvailableResponse::isMagnetometerAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isMagnetometerAvailableResponse)
}
isMagnetometerAvailableResponse::isMagnetometerAvailableResponse(const isMagnetometerAvailableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isMagnetometerAvailableResponse)
}

void isMagnetometerAvailableResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = false;
}

isMagnetometerAvailableResponse::~isMagnetometerAvailableResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isMagnetometerAvailableResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void isMagnetometerAvailableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void isMagnetometerAvailableResponse::ArenaDtor(void* object) {
  isMagnetometerAvailableResponse* _this = reinterpret_cast< isMagnetometerAvailableResponse* >(object);
  (void)_this;
}
void isMagnetometerAvailableResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void isMagnetometerAvailableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void isMagnetometerAvailableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isMagnetometerAvailableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isMagnetometerAvailableResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* isMagnetometerAvailableResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isMagnetometerAvailableResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isMagnetometerAvailableResponse)
  return target;
}

size_t isMagnetometerAvailableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isMagnetometerAvailableResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void isMagnetometerAvailableResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIIMU.isMagnetometerAvailableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const isMagnetometerAvailableResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<isMagnetometerAvailableResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIIMU.isMagnetometerAvailableResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIIMU.isMagnetometerAvailableResponse)
    MergeFrom(*source);
  }
}

void isMagnetometerAvailableResponse::MergeFrom(const isMagnetometerAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isMagnetometerAvailableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void isMagnetometerAvailableResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIIMU.isMagnetometerAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void isMagnetometerAvailableResponse::CopyFrom(const isMagnetometerAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isMagnetometerAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isMagnetometerAvailableResponse::IsInitialized() const {
  return true;
}

void isMagnetometerAvailableResponse::InternalSwap(isMagnetometerAvailableResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isMagnetometerAvailableResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIIMU
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIIMU::startRequest* Arena::CreateMaybeMessage< ::grpcIIMU::startRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::startRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::startResponse* Arena::CreateMaybeMessage< ::grpcIIMU::startResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::startResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::stopRequest* Arena::CreateMaybeMessage< ::grpcIIMU::stopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::stopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::stopResponse* Arena::CreateMaybeMessage< ::grpcIIMU::stopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::stopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getGyroscopeDataRequest* Arena::CreateMaybeMessage< ::grpcIIMU::getGyroscopeDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getGyroscopeDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getGyroscopeDataResponse* Arena::CreateMaybeMessage< ::grpcIIMU::getGyroscopeDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getGyroscopeDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getAccelerometerDataRequest* Arena::CreateMaybeMessage< ::grpcIIMU::getAccelerometerDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getAccelerometerDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getAccelerometerDataResponse* Arena::CreateMaybeMessage< ::grpcIIMU::getAccelerometerDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getAccelerometerDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getMagnetometerDataRequest* Arena::CreateMaybeMessage< ::grpcIIMU::getMagnetometerDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getMagnetometerDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getMagnetometerDataResponse* Arena::CreateMaybeMessage< ::grpcIIMU::getMagnetometerDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getMagnetometerDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getAllSensorsDataRequest* Arena::CreateMaybeMessage< ::grpcIIMU::getAllSensorsDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getAllSensorsDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getAllSensorsDataResponse* Arena::CreateMaybeMessage< ::grpcIIMU::getAllSensorsDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getAllSensorsDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isGyroscopeAvailableRequest* Arena::CreateMaybeMessage< ::grpcIIMU::isGyroscopeAvailableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isGyroscopeAvailableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isGyroscopeAvailableResponse* Arena::CreateMaybeMessage< ::grpcIIMU::isGyroscopeAvailableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isGyroscopeAvailableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isAccelerometerAvailableRequest* Arena::CreateMaybeMessage< ::grpcIIMU::isAccelerometerAvailableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isAccelerometerAvailableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isAccelerometerAvailableResponse* Arena::CreateMaybeMessage< ::grpcIIMU::isAccelerometerAvailableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isAccelerometerAvailableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isMagnetometerAvailableRequest* Arena::CreateMaybeMessage< ::grpcIIMU::isMagnetometerAvailableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isMagnetometerAvailableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isMagnetometerAvailableResponse* Arena::CreateMaybeMessage< ::grpcIIMU::isMagnetometerAvailableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isMagnetometerAvailableResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
