// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIIMUService.proto

#include "grpcIIMUService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIIMU {
PROTOBUF_CONSTEXPR startRequest::startRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct startRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR startRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~startRequestDefaultTypeInternal() {}
  union {
    startRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 startRequestDefaultTypeInternal _startRequest_default_instance_;
PROTOBUF_CONSTEXPR startResponse::startResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct startResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR startResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~startResponseDefaultTypeInternal() {}
  union {
    startResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 startResponseDefaultTypeInternal _startResponse_default_instance_;
PROTOBUF_CONSTEXPR stopRequest::stopRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct stopRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR stopRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~stopRequestDefaultTypeInternal() {}
  union {
    stopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 stopRequestDefaultTypeInternal _stopRequest_default_instance_;
PROTOBUF_CONSTEXPR stopResponse::stopResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct stopResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR stopResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~stopResponseDefaultTypeInternal() {}
  union {
    stopResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 stopResponseDefaultTypeInternal _stopResponse_default_instance_;
PROTOBUF_CONSTEXPR getGyroscopeDataRequest::getGyroscopeDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gyrodata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getGyroscopeDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getGyroscopeDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getGyroscopeDataRequestDefaultTypeInternal() {}
  union {
    getGyroscopeDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getGyroscopeDataRequestDefaultTypeInternal _getGyroscopeDataRequest_default_instance_;
PROTOBUF_CONSTEXPR getGyroscopeDataResponse::getGyroscopeDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gyrodata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getGyroscopeDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getGyroscopeDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getGyroscopeDataResponseDefaultTypeInternal() {}
  union {
    getGyroscopeDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getGyroscopeDataResponseDefaultTypeInternal _getGyroscopeDataResponse_default_instance_;
PROTOBUF_CONSTEXPR getAccelerometerDataRequest::getAccelerometerDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.acceldata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAccelerometerDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAccelerometerDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAccelerometerDataRequestDefaultTypeInternal() {}
  union {
    getAccelerometerDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAccelerometerDataRequestDefaultTypeInternal _getAccelerometerDataRequest_default_instance_;
PROTOBUF_CONSTEXPR getAccelerometerDataResponse::getAccelerometerDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.acceldata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAccelerometerDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAccelerometerDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAccelerometerDataResponseDefaultTypeInternal() {}
  union {
    getAccelerometerDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAccelerometerDataResponseDefaultTypeInternal _getAccelerometerDataResponse_default_instance_;
PROTOBUF_CONSTEXPR getMagnetometerDataRequest::getMagnetometerDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.magdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMagnetometerDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMagnetometerDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMagnetometerDataRequestDefaultTypeInternal() {}
  union {
    getMagnetometerDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMagnetometerDataRequestDefaultTypeInternal _getMagnetometerDataRequest_default_instance_;
PROTOBUF_CONSTEXPR getMagnetometerDataResponse::getMagnetometerDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.magdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMagnetometerDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMagnetometerDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMagnetometerDataResponseDefaultTypeInternal() {}
  union {
    getMagnetometerDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMagnetometerDataResponseDefaultTypeInternal _getMagnetometerDataResponse_default_instance_;
PROTOBUF_CONSTEXPR getAllSensorsDataRequest::getAllSensorsDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gyrodata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.acceldata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.magdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAllSensorsDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAllSensorsDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAllSensorsDataRequestDefaultTypeInternal() {}
  union {
    getAllSensorsDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAllSensorsDataRequestDefaultTypeInternal _getAllSensorsDataRequest_default_instance_;
PROTOBUF_CONSTEXPR getAllSensorsDataResponse::getAllSensorsDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gyrodata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.acceldata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.magdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAllSensorsDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAllSensorsDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAllSensorsDataResponseDefaultTypeInternal() {}
  union {
    getAllSensorsDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAllSensorsDataResponseDefaultTypeInternal _getAllSensorsDataResponse_default_instance_;
PROTOBUF_CONSTEXPR isGyroscopeAvailableRequest::isGyroscopeAvailableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct isGyroscopeAvailableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR isGyroscopeAvailableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~isGyroscopeAvailableRequestDefaultTypeInternal() {}
  union {
    isGyroscopeAvailableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 isGyroscopeAvailableRequestDefaultTypeInternal _isGyroscopeAvailableRequest_default_instance_;
PROTOBUF_CONSTEXPR isGyroscopeAvailableResponse::isGyroscopeAvailableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct isGyroscopeAvailableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR isGyroscopeAvailableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~isGyroscopeAvailableResponseDefaultTypeInternal() {}
  union {
    isGyroscopeAvailableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 isGyroscopeAvailableResponseDefaultTypeInternal _isGyroscopeAvailableResponse_default_instance_;
PROTOBUF_CONSTEXPR isAccelerometerAvailableRequest::isAccelerometerAvailableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct isAccelerometerAvailableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR isAccelerometerAvailableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~isAccelerometerAvailableRequestDefaultTypeInternal() {}
  union {
    isAccelerometerAvailableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 isAccelerometerAvailableRequestDefaultTypeInternal _isAccelerometerAvailableRequest_default_instance_;
PROTOBUF_CONSTEXPR isAccelerometerAvailableResponse::isAccelerometerAvailableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct isAccelerometerAvailableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR isAccelerometerAvailableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~isAccelerometerAvailableResponseDefaultTypeInternal() {}
  union {
    isAccelerometerAvailableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 isAccelerometerAvailableResponseDefaultTypeInternal _isAccelerometerAvailableResponse_default_instance_;
PROTOBUF_CONSTEXPR isMagnetometerAvailableRequest::isMagnetometerAvailableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct isMagnetometerAvailableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR isMagnetometerAvailableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~isMagnetometerAvailableRequestDefaultTypeInternal() {}
  union {
    isMagnetometerAvailableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 isMagnetometerAvailableRequestDefaultTypeInternal _isMagnetometerAvailableRequest_default_instance_;
PROTOBUF_CONSTEXPR isMagnetometerAvailableResponse::isMagnetometerAvailableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct isMagnetometerAvailableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR isMagnetometerAvailableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~isMagnetometerAvailableResponseDefaultTypeInternal() {}
  union {
    isMagnetometerAvailableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 isMagnetometerAvailableResponseDefaultTypeInternal _isMagnetometerAvailableResponse_default_instance_;
}  // namespace grpcIIMU
static ::_pb::Metadata file_level_metadata_grpcIIMUService_2eproto[18];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIIMUService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIIMUService_2eproto = nullptr;

const uint32_t TableStruct_grpcIIMUService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::startRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::startRequest, _impl_.grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::startResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::startResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::stopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::stopRequest, _impl_.grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::stopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::stopResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataRequest, _impl_.gyrodata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataResponse, _impl_.gyrodata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getGyroscopeDataResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataRequest, _impl_.acceldata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataResponse, _impl_.acceldata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAccelerometerDataResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataRequest, _impl_.magdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataResponse, _impl_.magdata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getMagnetometerDataResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, _impl_.gyrodata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, _impl_.acceldata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataRequest, _impl_.magdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, _impl_.gyrodata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, _impl_.acceldata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, _impl_.magdata_),
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::getAllSensorsDataResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isGyroscopeAvailableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isGyroscopeAvailableRequest, _impl_.grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isGyroscopeAvailableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isGyroscopeAvailableResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isAccelerometerAvailableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isAccelerometerAvailableRequest, _impl_.grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isAccelerometerAvailableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isAccelerometerAvailableResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isMagnetometerAvailableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isMagnetometerAvailableRequest, _impl_.grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isMagnetometerAvailableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIIMU::isMagnetometerAvailableResponse, _impl_.xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIIMU::startRequest)},
  { 7, -1, -1, sizeof(::grpcIIMU::startResponse)},
  { 14, -1, -1, sizeof(::grpcIIMU::stopRequest)},
  { 21, -1, -1, sizeof(::grpcIIMU::stopResponse)},
  { 28, -1, -1, sizeof(::grpcIIMU::getGyroscopeDataRequest)},
  { 36, -1, -1, sizeof(::grpcIIMU::getGyroscopeDataResponse)},
  { 44, -1, -1, sizeof(::grpcIIMU::getAccelerometerDataRequest)},
  { 52, -1, -1, sizeof(::grpcIIMU::getAccelerometerDataResponse)},
  { 60, -1, -1, sizeof(::grpcIIMU::getMagnetometerDataRequest)},
  { 68, -1, -1, sizeof(::grpcIIMU::getMagnetometerDataResponse)},
  { 76, -1, -1, sizeof(::grpcIIMU::getAllSensorsDataRequest)},
  { 86, -1, -1, sizeof(::grpcIIMU::getAllSensorsDataResponse)},
  { 96, -1, -1, sizeof(::grpcIIMU::isGyroscopeAvailableRequest)},
  { 103, -1, -1, sizeof(::grpcIIMU::isGyroscopeAvailableResponse)},
  { 110, -1, -1, sizeof(::grpcIIMU::isAccelerometerAvailableRequest)},
  { 117, -1, -1, sizeof(::grpcIIMU::isAccelerometerAvailableResponse)},
  { 124, -1, -1, sizeof(::grpcIIMU::isMagnetometerAvailableRequest)},
  { 131, -1, -1, sizeof(::grpcIIMU::isMagnetometerAvailableResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIIMU::_startRequest_default_instance_._instance,
  &::grpcIIMU::_startResponse_default_instance_._instance,
  &::grpcIIMU::_stopRequest_default_instance_._instance,
  &::grpcIIMU::_stopResponse_default_instance_._instance,
  &::grpcIIMU::_getGyroscopeDataRequest_default_instance_._instance,
  &::grpcIIMU::_getGyroscopeDataResponse_default_instance_._instance,
  &::grpcIIMU::_getAccelerometerDataRequest_default_instance_._instance,
  &::grpcIIMU::_getAccelerometerDataResponse_default_instance_._instance,
  &::grpcIIMU::_getMagnetometerDataRequest_default_instance_._instance,
  &::grpcIIMU::_getMagnetometerDataResponse_default_instance_._instance,
  &::grpcIIMU::_getAllSensorsDataRequest_default_instance_._instance,
  &::grpcIIMU::_getAllSensorsDataResponse_default_instance_._instance,
  &::grpcIIMU::_isGyroscopeAvailableRequest_default_instance_._instance,
  &::grpcIIMU::_isGyroscopeAvailableResponse_default_instance_._instance,
  &::grpcIIMU::_isAccelerometerAvailableRequest_default_instance_._instance,
  &::grpcIIMU::_isAccelerometerAvailableResponse_default_instance_._instance,
  &::grpcIIMU::_isMagnetometerAvailableRequest_default_instance_._instance,
  &::grpcIIMU::_isMagnetometerAvailableResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIIMUService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025grpcIIMUService.proto\022\010grpcIIMU\032\033googl"
  "e/protobuf/empty.proto\"3\n\014startRequest\022#"
  "\n\033grpcServerCompressionFormat\030\001 \001(\005\",\n\rs"
  "tartResponse\022\033\n\023xpcfGrpcReturnValue\030\001 \001("
  "\021\"2\n\013stopRequest\022#\n\033grpcServerCompressio"
  "nFormat\030\001 \001(\005\"+\n\014stopResponse\022\033\n\023xpcfGrp"
  "cReturnValue\030\001 \001(\021\"P\n\027getGyroscopeDataRe"
  "quest\022#\n\033grpcServerCompressionFormat\030\001 \001"
  "(\005\022\020\n\010gyroData\030\002 \001(\014\"I\n\030getGyroscopeData"
  "Response\022\020\n\010gyroData\030\001 \001(\014\022\033\n\023xpcfGrpcRe"
  "turnValue\030\002 \001(\021\"U\n\033getAccelerometerDataR"
  "equest\022#\n\033grpcServerCompressionFormat\030\001 "
  "\001(\005\022\021\n\taccelData\030\002 \001(\014\"N\n\034getAcceleromet"
  "erDataResponse\022\021\n\taccelData\030\001 \001(\014\022\033\n\023xpc"
  "fGrpcReturnValue\030\002 \001(\021\"R\n\032getMagnetomete"
  "rDataRequest\022#\n\033grpcServerCompressionFor"
  "mat\030\001 \001(\005\022\017\n\007magData\030\002 \001(\014\"K\n\033getMagneto"
  "meterDataResponse\022\017\n\007magData\030\001 \001(\014\022\033\n\023xp"
  "cfGrpcReturnValue\030\002 \001(\021\"u\n\030getAllSensors"
  "DataRequest\022#\n\033grpcServerCompressionForm"
  "at\030\001 \001(\005\022\020\n\010gyroData\030\002 \001(\014\022\021\n\taccelData\030"
  "\003 \001(\014\022\017\n\007magData\030\004 \001(\014\"n\n\031getAllSensorsD"
  "ataResponse\022\020\n\010gyroData\030\001 \001(\014\022\021\n\taccelDa"
  "ta\030\002 \001(\014\022\017\n\007magData\030\003 \001(\014\022\033\n\023xpcfGrpcRet"
  "urnValue\030\004 \001(\021\"B\n\033isGyroscopeAvailableRe"
  "quest\022#\n\033grpcServerCompressionFormat\030\001 \001"
  "(\005\";\n\034isGyroscopeAvailableResponse\022\033\n\023xp"
  "cfGrpcReturnValue\030\001 \001(\010\"F\n\037isAcceleromet"
  "erAvailableRequest\022#\n\033grpcServerCompress"
  "ionFormat\030\001 \001(\005\"\?\n isAccelerometerAvaila"
  "bleResponse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\010"
  "\"E\n\036isMagnetometerAvailableRequest\022#\n\033gr"
  "pcServerCompressionFormat\030\001 \001(\005\">\n\037isMag"
  "netometerAvailableResponse\022\033\n\023xpcfGrpcRe"
  "turnValue\030\001 \001(\0102\342\006\n\017grpcIIMUService\022:\n\005s"
  "tart\022\026.grpcIIMU.startRequest\032\027.grpcIIMU."
  "startResponse\"\000\0227\n\004stop\022\025.grpcIIMU.stopR"
  "equest\032\026.grpcIIMU.stopResponse\"\000\022[\n\020getG"
  "yroscopeData\022!.grpcIIMU.getGyroscopeData"
  "Request\032\".grpcIIMU.getGyroscopeDataRespo"
  "nse\"\000\022g\n\024getAccelerometerData\022%.grpcIIMU"
  ".getAccelerometerDataRequest\032&.grpcIIMU."
  "getAccelerometerDataResponse\"\000\022d\n\023getMag"
  "netometerData\022$.grpcIIMU.getMagnetometer"
  "DataRequest\032%.grpcIIMU.getMagnetometerDa"
  "taResponse\"\000\022^\n\021getAllSensorsData\022\".grpc"
  "IIMU.getAllSensorsDataRequest\032#.grpcIIMU"
  ".getAllSensorsDataResponse\"\000\022g\n\024isGyrosc"
  "opeAvailable\022%.grpcIIMU.isGyroscopeAvail"
  "ableRequest\032&.grpcIIMU.isGyroscopeAvaila"
  "bleResponse\"\000\022s\n\030isAccelerometerAvailabl"
  "e\022).grpcIIMU.isAccelerometerAvailableReq"
  "uest\032*.grpcIIMU.isAccelerometerAvailable"
  "Response\"\000\022p\n\027isMagnetometerAvailable\022(."
  "grpcIIMU.isMagnetometerAvailableRequest\032"
  ").grpcIIMU.isMagnetometerAvailableRespon"
  "se\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIIMUService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIIMUService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIIMUService_2eproto = {
    false, false, 2252, descriptor_table_protodef_grpcIIMUService_2eproto,
    "grpcIIMUService.proto",
    &descriptor_table_grpcIIMUService_2eproto_once, descriptor_table_grpcIIMUService_2eproto_deps, 1, 18,
    schemas, file_default_instances, TableStruct_grpcIIMUService_2eproto::offsets,
    file_level_metadata_grpcIIMUService_2eproto, file_level_enum_descriptors_grpcIIMUService_2eproto,
    file_level_service_descriptors_grpcIIMUService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIIMUService_2eproto_getter() {
  return &descriptor_table_grpcIIMUService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIIMUService_2eproto(&descriptor_table_grpcIIMUService_2eproto);
namespace grpcIIMU {

// ===================================================================

class startRequest::_Internal {
 public:
};

startRequest::startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.startRequest)
}
startRequest::startRequest(const startRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  startRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.startRequest)
}

inline void startRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

startRequest::~startRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.startRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void startRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void startRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void startRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.startRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* startRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* startRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.startRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.startRequest)
  return target;
}

size_t startRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.startRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData startRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    startRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*startRequest::GetClassData() const { return &_class_data_; }


void startRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<startRequest*>(&to_msg);
  auto& from = static_cast<const startRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.startRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void startRequest::CopyFrom(const startRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.startRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool startRequest::IsInitialized() const {
  return true;
}

void startRequest::InternalSwap(startRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata startRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[0]);
}

// ===================================================================

class startResponse::_Internal {
 public:
};

startResponse::startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.startResponse)
}
startResponse::startResponse(const startResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  startResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.startResponse)
}

inline void startResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

startResponse::~startResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.startResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void startResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void startResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void startResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.startResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* startResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* startResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.startResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.startResponse)
  return target;
}

size_t startResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.startResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData startResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    startResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*startResponse::GetClassData() const { return &_class_data_; }


void startResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<startResponse*>(&to_msg);
  auto& from = static_cast<const startResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.startResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void startResponse::CopyFrom(const startResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.startResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool startResponse::IsInitialized() const {
  return true;
}

void startResponse::InternalSwap(startResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata startResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[1]);
}

// ===================================================================

class stopRequest::_Internal {
 public:
};

stopRequest::stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.stopRequest)
}
stopRequest::stopRequest(const stopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  stopRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.stopRequest)
}

inline void stopRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

stopRequest::~stopRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.stopRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void stopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void stopRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void stopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.stopRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stopRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* stopRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.stopRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.stopRequest)
  return target;
}

size_t stopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.stopRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData stopRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    stopRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*stopRequest::GetClassData() const { return &_class_data_; }


void stopRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<stopRequest*>(&to_msg);
  auto& from = static_cast<const stopRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.stopRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void stopRequest::CopyFrom(const stopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.stopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopRequest::IsInitialized() const {
  return true;
}

void stopRequest::InternalSwap(stopRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stopRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[2]);
}

// ===================================================================

class stopResponse::_Internal {
 public:
};

stopResponse::stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.stopResponse)
}
stopResponse::stopResponse(const stopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  stopResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.stopResponse)
}

inline void stopResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

stopResponse::~stopResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.stopResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void stopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void stopResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void stopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.stopResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stopResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* stopResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.stopResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.stopResponse)
  return target;
}

size_t stopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.stopResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData stopResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    stopResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*stopResponse::GetClassData() const { return &_class_data_; }


void stopResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<stopResponse*>(&to_msg);
  auto& from = static_cast<const stopResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.stopResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void stopResponse::CopyFrom(const stopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.stopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopResponse::IsInitialized() const {
  return true;
}

void stopResponse::InternalSwap(stopResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stopResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[3]);
}

// ===================================================================

class getGyroscopeDataRequest::_Internal {
 public:
};

getGyroscopeDataRequest::getGyroscopeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getGyroscopeDataRequest)
}
getGyroscopeDataRequest::getGyroscopeDataRequest(const getGyroscopeDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getGyroscopeDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gyrodata_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gyrodata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gyrodata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gyrodata().empty()) {
    _this->_impl_.gyrodata_.Set(from._internal_gyrodata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getGyroscopeDataRequest)
}

inline void getGyroscopeDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gyrodata_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gyrodata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gyrodata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getGyroscopeDataRequest::~getGyroscopeDataRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getGyroscopeDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getGyroscopeDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gyrodata_.Destroy();
}

void getGyroscopeDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getGyroscopeDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getGyroscopeDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gyrodata_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGyroscopeDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gyroData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gyrodata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getGyroscopeDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getGyroscopeDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes gyroData = 2;
  if (!this->_internal_gyrodata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_gyrodata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getGyroscopeDataRequest)
  return target;
}

size_t getGyroscopeDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getGyroscopeDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gyroData = 2;
  if (!this->_internal_gyrodata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gyrodata());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getGyroscopeDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getGyroscopeDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getGyroscopeDataRequest::GetClassData() const { return &_class_data_; }


void getGyroscopeDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getGyroscopeDataRequest*>(&to_msg);
  auto& from = static_cast<const getGyroscopeDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getGyroscopeDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gyrodata().empty()) {
    _this->_internal_set_gyrodata(from._internal_gyrodata());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getGyroscopeDataRequest::CopyFrom(const getGyroscopeDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getGyroscopeDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGyroscopeDataRequest::IsInitialized() const {
  return true;
}

void getGyroscopeDataRequest::InternalSwap(getGyroscopeDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gyrodata_, lhs_arena,
      &other->_impl_.gyrodata_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGyroscopeDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[4]);
}

// ===================================================================

class getGyroscopeDataResponse::_Internal {
 public:
};

getGyroscopeDataResponse::getGyroscopeDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getGyroscopeDataResponse)
}
getGyroscopeDataResponse::getGyroscopeDataResponse(const getGyroscopeDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getGyroscopeDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gyrodata_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gyrodata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gyrodata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gyrodata().empty()) {
    _this->_impl_.gyrodata_.Set(from._internal_gyrodata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getGyroscopeDataResponse)
}

inline void getGyroscopeDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gyrodata_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gyrodata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gyrodata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getGyroscopeDataResponse::~getGyroscopeDataResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getGyroscopeDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getGyroscopeDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gyrodata_.Destroy();
}

void getGyroscopeDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getGyroscopeDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getGyroscopeDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gyrodata_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getGyroscopeDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes gyroData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gyrodata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getGyroscopeDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getGyroscopeDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes gyroData = 1;
  if (!this->_internal_gyrodata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_gyrodata(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getGyroscopeDataResponse)
  return target;
}

size_t getGyroscopeDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getGyroscopeDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gyroData = 1;
  if (!this->_internal_gyrodata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gyrodata());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getGyroscopeDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getGyroscopeDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getGyroscopeDataResponse::GetClassData() const { return &_class_data_; }


void getGyroscopeDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getGyroscopeDataResponse*>(&to_msg);
  auto& from = static_cast<const getGyroscopeDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getGyroscopeDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gyrodata().empty()) {
    _this->_internal_set_gyrodata(from._internal_gyrodata());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getGyroscopeDataResponse::CopyFrom(const getGyroscopeDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getGyroscopeDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getGyroscopeDataResponse::IsInitialized() const {
  return true;
}

void getGyroscopeDataResponse::InternalSwap(getGyroscopeDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gyrodata_, lhs_arena,
      &other->_impl_.gyrodata_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getGyroscopeDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[5]);
}

// ===================================================================

class getAccelerometerDataRequest::_Internal {
 public:
};

getAccelerometerDataRequest::getAccelerometerDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getAccelerometerDataRequest)
}
getAccelerometerDataRequest::getAccelerometerDataRequest(const getAccelerometerDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAccelerometerDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.acceldata_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.acceldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceldata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acceldata().empty()) {
    _this->_impl_.acceldata_.Set(from._internal_acceldata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getAccelerometerDataRequest)
}

inline void getAccelerometerDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.acceldata_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.acceldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceldata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAccelerometerDataRequest::~getAccelerometerDataRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getAccelerometerDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAccelerometerDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.acceldata_.Destroy();
}

void getAccelerometerDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAccelerometerDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getAccelerometerDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.acceldata_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAccelerometerDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes accelData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_acceldata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAccelerometerDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getAccelerometerDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes accelData = 2;
  if (!this->_internal_acceldata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_acceldata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getAccelerometerDataRequest)
  return target;
}

size_t getAccelerometerDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getAccelerometerDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes accelData = 2;
  if (!this->_internal_acceldata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_acceldata());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAccelerometerDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAccelerometerDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAccelerometerDataRequest::GetClassData() const { return &_class_data_; }


void getAccelerometerDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAccelerometerDataRequest*>(&to_msg);
  auto& from = static_cast<const getAccelerometerDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getAccelerometerDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_acceldata().empty()) {
    _this->_internal_set_acceldata(from._internal_acceldata());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAccelerometerDataRequest::CopyFrom(const getAccelerometerDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getAccelerometerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAccelerometerDataRequest::IsInitialized() const {
  return true;
}

void getAccelerometerDataRequest::InternalSwap(getAccelerometerDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.acceldata_, lhs_arena,
      &other->_impl_.acceldata_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAccelerometerDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[6]);
}

// ===================================================================

class getAccelerometerDataResponse::_Internal {
 public:
};

getAccelerometerDataResponse::getAccelerometerDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getAccelerometerDataResponse)
}
getAccelerometerDataResponse::getAccelerometerDataResponse(const getAccelerometerDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAccelerometerDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.acceldata_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.acceldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceldata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acceldata().empty()) {
    _this->_impl_.acceldata_.Set(from._internal_acceldata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getAccelerometerDataResponse)
}

inline void getAccelerometerDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.acceldata_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.acceldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceldata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAccelerometerDataResponse::~getAccelerometerDataResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getAccelerometerDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAccelerometerDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.acceldata_.Destroy();
}

void getAccelerometerDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAccelerometerDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getAccelerometerDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.acceldata_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAccelerometerDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes accelData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_acceldata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAccelerometerDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getAccelerometerDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes accelData = 1;
  if (!this->_internal_acceldata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_acceldata(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getAccelerometerDataResponse)
  return target;
}

size_t getAccelerometerDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getAccelerometerDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes accelData = 1;
  if (!this->_internal_acceldata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_acceldata());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAccelerometerDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAccelerometerDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAccelerometerDataResponse::GetClassData() const { return &_class_data_; }


void getAccelerometerDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAccelerometerDataResponse*>(&to_msg);
  auto& from = static_cast<const getAccelerometerDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getAccelerometerDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_acceldata().empty()) {
    _this->_internal_set_acceldata(from._internal_acceldata());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAccelerometerDataResponse::CopyFrom(const getAccelerometerDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getAccelerometerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAccelerometerDataResponse::IsInitialized() const {
  return true;
}

void getAccelerometerDataResponse::InternalSwap(getAccelerometerDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.acceldata_, lhs_arena,
      &other->_impl_.acceldata_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAccelerometerDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[7]);
}

// ===================================================================

class getMagnetometerDataRequest::_Internal {
 public:
};

getMagnetometerDataRequest::getMagnetometerDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getMagnetometerDataRequest)
}
getMagnetometerDataRequest::getMagnetometerDataRequest(const getMagnetometerDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMagnetometerDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.magdata_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.magdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_magdata().empty()) {
    _this->_impl_.magdata_.Set(from._internal_magdata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getMagnetometerDataRequest)
}

inline void getMagnetometerDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.magdata_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.magdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMagnetometerDataRequest::~getMagnetometerDataRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getMagnetometerDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMagnetometerDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.magdata_.Destroy();
}

void getMagnetometerDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMagnetometerDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getMagnetometerDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.magdata_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMagnetometerDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes magData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_magdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMagnetometerDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getMagnetometerDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes magData = 2;
  if (!this->_internal_magdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_magdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getMagnetometerDataRequest)
  return target;
}

size_t getMagnetometerDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getMagnetometerDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes magData = 2;
  if (!this->_internal_magdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_magdata());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMagnetometerDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMagnetometerDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMagnetometerDataRequest::GetClassData() const { return &_class_data_; }


void getMagnetometerDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMagnetometerDataRequest*>(&to_msg);
  auto& from = static_cast<const getMagnetometerDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getMagnetometerDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_magdata().empty()) {
    _this->_internal_set_magdata(from._internal_magdata());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMagnetometerDataRequest::CopyFrom(const getMagnetometerDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getMagnetometerDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMagnetometerDataRequest::IsInitialized() const {
  return true;
}

void getMagnetometerDataRequest::InternalSwap(getMagnetometerDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.magdata_, lhs_arena,
      &other->_impl_.magdata_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getMagnetometerDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[8]);
}

// ===================================================================

class getMagnetometerDataResponse::_Internal {
 public:
};

getMagnetometerDataResponse::getMagnetometerDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getMagnetometerDataResponse)
}
getMagnetometerDataResponse::getMagnetometerDataResponse(const getMagnetometerDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMagnetometerDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.magdata_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.magdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_magdata().empty()) {
    _this->_impl_.magdata_.Set(from._internal_magdata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getMagnetometerDataResponse)
}

inline void getMagnetometerDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.magdata_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.magdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMagnetometerDataResponse::~getMagnetometerDataResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getMagnetometerDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMagnetometerDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.magdata_.Destroy();
}

void getMagnetometerDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMagnetometerDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getMagnetometerDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.magdata_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMagnetometerDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes magData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_magdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMagnetometerDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getMagnetometerDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes magData = 1;
  if (!this->_internal_magdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_magdata(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getMagnetometerDataResponse)
  return target;
}

size_t getMagnetometerDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getMagnetometerDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes magData = 1;
  if (!this->_internal_magdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_magdata());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMagnetometerDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMagnetometerDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMagnetometerDataResponse::GetClassData() const { return &_class_data_; }


void getMagnetometerDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMagnetometerDataResponse*>(&to_msg);
  auto& from = static_cast<const getMagnetometerDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getMagnetometerDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_magdata().empty()) {
    _this->_internal_set_magdata(from._internal_magdata());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMagnetometerDataResponse::CopyFrom(const getMagnetometerDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getMagnetometerDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMagnetometerDataResponse::IsInitialized() const {
  return true;
}

void getMagnetometerDataResponse::InternalSwap(getMagnetometerDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.magdata_, lhs_arena,
      &other->_impl_.magdata_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getMagnetometerDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[9]);
}

// ===================================================================

class getAllSensorsDataRequest::_Internal {
 public:
};

getAllSensorsDataRequest::getAllSensorsDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getAllSensorsDataRequest)
}
getAllSensorsDataRequest::getAllSensorsDataRequest(const getAllSensorsDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAllSensorsDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gyrodata_){}
    , decltype(_impl_.acceldata_){}
    , decltype(_impl_.magdata_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gyrodata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gyrodata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gyrodata().empty()) {
    _this->_impl_.gyrodata_.Set(from._internal_gyrodata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.acceldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceldata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acceldata().empty()) {
    _this->_impl_.acceldata_.Set(from._internal_acceldata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.magdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_magdata().empty()) {
    _this->_impl_.magdata_.Set(from._internal_magdata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getAllSensorsDataRequest)
}

inline void getAllSensorsDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gyrodata_){}
    , decltype(_impl_.acceldata_){}
    , decltype(_impl_.magdata_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gyrodata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gyrodata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.acceldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceldata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.magdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAllSensorsDataRequest::~getAllSensorsDataRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getAllSensorsDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAllSensorsDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gyrodata_.Destroy();
  _impl_.acceldata_.Destroy();
  _impl_.magdata_.Destroy();
}

void getAllSensorsDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAllSensorsDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getAllSensorsDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gyrodata_.ClearToEmpty();
  _impl_.acceldata_.ClearToEmpty();
  _impl_.magdata_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllSensorsDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes gyroData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gyrodata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes accelData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_acceldata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes magData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_magdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAllSensorsDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getAllSensorsDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes gyroData = 2;
  if (!this->_internal_gyrodata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_gyrodata(), target);
  }

  // bytes accelData = 3;
  if (!this->_internal_acceldata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_acceldata(), target);
  }

  // bytes magData = 4;
  if (!this->_internal_magdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_magdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getAllSensorsDataRequest)
  return target;
}

size_t getAllSensorsDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getAllSensorsDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gyroData = 2;
  if (!this->_internal_gyrodata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gyrodata());
  }

  // bytes accelData = 3;
  if (!this->_internal_acceldata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_acceldata());
  }

  // bytes magData = 4;
  if (!this->_internal_magdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_magdata());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAllSensorsDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAllSensorsDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAllSensorsDataRequest::GetClassData() const { return &_class_data_; }


void getAllSensorsDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAllSensorsDataRequest*>(&to_msg);
  auto& from = static_cast<const getAllSensorsDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getAllSensorsDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gyrodata().empty()) {
    _this->_internal_set_gyrodata(from._internal_gyrodata());
  }
  if (!from._internal_acceldata().empty()) {
    _this->_internal_set_acceldata(from._internal_acceldata());
  }
  if (!from._internal_magdata().empty()) {
    _this->_internal_set_magdata(from._internal_magdata());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAllSensorsDataRequest::CopyFrom(const getAllSensorsDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getAllSensorsDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllSensorsDataRequest::IsInitialized() const {
  return true;
}

void getAllSensorsDataRequest::InternalSwap(getAllSensorsDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gyrodata_, lhs_arena,
      &other->_impl_.gyrodata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.acceldata_, lhs_arena,
      &other->_impl_.acceldata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.magdata_, lhs_arena,
      &other->_impl_.magdata_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllSensorsDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[10]);
}

// ===================================================================

class getAllSensorsDataResponse::_Internal {
 public:
};

getAllSensorsDataResponse::getAllSensorsDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.getAllSensorsDataResponse)
}
getAllSensorsDataResponse::getAllSensorsDataResponse(const getAllSensorsDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAllSensorsDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gyrodata_){}
    , decltype(_impl_.acceldata_){}
    , decltype(_impl_.magdata_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gyrodata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gyrodata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gyrodata().empty()) {
    _this->_impl_.gyrodata_.Set(from._internal_gyrodata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.acceldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceldata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acceldata().empty()) {
    _this->_impl_.acceldata_.Set(from._internal_acceldata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.magdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_magdata().empty()) {
    _this->_impl_.magdata_.Set(from._internal_magdata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.getAllSensorsDataResponse)
}

inline void getAllSensorsDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gyrodata_){}
    , decltype(_impl_.acceldata_){}
    , decltype(_impl_.magdata_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gyrodata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gyrodata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.acceldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.acceldata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.magdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.magdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAllSensorsDataResponse::~getAllSensorsDataResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.getAllSensorsDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAllSensorsDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gyrodata_.Destroy();
  _impl_.acceldata_.Destroy();
  _impl_.magdata_.Destroy();
}

void getAllSensorsDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAllSensorsDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.getAllSensorsDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gyrodata_.ClearToEmpty();
  _impl_.acceldata_.ClearToEmpty();
  _impl_.magdata_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllSensorsDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes gyroData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gyrodata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes accelData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_acceldata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes magData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_magdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAllSensorsDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.getAllSensorsDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes gyroData = 1;
  if (!this->_internal_gyrodata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_gyrodata(), target);
  }

  // bytes accelData = 2;
  if (!this->_internal_acceldata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_acceldata(), target);
  }

  // bytes magData = 3;
  if (!this->_internal_magdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_magdata(), target);
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.getAllSensorsDataResponse)
  return target;
}

size_t getAllSensorsDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.getAllSensorsDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes gyroData = 1;
  if (!this->_internal_gyrodata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_gyrodata());
  }

  // bytes accelData = 2;
  if (!this->_internal_acceldata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_acceldata());
  }

  // bytes magData = 3;
  if (!this->_internal_magdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_magdata());
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAllSensorsDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAllSensorsDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAllSensorsDataResponse::GetClassData() const { return &_class_data_; }


void getAllSensorsDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAllSensorsDataResponse*>(&to_msg);
  auto& from = static_cast<const getAllSensorsDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.getAllSensorsDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gyrodata().empty()) {
    _this->_internal_set_gyrodata(from._internal_gyrodata());
  }
  if (!from._internal_acceldata().empty()) {
    _this->_internal_set_acceldata(from._internal_acceldata());
  }
  if (!from._internal_magdata().empty()) {
    _this->_internal_set_magdata(from._internal_magdata());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAllSensorsDataResponse::CopyFrom(const getAllSensorsDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.getAllSensorsDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllSensorsDataResponse::IsInitialized() const {
  return true;
}

void getAllSensorsDataResponse::InternalSwap(getAllSensorsDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gyrodata_, lhs_arena,
      &other->_impl_.gyrodata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.acceldata_, lhs_arena,
      &other->_impl_.acceldata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.magdata_, lhs_arena,
      &other->_impl_.magdata_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllSensorsDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[11]);
}

// ===================================================================

class isGyroscopeAvailableRequest::_Internal {
 public:
};

isGyroscopeAvailableRequest::isGyroscopeAvailableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isGyroscopeAvailableRequest)
}
isGyroscopeAvailableRequest::isGyroscopeAvailableRequest(const isGyroscopeAvailableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  isGyroscopeAvailableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isGyroscopeAvailableRequest)
}

inline void isGyroscopeAvailableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

isGyroscopeAvailableRequest::~isGyroscopeAvailableRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isGyroscopeAvailableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void isGyroscopeAvailableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void isGyroscopeAvailableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void isGyroscopeAvailableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isGyroscopeAvailableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isGyroscopeAvailableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* isGyroscopeAvailableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isGyroscopeAvailableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isGyroscopeAvailableRequest)
  return target;
}

size_t isGyroscopeAvailableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isGyroscopeAvailableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData isGyroscopeAvailableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    isGyroscopeAvailableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*isGyroscopeAvailableRequest::GetClassData() const { return &_class_data_; }


void isGyroscopeAvailableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<isGyroscopeAvailableRequest*>(&to_msg);
  auto& from = static_cast<const isGyroscopeAvailableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isGyroscopeAvailableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void isGyroscopeAvailableRequest::CopyFrom(const isGyroscopeAvailableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isGyroscopeAvailableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isGyroscopeAvailableRequest::IsInitialized() const {
  return true;
}

void isGyroscopeAvailableRequest::InternalSwap(isGyroscopeAvailableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isGyroscopeAvailableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[12]);
}

// ===================================================================

class isGyroscopeAvailableResponse::_Internal {
 public:
};

isGyroscopeAvailableResponse::isGyroscopeAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isGyroscopeAvailableResponse)
}
isGyroscopeAvailableResponse::isGyroscopeAvailableResponse(const isGyroscopeAvailableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  isGyroscopeAvailableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isGyroscopeAvailableResponse)
}

inline void isGyroscopeAvailableResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

isGyroscopeAvailableResponse::~isGyroscopeAvailableResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isGyroscopeAvailableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void isGyroscopeAvailableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void isGyroscopeAvailableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void isGyroscopeAvailableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isGyroscopeAvailableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isGyroscopeAvailableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* isGyroscopeAvailableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isGyroscopeAvailableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isGyroscopeAvailableResponse)
  return target;
}

size_t isGyroscopeAvailableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isGyroscopeAvailableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData isGyroscopeAvailableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    isGyroscopeAvailableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*isGyroscopeAvailableResponse::GetClassData() const { return &_class_data_; }


void isGyroscopeAvailableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<isGyroscopeAvailableResponse*>(&to_msg);
  auto& from = static_cast<const isGyroscopeAvailableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isGyroscopeAvailableResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void isGyroscopeAvailableResponse::CopyFrom(const isGyroscopeAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isGyroscopeAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isGyroscopeAvailableResponse::IsInitialized() const {
  return true;
}

void isGyroscopeAvailableResponse::InternalSwap(isGyroscopeAvailableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isGyroscopeAvailableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[13]);
}

// ===================================================================

class isAccelerometerAvailableRequest::_Internal {
 public:
};

isAccelerometerAvailableRequest::isAccelerometerAvailableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isAccelerometerAvailableRequest)
}
isAccelerometerAvailableRequest::isAccelerometerAvailableRequest(const isAccelerometerAvailableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  isAccelerometerAvailableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isAccelerometerAvailableRequest)
}

inline void isAccelerometerAvailableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

isAccelerometerAvailableRequest::~isAccelerometerAvailableRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isAccelerometerAvailableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void isAccelerometerAvailableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void isAccelerometerAvailableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void isAccelerometerAvailableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isAccelerometerAvailableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isAccelerometerAvailableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* isAccelerometerAvailableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isAccelerometerAvailableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isAccelerometerAvailableRequest)
  return target;
}

size_t isAccelerometerAvailableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isAccelerometerAvailableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData isAccelerometerAvailableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    isAccelerometerAvailableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*isAccelerometerAvailableRequest::GetClassData() const { return &_class_data_; }


void isAccelerometerAvailableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<isAccelerometerAvailableRequest*>(&to_msg);
  auto& from = static_cast<const isAccelerometerAvailableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isAccelerometerAvailableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void isAccelerometerAvailableRequest::CopyFrom(const isAccelerometerAvailableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isAccelerometerAvailableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isAccelerometerAvailableRequest::IsInitialized() const {
  return true;
}

void isAccelerometerAvailableRequest::InternalSwap(isAccelerometerAvailableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isAccelerometerAvailableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[14]);
}

// ===================================================================

class isAccelerometerAvailableResponse::_Internal {
 public:
};

isAccelerometerAvailableResponse::isAccelerometerAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isAccelerometerAvailableResponse)
}
isAccelerometerAvailableResponse::isAccelerometerAvailableResponse(const isAccelerometerAvailableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  isAccelerometerAvailableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isAccelerometerAvailableResponse)
}

inline void isAccelerometerAvailableResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

isAccelerometerAvailableResponse::~isAccelerometerAvailableResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isAccelerometerAvailableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void isAccelerometerAvailableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void isAccelerometerAvailableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void isAccelerometerAvailableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isAccelerometerAvailableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isAccelerometerAvailableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* isAccelerometerAvailableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isAccelerometerAvailableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isAccelerometerAvailableResponse)
  return target;
}

size_t isAccelerometerAvailableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isAccelerometerAvailableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData isAccelerometerAvailableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    isAccelerometerAvailableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*isAccelerometerAvailableResponse::GetClassData() const { return &_class_data_; }


void isAccelerometerAvailableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<isAccelerometerAvailableResponse*>(&to_msg);
  auto& from = static_cast<const isAccelerometerAvailableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isAccelerometerAvailableResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void isAccelerometerAvailableResponse::CopyFrom(const isAccelerometerAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isAccelerometerAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isAccelerometerAvailableResponse::IsInitialized() const {
  return true;
}

void isAccelerometerAvailableResponse::InternalSwap(isAccelerometerAvailableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isAccelerometerAvailableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[15]);
}

// ===================================================================

class isMagnetometerAvailableRequest::_Internal {
 public:
};

isMagnetometerAvailableRequest::isMagnetometerAvailableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isMagnetometerAvailableRequest)
}
isMagnetometerAvailableRequest::isMagnetometerAvailableRequest(const isMagnetometerAvailableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  isMagnetometerAvailableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isMagnetometerAvailableRequest)
}

inline void isMagnetometerAvailableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

isMagnetometerAvailableRequest::~isMagnetometerAvailableRequest() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isMagnetometerAvailableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void isMagnetometerAvailableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void isMagnetometerAvailableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void isMagnetometerAvailableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isMagnetometerAvailableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isMagnetometerAvailableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* isMagnetometerAvailableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isMagnetometerAvailableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isMagnetometerAvailableRequest)
  return target;
}

size_t isMagnetometerAvailableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isMagnetometerAvailableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData isMagnetometerAvailableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    isMagnetometerAvailableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*isMagnetometerAvailableRequest::GetClassData() const { return &_class_data_; }


void isMagnetometerAvailableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<isMagnetometerAvailableRequest*>(&to_msg);
  auto& from = static_cast<const isMagnetometerAvailableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isMagnetometerAvailableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void isMagnetometerAvailableRequest::CopyFrom(const isMagnetometerAvailableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isMagnetometerAvailableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isMagnetometerAvailableRequest::IsInitialized() const {
  return true;
}

void isMagnetometerAvailableRequest::InternalSwap(isMagnetometerAvailableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isMagnetometerAvailableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[16]);
}

// ===================================================================

class isMagnetometerAvailableResponse::_Internal {
 public:
};

isMagnetometerAvailableResponse::isMagnetometerAvailableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIIMU.isMagnetometerAvailableResponse)
}
isMagnetometerAvailableResponse::isMagnetometerAvailableResponse(const isMagnetometerAvailableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  isMagnetometerAvailableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIIMU.isMagnetometerAvailableResponse)
}

inline void isMagnetometerAvailableResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

isMagnetometerAvailableResponse::~isMagnetometerAvailableResponse() {
  // @@protoc_insertion_point(destructor:grpcIIMU.isMagnetometerAvailableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void isMagnetometerAvailableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void isMagnetometerAvailableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void isMagnetometerAvailableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIIMU.isMagnetometerAvailableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* isMagnetometerAvailableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* isMagnetometerAvailableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIIMU.isMagnetometerAvailableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIIMU.isMagnetometerAvailableResponse)
  return target;
}

size_t isMagnetometerAvailableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIIMU.isMagnetometerAvailableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData isMagnetometerAvailableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    isMagnetometerAvailableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*isMagnetometerAvailableResponse::GetClassData() const { return &_class_data_; }


void isMagnetometerAvailableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<isMagnetometerAvailableResponse*>(&to_msg);
  auto& from = static_cast<const isMagnetometerAvailableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIIMU.isMagnetometerAvailableResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void isMagnetometerAvailableResponse::CopyFrom(const isMagnetometerAvailableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIIMU.isMagnetometerAvailableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool isMagnetometerAvailableResponse::IsInitialized() const {
  return true;
}

void isMagnetometerAvailableResponse::InternalSwap(isMagnetometerAvailableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata isMagnetometerAvailableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIIMUService_2eproto_getter, &descriptor_table_grpcIIMUService_2eproto_once,
      file_level_metadata_grpcIIMUService_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIIMU
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIIMU::startRequest*
Arena::CreateMaybeMessage< ::grpcIIMU::startRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::startRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::startResponse*
Arena::CreateMaybeMessage< ::grpcIIMU::startResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::startResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::stopRequest*
Arena::CreateMaybeMessage< ::grpcIIMU::stopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::stopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::stopResponse*
Arena::CreateMaybeMessage< ::grpcIIMU::stopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::stopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getGyroscopeDataRequest*
Arena::CreateMaybeMessage< ::grpcIIMU::getGyroscopeDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getGyroscopeDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getGyroscopeDataResponse*
Arena::CreateMaybeMessage< ::grpcIIMU::getGyroscopeDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getGyroscopeDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getAccelerometerDataRequest*
Arena::CreateMaybeMessage< ::grpcIIMU::getAccelerometerDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getAccelerometerDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getAccelerometerDataResponse*
Arena::CreateMaybeMessage< ::grpcIIMU::getAccelerometerDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getAccelerometerDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getMagnetometerDataRequest*
Arena::CreateMaybeMessage< ::grpcIIMU::getMagnetometerDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getMagnetometerDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getMagnetometerDataResponse*
Arena::CreateMaybeMessage< ::grpcIIMU::getMagnetometerDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getMagnetometerDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getAllSensorsDataRequest*
Arena::CreateMaybeMessage< ::grpcIIMU::getAllSensorsDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getAllSensorsDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::getAllSensorsDataResponse*
Arena::CreateMaybeMessage< ::grpcIIMU::getAllSensorsDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::getAllSensorsDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isGyroscopeAvailableRequest*
Arena::CreateMaybeMessage< ::grpcIIMU::isGyroscopeAvailableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isGyroscopeAvailableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isGyroscopeAvailableResponse*
Arena::CreateMaybeMessage< ::grpcIIMU::isGyroscopeAvailableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isGyroscopeAvailableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isAccelerometerAvailableRequest*
Arena::CreateMaybeMessage< ::grpcIIMU::isAccelerometerAvailableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isAccelerometerAvailableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isAccelerometerAvailableResponse*
Arena::CreateMaybeMessage< ::grpcIIMU::isAccelerometerAvailableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isAccelerometerAvailableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isMagnetometerAvailableRequest*
Arena::CreateMaybeMessage< ::grpcIIMU::isMagnetometerAvailableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isMagnetometerAvailableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIIMU::isMagnetometerAvailableResponse*
Arena::CreateMaybeMessage< ::grpcIIMU::isMagnetometerAvailableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIIMU::isMagnetometerAvailableResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
