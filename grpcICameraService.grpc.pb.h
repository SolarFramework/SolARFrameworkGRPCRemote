// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcICameraService.proto
#ifndef GRPC_grpcICameraService_2eproto__INCLUDED
#define GRPC_grpcICameraService_2eproto__INCLUDED

#include "grpcICameraService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcICamera {

class grpcICameraService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcICamera.grpcICameraService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpcICamera::startResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpcICamera::stopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status getNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpcICamera::getNextImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getNextImageResponse>> AsyncgetNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getNextImageResponse>>(AsyncgetNextImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getNextImageResponse>> PrepareAsyncgetNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getNextImageResponse>>(PrepareAsyncgetNextImageRaw(context, request, cq));
    }
    virtual ::grpc::Status setResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetResolutionRaw(context, request, cq));
    }
    virtual ::grpc::Status setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetIntrinsicParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetIntrinsicParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status setDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetDistortionParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetDistortionParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status setParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpcICamera::getResolutionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getResolutionResponse>> AsyncgetResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getResolutionResponse>>(AsyncgetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getResolutionResponse>> PrepareAsyncgetResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getResolutionResponse>>(PrepareAsyncgetResolutionRaw(context, request, cq));
    }
    virtual ::grpc::Status getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpcICamera::getIntrinsicsParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getIntrinsicsParametersResponse>> AsyncgetIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getIntrinsicsParametersResponse>>(AsyncgetIntrinsicsParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getIntrinsicsParametersResponse>> PrepareAsyncgetIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getIntrinsicsParametersResponse>>(PrepareAsyncgetIntrinsicsParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpcICamera::getParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getParametersResponse>> AsyncgetParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getParametersResponse>>(AsyncgetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getParametersResponse>> PrepareAsyncgetParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getParametersResponse>>(PrepareAsyncgetParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpcICamera::getDistortionParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getDistortionParametersResponse>> AsyncgetDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getDistortionParametersResponse>>(AsyncgetDistortionParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getDistortionParametersResponse>> PrepareAsyncgetDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getDistortionParametersResponse>>(PrepareAsyncgetDistortionParametersRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void start(::grpc::ClientContext* context, const ::grpcICamera::startRequest* request, ::grpcICamera::startResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpcICamera::startRequest* request, ::grpcICamera::startResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest* request, ::grpcICamera::stopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest* request, ::grpcICamera::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest* request, ::grpcICamera::getNextImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest* request, ::grpcICamera::getNextImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest* request, ::grpcICamera::getResolutionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest* request, ::grpcICamera::getResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpcICamera::getIntrinsicsParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpcICamera::getIntrinsicsParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest* request, ::grpcICamera::getParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest* request, ::grpcICamera::getParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest* request, ::grpcICamera::getDistortionParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest* request, ::grpcICamera::getDistortionParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getNextImageResponse>* AsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getNextImageResponse>* PrepareAsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getResolutionResponse>* AsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getResolutionResponse>* PrepareAsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getIntrinsicsParametersResponse>* AsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getIntrinsicsParametersResponse>* PrepareAsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getParametersResponse>* AsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getParametersResponse>* PrepareAsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getDistortionParametersResponse>* AsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICamera::getDistortionParametersResponse>* PrepareAsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status start(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpcICamera::startResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpcICamera::stopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status getNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpcICamera::getNextImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getNextImageResponse>> AsyncgetNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getNextImageResponse>>(AsyncgetNextImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getNextImageResponse>> PrepareAsyncgetNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getNextImageResponse>>(PrepareAsyncgetNextImageRaw(context, request, cq));
    }
    ::grpc::Status setResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetResolutionRaw(context, request, cq));
    }
    ::grpc::Status setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetIntrinsicParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetIntrinsicParametersRaw(context, request, cq));
    }
    ::grpc::Status setDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetDistortionParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetDistortionParametersRaw(context, request, cq));
    }
    ::grpc::Status setParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetParametersRaw(context, request, cq));
    }
    ::grpc::Status getResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpcICamera::getResolutionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getResolutionResponse>> AsyncgetResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getResolutionResponse>>(AsyncgetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getResolutionResponse>> PrepareAsyncgetResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getResolutionResponse>>(PrepareAsyncgetResolutionRaw(context, request, cq));
    }
    ::grpc::Status getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpcICamera::getIntrinsicsParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getIntrinsicsParametersResponse>> AsyncgetIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getIntrinsicsParametersResponse>>(AsyncgetIntrinsicsParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getIntrinsicsParametersResponse>> PrepareAsyncgetIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getIntrinsicsParametersResponse>>(PrepareAsyncgetIntrinsicsParametersRaw(context, request, cq));
    }
    ::grpc::Status getParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpcICamera::getParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getParametersResponse>> AsyncgetParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getParametersResponse>>(AsyncgetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getParametersResponse>> PrepareAsyncgetParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getParametersResponse>>(PrepareAsyncgetParametersRaw(context, request, cq));
    }
    ::grpc::Status getDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpcICamera::getDistortionParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getDistortionParametersResponse>> AsyncgetDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getDistortionParametersResponse>>(AsyncgetDistortionParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getDistortionParametersResponse>> PrepareAsyncgetDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICamera::getDistortionParametersResponse>>(PrepareAsyncgetDistortionParametersRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void start(::grpc::ClientContext* context, const ::grpcICamera::startRequest* request, ::grpcICamera::startResponse* response, std::function<void(::grpc::Status)>) override;
      void start(::grpc::ClientContext* context, const ::grpcICamera::startRequest* request, ::grpcICamera::startResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void stop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest* request, ::grpcICamera::stopResponse* response, std::function<void(::grpc::Status)>) override;
      void stop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest* request, ::grpcICamera::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest* request, ::grpcICamera::getNextImageResponse* response, std::function<void(::grpc::Status)>) override;
      void getNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest* request, ::grpcICamera::getNextImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest* request, ::grpcICamera::getResolutionResponse* response, std::function<void(::grpc::Status)>) override;
      void getResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest* request, ::grpcICamera::getResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpcICamera::getIntrinsicsParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpcICamera::getIntrinsicsParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest* request, ::grpcICamera::getParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void getParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest* request, ::grpcICamera::getParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest* request, ::grpcICamera::getDistortionParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void getDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest* request, ::grpcICamera::getDistortionParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getNextImageResponse>* AsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getNextImageResponse>* PrepareAsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getResolutionResponse>* AsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getResolutionResponse>* PrepareAsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getIntrinsicsParametersResponse>* AsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getIntrinsicsParametersResponse>* PrepareAsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getParametersResponse>* AsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getParametersResponse>* PrepareAsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getDistortionParametersResponse>* AsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICamera::getDistortionParametersResponse>* PrepareAsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_getNextImage_;
    const ::grpc::internal::RpcMethod rpcmethod_setResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_setIntrinsicParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_setDistortionParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_setParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_getIntrinsicsParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getDistortionParameters_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::grpcICamera::startRequest* request, ::grpcICamera::startResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::grpcICamera::stopRequest* request, ::grpcICamera::stopResponse* response);
    virtual ::grpc::Status getNextImage(::grpc::ServerContext* context, const ::grpcICamera::getNextImageRequest* request, ::grpcICamera::getNextImageResponse* response);
    virtual ::grpc::Status setResolution(::grpc::ServerContext* context, const ::grpcICamera::setResolutionRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* context, const ::grpcICamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status setDistortionParameters(::grpc::ServerContext* context, const ::grpcICamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status setParameters(::grpc::ServerContext* context, const ::grpcICamera::setParametersRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status getResolution(::grpc::ServerContext* context, const ::grpcICamera::getResolutionRequest* request, ::grpcICamera::getResolutionResponse* response);
    virtual ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* context, const ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpcICamera::getIntrinsicsParametersResponse* response);
    virtual ::grpc::Status getParameters(::grpc::ServerContext* context, const ::grpcICamera::getParametersRequest* request, ::grpcICamera::getParametersResponse* response);
    virtual ::grpc::Status getDistortionParameters(::grpc::ServerContext* context, const ::grpcICamera::getDistortionParametersRequest* request, ::grpcICamera::getDistortionParametersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcICamera::startRequest* /*request*/, ::grpcICamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpcICamera::startRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcICamera::startResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcICamera::stopRequest* /*request*/, ::grpcICamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpcICamera::stopRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcICamera::stopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNextImage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcICamera::getNextImageRequest* /*request*/, ::grpcICamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextImage(::grpc::ServerContext* context, ::grpcICamera::getNextImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcICamera::getNextImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setResolution() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetResolution(::grpc::ServerContext* context, ::grpcICamera::setResolutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetIntrinsicParameters(::grpc::ServerContext* context, ::grpcICamera::setIntrinsicParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDistortionParameters(::grpc::ServerContext* context, ::grpcICamera::setDistortionParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setParameters() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetParameters(::grpc::ServerContext* context, ::grpcICamera::setParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getResolution() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::getResolutionRequest* /*request*/, ::grpcICamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetResolution(::grpc::ServerContext* context, ::grpcICamera::getResolutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcICamera::getResolutionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getIntrinsicsParametersRequest* /*request*/, ::grpcICamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIntrinsicsParameters(::grpc::ServerContext* context, ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcICamera::getIntrinsicsParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getParameters() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getParametersRequest* /*request*/, ::grpcICamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetParameters(::grpc::ServerContext* context, ::grpcICamera::getParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcICamera::getParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getDistortionParametersRequest* /*request*/, ::grpcICamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDistortionParameters(::grpc::ServerContext* context, ::grpcICamera::getDistortionParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcICamera::getDistortionParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_getNextImage<WithAsyncMethod_setResolution<WithAsyncMethod_setIntrinsicParameters<WithAsyncMethod_setDistortionParameters<WithAsyncMethod_setParameters<WithAsyncMethod_getResolution<WithAsyncMethod_getIntrinsicsParameters<WithAsyncMethod_getParameters<WithAsyncMethod_getDistortionParameters<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_start() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::startRequest, ::grpcICamera::startResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::startRequest* request, ::grpcICamera::startResponse* response) { return this->start(context, request, response); }));}
    void SetMessageAllocatorFor_start(
        ::grpc::MessageAllocator< ::grpcICamera::startRequest, ::grpcICamera::startResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::startRequest, ::grpcICamera::startResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcICamera::startRequest* /*request*/, ::grpcICamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::startRequest* /*request*/, ::grpcICamera::startResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stop() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::stopRequest, ::grpcICamera::stopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::stopRequest* request, ::grpcICamera::stopResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::MessageAllocator< ::grpcICamera::stopRequest, ::grpcICamera::stopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::stopRequest, ::grpcICamera::stopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcICamera::stopRequest* /*request*/, ::grpcICamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::stopRequest* /*request*/, ::grpcICamera::stopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getNextImage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getNextImageRequest, ::grpcICamera::getNextImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::getNextImageRequest* request, ::grpcICamera::getNextImageResponse* response) { return this->getNextImage(context, request, response); }));}
    void SetMessageAllocatorFor_getNextImage(
        ::grpc::MessageAllocator< ::grpcICamera::getNextImageRequest, ::grpcICamera::getNextImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getNextImageRequest, ::grpcICamera::getNextImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcICamera::getNextImageRequest* /*request*/, ::grpcICamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNextImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::getNextImageRequest* /*request*/, ::grpcICamera::getNextImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setResolution() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::setResolutionRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::setResolutionRequest* request, ::google::protobuf::Empty* response) { return this->setResolution(context, request, response); }));}
    void SetMessageAllocatorFor_setResolution(
        ::grpc::MessageAllocator< ::grpcICamera::setResolutionRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::setResolutionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response) { return this->setIntrinsicParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setIntrinsicParameters(
        ::grpc::MessageAllocator< ::grpcICamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setIntrinsicParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::setDistortionParametersRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response) { return this->setDistortionParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setDistortionParameters(
        ::grpc::MessageAllocator< ::grpcICamera::setDistortionParametersRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::setDistortionParametersRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setDistortionParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setParameters() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::setParametersRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::setParametersRequest* request, ::google::protobuf::Empty* response) { return this->setParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setParameters(
        ::grpc::MessageAllocator< ::grpcICamera::setParametersRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::setParametersRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getResolution() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getResolutionRequest, ::grpcICamera::getResolutionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::getResolutionRequest* request, ::grpcICamera::getResolutionResponse* response) { return this->getResolution(context, request, response); }));}
    void SetMessageAllocatorFor_getResolution(
        ::grpc::MessageAllocator< ::grpcICamera::getResolutionRequest, ::grpcICamera::getResolutionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getResolutionRequest, ::grpcICamera::getResolutionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::getResolutionRequest* /*request*/, ::grpcICamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::getResolutionRequest* /*request*/, ::grpcICamera::getResolutionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getIntrinsicsParametersRequest, ::grpcICamera::getIntrinsicsParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpcICamera::getIntrinsicsParametersResponse* response) { return this->getIntrinsicsParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getIntrinsicsParameters(
        ::grpc::MessageAllocator< ::grpcICamera::getIntrinsicsParametersRequest, ::grpcICamera::getIntrinsicsParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getIntrinsicsParametersRequest, ::grpcICamera::getIntrinsicsParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getIntrinsicsParametersRequest* /*request*/, ::grpcICamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getIntrinsicsParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::getIntrinsicsParametersRequest* /*request*/, ::grpcICamera::getIntrinsicsParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getParameters() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getParametersRequest, ::grpcICamera::getParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::getParametersRequest* request, ::grpcICamera::getParametersResponse* response) { return this->getParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getParameters(
        ::grpc::MessageAllocator< ::grpcICamera::getParametersRequest, ::grpcICamera::getParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getParametersRequest, ::grpcICamera::getParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getParametersRequest* /*request*/, ::grpcICamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::getParametersRequest* /*request*/, ::grpcICamera::getParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getDistortionParametersRequest, ::grpcICamera::getDistortionParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICamera::getDistortionParametersRequest* request, ::grpcICamera::getDistortionParametersResponse* response) { return this->getDistortionParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getDistortionParameters(
        ::grpc::MessageAllocator< ::grpcICamera::getDistortionParametersRequest, ::grpcICamera::getDistortionParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICamera::getDistortionParametersRequest, ::grpcICamera::getDistortionParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getDistortionParametersRequest* /*request*/, ::grpcICamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDistortionParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICamera::getDistortionParametersRequest* /*request*/, ::grpcICamera::getDistortionParametersResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_start<WithCallbackMethod_stop<WithCallbackMethod_getNextImage<WithCallbackMethod_setResolution<WithCallbackMethod_setIntrinsicParameters<WithCallbackMethod_setDistortionParameters<WithCallbackMethod_setParameters<WithCallbackMethod_getResolution<WithCallbackMethod_getIntrinsicsParameters<WithCallbackMethod_getParameters<WithCallbackMethod_getDistortionParameters<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcICamera::startRequest* /*request*/, ::grpcICamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcICamera::stopRequest* /*request*/, ::grpcICamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNextImage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcICamera::getNextImageRequest* /*request*/, ::grpcICamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setResolution() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setParameters() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getResolution() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::getResolutionRequest* /*request*/, ::grpcICamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getIntrinsicsParametersRequest* /*request*/, ::grpcICamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getParameters() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getParametersRequest* /*request*/, ::grpcICamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getDistortionParametersRequest* /*request*/, ::grpcICamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcICamera::startRequest* /*request*/, ::grpcICamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcICamera::stopRequest* /*request*/, ::grpcICamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNextImage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcICamera::getNextImageRequest* /*request*/, ::grpcICamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setResolution() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetIntrinsicParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDistortionParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setParameters() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getResolution() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::getResolutionRequest* /*request*/, ::grpcICamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getIntrinsicsParametersRequest* /*request*/, ::grpcICamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIntrinsicsParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getParameters() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getParametersRequest* /*request*/, ::grpcICamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getDistortionParametersRequest* /*request*/, ::grpcICamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDistortionParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_start() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start(context, request, response); }));
    }
    ~WithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcICamera::startRequest* /*request*/, ::grpcICamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stop() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcICamera::stopRequest* /*request*/, ::grpcICamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getNextImage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNextImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcICamera::getNextImageRequest* /*request*/, ::grpcICamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getNextImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setResolution() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setResolution(context, request, response); }));
    }
    ~WithRawCallbackMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setIntrinsicParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setIntrinsicParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDistortionParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setDistortionParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setParameters() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getResolution() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getResolution(context, request, response); }));
    }
    ~WithRawCallbackMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::getResolutionRequest* /*request*/, ::grpcICamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getIntrinsicsParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getIntrinsicsParametersRequest* /*request*/, ::grpcICamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getIntrinsicsParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getParameters() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getParametersRequest* /*request*/, ::grpcICamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDistortionParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getDistortionParametersRequest* /*request*/, ::grpcICamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDistortionParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::startRequest, ::grpcICamera::startResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::startRequest, ::grpcICamera::startResponse>* streamer) {
                       return this->Streamedstart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcICamera::startRequest* /*request*/, ::grpcICamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::startRequest,::grpcICamera::startResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::stopRequest, ::grpcICamera::stopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::stopRequest, ::grpcICamera::stopResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcICamera::stopRequest* /*request*/, ::grpcICamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::stopRequest,::grpcICamera::stopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNextImage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::getNextImageRequest, ::grpcICamera::getNextImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::getNextImageRequest, ::grpcICamera::getNextImageResponse>* streamer) {
                       return this->StreamedgetNextImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcICamera::getNextImageRequest* /*request*/, ::grpcICamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNextImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::getNextImageRequest,::grpcICamera::getNextImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setResolution() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::setResolutionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::setResolutionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::setResolutionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetIntrinsicParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetIntrinsicParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::setIntrinsicParametersRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::setDistortionParametersRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::setDistortionParametersRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetDistortionParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDistortionParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::setDistortionParametersRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setParameters() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::setParametersRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::setParametersRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::setParametersRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getResolution() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::getResolutionRequest, ::grpcICamera::getResolutionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::getResolutionRequest, ::grpcICamera::getResolutionResponse>* streamer) {
                       return this->StreamedgetResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcICamera::getResolutionRequest* /*request*/, ::grpcICamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::getResolutionRequest,::grpcICamera::getResolutionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::getIntrinsicsParametersRequest, ::grpcICamera::getIntrinsicsParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::getIntrinsicsParametersRequest, ::grpcICamera::getIntrinsicsParametersResponse>* streamer) {
                       return this->StreamedgetIntrinsicsParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getIntrinsicsParametersRequest* /*request*/, ::grpcICamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetIntrinsicsParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::getIntrinsicsParametersRequest,::grpcICamera::getIntrinsicsParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getParameters() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::getParametersRequest, ::grpcICamera::getParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::getParametersRequest, ::grpcICamera::getParametersResponse>* streamer) {
                       return this->StreamedgetParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getParametersRequest* /*request*/, ::grpcICamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::getParametersRequest,::grpcICamera::getParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICamera::getDistortionParametersRequest, ::grpcICamera::getDistortionParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICamera::getDistortionParametersRequest, ::grpcICamera::getDistortionParametersResponse>* streamer) {
                       return this->StreamedgetDistortionParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcICamera::getDistortionParametersRequest* /*request*/, ::grpcICamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDistortionParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICamera::getDistortionParametersRequest,::grpcICamera::getDistortionParametersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getNextImage<WithStreamedUnaryMethod_setResolution<WithStreamedUnaryMethod_setIntrinsicParameters<WithStreamedUnaryMethod_setDistortionParameters<WithStreamedUnaryMethod_setParameters<WithStreamedUnaryMethod_getResolution<WithStreamedUnaryMethod_getIntrinsicsParameters<WithStreamedUnaryMethod_getParameters<WithStreamedUnaryMethod_getDistortionParameters<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getNextImage<WithStreamedUnaryMethod_setResolution<WithStreamedUnaryMethod_setIntrinsicParameters<WithStreamedUnaryMethod_setDistortionParameters<WithStreamedUnaryMethod_setParameters<WithStreamedUnaryMethod_getResolution<WithStreamedUnaryMethod_getIntrinsicsParameters<WithStreamedUnaryMethod_getParameters<WithStreamedUnaryMethod_getDistortionParameters<Service > > > > > > > > > > > StreamedService;
};

}  // namespace grpcICamera


#endif  // GRPC_grpcICameraService_2eproto__INCLUDED
