// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcISemanticSegmentationService.proto

#include "grpcISemanticSegmentationService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcISemanticSegmentation {
PROTOBUF_CONSTEXPR segmentRequest::segmentRequest(
    ::_pbi::ConstantInitialized)
  : image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mask_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct segmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR segmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~segmentRequestDefaultTypeInternal() {}
  union {
    segmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 segmentRequestDefaultTypeInternal _segmentRequest_default_instance_;
PROTOBUF_CONSTEXPR segmentResponse::segmentResponse(
    ::_pbi::ConstantInitialized)
  : mask_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct segmentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR segmentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~segmentResponseDefaultTypeInternal() {}
  union {
    segmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 segmentResponseDefaultTypeInternal _segmentResponse_default_instance_;
}  // namespace grpcISemanticSegmentation
static ::_pb::Metadata file_level_metadata_grpcISemanticSegmentationService_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcISemanticSegmentationService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcISemanticSegmentationService_2eproto = nullptr;

const uint32_t TableStruct_grpcISemanticSegmentationService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcISemanticSegmentation::segmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcISemanticSegmentation::segmentRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcISemanticSegmentation::segmentRequest, image_),
  PROTOBUF_FIELD_OFFSET(::grpcISemanticSegmentation::segmentRequest, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcISemanticSegmentation::segmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcISemanticSegmentation::segmentResponse, mask_),
  PROTOBUF_FIELD_OFFSET(::grpcISemanticSegmentation::segmentResponse, xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcISemanticSegmentation::segmentRequest)},
  { 9, -1, -1, sizeof(::grpcISemanticSegmentation::segmentResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcISemanticSegmentation::_segmentRequest_default_instance_._instance,
  &::grpcISemanticSegmentation::_segmentResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcISemanticSegmentationService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&grpcISemanticSegmentationService.proto"
  "\022\031grpcISemanticSegmentation\032\033google/prot"
  "obuf/empty.proto\"R\n\016segmentRequest\022#\n\033gr"
  "pcServerCompressionFormat\030\001 \001(\005\022\r\n\005image"
  "\030\002 \001(\014\022\014\n\004mask\030\003 \001(\014\"<\n\017segmentResponse\022"
  "\014\n\004mask\030\001 \001(\014\022\033\n\023xpcfGrpcReturnValue\030\002 \001"
  "(\0212\206\001\n grpcISemanticSegmentationService\022"
  "b\n\007segment\022).grpcISemanticSegmentation.s"
  "egmentRequest\032*.grpcISemanticSegmentatio"
  "n.segmentResponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcISemanticSegmentationService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcISemanticSegmentationService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcISemanticSegmentationService_2eproto = {
    false, false, 387, descriptor_table_protodef_grpcISemanticSegmentationService_2eproto,
    "grpcISemanticSegmentationService.proto",
    &descriptor_table_grpcISemanticSegmentationService_2eproto_once, descriptor_table_grpcISemanticSegmentationService_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_grpcISemanticSegmentationService_2eproto::offsets,
    file_level_metadata_grpcISemanticSegmentationService_2eproto, file_level_enum_descriptors_grpcISemanticSegmentationService_2eproto,
    file_level_service_descriptors_grpcISemanticSegmentationService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcISemanticSegmentationService_2eproto_getter() {
  return &descriptor_table_grpcISemanticSegmentationService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcISemanticSegmentationService_2eproto(&descriptor_table_grpcISemanticSegmentationService_2eproto);
namespace grpcISemanticSegmentation {

// ===================================================================

class segmentRequest::_Internal {
 public:
};

segmentRequest::segmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcISemanticSegmentation.segmentRequest)
}
segmentRequest::segmentRequest(const segmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mask().empty()) {
    mask_.Set(from._internal_mask(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcISemanticSegmentation.segmentRequest)
}

inline void segmentRequest::SharedCtor() {
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mask_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mask_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

segmentRequest::~segmentRequest() {
  // @@protoc_insertion_point(destructor:grpcISemanticSegmentation.segmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void segmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_.Destroy();
  mask_.Destroy();
}

void segmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void segmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcISemanticSegmentation.segmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmpty();
  mask_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* segmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mask();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* segmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcISemanticSegmentation.segmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  // bytes mask = 3;
  if (!this->_internal_mask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcISemanticSegmentation.segmentRequest)
  return target;
}

size_t segmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcISemanticSegmentation.segmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // bytes mask = 3;
  if (!this->_internal_mask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mask());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData segmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    segmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*segmentRequest::GetClassData() const { return &_class_data_; }

void segmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<segmentRequest *>(to)->MergeFrom(
      static_cast<const segmentRequest &>(from));
}


void segmentRequest::MergeFrom(const segmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcISemanticSegmentation.segmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_mask().empty()) {
    _internal_set_mask(from._internal_mask());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void segmentRequest::CopyFrom(const segmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcISemanticSegmentation.segmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool segmentRequest::IsInitialized() const {
  return true;
}

void segmentRequest::InternalSwap(segmentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mask_, lhs_arena,
      &other->mask_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata segmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcISemanticSegmentationService_2eproto_getter, &descriptor_table_grpcISemanticSegmentationService_2eproto_once,
      file_level_metadata_grpcISemanticSegmentationService_2eproto[0]);
}

// ===================================================================

class segmentResponse::_Internal {
 public:
};

segmentResponse::segmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcISemanticSegmentation.segmentResponse)
}
segmentResponse::segmentResponse(const segmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mask().empty()) {
    mask_.Set(from._internal_mask(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcISemanticSegmentation.segmentResponse)
}

inline void segmentResponse::SharedCtor() {
mask_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mask_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

segmentResponse::~segmentResponse() {
  // @@protoc_insertion_point(destructor:grpcISemanticSegmentation.segmentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void segmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mask_.Destroy();
}

void segmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void segmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcISemanticSegmentation.segmentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mask_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* segmentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mask();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* segmentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcISemanticSegmentation.segmentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes mask = 1;
  if (!this->_internal_mask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mask(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcISemanticSegmentation.segmentResponse)
  return target;
}

size_t segmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcISemanticSegmentation.segmentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mask = 1;
  if (!this->_internal_mask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mask());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData segmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    segmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*segmentResponse::GetClassData() const { return &_class_data_; }

void segmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<segmentResponse *>(to)->MergeFrom(
      static_cast<const segmentResponse &>(from));
}


void segmentResponse::MergeFrom(const segmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcISemanticSegmentation.segmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mask().empty()) {
    _internal_set_mask(from._internal_mask());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void segmentResponse::CopyFrom(const segmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcISemanticSegmentation.segmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool segmentResponse::IsInitialized() const {
  return true;
}

void segmentResponse::InternalSwap(segmentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mask_, lhs_arena,
      &other->mask_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata segmentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcISemanticSegmentationService_2eproto_getter, &descriptor_table_grpcISemanticSegmentationService_2eproto_once,
      file_level_metadata_grpcISemanticSegmentationService_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcISemanticSegmentation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcISemanticSegmentation::segmentRequest*
Arena::CreateMaybeMessage< ::grpcISemanticSegmentation::segmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcISemanticSegmentation::segmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcISemanticSegmentation::segmentResponse*
Arena::CreateMaybeMessage< ::grpcISemanticSegmentation::segmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcISemanticSegmentation::segmentResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
