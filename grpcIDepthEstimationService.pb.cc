// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIDepthEstimationService.proto

#include "grpcIDepthEstimationService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIDepthEstimation {
PROTOBUF_CONSTEXPR estimateRequest::estimateRequest(
    ::_pbi::ConstantInitialized)
  : matches_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rectkeypoints1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rectkeypoints2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0)
  , focal_(0)
  , baseline_(0){}
struct estimateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR estimateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~estimateRequestDefaultTypeInternal() {}
  union {
    estimateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 estimateRequestDefaultTypeInternal _estimateRequest_default_instance_;
PROTOBUF_CONSTEXPR estimateResponse::estimateResponse(
    ::_pbi::ConstantInitialized)
  : rectkeypoints1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rectkeypoints2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct estimateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR estimateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~estimateResponseDefaultTypeInternal() {}
  union {
    estimateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 estimateResponseDefaultTypeInternal _estimateResponse_default_instance_;
}  // namespace grpcIDepthEstimation
static ::_pb::Metadata file_level_metadata_grpcIDepthEstimationService_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIDepthEstimationService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIDepthEstimationService_2eproto = nullptr;

const uint32_t TableStruct_grpcIDepthEstimationService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateRequest, matches_),
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateRequest, focal_),
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateRequest, baseline_),
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateRequest, type_),
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateRequest, rectkeypoints1_),
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateRequest, rectkeypoints2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateResponse, rectkeypoints1_),
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateResponse, rectkeypoints2_),
  PROTOBUF_FIELD_OFFSET(::grpcIDepthEstimation::estimateResponse, xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIDepthEstimation::estimateRequest)},
  { 13, -1, -1, sizeof(::grpcIDepthEstimation::estimateResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIDepthEstimation::_estimateRequest_default_instance_._instance,
  &::grpcIDepthEstimation::_estimateResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIDepthEstimationService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!grpcIDepthEstimationService.proto\022\024grp"
  "cIDepthEstimation\032\033google/protobuf/empty"
  ".proto\"\246\001\n\017estimateRequest\022#\n\033grpcServer"
  "CompressionFormat\030\001 \001(\005\022\017\n\007matches\030\002 \001(\014"
  "\022\r\n\005focal\030\003 \001(\002\022\020\n\010baseline\030\004 \001(\002\022\014\n\004typ"
  "e\030\005 \001(\014\022\026\n\016rectKeypoints1\030\006 \001(\014\022\026\n\016rectK"
  "eypoints2\030\007 \001(\014\"_\n\020estimateResponse\022\026\n\016r"
  "ectKeypoints1\030\001 \001(\014\022\026\n\016rectKeypoints2\030\002 "
  "\001(\014\022\033\n\023xpcfGrpcReturnValue\030\003 \001(\0212z\n\033grpc"
  "IDepthEstimationService\022[\n\010estimate\022%.gr"
  "pcIDepthEstimation.estimateRequest\032&.grp"
  "cIDepthEstimation.estimateResponse\"\000b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIDepthEstimationService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIDepthEstimationService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIDepthEstimationService_2eproto = {
    false, false, 484, descriptor_table_protodef_grpcIDepthEstimationService_2eproto,
    "grpcIDepthEstimationService.proto",
    &descriptor_table_grpcIDepthEstimationService_2eproto_once, descriptor_table_grpcIDepthEstimationService_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_grpcIDepthEstimationService_2eproto::offsets,
    file_level_metadata_grpcIDepthEstimationService_2eproto, file_level_enum_descriptors_grpcIDepthEstimationService_2eproto,
    file_level_service_descriptors_grpcIDepthEstimationService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIDepthEstimationService_2eproto_getter() {
  return &descriptor_table_grpcIDepthEstimationService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIDepthEstimationService_2eproto(&descriptor_table_grpcIDepthEstimationService_2eproto);
namespace grpcIDepthEstimation {

// ===================================================================

class estimateRequest::_Internal {
 public:
};

estimateRequest::estimateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIDepthEstimation.estimateRequest)
}
estimateRequest::estimateRequest(const estimateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    matches_.Set(from._internal_matches(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  rectkeypoints1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rectkeypoints1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectkeypoints1().empty()) {
    rectkeypoints1_.Set(from._internal_rectkeypoints1(), 
      GetArenaForAllocation());
  }
  rectkeypoints2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rectkeypoints2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectkeypoints2().empty()) {
    rectkeypoints2_.Set(from._internal_rectkeypoints2(), 
      GetArenaForAllocation());
  }
  ::memcpy(&grpcservercompressionformat_, &from.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&baseline_) -
    reinterpret_cast<char*>(&grpcservercompressionformat_)) + sizeof(baseline_));
  // @@protoc_insertion_point(copy_constructor:grpcIDepthEstimation.estimateRequest)
}

inline void estimateRequest::SharedCtor() {
matches_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  matches_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rectkeypoints1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rectkeypoints1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rectkeypoints2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rectkeypoints2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&grpcservercompressionformat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&baseline_) -
    reinterpret_cast<char*>(&grpcservercompressionformat_)) + sizeof(baseline_));
}

estimateRequest::~estimateRequest() {
  // @@protoc_insertion_point(destructor:grpcIDepthEstimation.estimateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void estimateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  matches_.Destroy();
  type_.Destroy();
  rectkeypoints1_.Destroy();
  rectkeypoints2_.Destroy();
}

void estimateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void estimateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIDepthEstimation.estimateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.ClearToEmpty();
  type_.ClearToEmpty();
  rectkeypoints1_.ClearToEmpty();
  rectkeypoints2_.ClearToEmpty();
  ::memset(&grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baseline_) -
      reinterpret_cast<char*>(&grpcservercompressionformat_)) + sizeof(baseline_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* estimateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes matches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float focal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          focal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float baseline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          baseline_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bytes type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rectKeypoints1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_rectkeypoints1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rectKeypoints2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rectkeypoints2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* estimateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIDepthEstimation.estimateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes matches = 2;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_matches(), target);
  }

  // float focal = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_focal = this->_internal_focal();
  uint32_t raw_focal;
  memcpy(&raw_focal, &tmp_focal, sizeof(tmp_focal));
  if (raw_focal != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_focal(), target);
  }

  // float baseline = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_baseline = this->_internal_baseline();
  uint32_t raw_baseline;
  memcpy(&raw_baseline, &tmp_baseline, sizeof(tmp_baseline));
  if (raw_baseline != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_baseline(), target);
  }

  // bytes type = 5;
  if (!this->_internal_type().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_type(), target);
  }

  // bytes rectKeypoints1 = 6;
  if (!this->_internal_rectkeypoints1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_rectkeypoints1(), target);
  }

  // bytes rectKeypoints2 = 7;
  if (!this->_internal_rectkeypoints2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_rectkeypoints2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIDepthEstimation.estimateRequest)
  return target;
}

size_t estimateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIDepthEstimation.estimateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes matches = 2;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // bytes type = 5;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_type());
  }

  // bytes rectKeypoints1 = 6;
  if (!this->_internal_rectkeypoints1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectkeypoints1());
  }

  // bytes rectKeypoints2 = 7;
  if (!this->_internal_rectkeypoints2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectkeypoints2());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // float focal = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_focal = this->_internal_focal();
  uint32_t raw_focal;
  memcpy(&raw_focal, &tmp_focal, sizeof(tmp_focal));
  if (raw_focal != 0) {
    total_size += 1 + 4;
  }

  // float baseline = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_baseline = this->_internal_baseline();
  uint32_t raw_baseline;
  memcpy(&raw_baseline, &tmp_baseline, sizeof(tmp_baseline));
  if (raw_baseline != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData estimateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    estimateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*estimateRequest::GetClassData() const { return &_class_data_; }

void estimateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<estimateRequest *>(to)->MergeFrom(
      static_cast<const estimateRequest &>(from));
}


void estimateRequest::MergeFrom(const estimateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIDepthEstimation.estimateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_matches().empty()) {
    _internal_set_matches(from._internal_matches());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_rectkeypoints1().empty()) {
    _internal_set_rectkeypoints1(from._internal_rectkeypoints1());
  }
  if (!from._internal_rectkeypoints2().empty()) {
    _internal_set_rectkeypoints2(from._internal_rectkeypoints2());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_focal = from._internal_focal();
  uint32_t raw_focal;
  memcpy(&raw_focal, &tmp_focal, sizeof(tmp_focal));
  if (raw_focal != 0) {
    _internal_set_focal(from._internal_focal());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_baseline = from._internal_baseline();
  uint32_t raw_baseline;
  memcpy(&raw_baseline, &tmp_baseline, sizeof(tmp_baseline));
  if (raw_baseline != 0) {
    _internal_set_baseline(from._internal_baseline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void estimateRequest::CopyFrom(const estimateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIDepthEstimation.estimateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estimateRequest::IsInitialized() const {
  return true;
}

void estimateRequest::InternalSwap(estimateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &matches_, lhs_arena,
      &other->matches_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rectkeypoints1_, lhs_arena,
      &other->rectkeypoints1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rectkeypoints2_, lhs_arena,
      &other->rectkeypoints2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(estimateRequest, baseline_)
      + sizeof(estimateRequest::baseline_)
      - PROTOBUF_FIELD_OFFSET(estimateRequest, grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata estimateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIDepthEstimationService_2eproto_getter, &descriptor_table_grpcIDepthEstimationService_2eproto_once,
      file_level_metadata_grpcIDepthEstimationService_2eproto[0]);
}

// ===================================================================

class estimateResponse::_Internal {
 public:
};

estimateResponse::estimateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIDepthEstimation.estimateResponse)
}
estimateResponse::estimateResponse(const estimateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rectkeypoints1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rectkeypoints1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectkeypoints1().empty()) {
    rectkeypoints1_.Set(from._internal_rectkeypoints1(), 
      GetArenaForAllocation());
  }
  rectkeypoints2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rectkeypoints2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectkeypoints2().empty()) {
    rectkeypoints2_.Set(from._internal_rectkeypoints2(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIDepthEstimation.estimateResponse)
}

inline void estimateResponse::SharedCtor() {
rectkeypoints1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rectkeypoints1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rectkeypoints2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rectkeypoints2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

estimateResponse::~estimateResponse() {
  // @@protoc_insertion_point(destructor:grpcIDepthEstimation.estimateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void estimateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rectkeypoints1_.Destroy();
  rectkeypoints2_.Destroy();
}

void estimateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void estimateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIDepthEstimation.estimateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rectkeypoints1_.ClearToEmpty();
  rectkeypoints2_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* estimateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes rectKeypoints1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rectkeypoints1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rectKeypoints2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rectkeypoints2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* estimateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIDepthEstimation.estimateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes rectKeypoints1 = 1;
  if (!this->_internal_rectkeypoints1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_rectkeypoints1(), target);
  }

  // bytes rectKeypoints2 = 2;
  if (!this->_internal_rectkeypoints2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_rectkeypoints2(), target);
  }

  // sint32 xpcfGrpcReturnValue = 3;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIDepthEstimation.estimateResponse)
  return target;
}

size_t estimateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIDepthEstimation.estimateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes rectKeypoints1 = 1;
  if (!this->_internal_rectkeypoints1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectkeypoints1());
  }

  // bytes rectKeypoints2 = 2;
  if (!this->_internal_rectkeypoints2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectkeypoints2());
  }

  // sint32 xpcfGrpcReturnValue = 3;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData estimateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    estimateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*estimateResponse::GetClassData() const { return &_class_data_; }

void estimateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<estimateResponse *>(to)->MergeFrom(
      static_cast<const estimateResponse &>(from));
}


void estimateResponse::MergeFrom(const estimateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIDepthEstimation.estimateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rectkeypoints1().empty()) {
    _internal_set_rectkeypoints1(from._internal_rectkeypoints1());
  }
  if (!from._internal_rectkeypoints2().empty()) {
    _internal_set_rectkeypoints2(from._internal_rectkeypoints2());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void estimateResponse::CopyFrom(const estimateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIDepthEstimation.estimateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estimateResponse::IsInitialized() const {
  return true;
}

void estimateResponse::InternalSwap(estimateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rectkeypoints1_, lhs_arena,
      &other->rectkeypoints1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rectkeypoints2_, lhs_arena,
      &other->rectkeypoints2_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata estimateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIDepthEstimationService_2eproto_getter, &descriptor_table_grpcIDepthEstimationService_2eproto_once,
      file_level_metadata_grpcIDepthEstimationService_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIDepthEstimation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIDepthEstimation::estimateRequest*
Arena::CreateMaybeMessage< ::grpcIDepthEstimation::estimateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIDepthEstimation::estimateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIDepthEstimation::estimateResponse*
Arena::CreateMaybeMessage< ::grpcIDepthEstimation::estimateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIDepthEstimation::estimateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
