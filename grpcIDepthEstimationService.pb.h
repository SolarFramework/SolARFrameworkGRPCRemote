// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIDepthEstimationService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIDepthEstimationService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIDepthEstimationService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIDepthEstimationService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIDepthEstimationService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIDepthEstimationService_2eproto;
namespace grpcIDepthEstimation {
class estimateRequest;
struct estimateRequestDefaultTypeInternal;
extern estimateRequestDefaultTypeInternal _estimateRequest_default_instance_;
class estimateResponse;
struct estimateResponseDefaultTypeInternal;
extern estimateResponseDefaultTypeInternal _estimateResponse_default_instance_;
}  // namespace grpcIDepthEstimation
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIDepthEstimation::estimateRequest* Arena::CreateMaybeMessage<::grpcIDepthEstimation::estimateRequest>(Arena*);
template<> ::grpcIDepthEstimation::estimateResponse* Arena::CreateMaybeMessage<::grpcIDepthEstimation::estimateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIDepthEstimation {

// ===================================================================

class estimateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthEstimation.estimateRequest) */ {
 public:
  inline estimateRequest() : estimateRequest(nullptr) {}
  ~estimateRequest() override;
  explicit PROTOBUF_CONSTEXPR estimateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimateRequest(const estimateRequest& from);
  estimateRequest(estimateRequest&& from) noexcept
    : estimateRequest() {
    *this = ::std::move(from);
  }

  inline estimateRequest& operator=(const estimateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimateRequest& operator=(estimateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimateRequest* internal_default_instance() {
    return reinterpret_cast<const estimateRequest*>(
               &_estimateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(estimateRequest& a, estimateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(estimateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const estimateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthEstimation.estimateRequest";
  }
  protected:
  explicit estimateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 2,
    kTypeFieldNumber = 5,
    kRectKeypoints1FieldNumber = 6,
    kRectKeypoints2FieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kFocalFieldNumber = 3,
    kBaselineFieldNumber = 4,
  };
  // bytes matches = 2;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes type = 5;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes rectKeypoints1 = 6;
  void clear_rectkeypoints1();
  const std::string& rectkeypoints1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectkeypoints1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectkeypoints1();
  PROTOBUF_NODISCARD std::string* release_rectkeypoints1();
  void set_allocated_rectkeypoints1(std::string* rectkeypoints1);
  private:
  const std::string& _internal_rectkeypoints1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectkeypoints1(const std::string& value);
  std::string* _internal_mutable_rectkeypoints1();
  public:

  // bytes rectKeypoints2 = 7;
  void clear_rectkeypoints2();
  const std::string& rectkeypoints2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectkeypoints2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectkeypoints2();
  PROTOBUF_NODISCARD std::string* release_rectkeypoints2();
  void set_allocated_rectkeypoints2(std::string* rectkeypoints2);
  private:
  const std::string& _internal_rectkeypoints2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectkeypoints2(const std::string& value);
  std::string* _internal_mutable_rectkeypoints2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // float focal = 3;
  void clear_focal();
  float focal() const;
  void set_focal(float value);
  private:
  float _internal_focal() const;
  void _internal_set_focal(float value);
  public:

  // float baseline = 4;
  void clear_baseline();
  float baseline() const;
  void set_baseline(float value);
  private:
  float _internal_baseline() const;
  void _internal_set_baseline(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthEstimation.estimateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectkeypoints1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectkeypoints2_;
  int32_t grpcservercompressionformat_;
  float focal_;
  float baseline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthEstimationService_2eproto;
};
// -------------------------------------------------------------------

class estimateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDepthEstimation.estimateResponse) */ {
 public:
  inline estimateResponse() : estimateResponse(nullptr) {}
  ~estimateResponse() override;
  explicit PROTOBUF_CONSTEXPR estimateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimateResponse(const estimateResponse& from);
  estimateResponse(estimateResponse&& from) noexcept
    : estimateResponse() {
    *this = ::std::move(from);
  }

  inline estimateResponse& operator=(const estimateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimateResponse& operator=(estimateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimateResponse* internal_default_instance() {
    return reinterpret_cast<const estimateResponse*>(
               &_estimateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(estimateResponse& a, estimateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(estimateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const estimateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDepthEstimation.estimateResponse";
  }
  protected:
  explicit estimateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectKeypoints1FieldNumber = 1,
    kRectKeypoints2FieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes rectKeypoints1 = 1;
  void clear_rectkeypoints1();
  const std::string& rectkeypoints1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectkeypoints1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectkeypoints1();
  PROTOBUF_NODISCARD std::string* release_rectkeypoints1();
  void set_allocated_rectkeypoints1(std::string* rectkeypoints1);
  private:
  const std::string& _internal_rectkeypoints1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectkeypoints1(const std::string& value);
  std::string* _internal_mutable_rectkeypoints1();
  public:

  // bytes rectKeypoints2 = 2;
  void clear_rectkeypoints2();
  const std::string& rectkeypoints2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectkeypoints2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectkeypoints2();
  PROTOBUF_NODISCARD std::string* release_rectkeypoints2();
  void set_allocated_rectkeypoints2(std::string* rectkeypoints2);
  private:
  const std::string& _internal_rectkeypoints2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectkeypoints2(const std::string& value);
  std::string* _internal_mutable_rectkeypoints2();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDepthEstimation.estimateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectkeypoints1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectkeypoints2_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDepthEstimationService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// estimateRequest

// int32 grpcServerCompressionFormat = 1;
inline void estimateRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t estimateRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t estimateRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void estimateRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void estimateRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateRequest.grpcServerCompressionFormat)
}

// bytes matches = 2;
inline void estimateRequest::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& estimateRequest::matches() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateRequest.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimateRequest::set_matches(ArgT0&& arg0, ArgT... args) {
 
 matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateRequest.matches)
}
inline std::string* estimateRequest::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcIDepthEstimation.estimateRequest.matches)
  return _s;
}
inline const std::string& estimateRequest::_internal_matches() const {
  return matches_.Get();
}
inline void estimateRequest::_internal_set_matches(const std::string& value) {
  
  matches_.Set(value, GetArenaForAllocation());
}
inline std::string* estimateRequest::_internal_mutable_matches() {
  
  return matches_.Mutable(GetArenaForAllocation());
}
inline std::string* estimateRequest::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIDepthEstimation.estimateRequest.matches)
  return matches_.Release();
}
inline void estimateRequest::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (matches_.IsDefault()) {
    matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthEstimation.estimateRequest.matches)
}

// float focal = 3;
inline void estimateRequest::clear_focal() {
  focal_ = 0;
}
inline float estimateRequest::_internal_focal() const {
  return focal_;
}
inline float estimateRequest::focal() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateRequest.focal)
  return _internal_focal();
}
inline void estimateRequest::_internal_set_focal(float value) {
  
  focal_ = value;
}
inline void estimateRequest::set_focal(float value) {
  _internal_set_focal(value);
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateRequest.focal)
}

// float baseline = 4;
inline void estimateRequest::clear_baseline() {
  baseline_ = 0;
}
inline float estimateRequest::_internal_baseline() const {
  return baseline_;
}
inline float estimateRequest::baseline() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateRequest.baseline)
  return _internal_baseline();
}
inline void estimateRequest::_internal_set_baseline(float value) {
  
  baseline_ = value;
}
inline void estimateRequest::set_baseline(float value) {
  _internal_set_baseline(value);
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateRequest.baseline)
}

// bytes type = 5;
inline void estimateRequest::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& estimateRequest::type() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateRequest.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimateRequest::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateRequest.type)
}
inline std::string* estimateRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:grpcIDepthEstimation.estimateRequest.type)
  return _s;
}
inline const std::string& estimateRequest::_internal_type() const {
  return type_.Get();
}
inline void estimateRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* estimateRequest::_internal_mutable_type() {
  
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* estimateRequest::release_type() {
  // @@protoc_insertion_point(field_release:grpcIDepthEstimation.estimateRequest.type)
  return type_.Release();
}
inline void estimateRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthEstimation.estimateRequest.type)
}

// bytes rectKeypoints1 = 6;
inline void estimateRequest::clear_rectkeypoints1() {
  rectkeypoints1_.ClearToEmpty();
}
inline const std::string& estimateRequest::rectkeypoints1() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateRequest.rectKeypoints1)
  return _internal_rectkeypoints1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimateRequest::set_rectkeypoints1(ArgT0&& arg0, ArgT... args) {
 
 rectkeypoints1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateRequest.rectKeypoints1)
}
inline std::string* estimateRequest::mutable_rectkeypoints1() {
  std::string* _s = _internal_mutable_rectkeypoints1();
  // @@protoc_insertion_point(field_mutable:grpcIDepthEstimation.estimateRequest.rectKeypoints1)
  return _s;
}
inline const std::string& estimateRequest::_internal_rectkeypoints1() const {
  return rectkeypoints1_.Get();
}
inline void estimateRequest::_internal_set_rectkeypoints1(const std::string& value) {
  
  rectkeypoints1_.Set(value, GetArenaForAllocation());
}
inline std::string* estimateRequest::_internal_mutable_rectkeypoints1() {
  
  return rectkeypoints1_.Mutable(GetArenaForAllocation());
}
inline std::string* estimateRequest::release_rectkeypoints1() {
  // @@protoc_insertion_point(field_release:grpcIDepthEstimation.estimateRequest.rectKeypoints1)
  return rectkeypoints1_.Release();
}
inline void estimateRequest::set_allocated_rectkeypoints1(std::string* rectkeypoints1) {
  if (rectkeypoints1 != nullptr) {
    
  } else {
    
  }
  rectkeypoints1_.SetAllocated(rectkeypoints1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectkeypoints1_.IsDefault()) {
    rectkeypoints1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthEstimation.estimateRequest.rectKeypoints1)
}

// bytes rectKeypoints2 = 7;
inline void estimateRequest::clear_rectkeypoints2() {
  rectkeypoints2_.ClearToEmpty();
}
inline const std::string& estimateRequest::rectkeypoints2() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateRequest.rectKeypoints2)
  return _internal_rectkeypoints2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimateRequest::set_rectkeypoints2(ArgT0&& arg0, ArgT... args) {
 
 rectkeypoints2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateRequest.rectKeypoints2)
}
inline std::string* estimateRequest::mutable_rectkeypoints2() {
  std::string* _s = _internal_mutable_rectkeypoints2();
  // @@protoc_insertion_point(field_mutable:grpcIDepthEstimation.estimateRequest.rectKeypoints2)
  return _s;
}
inline const std::string& estimateRequest::_internal_rectkeypoints2() const {
  return rectkeypoints2_.Get();
}
inline void estimateRequest::_internal_set_rectkeypoints2(const std::string& value) {
  
  rectkeypoints2_.Set(value, GetArenaForAllocation());
}
inline std::string* estimateRequest::_internal_mutable_rectkeypoints2() {
  
  return rectkeypoints2_.Mutable(GetArenaForAllocation());
}
inline std::string* estimateRequest::release_rectkeypoints2() {
  // @@protoc_insertion_point(field_release:grpcIDepthEstimation.estimateRequest.rectKeypoints2)
  return rectkeypoints2_.Release();
}
inline void estimateRequest::set_allocated_rectkeypoints2(std::string* rectkeypoints2) {
  if (rectkeypoints2 != nullptr) {
    
  } else {
    
  }
  rectkeypoints2_.SetAllocated(rectkeypoints2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectkeypoints2_.IsDefault()) {
    rectkeypoints2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthEstimation.estimateRequest.rectKeypoints2)
}

// -------------------------------------------------------------------

// estimateResponse

// bytes rectKeypoints1 = 1;
inline void estimateResponse::clear_rectkeypoints1() {
  rectkeypoints1_.ClearToEmpty();
}
inline const std::string& estimateResponse::rectkeypoints1() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateResponse.rectKeypoints1)
  return _internal_rectkeypoints1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimateResponse::set_rectkeypoints1(ArgT0&& arg0, ArgT... args) {
 
 rectkeypoints1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateResponse.rectKeypoints1)
}
inline std::string* estimateResponse::mutable_rectkeypoints1() {
  std::string* _s = _internal_mutable_rectkeypoints1();
  // @@protoc_insertion_point(field_mutable:grpcIDepthEstimation.estimateResponse.rectKeypoints1)
  return _s;
}
inline const std::string& estimateResponse::_internal_rectkeypoints1() const {
  return rectkeypoints1_.Get();
}
inline void estimateResponse::_internal_set_rectkeypoints1(const std::string& value) {
  
  rectkeypoints1_.Set(value, GetArenaForAllocation());
}
inline std::string* estimateResponse::_internal_mutable_rectkeypoints1() {
  
  return rectkeypoints1_.Mutable(GetArenaForAllocation());
}
inline std::string* estimateResponse::release_rectkeypoints1() {
  // @@protoc_insertion_point(field_release:grpcIDepthEstimation.estimateResponse.rectKeypoints1)
  return rectkeypoints1_.Release();
}
inline void estimateResponse::set_allocated_rectkeypoints1(std::string* rectkeypoints1) {
  if (rectkeypoints1 != nullptr) {
    
  } else {
    
  }
  rectkeypoints1_.SetAllocated(rectkeypoints1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectkeypoints1_.IsDefault()) {
    rectkeypoints1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthEstimation.estimateResponse.rectKeypoints1)
}

// bytes rectKeypoints2 = 2;
inline void estimateResponse::clear_rectkeypoints2() {
  rectkeypoints2_.ClearToEmpty();
}
inline const std::string& estimateResponse::rectkeypoints2() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateResponse.rectKeypoints2)
  return _internal_rectkeypoints2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimateResponse::set_rectkeypoints2(ArgT0&& arg0, ArgT... args) {
 
 rectkeypoints2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateResponse.rectKeypoints2)
}
inline std::string* estimateResponse::mutable_rectkeypoints2() {
  std::string* _s = _internal_mutable_rectkeypoints2();
  // @@protoc_insertion_point(field_mutable:grpcIDepthEstimation.estimateResponse.rectKeypoints2)
  return _s;
}
inline const std::string& estimateResponse::_internal_rectkeypoints2() const {
  return rectkeypoints2_.Get();
}
inline void estimateResponse::_internal_set_rectkeypoints2(const std::string& value) {
  
  rectkeypoints2_.Set(value, GetArenaForAllocation());
}
inline std::string* estimateResponse::_internal_mutable_rectkeypoints2() {
  
  return rectkeypoints2_.Mutable(GetArenaForAllocation());
}
inline std::string* estimateResponse::release_rectkeypoints2() {
  // @@protoc_insertion_point(field_release:grpcIDepthEstimation.estimateResponse.rectKeypoints2)
  return rectkeypoints2_.Release();
}
inline void estimateResponse::set_allocated_rectkeypoints2(std::string* rectkeypoints2) {
  if (rectkeypoints2 != nullptr) {
    
  } else {
    
  }
  rectkeypoints2_.SetAllocated(rectkeypoints2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rectkeypoints2_.IsDefault()) {
    rectkeypoints2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDepthEstimation.estimateResponse.rectKeypoints2)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void estimateResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t estimateResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t estimateResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDepthEstimation.estimateResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void estimateResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void estimateResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDepthEstimation.estimateResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIDepthEstimation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIDepthEstimationService_2eproto
