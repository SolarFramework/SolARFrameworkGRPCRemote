// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIFrontEndService.proto

#include "grpcIFrontEndService.pb.h"
#include "grpcIFrontEndService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIFrontEnd {

static const char* grpcIFrontEndService_method_names[] = {
  "/grpcIFrontEnd.grpcIFrontEndService/registerClient",
  "/grpcIFrontEnd.grpcIFrontEndService/unregisterClient",
  "/grpcIFrontEnd.grpcIFrontEndService/getAllClientsUUID",
  "/grpcIFrontEnd.grpcIFrontEndService/getDeviceInfo",
  "/grpcIFrontEnd.grpcIFrontEndService/init_grpc0",
  "/grpcIFrontEnd.grpcIFrontEndService/init_grpc1",
  "/grpcIFrontEnd.grpcIFrontEndService/start",
  "/grpcIFrontEnd.grpcIFrontEndService/stop",
  "/grpcIFrontEnd.grpcIFrontEndService/getProcessingMode",
  "/grpcIFrontEnd.grpcIFrontEndService/setCameraParameters_grpc0",
  "/grpcIFrontEnd.grpcIFrontEndService/setCameraParameters_grpc1",
  "/grpcIFrontEnd.grpcIFrontEndService/setRectificationParameters",
  "/grpcIFrontEnd.grpcIFrontEndService/getCameraParameters",
  "/grpcIFrontEnd.grpcIFrontEndService/relocalizeProcessRequest_grpc0",
  "/grpcIFrontEnd.grpcIFrontEndService/relocalizeProcessRequest_grpc1",
  "/grpcIFrontEnd.grpcIFrontEndService/get3DTransformRequest",
  "/grpcIFrontEnd.grpcIFrontEndService/getMappingDataRequest",
  "/grpcIFrontEnd.grpcIFrontEndService/getLastPose",
  "/grpcIFrontEnd.grpcIFrontEndService/createMap",
  "/grpcIFrontEnd.grpcIFrontEndService/deleteMap",
  "/grpcIFrontEnd.grpcIFrontEndService/getAllMapsUUID",
  "/grpcIFrontEnd.grpcIFrontEndService/getMapRequest",
  "/grpcIFrontEnd.grpcIFrontEndService/setMapRequest",
  "/grpcIFrontEnd.grpcIFrontEndService/getPointCloudRequest",
};

std::unique_ptr< grpcIFrontEndService::Stub> grpcIFrontEndService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIFrontEndService::Stub> stub(new grpcIFrontEndService::Stub(channel, options));
  return stub;
}

grpcIFrontEndService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_registerClient_(grpcIFrontEndService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unregisterClient_(grpcIFrontEndService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllClientsUUID_(grpcIFrontEndService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDeviceInfo_(grpcIFrontEndService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_init_grpc0_(grpcIFrontEndService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_init_grpc1_(grpcIFrontEndService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_(grpcIFrontEndService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIFrontEndService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getProcessingMode_(grpcIFrontEndService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setCameraParameters_grpc0_(grpcIFrontEndService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setCameraParameters_grpc1_(grpcIFrontEndService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setRectificationParameters_(grpcIFrontEndService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCameraParameters_(grpcIFrontEndService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_relocalizeProcessRequest_grpc0_(grpcIFrontEndService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_relocalizeProcessRequest_grpc1_(grpcIFrontEndService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get3DTransformRequest_(grpcIFrontEndService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMappingDataRequest_(grpcIFrontEndService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getLastPose_(grpcIFrontEndService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createMap_(grpcIFrontEndService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteMap_(grpcIFrontEndService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllMapsUUID_(grpcIFrontEndService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMapRequest_(grpcIFrontEndService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setMapRequest_(grpcIFrontEndService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPointCloudRequest_(grpcIFrontEndService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIFrontEndService::Stub::registerClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpcIFrontEnd::registerClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::registerClientRequest, ::grpcIFrontEnd::registerClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerClient_, context, request, response);
}

void grpcIFrontEndService::Stub::async::registerClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest* request, ::grpcIFrontEnd::registerClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::registerClientRequest, ::grpcIFrontEnd::registerClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerClient_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::registerClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest* request, ::grpcIFrontEnd::registerClientResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::registerClientResponse>* grpcIFrontEndService::Stub::PrepareAsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::registerClientResponse, ::grpcIFrontEnd::registerClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::registerClientResponse>* grpcIFrontEndService::Stub::AsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::unregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpcIFrontEnd::unregisterClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::unregisterClientRequest, ::grpcIFrontEnd::unregisterClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregisterClient_, context, request, response);
}

void grpcIFrontEndService::Stub::async::unregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest* request, ::grpcIFrontEnd::unregisterClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::unregisterClientRequest, ::grpcIFrontEnd::unregisterClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterClient_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::unregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest* request, ::grpcIFrontEnd::unregisterClientResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::unregisterClientResponse>* grpcIFrontEndService::Stub::PrepareAsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::unregisterClientResponse, ::grpcIFrontEnd::unregisterClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregisterClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::unregisterClientResponse>* grpcIFrontEndService::Stub::AsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregisterClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::getAllClientsUUIDRequest, ::grpcIFrontEnd::getAllClientsUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllClientsUUID_, context, request, response);
}

void grpcIFrontEndService::Stub::async::getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::getAllClientsUUIDRequest, ::grpcIFrontEnd::getAllClientsUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllClientsUUID_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllClientsUUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllClientsUUIDResponse>* grpcIFrontEndService::Stub::PrepareAsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::getAllClientsUUIDResponse, ::grpcIFrontEnd::getAllClientsUUIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllClientsUUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllClientsUUIDResponse>* grpcIFrontEndService::Stub::AsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllClientsUUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::getDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpcIFrontEnd::getDeviceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::getDeviceInfoRequest, ::grpcIFrontEnd::getDeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDeviceInfo_, context, request, response);
}

void grpcIFrontEndService::Stub::async::getDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpcIFrontEnd::getDeviceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::getDeviceInfoRequest, ::grpcIFrontEnd::getDeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceInfo_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::getDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpcIFrontEnd::getDeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDeviceInfoResponse>* grpcIFrontEndService::Stub::PrepareAsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::getDeviceInfoResponse, ::grpcIFrontEnd::getDeviceInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDeviceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDeviceInfoResponse>* grpcIFrontEndService::Stub::AsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDeviceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::init_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpcIFrontEnd::init_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::init_grpc0Request, ::grpcIFrontEnd::init_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_grpc0_, context, request, response);
}

void grpcIFrontEndService::Stub::async::init_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request* request, ::grpcIFrontEnd::init_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::init_grpc0Request, ::grpcIFrontEnd::init_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_grpc0_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::init_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request* request, ::grpcIFrontEnd::init_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc0Response>* grpcIFrontEndService::Stub::PrepareAsyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::init_grpc0Response, ::grpcIFrontEnd::init_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc0Response>* grpcIFrontEndService::Stub::Asyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinit_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::init_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpcIFrontEnd::init_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::init_grpc1Request, ::grpcIFrontEnd::init_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_grpc1_, context, request, response);
}

void grpcIFrontEndService::Stub::async::init_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request* request, ::grpcIFrontEnd::init_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::init_grpc1Request, ::grpcIFrontEnd::init_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_grpc1_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::init_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request* request, ::grpcIFrontEnd::init_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc1Response>* grpcIFrontEndService::Stub::PrepareAsyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::init_grpc1Response, ::grpcIFrontEnd::init_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc1Response>* grpcIFrontEndService::Stub::Asyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinit_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::start(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpcIFrontEnd::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::startRequest, ::grpcIFrontEnd::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIFrontEndService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest* request, ::grpcIFrontEnd::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::startRequest, ::grpcIFrontEnd::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest* request, ::grpcIFrontEnd::startResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::startResponse>* grpcIFrontEndService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::startResponse, ::grpcIFrontEnd::startRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::startResponse>* grpcIFrontEndService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::stop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpcIFrontEnd::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::stopRequest, ::grpcIFrontEnd::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIFrontEndService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest* request, ::grpcIFrontEnd::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::stopRequest, ::grpcIFrontEnd::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest* request, ::grpcIFrontEnd::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::stopResponse>* grpcIFrontEndService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::stopResponse, ::grpcIFrontEnd::stopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::stopResponse>* grpcIFrontEndService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::getProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpcIFrontEnd::getProcessingModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::getProcessingModeRequest, ::grpcIFrontEnd::getProcessingModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getProcessingMode_, context, request, response);
}

void grpcIFrontEndService::Stub::async::getProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpcIFrontEnd::getProcessingModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::getProcessingModeRequest, ::grpcIFrontEnd::getProcessingModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getProcessingMode_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::getProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpcIFrontEnd::getProcessingModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getProcessingMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getProcessingModeResponse>* grpcIFrontEndService::Stub::PrepareAsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::getProcessingModeResponse, ::grpcIFrontEnd::getProcessingModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getProcessingMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getProcessingModeResponse>* grpcIFrontEndService::Stub::AsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetProcessingModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::setCameraParameters_grpc0Request, ::grpcIFrontEnd::setCameraParameters_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCameraParameters_grpc0_, context, request, response);
}

void grpcIFrontEndService::Stub::async::setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::setCameraParameters_grpc0Request, ::grpcIFrontEnd::setCameraParameters_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_grpc0_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc0Response>* grpcIFrontEndService::Stub::PrepareAsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::setCameraParameters_grpc0Response, ::grpcIFrontEnd::setCameraParameters_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCameraParameters_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc0Response>* grpcIFrontEndService::Stub::AsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCameraParameters_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::setCameraParameters_grpc1Request, ::grpcIFrontEnd::setCameraParameters_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCameraParameters_grpc1_, context, request, response);
}

void grpcIFrontEndService::Stub::async::setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::setCameraParameters_grpc1Request, ::grpcIFrontEnd::setCameraParameters_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_grpc1_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc1Response>* grpcIFrontEndService::Stub::PrepareAsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::setCameraParameters_grpc1Response, ::grpcIFrontEnd::setCameraParameters_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCameraParameters_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc1Response>* grpcIFrontEndService::Stub::AsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCameraParameters_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::setRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpcIFrontEnd::setRectificationParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::setRectificationParametersRequest, ::grpcIFrontEnd::setRectificationParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setRectificationParameters_, context, request, response);
}

void grpcIFrontEndService::Stub::async::setRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpcIFrontEnd::setRectificationParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::setRectificationParametersRequest, ::grpcIFrontEnd::setRectificationParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRectificationParameters_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::setRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpcIFrontEnd::setRectificationParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRectificationParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setRectificationParametersResponse>* grpcIFrontEndService::Stub::PrepareAsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::setRectificationParametersResponse, ::grpcIFrontEnd::setRectificationParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setRectificationParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setRectificationParametersResponse>* grpcIFrontEndService::Stub::AsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetRectificationParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::getCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpcIFrontEnd::getCameraParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::getCameraParametersRequest, ::grpcIFrontEnd::getCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCameraParameters_, context, request, response);
}

void grpcIFrontEndService::Stub::async::getCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpcIFrontEnd::getCameraParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::getCameraParametersRequest, ::grpcIFrontEnd::getCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::getCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpcIFrontEnd::getCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getCameraParametersResponse>* grpcIFrontEndService::Stub::PrepareAsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::getCameraParametersResponse, ::grpcIFrontEnd::getCameraParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getCameraParametersResponse>* grpcIFrontEndService::Stub::AsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_relocalizeProcessRequest_grpc0_, context, request, response);
}

void grpcIFrontEndService::Stub::async::relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalizeProcessRequest_grpc0_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalizeProcessRequest_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* grpcIFrontEndService::Stub::PrepareAsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_relocalizeProcessRequest_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* grpcIFrontEndService::Stub::AsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_relocalizeProcessRequest_grpc1_, context, request, response);
}

void grpcIFrontEndService::Stub::async::relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalizeProcessRequest_grpc1_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalizeProcessRequest_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* grpcIFrontEndService::Stub::PrepareAsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_relocalizeProcessRequest_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* grpcIFrontEndService::Stub::AsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpcIFrontEnd::get3DTransformRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::get3DTransformRequestRequest, ::grpcIFrontEnd::get3DTransformRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get3DTransformRequest_, context, request, response);
}

void grpcIFrontEndService::Stub::async::get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpcIFrontEnd::get3DTransformRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::get3DTransformRequestRequest, ::grpcIFrontEnd::get3DTransformRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get3DTransformRequest_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpcIFrontEnd::get3DTransformRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get3DTransformRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::get3DTransformRequestResponse>* grpcIFrontEndService::Stub::PrepareAsyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::get3DTransformRequestResponse, ::grpcIFrontEnd::get3DTransformRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get3DTransformRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::get3DTransformRequestResponse>* grpcIFrontEndService::Stub::Asyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget3DTransformRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpcIFrontEnd::getMappingDataRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::getMappingDataRequestRequest, ::grpcIFrontEnd::getMappingDataRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMappingDataRequest_, context, request, response);
}

void grpcIFrontEndService::Stub::async::getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpcIFrontEnd::getMappingDataRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::getMappingDataRequestRequest, ::grpcIFrontEnd::getMappingDataRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMappingDataRequest_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpcIFrontEnd::getMappingDataRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMappingDataRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMappingDataRequestResponse>* grpcIFrontEndService::Stub::PrepareAsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::getMappingDataRequestResponse, ::grpcIFrontEnd::getMappingDataRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMappingDataRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMappingDataRequestResponse>* grpcIFrontEndService::Stub::AsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMappingDataRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::getLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpcIFrontEnd::getLastPoseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::getLastPoseRequest, ::grpcIFrontEnd::getLastPoseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLastPose_, context, request, response);
}

void grpcIFrontEndService::Stub::async::getLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest* request, ::grpcIFrontEnd::getLastPoseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::getLastPoseRequest, ::grpcIFrontEnd::getLastPoseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLastPose_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::getLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest* request, ::grpcIFrontEnd::getLastPoseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLastPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getLastPoseResponse>* grpcIFrontEndService::Stub::PrepareAsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::getLastPoseResponse, ::grpcIFrontEnd::getLastPoseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLastPose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getLastPoseResponse>* grpcIFrontEndService::Stub::AsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLastPoseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::createMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpcIFrontEnd::createMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::createMapRequest, ::grpcIFrontEnd::createMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createMap_, context, request, response);
}

void grpcIFrontEndService::Stub::async::createMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest* request, ::grpcIFrontEnd::createMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::createMapRequest, ::grpcIFrontEnd::createMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createMap_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::createMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest* request, ::grpcIFrontEnd::createMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::createMapResponse>* grpcIFrontEndService::Stub::PrepareAsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::createMapResponse, ::grpcIFrontEnd::createMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::createMapResponse>* grpcIFrontEndService::Stub::AsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::deleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpcIFrontEnd::deleteMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::deleteMapRequest, ::grpcIFrontEnd::deleteMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deleteMap_, context, request, response);
}

void grpcIFrontEndService::Stub::async::deleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest* request, ::grpcIFrontEnd::deleteMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::deleteMapRequest, ::grpcIFrontEnd::deleteMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteMap_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::deleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest* request, ::grpcIFrontEnd::deleteMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::deleteMapResponse>* grpcIFrontEndService::Stub::PrepareAsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::deleteMapResponse, ::grpcIFrontEnd::deleteMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deleteMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::deleteMapResponse>* grpcIFrontEndService::Stub::AsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeleteMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::getAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::getAllMapsUUIDRequest, ::grpcIFrontEnd::getAllMapsUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllMapsUUID_, context, request, response);
}

void grpcIFrontEndService::Stub::async::getAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::getAllMapsUUIDRequest, ::grpcIFrontEnd::getAllMapsUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllMapsUUID_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::getAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllMapsUUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllMapsUUIDResponse>* grpcIFrontEndService::Stub::PrepareAsyncgetAllMapsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::getAllMapsUUIDResponse, ::grpcIFrontEnd::getAllMapsUUIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllMapsUUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllMapsUUIDResponse>* grpcIFrontEndService::Stub::AsyncgetAllMapsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllMapsUUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::getMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpcIFrontEnd::getMapRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::getMapRequestRequest, ::grpcIFrontEnd::getMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMapRequest_, context, request, response);
}

void grpcIFrontEndService::Stub::async::getMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest* request, ::grpcIFrontEnd::getMapRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::getMapRequestRequest, ::grpcIFrontEnd::getMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMapRequest_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::getMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest* request, ::grpcIFrontEnd::getMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMapRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMapRequestResponse>* grpcIFrontEndService::Stub::PrepareAsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::getMapRequestResponse, ::grpcIFrontEnd::getMapRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMapRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMapRequestResponse>* grpcIFrontEndService::Stub::AsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMapRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::setMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpcIFrontEnd::setMapRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::setMapRequestRequest, ::grpcIFrontEnd::setMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setMapRequest_, context, request, response);
}

void grpcIFrontEndService::Stub::async::setMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest* request, ::grpcIFrontEnd::setMapRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::setMapRequestRequest, ::grpcIFrontEnd::setMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMapRequest_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::setMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest* request, ::grpcIFrontEnd::setMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMapRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setMapRequestResponse>* grpcIFrontEndService::Stub::PrepareAsyncsetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::setMapRequestResponse, ::grpcIFrontEnd::setMapRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setMapRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setMapRequestResponse>* grpcIFrontEndService::Stub::AsyncsetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetMapRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIFrontEndService::Stub::getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpcIFrontEnd::getPointCloudRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIFrontEnd::getPointCloudRequestRequest, ::grpcIFrontEnd::getPointCloudRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPointCloudRequest_, context, request, response);
}

void grpcIFrontEndService::Stub::async::getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpcIFrontEnd::getPointCloudRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIFrontEnd::getPointCloudRequestRequest, ::grpcIFrontEnd::getPointCloudRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloudRequest_, context, request, response, std::move(f));
}

void grpcIFrontEndService::Stub::async::getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpcIFrontEnd::getPointCloudRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloudRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getPointCloudRequestResponse>* grpcIFrontEndService::Stub::PrepareAsyncgetPointCloudRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIFrontEnd::getPointCloudRequestResponse, ::grpcIFrontEnd::getPointCloudRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPointCloudRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getPointCloudRequestResponse>* grpcIFrontEndService::Stub::AsyncgetPointCloudRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPointCloudRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIFrontEndService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::registerClientRequest, ::grpcIFrontEnd::registerClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::registerClientRequest* req,
             ::grpcIFrontEnd::registerClientResponse* resp) {
               return service->registerClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::unregisterClientRequest, ::grpcIFrontEnd::unregisterClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::unregisterClientRequest* req,
             ::grpcIFrontEnd::unregisterClientResponse* resp) {
               return service->unregisterClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::getAllClientsUUIDRequest, ::grpcIFrontEnd::getAllClientsUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::getAllClientsUUIDRequest* req,
             ::grpcIFrontEnd::getAllClientsUUIDResponse* resp) {
               return service->getAllClientsUUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::getDeviceInfoRequest, ::grpcIFrontEnd::getDeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::getDeviceInfoRequest* req,
             ::grpcIFrontEnd::getDeviceInfoResponse* resp) {
               return service->getDeviceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::init_grpc0Request, ::grpcIFrontEnd::init_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::init_grpc0Request* req,
             ::grpcIFrontEnd::init_grpc0Response* resp) {
               return service->init_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::init_grpc1Request, ::grpcIFrontEnd::init_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::init_grpc1Request* req,
             ::grpcIFrontEnd::init_grpc1Response* resp) {
               return service->init_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::startRequest, ::grpcIFrontEnd::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::startRequest* req,
             ::grpcIFrontEnd::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::stopRequest, ::grpcIFrontEnd::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::stopRequest* req,
             ::grpcIFrontEnd::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::getProcessingModeRequest, ::grpcIFrontEnd::getProcessingModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::getProcessingModeRequest* req,
             ::grpcIFrontEnd::getProcessingModeResponse* resp) {
               return service->getProcessingMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::setCameraParameters_grpc0Request, ::grpcIFrontEnd::setCameraParameters_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::setCameraParameters_grpc0Request* req,
             ::grpcIFrontEnd::setCameraParameters_grpc0Response* resp) {
               return service->setCameraParameters_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::setCameraParameters_grpc1Request, ::grpcIFrontEnd::setCameraParameters_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::setCameraParameters_grpc1Request* req,
             ::grpcIFrontEnd::setCameraParameters_grpc1Response* resp) {
               return service->setCameraParameters_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::setRectificationParametersRequest, ::grpcIFrontEnd::setRectificationParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::setRectificationParametersRequest* req,
             ::grpcIFrontEnd::setRectificationParametersResponse* resp) {
               return service->setRectificationParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::getCameraParametersRequest, ::grpcIFrontEnd::getCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::getCameraParametersRequest* req,
             ::grpcIFrontEnd::getCameraParametersResponse* resp) {
               return service->getCameraParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* req,
             ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* resp) {
               return service->relocalizeProcessRequest_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* req,
             ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* resp) {
               return service->relocalizeProcessRequest_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::get3DTransformRequestRequest, ::grpcIFrontEnd::get3DTransformRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::get3DTransformRequestRequest* req,
             ::grpcIFrontEnd::get3DTransformRequestResponse* resp) {
               return service->get3DTransformRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::getMappingDataRequestRequest, ::grpcIFrontEnd::getMappingDataRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::getMappingDataRequestRequest* req,
             ::grpcIFrontEnd::getMappingDataRequestResponse* resp) {
               return service->getMappingDataRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::getLastPoseRequest, ::grpcIFrontEnd::getLastPoseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::getLastPoseRequest* req,
             ::grpcIFrontEnd::getLastPoseResponse* resp) {
               return service->getLastPose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::createMapRequest, ::grpcIFrontEnd::createMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::createMapRequest* req,
             ::grpcIFrontEnd::createMapResponse* resp) {
               return service->createMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::deleteMapRequest, ::grpcIFrontEnd::deleteMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::deleteMapRequest* req,
             ::grpcIFrontEnd::deleteMapResponse* resp) {
               return service->deleteMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::getAllMapsUUIDRequest, ::grpcIFrontEnd::getAllMapsUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::getAllMapsUUIDRequest* req,
             ::grpcIFrontEnd::getAllMapsUUIDResponse* resp) {
               return service->getAllMapsUUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::getMapRequestRequest, ::grpcIFrontEnd::getMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::getMapRequestRequest* req,
             ::grpcIFrontEnd::getMapRequestResponse* resp) {
               return service->getMapRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::setMapRequestRequest, ::grpcIFrontEnd::setMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::setMapRequestRequest* req,
             ::grpcIFrontEnd::setMapRequestResponse* resp) {
               return service->setMapRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIFrontEndService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIFrontEndService::Service, ::grpcIFrontEnd::getPointCloudRequestRequest, ::grpcIFrontEnd::getPointCloudRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIFrontEndService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIFrontEnd::getPointCloudRequestRequest* req,
             ::grpcIFrontEnd::getPointCloudRequestResponse* resp) {
               return service->getPointCloudRequest(ctx, req, resp);
             }, this)));
}

grpcIFrontEndService::Service::~Service() {
}

::grpc::Status grpcIFrontEndService::Service::registerClient(::grpc::ServerContext* context, const ::grpcIFrontEnd::registerClientRequest* request, ::grpcIFrontEnd::registerClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::unregisterClient(::grpc::ServerContext* context, const ::grpcIFrontEnd::unregisterClientRequest* request, ::grpcIFrontEnd::unregisterClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::getAllClientsUUID(::grpc::ServerContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::getDeviceInfo(::grpc::ServerContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpcIFrontEnd::getDeviceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::init_grpc0(::grpc::ServerContext* context, const ::grpcIFrontEnd::init_grpc0Request* request, ::grpcIFrontEnd::init_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::init_grpc1(::grpc::ServerContext* context, const ::grpcIFrontEnd::init_grpc1Request* request, ::grpcIFrontEnd::init_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::start(::grpc::ServerContext* context, const ::grpcIFrontEnd::startRequest* request, ::grpcIFrontEnd::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::stop(::grpc::ServerContext* context, const ::grpcIFrontEnd::stopRequest* request, ::grpcIFrontEnd::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::getProcessingMode(::grpc::ServerContext* context, const ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpcIFrontEnd::getProcessingModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::setCameraParameters_grpc0(::grpc::ServerContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::setCameraParameters_grpc1(::grpc::ServerContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::setRectificationParameters(::grpc::ServerContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpcIFrontEnd::setRectificationParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::getCameraParameters(::grpc::ServerContext* context, const ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpcIFrontEnd::getCameraParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::relocalizeProcessRequest_grpc0(::grpc::ServerContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::relocalizeProcessRequest_grpc1(::grpc::ServerContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::get3DTransformRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpcIFrontEnd::get3DTransformRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::getMappingDataRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpcIFrontEnd::getMappingDataRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::getLastPose(::grpc::ServerContext* context, const ::grpcIFrontEnd::getLastPoseRequest* request, ::grpcIFrontEnd::getLastPoseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::createMap(::grpc::ServerContext* context, const ::grpcIFrontEnd::createMapRequest* request, ::grpcIFrontEnd::createMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::deleteMap(::grpc::ServerContext* context, const ::grpcIFrontEnd::deleteMapRequest* request, ::grpcIFrontEnd::deleteMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::getAllMapsUUID(::grpc::ServerContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::getMapRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::getMapRequestRequest* request, ::grpcIFrontEnd::getMapRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::setMapRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::setMapRequestRequest* request, ::grpcIFrontEnd::setMapRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIFrontEndService::Service::getPointCloudRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpcIFrontEnd::getPointCloudRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIFrontEnd

