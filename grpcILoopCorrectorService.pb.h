// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcILoopCorrectorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcILoopCorrectorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcILoopCorrectorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcILoopCorrectorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcILoopCorrectorService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcILoopCorrectorService_2eproto;
namespace grpcILoopCorrector {
class correct_grpc0Request;
struct correct_grpc0RequestDefaultTypeInternal;
extern correct_grpc0RequestDefaultTypeInternal _correct_grpc0Request_default_instance_;
class correct_grpc0Response;
struct correct_grpc0ResponseDefaultTypeInternal;
extern correct_grpc0ResponseDefaultTypeInternal _correct_grpc0Response_default_instance_;
class correct_grpc1Request;
struct correct_grpc1RequestDefaultTypeInternal;
extern correct_grpc1RequestDefaultTypeInternal _correct_grpc1Request_default_instance_;
class correct_grpc1Response;
struct correct_grpc1ResponseDefaultTypeInternal;
extern correct_grpc1ResponseDefaultTypeInternal _correct_grpc1Response_default_instance_;
}  // namespace grpcILoopCorrector
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcILoopCorrector::correct_grpc0Request* Arena::CreateMaybeMessage<::grpcILoopCorrector::correct_grpc0Request>(Arena*);
template<> ::grpcILoopCorrector::correct_grpc0Response* Arena::CreateMaybeMessage<::grpcILoopCorrector::correct_grpc0Response>(Arena*);
template<> ::grpcILoopCorrector::correct_grpc1Request* Arena::CreateMaybeMessage<::grpcILoopCorrector::correct_grpc1Request>(Arena*);
template<> ::grpcILoopCorrector::correct_grpc1Response* Arena::CreateMaybeMessage<::grpcILoopCorrector::correct_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcILoopCorrector {

// ===================================================================

class correct_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcILoopCorrector.correct_grpc0Request) */ {
 public:
  inline correct_grpc0Request() : correct_grpc0Request(nullptr) {}
  ~correct_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR correct_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  correct_grpc0Request(const correct_grpc0Request& from);
  correct_grpc0Request(correct_grpc0Request&& from) noexcept
    : correct_grpc0Request() {
    *this = ::std::move(from);
  }

  inline correct_grpc0Request& operator=(const correct_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline correct_grpc0Request& operator=(correct_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const correct_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const correct_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const correct_grpc0Request*>(
               &_correct_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(correct_grpc0Request& a, correct_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(correct_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(correct_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  correct_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<correct_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const correct_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const correct_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(correct_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcILoopCorrector.correct_grpc0Request";
  }
  protected:
  explicit correct_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryKeyframeFieldNumber = 2,
    kDetectedLoopKeyframeFieldNumber = 3,
    kSWlWcFieldNumber = 4,
    kDuplicatedPointsIndicesFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes queryKeyframe = 2;
  void clear_querykeyframe();
  const std::string& querykeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_querykeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_querykeyframe();
  PROTOBUF_NODISCARD std::string* release_querykeyframe();
  void set_allocated_querykeyframe(std::string* querykeyframe);
  private:
  const std::string& _internal_querykeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_querykeyframe(const std::string& value);
  std::string* _internal_mutable_querykeyframe();
  public:

  // bytes detectedLoopKeyframe = 3;
  void clear_detectedloopkeyframe();
  const std::string& detectedloopkeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detectedloopkeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detectedloopkeyframe();
  PROTOBUF_NODISCARD std::string* release_detectedloopkeyframe();
  void set_allocated_detectedloopkeyframe(std::string* detectedloopkeyframe);
  private:
  const std::string& _internal_detectedloopkeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detectedloopkeyframe(const std::string& value);
  std::string* _internal_mutable_detectedloopkeyframe();
  public:

  // bytes S_wl_wc = 4;
  void clear_s_wl_wc();
  const std::string& s_wl_wc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s_wl_wc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s_wl_wc();
  PROTOBUF_NODISCARD std::string* release_s_wl_wc();
  void set_allocated_s_wl_wc(std::string* s_wl_wc);
  private:
  const std::string& _internal_s_wl_wc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s_wl_wc(const std::string& value);
  std::string* _internal_mutable_s_wl_wc();
  public:

  // bytes duplicatedPointsIndices = 5;
  void clear_duplicatedpointsindices();
  const std::string& duplicatedpointsindices() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duplicatedpointsindices(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duplicatedpointsindices();
  PROTOBUF_NODISCARD std::string* release_duplicatedpointsindices();
  void set_allocated_duplicatedpointsindices(std::string* duplicatedpointsindices);
  private:
  const std::string& _internal_duplicatedpointsindices() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duplicatedpointsindices(const std::string& value);
  std::string* _internal_mutable_duplicatedpointsindices();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcILoopCorrector.correct_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr querykeyframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detectedloopkeyframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_wl_wc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duplicatedpointsindices_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcILoopCorrectorService_2eproto;
};
// -------------------------------------------------------------------

class correct_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcILoopCorrector.correct_grpc0Response) */ {
 public:
  inline correct_grpc0Response() : correct_grpc0Response(nullptr) {}
  ~correct_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR correct_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  correct_grpc0Response(const correct_grpc0Response& from);
  correct_grpc0Response(correct_grpc0Response&& from) noexcept
    : correct_grpc0Response() {
    *this = ::std::move(from);
  }

  inline correct_grpc0Response& operator=(const correct_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline correct_grpc0Response& operator=(correct_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const correct_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const correct_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const correct_grpc0Response*>(
               &_correct_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(correct_grpc0Response& a, correct_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(correct_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(correct_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  correct_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<correct_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const correct_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const correct_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(correct_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcILoopCorrector.correct_grpc0Response";
  }
  protected:
  explicit correct_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcILoopCorrector.correct_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcILoopCorrectorService_2eproto;
};
// -------------------------------------------------------------------

class correct_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcILoopCorrector.correct_grpc1Request) */ {
 public:
  inline correct_grpc1Request() : correct_grpc1Request(nullptr) {}
  ~correct_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR correct_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  correct_grpc1Request(const correct_grpc1Request& from);
  correct_grpc1Request(correct_grpc1Request&& from) noexcept
    : correct_grpc1Request() {
    *this = ::std::move(from);
  }

  inline correct_grpc1Request& operator=(const correct_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline correct_grpc1Request& operator=(correct_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const correct_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const correct_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const correct_grpc1Request*>(
               &_correct_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(correct_grpc1Request& a, correct_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(correct_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(correct_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  correct_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<correct_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const correct_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const correct_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(correct_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcILoopCorrector.correct_grpc1Request";
  }
  protected:
  explicit correct_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryKeyframeFieldNumber = 2,
    kDetectedLoopKeyframeFieldNumber = 3,
    kSWlWcFieldNumber = 4,
    kDuplicatedPointsIndicesFieldNumber = 5,
    kCorrectedKeyframeIdsFieldNumber = 6,
    kCorrectedCloudpointIdsFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes queryKeyframe = 2;
  void clear_querykeyframe();
  const std::string& querykeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_querykeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_querykeyframe();
  PROTOBUF_NODISCARD std::string* release_querykeyframe();
  void set_allocated_querykeyframe(std::string* querykeyframe);
  private:
  const std::string& _internal_querykeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_querykeyframe(const std::string& value);
  std::string* _internal_mutable_querykeyframe();
  public:

  // bytes detectedLoopKeyframe = 3;
  void clear_detectedloopkeyframe();
  const std::string& detectedloopkeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detectedloopkeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detectedloopkeyframe();
  PROTOBUF_NODISCARD std::string* release_detectedloopkeyframe();
  void set_allocated_detectedloopkeyframe(std::string* detectedloopkeyframe);
  private:
  const std::string& _internal_detectedloopkeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detectedloopkeyframe(const std::string& value);
  std::string* _internal_mutable_detectedloopkeyframe();
  public:

  // bytes S_wl_wc = 4;
  void clear_s_wl_wc();
  const std::string& s_wl_wc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s_wl_wc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s_wl_wc();
  PROTOBUF_NODISCARD std::string* release_s_wl_wc();
  void set_allocated_s_wl_wc(std::string* s_wl_wc);
  private:
  const std::string& _internal_s_wl_wc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s_wl_wc(const std::string& value);
  std::string* _internal_mutable_s_wl_wc();
  public:

  // bytes duplicatedPointsIndices = 5;
  void clear_duplicatedpointsindices();
  const std::string& duplicatedpointsindices() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duplicatedpointsindices(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duplicatedpointsindices();
  PROTOBUF_NODISCARD std::string* release_duplicatedpointsindices();
  void set_allocated_duplicatedpointsindices(std::string* duplicatedpointsindices);
  private:
  const std::string& _internal_duplicatedpointsindices() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duplicatedpointsindices(const std::string& value);
  std::string* _internal_mutable_duplicatedpointsindices();
  public:

  // bytes correctedKeyframeIds = 6;
  void clear_correctedkeyframeids();
  const std::string& correctedkeyframeids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_correctedkeyframeids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_correctedkeyframeids();
  PROTOBUF_NODISCARD std::string* release_correctedkeyframeids();
  void set_allocated_correctedkeyframeids(std::string* correctedkeyframeids);
  private:
  const std::string& _internal_correctedkeyframeids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_correctedkeyframeids(const std::string& value);
  std::string* _internal_mutable_correctedkeyframeids();
  public:

  // bytes correctedCloudpointIds = 7;
  void clear_correctedcloudpointids();
  const std::string& correctedcloudpointids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_correctedcloudpointids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_correctedcloudpointids();
  PROTOBUF_NODISCARD std::string* release_correctedcloudpointids();
  void set_allocated_correctedcloudpointids(std::string* correctedcloudpointids);
  private:
  const std::string& _internal_correctedcloudpointids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_correctedcloudpointids(const std::string& value);
  std::string* _internal_mutable_correctedcloudpointids();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcILoopCorrector.correct_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr querykeyframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detectedloopkeyframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_wl_wc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duplicatedpointsindices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correctedkeyframeids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correctedcloudpointids_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcILoopCorrectorService_2eproto;
};
// -------------------------------------------------------------------

class correct_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcILoopCorrector.correct_grpc1Response) */ {
 public:
  inline correct_grpc1Response() : correct_grpc1Response(nullptr) {}
  ~correct_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR correct_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  correct_grpc1Response(const correct_grpc1Response& from);
  correct_grpc1Response(correct_grpc1Response&& from) noexcept
    : correct_grpc1Response() {
    *this = ::std::move(from);
  }

  inline correct_grpc1Response& operator=(const correct_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline correct_grpc1Response& operator=(correct_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const correct_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const correct_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const correct_grpc1Response*>(
               &_correct_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(correct_grpc1Response& a, correct_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(correct_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(correct_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  correct_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<correct_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const correct_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const correct_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(correct_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcILoopCorrector.correct_grpc1Response";
  }
  protected:
  explicit correct_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorrectedKeyframeIdsFieldNumber = 1,
    kCorrectedCloudpointIdsFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes correctedKeyframeIds = 1;
  void clear_correctedkeyframeids();
  const std::string& correctedkeyframeids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_correctedkeyframeids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_correctedkeyframeids();
  PROTOBUF_NODISCARD std::string* release_correctedkeyframeids();
  void set_allocated_correctedkeyframeids(std::string* correctedkeyframeids);
  private:
  const std::string& _internal_correctedkeyframeids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_correctedkeyframeids(const std::string& value);
  std::string* _internal_mutable_correctedkeyframeids();
  public:

  // bytes correctedCloudpointIds = 2;
  void clear_correctedcloudpointids();
  const std::string& correctedcloudpointids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_correctedcloudpointids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_correctedcloudpointids();
  PROTOBUF_NODISCARD std::string* release_correctedcloudpointids();
  void set_allocated_correctedcloudpointids(std::string* correctedcloudpointids);
  private:
  const std::string& _internal_correctedcloudpointids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_correctedcloudpointids(const std::string& value);
  std::string* _internal_mutable_correctedcloudpointids();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcILoopCorrector.correct_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correctedkeyframeids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correctedcloudpointids_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcILoopCorrectorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// correct_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void correct_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t correct_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t correct_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void correct_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void correct_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc0Request.grpcServerCompressionFormat)
}

// bytes queryKeyframe = 2;
inline void correct_grpc0Request::clear_querykeyframe() {
  querykeyframe_.ClearToEmpty();
}
inline const std::string& correct_grpc0Request::querykeyframe() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc0Request.queryKeyframe)
  return _internal_querykeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc0Request::set_querykeyframe(ArgT0&& arg0, ArgT... args) {
 
 querykeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc0Request.queryKeyframe)
}
inline std::string* correct_grpc0Request::mutable_querykeyframe() {
  std::string* _s = _internal_mutable_querykeyframe();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc0Request.queryKeyframe)
  return _s;
}
inline const std::string& correct_grpc0Request::_internal_querykeyframe() const {
  return querykeyframe_.Get();
}
inline void correct_grpc0Request::_internal_set_querykeyframe(const std::string& value) {
  
  querykeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::_internal_mutable_querykeyframe() {
  
  return querykeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::release_querykeyframe() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc0Request.queryKeyframe)
  return querykeyframe_.Release();
}
inline void correct_grpc0Request::set_allocated_querykeyframe(std::string* querykeyframe) {
  if (querykeyframe != nullptr) {
    
  } else {
    
  }
  querykeyframe_.SetAllocated(querykeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (querykeyframe_.IsDefault()) {
    querykeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc0Request.queryKeyframe)
}

// bytes detectedLoopKeyframe = 3;
inline void correct_grpc0Request::clear_detectedloopkeyframe() {
  detectedloopkeyframe_.ClearToEmpty();
}
inline const std::string& correct_grpc0Request::detectedloopkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc0Request.detectedLoopKeyframe)
  return _internal_detectedloopkeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc0Request::set_detectedloopkeyframe(ArgT0&& arg0, ArgT... args) {
 
 detectedloopkeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc0Request.detectedLoopKeyframe)
}
inline std::string* correct_grpc0Request::mutable_detectedloopkeyframe() {
  std::string* _s = _internal_mutable_detectedloopkeyframe();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc0Request.detectedLoopKeyframe)
  return _s;
}
inline const std::string& correct_grpc0Request::_internal_detectedloopkeyframe() const {
  return detectedloopkeyframe_.Get();
}
inline void correct_grpc0Request::_internal_set_detectedloopkeyframe(const std::string& value) {
  
  detectedloopkeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::_internal_mutable_detectedloopkeyframe() {
  
  return detectedloopkeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::release_detectedloopkeyframe() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc0Request.detectedLoopKeyframe)
  return detectedloopkeyframe_.Release();
}
inline void correct_grpc0Request::set_allocated_detectedloopkeyframe(std::string* detectedloopkeyframe) {
  if (detectedloopkeyframe != nullptr) {
    
  } else {
    
  }
  detectedloopkeyframe_.SetAllocated(detectedloopkeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (detectedloopkeyframe_.IsDefault()) {
    detectedloopkeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc0Request.detectedLoopKeyframe)
}

// bytes S_wl_wc = 4;
inline void correct_grpc0Request::clear_s_wl_wc() {
  s_wl_wc_.ClearToEmpty();
}
inline const std::string& correct_grpc0Request::s_wl_wc() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc0Request.S_wl_wc)
  return _internal_s_wl_wc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc0Request::set_s_wl_wc(ArgT0&& arg0, ArgT... args) {
 
 s_wl_wc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc0Request.S_wl_wc)
}
inline std::string* correct_grpc0Request::mutable_s_wl_wc() {
  std::string* _s = _internal_mutable_s_wl_wc();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc0Request.S_wl_wc)
  return _s;
}
inline const std::string& correct_grpc0Request::_internal_s_wl_wc() const {
  return s_wl_wc_.Get();
}
inline void correct_grpc0Request::_internal_set_s_wl_wc(const std::string& value) {
  
  s_wl_wc_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::_internal_mutable_s_wl_wc() {
  
  return s_wl_wc_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::release_s_wl_wc() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc0Request.S_wl_wc)
  return s_wl_wc_.Release();
}
inline void correct_grpc0Request::set_allocated_s_wl_wc(std::string* s_wl_wc) {
  if (s_wl_wc != nullptr) {
    
  } else {
    
  }
  s_wl_wc_.SetAllocated(s_wl_wc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_wl_wc_.IsDefault()) {
    s_wl_wc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc0Request.S_wl_wc)
}

// bytes duplicatedPointsIndices = 5;
inline void correct_grpc0Request::clear_duplicatedpointsindices() {
  duplicatedpointsindices_.ClearToEmpty();
}
inline const std::string& correct_grpc0Request::duplicatedpointsindices() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc0Request.duplicatedPointsIndices)
  return _internal_duplicatedpointsindices();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc0Request::set_duplicatedpointsindices(ArgT0&& arg0, ArgT... args) {
 
 duplicatedpointsindices_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc0Request.duplicatedPointsIndices)
}
inline std::string* correct_grpc0Request::mutable_duplicatedpointsindices() {
  std::string* _s = _internal_mutable_duplicatedpointsindices();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc0Request.duplicatedPointsIndices)
  return _s;
}
inline const std::string& correct_grpc0Request::_internal_duplicatedpointsindices() const {
  return duplicatedpointsindices_.Get();
}
inline void correct_grpc0Request::_internal_set_duplicatedpointsindices(const std::string& value) {
  
  duplicatedpointsindices_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::_internal_mutable_duplicatedpointsindices() {
  
  return duplicatedpointsindices_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::release_duplicatedpointsindices() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc0Request.duplicatedPointsIndices)
  return duplicatedpointsindices_.Release();
}
inline void correct_grpc0Request::set_allocated_duplicatedpointsindices(std::string* duplicatedpointsindices) {
  if (duplicatedpointsindices != nullptr) {
    
  } else {
    
  }
  duplicatedpointsindices_.SetAllocated(duplicatedpointsindices, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (duplicatedpointsindices_.IsDefault()) {
    duplicatedpointsindices_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc0Request.duplicatedPointsIndices)
}

// -------------------------------------------------------------------

// correct_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void correct_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t correct_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t correct_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void correct_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void correct_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// correct_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void correct_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t correct_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t correct_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void correct_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void correct_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Request.grpcServerCompressionFormat)
}

// bytes queryKeyframe = 2;
inline void correct_grpc1Request::clear_querykeyframe() {
  querykeyframe_.ClearToEmpty();
}
inline const std::string& correct_grpc1Request::querykeyframe() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Request.queryKeyframe)
  return _internal_querykeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Request::set_querykeyframe(ArgT0&& arg0, ArgT... args) {
 
 querykeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Request.queryKeyframe)
}
inline std::string* correct_grpc1Request::mutable_querykeyframe() {
  std::string* _s = _internal_mutable_querykeyframe();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc1Request.queryKeyframe)
  return _s;
}
inline const std::string& correct_grpc1Request::_internal_querykeyframe() const {
  return querykeyframe_.Get();
}
inline void correct_grpc1Request::_internal_set_querykeyframe(const std::string& value) {
  
  querykeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::_internal_mutable_querykeyframe() {
  
  return querykeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::release_querykeyframe() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc1Request.queryKeyframe)
  return querykeyframe_.Release();
}
inline void correct_grpc1Request::set_allocated_querykeyframe(std::string* querykeyframe) {
  if (querykeyframe != nullptr) {
    
  } else {
    
  }
  querykeyframe_.SetAllocated(querykeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (querykeyframe_.IsDefault()) {
    querykeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc1Request.queryKeyframe)
}

// bytes detectedLoopKeyframe = 3;
inline void correct_grpc1Request::clear_detectedloopkeyframe() {
  detectedloopkeyframe_.ClearToEmpty();
}
inline const std::string& correct_grpc1Request::detectedloopkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Request.detectedLoopKeyframe)
  return _internal_detectedloopkeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Request::set_detectedloopkeyframe(ArgT0&& arg0, ArgT... args) {
 
 detectedloopkeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Request.detectedLoopKeyframe)
}
inline std::string* correct_grpc1Request::mutable_detectedloopkeyframe() {
  std::string* _s = _internal_mutable_detectedloopkeyframe();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc1Request.detectedLoopKeyframe)
  return _s;
}
inline const std::string& correct_grpc1Request::_internal_detectedloopkeyframe() const {
  return detectedloopkeyframe_.Get();
}
inline void correct_grpc1Request::_internal_set_detectedloopkeyframe(const std::string& value) {
  
  detectedloopkeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::_internal_mutable_detectedloopkeyframe() {
  
  return detectedloopkeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::release_detectedloopkeyframe() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc1Request.detectedLoopKeyframe)
  return detectedloopkeyframe_.Release();
}
inline void correct_grpc1Request::set_allocated_detectedloopkeyframe(std::string* detectedloopkeyframe) {
  if (detectedloopkeyframe != nullptr) {
    
  } else {
    
  }
  detectedloopkeyframe_.SetAllocated(detectedloopkeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (detectedloopkeyframe_.IsDefault()) {
    detectedloopkeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc1Request.detectedLoopKeyframe)
}

// bytes S_wl_wc = 4;
inline void correct_grpc1Request::clear_s_wl_wc() {
  s_wl_wc_.ClearToEmpty();
}
inline const std::string& correct_grpc1Request::s_wl_wc() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Request.S_wl_wc)
  return _internal_s_wl_wc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Request::set_s_wl_wc(ArgT0&& arg0, ArgT... args) {
 
 s_wl_wc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Request.S_wl_wc)
}
inline std::string* correct_grpc1Request::mutable_s_wl_wc() {
  std::string* _s = _internal_mutable_s_wl_wc();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc1Request.S_wl_wc)
  return _s;
}
inline const std::string& correct_grpc1Request::_internal_s_wl_wc() const {
  return s_wl_wc_.Get();
}
inline void correct_grpc1Request::_internal_set_s_wl_wc(const std::string& value) {
  
  s_wl_wc_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::_internal_mutable_s_wl_wc() {
  
  return s_wl_wc_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::release_s_wl_wc() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc1Request.S_wl_wc)
  return s_wl_wc_.Release();
}
inline void correct_grpc1Request::set_allocated_s_wl_wc(std::string* s_wl_wc) {
  if (s_wl_wc != nullptr) {
    
  } else {
    
  }
  s_wl_wc_.SetAllocated(s_wl_wc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (s_wl_wc_.IsDefault()) {
    s_wl_wc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc1Request.S_wl_wc)
}

// bytes duplicatedPointsIndices = 5;
inline void correct_grpc1Request::clear_duplicatedpointsindices() {
  duplicatedpointsindices_.ClearToEmpty();
}
inline const std::string& correct_grpc1Request::duplicatedpointsindices() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Request.duplicatedPointsIndices)
  return _internal_duplicatedpointsindices();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Request::set_duplicatedpointsindices(ArgT0&& arg0, ArgT... args) {
 
 duplicatedpointsindices_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Request.duplicatedPointsIndices)
}
inline std::string* correct_grpc1Request::mutable_duplicatedpointsindices() {
  std::string* _s = _internal_mutable_duplicatedpointsindices();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc1Request.duplicatedPointsIndices)
  return _s;
}
inline const std::string& correct_grpc1Request::_internal_duplicatedpointsindices() const {
  return duplicatedpointsindices_.Get();
}
inline void correct_grpc1Request::_internal_set_duplicatedpointsindices(const std::string& value) {
  
  duplicatedpointsindices_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::_internal_mutable_duplicatedpointsindices() {
  
  return duplicatedpointsindices_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::release_duplicatedpointsindices() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc1Request.duplicatedPointsIndices)
  return duplicatedpointsindices_.Release();
}
inline void correct_grpc1Request::set_allocated_duplicatedpointsindices(std::string* duplicatedpointsindices) {
  if (duplicatedpointsindices != nullptr) {
    
  } else {
    
  }
  duplicatedpointsindices_.SetAllocated(duplicatedpointsindices, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (duplicatedpointsindices_.IsDefault()) {
    duplicatedpointsindices_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc1Request.duplicatedPointsIndices)
}

// bytes correctedKeyframeIds = 6;
inline void correct_grpc1Request::clear_correctedkeyframeids() {
  correctedkeyframeids_.ClearToEmpty();
}
inline const std::string& correct_grpc1Request::correctedkeyframeids() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Request.correctedKeyframeIds)
  return _internal_correctedkeyframeids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Request::set_correctedkeyframeids(ArgT0&& arg0, ArgT... args) {
 
 correctedkeyframeids_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Request.correctedKeyframeIds)
}
inline std::string* correct_grpc1Request::mutable_correctedkeyframeids() {
  std::string* _s = _internal_mutable_correctedkeyframeids();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc1Request.correctedKeyframeIds)
  return _s;
}
inline const std::string& correct_grpc1Request::_internal_correctedkeyframeids() const {
  return correctedkeyframeids_.Get();
}
inline void correct_grpc1Request::_internal_set_correctedkeyframeids(const std::string& value) {
  
  correctedkeyframeids_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::_internal_mutable_correctedkeyframeids() {
  
  return correctedkeyframeids_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::release_correctedkeyframeids() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc1Request.correctedKeyframeIds)
  return correctedkeyframeids_.Release();
}
inline void correct_grpc1Request::set_allocated_correctedkeyframeids(std::string* correctedkeyframeids) {
  if (correctedkeyframeids != nullptr) {
    
  } else {
    
  }
  correctedkeyframeids_.SetAllocated(correctedkeyframeids, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (correctedkeyframeids_.IsDefault()) {
    correctedkeyframeids_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc1Request.correctedKeyframeIds)
}

// bytes correctedCloudpointIds = 7;
inline void correct_grpc1Request::clear_correctedcloudpointids() {
  correctedcloudpointids_.ClearToEmpty();
}
inline const std::string& correct_grpc1Request::correctedcloudpointids() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Request.correctedCloudpointIds)
  return _internal_correctedcloudpointids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Request::set_correctedcloudpointids(ArgT0&& arg0, ArgT... args) {
 
 correctedcloudpointids_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Request.correctedCloudpointIds)
}
inline std::string* correct_grpc1Request::mutable_correctedcloudpointids() {
  std::string* _s = _internal_mutable_correctedcloudpointids();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc1Request.correctedCloudpointIds)
  return _s;
}
inline const std::string& correct_grpc1Request::_internal_correctedcloudpointids() const {
  return correctedcloudpointids_.Get();
}
inline void correct_grpc1Request::_internal_set_correctedcloudpointids(const std::string& value) {
  
  correctedcloudpointids_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::_internal_mutable_correctedcloudpointids() {
  
  return correctedcloudpointids_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::release_correctedcloudpointids() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc1Request.correctedCloudpointIds)
  return correctedcloudpointids_.Release();
}
inline void correct_grpc1Request::set_allocated_correctedcloudpointids(std::string* correctedcloudpointids) {
  if (correctedcloudpointids != nullptr) {
    
  } else {
    
  }
  correctedcloudpointids_.SetAllocated(correctedcloudpointids, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (correctedcloudpointids_.IsDefault()) {
    correctedcloudpointids_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc1Request.correctedCloudpointIds)
}

// -------------------------------------------------------------------

// correct_grpc1Response

// bytes correctedKeyframeIds = 1;
inline void correct_grpc1Response::clear_correctedkeyframeids() {
  correctedkeyframeids_.ClearToEmpty();
}
inline const std::string& correct_grpc1Response::correctedkeyframeids() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Response.correctedKeyframeIds)
  return _internal_correctedkeyframeids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Response::set_correctedkeyframeids(ArgT0&& arg0, ArgT... args) {
 
 correctedkeyframeids_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Response.correctedKeyframeIds)
}
inline std::string* correct_grpc1Response::mutable_correctedkeyframeids() {
  std::string* _s = _internal_mutable_correctedkeyframeids();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc1Response.correctedKeyframeIds)
  return _s;
}
inline const std::string& correct_grpc1Response::_internal_correctedkeyframeids() const {
  return correctedkeyframeids_.Get();
}
inline void correct_grpc1Response::_internal_set_correctedkeyframeids(const std::string& value) {
  
  correctedkeyframeids_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Response::_internal_mutable_correctedkeyframeids() {
  
  return correctedkeyframeids_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Response::release_correctedkeyframeids() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc1Response.correctedKeyframeIds)
  return correctedkeyframeids_.Release();
}
inline void correct_grpc1Response::set_allocated_correctedkeyframeids(std::string* correctedkeyframeids) {
  if (correctedkeyframeids != nullptr) {
    
  } else {
    
  }
  correctedkeyframeids_.SetAllocated(correctedkeyframeids, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (correctedkeyframeids_.IsDefault()) {
    correctedkeyframeids_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc1Response.correctedKeyframeIds)
}

// bytes correctedCloudpointIds = 2;
inline void correct_grpc1Response::clear_correctedcloudpointids() {
  correctedcloudpointids_.ClearToEmpty();
}
inline const std::string& correct_grpc1Response::correctedcloudpointids() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Response.correctedCloudpointIds)
  return _internal_correctedcloudpointids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Response::set_correctedcloudpointids(ArgT0&& arg0, ArgT... args) {
 
 correctedcloudpointids_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Response.correctedCloudpointIds)
}
inline std::string* correct_grpc1Response::mutable_correctedcloudpointids() {
  std::string* _s = _internal_mutable_correctedcloudpointids();
  // @@protoc_insertion_point(field_mutable:grpcILoopCorrector.correct_grpc1Response.correctedCloudpointIds)
  return _s;
}
inline const std::string& correct_grpc1Response::_internal_correctedcloudpointids() const {
  return correctedcloudpointids_.Get();
}
inline void correct_grpc1Response::_internal_set_correctedcloudpointids(const std::string& value) {
  
  correctedcloudpointids_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Response::_internal_mutable_correctedcloudpointids() {
  
  return correctedcloudpointids_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Response::release_correctedcloudpointids() {
  // @@protoc_insertion_point(field_release:grpcILoopCorrector.correct_grpc1Response.correctedCloudpointIds)
  return correctedcloudpointids_.Release();
}
inline void correct_grpc1Response::set_allocated_correctedcloudpointids(std::string* correctedcloudpointids) {
  if (correctedcloudpointids != nullptr) {
    
  } else {
    
  }
  correctedcloudpointids_.SetAllocated(correctedcloudpointids, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (correctedcloudpointids_.IsDefault()) {
    correctedcloudpointids_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcILoopCorrector.correct_grpc1Response.correctedCloudpointIds)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void correct_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t correct_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t correct_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcILoopCorrector.correct_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void correct_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void correct_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcILoopCorrector.correct_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcILoopCorrector

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcILoopCorrectorService_2eproto
