// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIDescriptorMatcherRegionService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIDescriptorMatcherRegionService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIDescriptorMatcherRegionService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIDescriptorMatcherRegionService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIDescriptorMatcherRegionService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIDescriptorMatcherRegionService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_metadata_getter(int index);
namespace grpcIDescriptorMatcherRegion {
class match_grpc0Request;
struct match_grpc0RequestDefaultTypeInternal;
extern match_grpc0RequestDefaultTypeInternal _match_grpc0Request_default_instance_;
class match_grpc0Response;
struct match_grpc0ResponseDefaultTypeInternal;
extern match_grpc0ResponseDefaultTypeInternal _match_grpc0Response_default_instance_;
class match_grpc1Request;
struct match_grpc1RequestDefaultTypeInternal;
extern match_grpc1RequestDefaultTypeInternal _match_grpc1Request_default_instance_;
class match_grpc1Response;
struct match_grpc1ResponseDefaultTypeInternal;
extern match_grpc1ResponseDefaultTypeInternal _match_grpc1Response_default_instance_;
class match_grpc2Request;
struct match_grpc2RequestDefaultTypeInternal;
extern match_grpc2RequestDefaultTypeInternal _match_grpc2Request_default_instance_;
class match_grpc2Response;
struct match_grpc2ResponseDefaultTypeInternal;
extern match_grpc2ResponseDefaultTypeInternal _match_grpc2Response_default_instance_;
}  // namespace grpcIDescriptorMatcherRegion
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIDescriptorMatcherRegion::match_grpc0Request* Arena::CreateMaybeMessage<::grpcIDescriptorMatcherRegion::match_grpc0Request>(Arena*);
template<> ::grpcIDescriptorMatcherRegion::match_grpc0Response* Arena::CreateMaybeMessage<::grpcIDescriptorMatcherRegion::match_grpc0Response>(Arena*);
template<> ::grpcIDescriptorMatcherRegion::match_grpc1Request* Arena::CreateMaybeMessage<::grpcIDescriptorMatcherRegion::match_grpc1Request>(Arena*);
template<> ::grpcIDescriptorMatcherRegion::match_grpc1Response* Arena::CreateMaybeMessage<::grpcIDescriptorMatcherRegion::match_grpc1Response>(Arena*);
template<> ::grpcIDescriptorMatcherRegion::match_grpc2Request* Arena::CreateMaybeMessage<::grpcIDescriptorMatcherRegion::match_grpc2Request>(Arena*);
template<> ::grpcIDescriptorMatcherRegion::match_grpc2Response* Arena::CreateMaybeMessage<::grpcIDescriptorMatcherRegion::match_grpc2Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIDescriptorMatcherRegion {

// ===================================================================

class match_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorMatcherRegion.match_grpc0Request) */ {
 public:
  inline match_grpc0Request() : match_grpc0Request(nullptr) {}
  virtual ~match_grpc0Request();
  explicit constexpr match_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  match_grpc0Request(const match_grpc0Request& from);
  match_grpc0Request(match_grpc0Request&& from) noexcept
    : match_grpc0Request() {
    *this = ::std::move(from);
  }

  inline match_grpc0Request& operator=(const match_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline match_grpc0Request& operator=(match_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const match_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const match_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const match_grpc0Request*>(
               &_match_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(match_grpc0Request& a, match_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(match_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(match_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline match_grpc0Request* New() const final {
    return CreateMaybeMessage<match_grpc0Request>(nullptr);
  }

  match_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<match_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const match_grpc0Request& from);
  void MergeFrom(const match_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(match_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorMatcherRegion.match_grpc0Request";
  }
  protected:
  explicit match_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptors1FieldNumber = 1,
    kDescriptors2FieldNumber = 2,
    kPoints2D1FieldNumber = 3,
    kPoints2D2FieldNumber = 4,
    kMatchesFieldNumber = 7,
    kRadiusFieldNumber = 5,
    kMatchingDistanceMaxFieldNumber = 6,
  };
  // bytes descriptors1 = 1;
  void clear_descriptors1();
  const std::string& descriptors1() const;
  void set_descriptors1(const std::string& value);
  void set_descriptors1(std::string&& value);
  void set_descriptors1(const char* value);
  void set_descriptors1(const void* value, size_t size);
  std::string* mutable_descriptors1();
  std::string* release_descriptors1();
  void set_allocated_descriptors1(std::string* descriptors1);
  private:
  const std::string& _internal_descriptors1() const;
  void _internal_set_descriptors1(const std::string& value);
  std::string* _internal_mutable_descriptors1();
  public:

  // bytes descriptors2 = 2;
  void clear_descriptors2();
  const std::string& descriptors2() const;
  void set_descriptors2(const std::string& value);
  void set_descriptors2(std::string&& value);
  void set_descriptors2(const char* value);
  void set_descriptors2(const void* value, size_t size);
  std::string* mutable_descriptors2();
  std::string* release_descriptors2();
  void set_allocated_descriptors2(std::string* descriptors2);
  private:
  const std::string& _internal_descriptors2() const;
  void _internal_set_descriptors2(const std::string& value);
  std::string* _internal_mutable_descriptors2();
  public:

  // bytes points2D1 = 3;
  void clear_points2d1();
  const std::string& points2d1() const;
  void set_points2d1(const std::string& value);
  void set_points2d1(std::string&& value);
  void set_points2d1(const char* value);
  void set_points2d1(const void* value, size_t size);
  std::string* mutable_points2d1();
  std::string* release_points2d1();
  void set_allocated_points2d1(std::string* points2d1);
  private:
  const std::string& _internal_points2d1() const;
  void _internal_set_points2d1(const std::string& value);
  std::string* _internal_mutable_points2d1();
  public:

  // bytes points2D2 = 4;
  void clear_points2d2();
  const std::string& points2d2() const;
  void set_points2d2(const std::string& value);
  void set_points2d2(std::string&& value);
  void set_points2d2(const char* value);
  void set_points2d2(const void* value, size_t size);
  std::string* mutable_points2d2();
  std::string* release_points2d2();
  void set_allocated_points2d2(std::string* points2d2);
  private:
  const std::string& _internal_points2d2() const;
  void _internal_set_points2d2(const std::string& value);
  std::string* _internal_mutable_points2d2();
  public:

  // bytes matches = 7;
  void clear_matches();
  const std::string& matches() const;
  void set_matches(const std::string& value);
  void set_matches(std::string&& value);
  void set_matches(const char* value);
  void set_matches(const void* value, size_t size);
  std::string* mutable_matches();
  std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // float radius = 5;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float matchingDistanceMax = 6;
  void clear_matchingdistancemax();
  float matchingdistancemax() const;
  void set_matchingdistancemax(float value);
  private:
  float _internal_matchingdistancemax() const;
  void _internal_set_matchingdistancemax(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorMatcherRegion.match_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptors1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptors2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points2d1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points2d2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  float radius_;
  float matchingdistancemax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorMatcherRegionService_2eproto;
};
// -------------------------------------------------------------------

class match_grpc0Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorMatcherRegion.match_grpc0Response) */ {
 public:
  inline match_grpc0Response() : match_grpc0Response(nullptr) {}
  virtual ~match_grpc0Response();
  explicit constexpr match_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  match_grpc0Response(const match_grpc0Response& from);
  match_grpc0Response(match_grpc0Response&& from) noexcept
    : match_grpc0Response() {
    *this = ::std::move(from);
  }

  inline match_grpc0Response& operator=(const match_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline match_grpc0Response& operator=(match_grpc0Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const match_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const match_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const match_grpc0Response*>(
               &_match_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(match_grpc0Response& a, match_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(match_grpc0Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(match_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline match_grpc0Response* New() const final {
    return CreateMaybeMessage<match_grpc0Response>(nullptr);
  }

  match_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<match_grpc0Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const match_grpc0Response& from);
  void MergeFrom(const match_grpc0Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(match_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorMatcherRegion.match_grpc0Response";
  }
  protected:
  explicit match_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes matches = 1;
  void clear_matches();
  const std::string& matches() const;
  void set_matches(const std::string& value);
  void set_matches(std::string&& value);
  void set_matches(const char* value);
  void set_matches(const void* value, size_t size);
  std::string* mutable_matches();
  std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorMatcherRegion.match_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorMatcherRegionService_2eproto;
};
// -------------------------------------------------------------------

class match_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorMatcherRegion.match_grpc1Request) */ {
 public:
  inline match_grpc1Request() : match_grpc1Request(nullptr) {}
  virtual ~match_grpc1Request();
  explicit constexpr match_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  match_grpc1Request(const match_grpc1Request& from);
  match_grpc1Request(match_grpc1Request&& from) noexcept
    : match_grpc1Request() {
    *this = ::std::move(from);
  }

  inline match_grpc1Request& operator=(const match_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline match_grpc1Request& operator=(match_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const match_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const match_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const match_grpc1Request*>(
               &_match_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(match_grpc1Request& a, match_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(match_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(match_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline match_grpc1Request* New() const final {
    return CreateMaybeMessage<match_grpc1Request>(nullptr);
  }

  match_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<match_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const match_grpc1Request& from);
  void MergeFrom(const match_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(match_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorMatcherRegion.match_grpc1Request";
  }
  protected:
  explicit match_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoints2DFieldNumber = 1,
    kDescriptorsFieldNumber = 2,
    kFrameFieldNumber = 3,
    kMatchesFieldNumber = 6,
    kRadiusFieldNumber = 4,
    kMatchingDistanceMaxFieldNumber = 5,
  };
  // bytes points2D = 1;
  void clear_points2d();
  const std::string& points2d() const;
  void set_points2d(const std::string& value);
  void set_points2d(std::string&& value);
  void set_points2d(const char* value);
  void set_points2d(const void* value, size_t size);
  std::string* mutable_points2d();
  std::string* release_points2d();
  void set_allocated_points2d(std::string* points2d);
  private:
  const std::string& _internal_points2d() const;
  void _internal_set_points2d(const std::string& value);
  std::string* _internal_mutable_points2d();
  public:

  // bytes descriptors = 2;
  void clear_descriptors();
  const std::string& descriptors() const;
  void set_descriptors(const std::string& value);
  void set_descriptors(std::string&& value);
  void set_descriptors(const char* value);
  void set_descriptors(const void* value, size_t size);
  std::string* mutable_descriptors();
  std::string* release_descriptors();
  void set_allocated_descriptors(std::string* descriptors);
  private:
  const std::string& _internal_descriptors() const;
  void _internal_set_descriptors(const std::string& value);
  std::string* _internal_mutable_descriptors();
  public:

  // bytes frame = 3;
  void clear_frame();
  const std::string& frame() const;
  void set_frame(const std::string& value);
  void set_frame(std::string&& value);
  void set_frame(const char* value);
  void set_frame(const void* value, size_t size);
  std::string* mutable_frame();
  std::string* release_frame();
  void set_allocated_frame(std::string* frame);
  private:
  const std::string& _internal_frame() const;
  void _internal_set_frame(const std::string& value);
  std::string* _internal_mutable_frame();
  public:

  // bytes matches = 6;
  void clear_matches();
  const std::string& matches() const;
  void set_matches(const std::string& value);
  void set_matches(std::string&& value);
  void set_matches(const char* value);
  void set_matches(const void* value, size_t size);
  std::string* mutable_matches();
  std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // float radius = 4;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float matchingDistanceMax = 5;
  void clear_matchingdistancemax();
  float matchingdistancemax() const;
  void set_matchingdistancemax(float value);
  private:
  float _internal_matchingdistancemax() const;
  void _internal_set_matchingdistancemax(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorMatcherRegion.match_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points2d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  float radius_;
  float matchingdistancemax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorMatcherRegionService_2eproto;
};
// -------------------------------------------------------------------

class match_grpc1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorMatcherRegion.match_grpc1Response) */ {
 public:
  inline match_grpc1Response() : match_grpc1Response(nullptr) {}
  virtual ~match_grpc1Response();
  explicit constexpr match_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  match_grpc1Response(const match_grpc1Response& from);
  match_grpc1Response(match_grpc1Response&& from) noexcept
    : match_grpc1Response() {
    *this = ::std::move(from);
  }

  inline match_grpc1Response& operator=(const match_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline match_grpc1Response& operator=(match_grpc1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const match_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const match_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const match_grpc1Response*>(
               &_match_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(match_grpc1Response& a, match_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(match_grpc1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(match_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline match_grpc1Response* New() const final {
    return CreateMaybeMessage<match_grpc1Response>(nullptr);
  }

  match_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<match_grpc1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const match_grpc1Response& from);
  void MergeFrom(const match_grpc1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(match_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorMatcherRegion.match_grpc1Response";
  }
  protected:
  explicit match_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes matches = 1;
  void clear_matches();
  const std::string& matches() const;
  void set_matches(const std::string& value);
  void set_matches(std::string&& value);
  void set_matches(const char* value);
  void set_matches(const void* value, size_t size);
  std::string* mutable_matches();
  std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorMatcherRegion.match_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorMatcherRegionService_2eproto;
};
// -------------------------------------------------------------------

class match_grpc2Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorMatcherRegion.match_grpc2Request) */ {
 public:
  inline match_grpc2Request() : match_grpc2Request(nullptr) {}
  virtual ~match_grpc2Request();
  explicit constexpr match_grpc2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  match_grpc2Request(const match_grpc2Request& from);
  match_grpc2Request(match_grpc2Request&& from) noexcept
    : match_grpc2Request() {
    *this = ::std::move(from);
  }

  inline match_grpc2Request& operator=(const match_grpc2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline match_grpc2Request& operator=(match_grpc2Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const match_grpc2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const match_grpc2Request* internal_default_instance() {
    return reinterpret_cast<const match_grpc2Request*>(
               &_match_grpc2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(match_grpc2Request& a, match_grpc2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(match_grpc2Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(match_grpc2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline match_grpc2Request* New() const final {
    return CreateMaybeMessage<match_grpc2Request>(nullptr);
  }

  match_grpc2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<match_grpc2Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const match_grpc2Request& from);
  void MergeFrom(const match_grpc2Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(match_grpc2Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorMatcherRegion.match_grpc2Request";
  }
  protected:
  explicit match_grpc2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFrameFieldNumber = 1,
    kLastFrameFieldNumber = 2,
    kMatchesFieldNumber = 5,
    kRadiusFieldNumber = 3,
    kMatchingDistanceMaxFieldNumber = 4,
  };
  // bytes currentFrame = 1;
  void clear_currentframe();
  const std::string& currentframe() const;
  void set_currentframe(const std::string& value);
  void set_currentframe(std::string&& value);
  void set_currentframe(const char* value);
  void set_currentframe(const void* value, size_t size);
  std::string* mutable_currentframe();
  std::string* release_currentframe();
  void set_allocated_currentframe(std::string* currentframe);
  private:
  const std::string& _internal_currentframe() const;
  void _internal_set_currentframe(const std::string& value);
  std::string* _internal_mutable_currentframe();
  public:

  // bytes lastFrame = 2;
  void clear_lastframe();
  const std::string& lastframe() const;
  void set_lastframe(const std::string& value);
  void set_lastframe(std::string&& value);
  void set_lastframe(const char* value);
  void set_lastframe(const void* value, size_t size);
  std::string* mutable_lastframe();
  std::string* release_lastframe();
  void set_allocated_lastframe(std::string* lastframe);
  private:
  const std::string& _internal_lastframe() const;
  void _internal_set_lastframe(const std::string& value);
  std::string* _internal_mutable_lastframe();
  public:

  // bytes matches = 5;
  void clear_matches();
  const std::string& matches() const;
  void set_matches(const std::string& value);
  void set_matches(std::string&& value);
  void set_matches(const char* value);
  void set_matches(const void* value, size_t size);
  std::string* mutable_matches();
  std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // float radius = 3;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float matchingDistanceMax = 4;
  void clear_matchingdistancemax();
  float matchingdistancemax() const;
  void set_matchingdistancemax(float value);
  private:
  float _internal_matchingdistancemax() const;
  void _internal_set_matchingdistancemax(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorMatcherRegion.match_grpc2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastframe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  float radius_;
  float matchingdistancemax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorMatcherRegionService_2eproto;
};
// -------------------------------------------------------------------

class match_grpc2Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorMatcherRegion.match_grpc2Response) */ {
 public:
  inline match_grpc2Response() : match_grpc2Response(nullptr) {}
  virtual ~match_grpc2Response();
  explicit constexpr match_grpc2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  match_grpc2Response(const match_grpc2Response& from);
  match_grpc2Response(match_grpc2Response&& from) noexcept
    : match_grpc2Response() {
    *this = ::std::move(from);
  }

  inline match_grpc2Response& operator=(const match_grpc2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline match_grpc2Response& operator=(match_grpc2Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const match_grpc2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const match_grpc2Response* internal_default_instance() {
    return reinterpret_cast<const match_grpc2Response*>(
               &_match_grpc2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(match_grpc2Response& a, match_grpc2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(match_grpc2Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(match_grpc2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline match_grpc2Response* New() const final {
    return CreateMaybeMessage<match_grpc2Response>(nullptr);
  }

  match_grpc2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<match_grpc2Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const match_grpc2Response& from);
  void MergeFrom(const match_grpc2Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(match_grpc2Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorMatcherRegion.match_grpc2Response";
  }
  protected:
  explicit match_grpc2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes matches = 1;
  void clear_matches();
  const std::string& matches() const;
  void set_matches(const std::string& value);
  void set_matches(std::string&& value);
  void set_matches(const char* value);
  void set_matches(const void* value, size_t size);
  std::string* mutable_matches();
  std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorMatcherRegion.match_grpc2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorMatcherRegionService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// match_grpc0Request

// bytes descriptors1 = 1;
inline void match_grpc0Request::clear_descriptors1() {
  descriptors1_.ClearToEmpty();
}
inline const std::string& match_grpc0Request::descriptors1() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors1)
  return _internal_descriptors1();
}
inline void match_grpc0Request::set_descriptors1(const std::string& value) {
  _internal_set_descriptors1(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors1)
}
inline std::string* match_grpc0Request::mutable_descriptors1() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors1)
  return _internal_mutable_descriptors1();
}
inline const std::string& match_grpc0Request::_internal_descriptors1() const {
  return descriptors1_.Get();
}
inline void match_grpc0Request::_internal_set_descriptors1(const std::string& value) {
  
  descriptors1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc0Request::set_descriptors1(std::string&& value) {
  
  descriptors1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors1)
}
inline void match_grpc0Request::set_descriptors1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptors1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors1)
}
inline void match_grpc0Request::set_descriptors1(const void* value,
    size_t size) {
  
  descriptors1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors1)
}
inline std::string* match_grpc0Request::_internal_mutable_descriptors1() {
  
  return descriptors1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc0Request::release_descriptors1() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors1)
  return descriptors1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc0Request::set_allocated_descriptors1(std::string* descriptors1) {
  if (descriptors1 != nullptr) {
    
  } else {
    
  }
  descriptors1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptors1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors1)
}

// bytes descriptors2 = 2;
inline void match_grpc0Request::clear_descriptors2() {
  descriptors2_.ClearToEmpty();
}
inline const std::string& match_grpc0Request::descriptors2() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors2)
  return _internal_descriptors2();
}
inline void match_grpc0Request::set_descriptors2(const std::string& value) {
  _internal_set_descriptors2(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors2)
}
inline std::string* match_grpc0Request::mutable_descriptors2() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors2)
  return _internal_mutable_descriptors2();
}
inline const std::string& match_grpc0Request::_internal_descriptors2() const {
  return descriptors2_.Get();
}
inline void match_grpc0Request::_internal_set_descriptors2(const std::string& value) {
  
  descriptors2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc0Request::set_descriptors2(std::string&& value) {
  
  descriptors2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors2)
}
inline void match_grpc0Request::set_descriptors2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptors2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors2)
}
inline void match_grpc0Request::set_descriptors2(const void* value,
    size_t size) {
  
  descriptors2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors2)
}
inline std::string* match_grpc0Request::_internal_mutable_descriptors2() {
  
  return descriptors2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc0Request::release_descriptors2() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors2)
  return descriptors2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc0Request::set_allocated_descriptors2(std::string* descriptors2) {
  if (descriptors2 != nullptr) {
    
  } else {
    
  }
  descriptors2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptors2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc0Request.descriptors2)
}

// bytes points2D1 = 3;
inline void match_grpc0Request::clear_points2d1() {
  points2d1_.ClearToEmpty();
}
inline const std::string& match_grpc0Request::points2d1() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D1)
  return _internal_points2d1();
}
inline void match_grpc0Request::set_points2d1(const std::string& value) {
  _internal_set_points2d1(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D1)
}
inline std::string* match_grpc0Request::mutable_points2d1() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D1)
  return _internal_mutable_points2d1();
}
inline const std::string& match_grpc0Request::_internal_points2d1() const {
  return points2d1_.Get();
}
inline void match_grpc0Request::_internal_set_points2d1(const std::string& value) {
  
  points2d1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc0Request::set_points2d1(std::string&& value) {
  
  points2d1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D1)
}
inline void match_grpc0Request::set_points2d1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points2d1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D1)
}
inline void match_grpc0Request::set_points2d1(const void* value,
    size_t size) {
  
  points2d1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D1)
}
inline std::string* match_grpc0Request::_internal_mutable_points2d1() {
  
  return points2d1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc0Request::release_points2d1() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D1)
  return points2d1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc0Request::set_allocated_points2d1(std::string* points2d1) {
  if (points2d1 != nullptr) {
    
  } else {
    
  }
  points2d1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points2d1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D1)
}

// bytes points2D2 = 4;
inline void match_grpc0Request::clear_points2d2() {
  points2d2_.ClearToEmpty();
}
inline const std::string& match_grpc0Request::points2d2() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D2)
  return _internal_points2d2();
}
inline void match_grpc0Request::set_points2d2(const std::string& value) {
  _internal_set_points2d2(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D2)
}
inline std::string* match_grpc0Request::mutable_points2d2() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D2)
  return _internal_mutable_points2d2();
}
inline const std::string& match_grpc0Request::_internal_points2d2() const {
  return points2d2_.Get();
}
inline void match_grpc0Request::_internal_set_points2d2(const std::string& value) {
  
  points2d2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc0Request::set_points2d2(std::string&& value) {
  
  points2d2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D2)
}
inline void match_grpc0Request::set_points2d2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points2d2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D2)
}
inline void match_grpc0Request::set_points2d2(const void* value,
    size_t size) {
  
  points2d2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D2)
}
inline std::string* match_grpc0Request::_internal_mutable_points2d2() {
  
  return points2d2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc0Request::release_points2d2() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D2)
  return points2d2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc0Request::set_allocated_points2d2(std::string* points2d2) {
  if (points2d2 != nullptr) {
    
  } else {
    
  }
  points2d2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points2d2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc0Request.points2D2)
}

// float radius = 5;
inline void match_grpc0Request::clear_radius() {
  radius_ = 0;
}
inline float match_grpc0Request::_internal_radius() const {
  return radius_;
}
inline float match_grpc0Request::radius() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc0Request.radius)
  return _internal_radius();
}
inline void match_grpc0Request::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void match_grpc0Request::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc0Request.radius)
}

// float matchingDistanceMax = 6;
inline void match_grpc0Request::clear_matchingdistancemax() {
  matchingdistancemax_ = 0;
}
inline float match_grpc0Request::_internal_matchingdistancemax() const {
  return matchingdistancemax_;
}
inline float match_grpc0Request::matchingdistancemax() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc0Request.matchingDistanceMax)
  return _internal_matchingdistancemax();
}
inline void match_grpc0Request::_internal_set_matchingdistancemax(float value) {
  
  matchingdistancemax_ = value;
}
inline void match_grpc0Request::set_matchingdistancemax(float value) {
  _internal_set_matchingdistancemax(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc0Request.matchingDistanceMax)
}

// bytes matches = 7;
inline void match_grpc0Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& match_grpc0Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc0Request.matches)
  return _internal_matches();
}
inline void match_grpc0Request::set_matches(const std::string& value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc0Request.matches)
}
inline std::string* match_grpc0Request::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc0Request.matches)
  return _internal_mutable_matches();
}
inline const std::string& match_grpc0Request::_internal_matches() const {
  return matches_.Get();
}
inline void match_grpc0Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc0Request::set_matches(std::string&& value) {
  
  matches_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc0Request.matches)
}
inline void match_grpc0Request::set_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc0Request.matches)
}
inline void match_grpc0Request::set_matches(const void* value,
    size_t size) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc0Request.matches)
}
inline std::string* match_grpc0Request::_internal_mutable_matches() {
  
  return matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc0Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc0Request.matches)
  return matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc0Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc0Request.matches)
}

// -------------------------------------------------------------------

// match_grpc0Response

// bytes matches = 1;
inline void match_grpc0Response::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& match_grpc0Response::matches() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc0Response.matches)
  return _internal_matches();
}
inline void match_grpc0Response::set_matches(const std::string& value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc0Response.matches)
}
inline std::string* match_grpc0Response::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc0Response.matches)
  return _internal_mutable_matches();
}
inline const std::string& match_grpc0Response::_internal_matches() const {
  return matches_.Get();
}
inline void match_grpc0Response::_internal_set_matches(const std::string& value) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc0Response::set_matches(std::string&& value) {
  
  matches_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc0Response.matches)
}
inline void match_grpc0Response::set_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc0Response.matches)
}
inline void match_grpc0Response::set_matches(const void* value,
    size_t size) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc0Response.matches)
}
inline std::string* match_grpc0Response::_internal_mutable_matches() {
  
  return matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc0Response::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc0Response.matches)
  return matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc0Response::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc0Response.matches)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void match_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 match_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 match_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void match_grpc0Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void match_grpc0Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// match_grpc1Request

// bytes points2D = 1;
inline void match_grpc1Request::clear_points2d() {
  points2d_.ClearToEmpty();
}
inline const std::string& match_grpc1Request::points2d() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc1Request.points2D)
  return _internal_points2d();
}
inline void match_grpc1Request::set_points2d(const std::string& value) {
  _internal_set_points2d(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc1Request.points2D)
}
inline std::string* match_grpc1Request::mutable_points2d() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc1Request.points2D)
  return _internal_mutable_points2d();
}
inline const std::string& match_grpc1Request::_internal_points2d() const {
  return points2d_.Get();
}
inline void match_grpc1Request::_internal_set_points2d(const std::string& value) {
  
  points2d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc1Request::set_points2d(std::string&& value) {
  
  points2d_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc1Request.points2D)
}
inline void match_grpc1Request::set_points2d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points2d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc1Request.points2D)
}
inline void match_grpc1Request::set_points2d(const void* value,
    size_t size) {
  
  points2d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc1Request.points2D)
}
inline std::string* match_grpc1Request::_internal_mutable_points2d() {
  
  return points2d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc1Request::release_points2d() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc1Request.points2D)
  return points2d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc1Request::set_allocated_points2d(std::string* points2d) {
  if (points2d != nullptr) {
    
  } else {
    
  }
  points2d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points2d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc1Request.points2D)
}

// bytes descriptors = 2;
inline void match_grpc1Request::clear_descriptors() {
  descriptors_.ClearToEmpty();
}
inline const std::string& match_grpc1Request::descriptors() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc1Request.descriptors)
  return _internal_descriptors();
}
inline void match_grpc1Request::set_descriptors(const std::string& value) {
  _internal_set_descriptors(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc1Request.descriptors)
}
inline std::string* match_grpc1Request::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc1Request.descriptors)
  return _internal_mutable_descriptors();
}
inline const std::string& match_grpc1Request::_internal_descriptors() const {
  return descriptors_.Get();
}
inline void match_grpc1Request::_internal_set_descriptors(const std::string& value) {
  
  descriptors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc1Request::set_descriptors(std::string&& value) {
  
  descriptors_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc1Request.descriptors)
}
inline void match_grpc1Request::set_descriptors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc1Request.descriptors)
}
inline void match_grpc1Request::set_descriptors(const void* value,
    size_t size) {
  
  descriptors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc1Request.descriptors)
}
inline std::string* match_grpc1Request::_internal_mutable_descriptors() {
  
  return descriptors_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc1Request::release_descriptors() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc1Request.descriptors)
  return descriptors_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc1Request::set_allocated_descriptors(std::string* descriptors) {
  if (descriptors != nullptr) {
    
  } else {
    
  }
  descriptors_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptors,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc1Request.descriptors)
}

// bytes frame = 3;
inline void match_grpc1Request::clear_frame() {
  frame_.ClearToEmpty();
}
inline const std::string& match_grpc1Request::frame() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc1Request.frame)
  return _internal_frame();
}
inline void match_grpc1Request::set_frame(const std::string& value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc1Request.frame)
}
inline std::string* match_grpc1Request::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc1Request.frame)
  return _internal_mutable_frame();
}
inline const std::string& match_grpc1Request::_internal_frame() const {
  return frame_.Get();
}
inline void match_grpc1Request::_internal_set_frame(const std::string& value) {
  
  frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc1Request::set_frame(std::string&& value) {
  
  frame_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc1Request.frame)
}
inline void match_grpc1Request::set_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc1Request.frame)
}
inline void match_grpc1Request::set_frame(const void* value,
    size_t size) {
  
  frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc1Request.frame)
}
inline std::string* match_grpc1Request::_internal_mutable_frame() {
  
  return frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc1Request::release_frame() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc1Request.frame)
  return frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc1Request::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc1Request.frame)
}

// float radius = 4;
inline void match_grpc1Request::clear_radius() {
  radius_ = 0;
}
inline float match_grpc1Request::_internal_radius() const {
  return radius_;
}
inline float match_grpc1Request::radius() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc1Request.radius)
  return _internal_radius();
}
inline void match_grpc1Request::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void match_grpc1Request::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc1Request.radius)
}

// float matchingDistanceMax = 5;
inline void match_grpc1Request::clear_matchingdistancemax() {
  matchingdistancemax_ = 0;
}
inline float match_grpc1Request::_internal_matchingdistancemax() const {
  return matchingdistancemax_;
}
inline float match_grpc1Request::matchingdistancemax() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc1Request.matchingDistanceMax)
  return _internal_matchingdistancemax();
}
inline void match_grpc1Request::_internal_set_matchingdistancemax(float value) {
  
  matchingdistancemax_ = value;
}
inline void match_grpc1Request::set_matchingdistancemax(float value) {
  _internal_set_matchingdistancemax(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc1Request.matchingDistanceMax)
}

// bytes matches = 6;
inline void match_grpc1Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& match_grpc1Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc1Request.matches)
  return _internal_matches();
}
inline void match_grpc1Request::set_matches(const std::string& value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc1Request.matches)
}
inline std::string* match_grpc1Request::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc1Request.matches)
  return _internal_mutable_matches();
}
inline const std::string& match_grpc1Request::_internal_matches() const {
  return matches_.Get();
}
inline void match_grpc1Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc1Request::set_matches(std::string&& value) {
  
  matches_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc1Request.matches)
}
inline void match_grpc1Request::set_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc1Request.matches)
}
inline void match_grpc1Request::set_matches(const void* value,
    size_t size) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc1Request.matches)
}
inline std::string* match_grpc1Request::_internal_mutable_matches() {
  
  return matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc1Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc1Request.matches)
  return matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc1Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc1Request.matches)
}

// -------------------------------------------------------------------

// match_grpc1Response

// bytes matches = 1;
inline void match_grpc1Response::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& match_grpc1Response::matches() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc1Response.matches)
  return _internal_matches();
}
inline void match_grpc1Response::set_matches(const std::string& value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc1Response.matches)
}
inline std::string* match_grpc1Response::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc1Response.matches)
  return _internal_mutable_matches();
}
inline const std::string& match_grpc1Response::_internal_matches() const {
  return matches_.Get();
}
inline void match_grpc1Response::_internal_set_matches(const std::string& value) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc1Response::set_matches(std::string&& value) {
  
  matches_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc1Response.matches)
}
inline void match_grpc1Response::set_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc1Response.matches)
}
inline void match_grpc1Response::set_matches(const void* value,
    size_t size) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc1Response.matches)
}
inline std::string* match_grpc1Response::_internal_mutable_matches() {
  
  return matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc1Response::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc1Response.matches)
  return matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc1Response::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc1Response.matches)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void match_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 match_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 match_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void match_grpc1Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void match_grpc1Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// match_grpc2Request

// bytes currentFrame = 1;
inline void match_grpc2Request::clear_currentframe() {
  currentframe_.ClearToEmpty();
}
inline const std::string& match_grpc2Request::currentframe() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc2Request.currentFrame)
  return _internal_currentframe();
}
inline void match_grpc2Request::set_currentframe(const std::string& value) {
  _internal_set_currentframe(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc2Request.currentFrame)
}
inline std::string* match_grpc2Request::mutable_currentframe() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc2Request.currentFrame)
  return _internal_mutable_currentframe();
}
inline const std::string& match_grpc2Request::_internal_currentframe() const {
  return currentframe_.Get();
}
inline void match_grpc2Request::_internal_set_currentframe(const std::string& value) {
  
  currentframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc2Request::set_currentframe(std::string&& value) {
  
  currentframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc2Request.currentFrame)
}
inline void match_grpc2Request::set_currentframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currentframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc2Request.currentFrame)
}
inline void match_grpc2Request::set_currentframe(const void* value,
    size_t size) {
  
  currentframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc2Request.currentFrame)
}
inline std::string* match_grpc2Request::_internal_mutable_currentframe() {
  
  return currentframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc2Request::release_currentframe() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc2Request.currentFrame)
  return currentframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc2Request::set_allocated_currentframe(std::string* currentframe) {
  if (currentframe != nullptr) {
    
  } else {
    
  }
  currentframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc2Request.currentFrame)
}

// bytes lastFrame = 2;
inline void match_grpc2Request::clear_lastframe() {
  lastframe_.ClearToEmpty();
}
inline const std::string& match_grpc2Request::lastframe() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc2Request.lastFrame)
  return _internal_lastframe();
}
inline void match_grpc2Request::set_lastframe(const std::string& value) {
  _internal_set_lastframe(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc2Request.lastFrame)
}
inline std::string* match_grpc2Request::mutable_lastframe() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc2Request.lastFrame)
  return _internal_mutable_lastframe();
}
inline const std::string& match_grpc2Request::_internal_lastframe() const {
  return lastframe_.Get();
}
inline void match_grpc2Request::_internal_set_lastframe(const std::string& value) {
  
  lastframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc2Request::set_lastframe(std::string&& value) {
  
  lastframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc2Request.lastFrame)
}
inline void match_grpc2Request::set_lastframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc2Request.lastFrame)
}
inline void match_grpc2Request::set_lastframe(const void* value,
    size_t size) {
  
  lastframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc2Request.lastFrame)
}
inline std::string* match_grpc2Request::_internal_mutable_lastframe() {
  
  return lastframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc2Request::release_lastframe() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc2Request.lastFrame)
  return lastframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc2Request::set_allocated_lastframe(std::string* lastframe) {
  if (lastframe != nullptr) {
    
  } else {
    
  }
  lastframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc2Request.lastFrame)
}

// float radius = 3;
inline void match_grpc2Request::clear_radius() {
  radius_ = 0;
}
inline float match_grpc2Request::_internal_radius() const {
  return radius_;
}
inline float match_grpc2Request::radius() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc2Request.radius)
  return _internal_radius();
}
inline void match_grpc2Request::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void match_grpc2Request::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc2Request.radius)
}

// float matchingDistanceMax = 4;
inline void match_grpc2Request::clear_matchingdistancemax() {
  matchingdistancemax_ = 0;
}
inline float match_grpc2Request::_internal_matchingdistancemax() const {
  return matchingdistancemax_;
}
inline float match_grpc2Request::matchingdistancemax() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc2Request.matchingDistanceMax)
  return _internal_matchingdistancemax();
}
inline void match_grpc2Request::_internal_set_matchingdistancemax(float value) {
  
  matchingdistancemax_ = value;
}
inline void match_grpc2Request::set_matchingdistancemax(float value) {
  _internal_set_matchingdistancemax(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc2Request.matchingDistanceMax)
}

// bytes matches = 5;
inline void match_grpc2Request::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& match_grpc2Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc2Request.matches)
  return _internal_matches();
}
inline void match_grpc2Request::set_matches(const std::string& value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc2Request.matches)
}
inline std::string* match_grpc2Request::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc2Request.matches)
  return _internal_mutable_matches();
}
inline const std::string& match_grpc2Request::_internal_matches() const {
  return matches_.Get();
}
inline void match_grpc2Request::_internal_set_matches(const std::string& value) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc2Request::set_matches(std::string&& value) {
  
  matches_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc2Request.matches)
}
inline void match_grpc2Request::set_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc2Request.matches)
}
inline void match_grpc2Request::set_matches(const void* value,
    size_t size) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc2Request.matches)
}
inline std::string* match_grpc2Request::_internal_mutable_matches() {
  
  return matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc2Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc2Request.matches)
  return matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc2Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc2Request.matches)
}

// -------------------------------------------------------------------

// match_grpc2Response

// bytes matches = 1;
inline void match_grpc2Response::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& match_grpc2Response::matches() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc2Response.matches)
  return _internal_matches();
}
inline void match_grpc2Response::set_matches(const std::string& value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc2Response.matches)
}
inline std::string* match_grpc2Response::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorMatcherRegion.match_grpc2Response.matches)
  return _internal_mutable_matches();
}
inline const std::string& match_grpc2Response::_internal_matches() const {
  return matches_.Get();
}
inline void match_grpc2Response::_internal_set_matches(const std::string& value) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void match_grpc2Response::set_matches(std::string&& value) {
  
  matches_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorMatcherRegion.match_grpc2Response.matches)
}
inline void match_grpc2Response::set_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorMatcherRegion.match_grpc2Response.matches)
}
inline void match_grpc2Response::set_matches(const void* value,
    size_t size) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorMatcherRegion.match_grpc2Response.matches)
}
inline std::string* match_grpc2Response::_internal_mutable_matches() {
  
  return matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* match_grpc2Response::release_matches() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorMatcherRegion.match_grpc2Response.matches)
  return matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void match_grpc2Response::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorMatcherRegion.match_grpc2Response.matches)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void match_grpc2Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 match_grpc2Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 match_grpc2Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorMatcherRegion.match_grpc2Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void match_grpc2Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void match_grpc2Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorMatcherRegion.match_grpc2Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIDescriptorMatcherRegion

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIDescriptorMatcherRegionService_2eproto
