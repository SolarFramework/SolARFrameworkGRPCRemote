// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIImageViewerService.proto

#include "grpcIImageViewerService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIImageViewer {
PROTOBUF_CONSTEXPR displayRequest::displayRequest(
    ::_pbi::ConstantInitialized)
  : img_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct displayRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR displayRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~displayRequestDefaultTypeInternal() {}
  union {
    displayRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 displayRequestDefaultTypeInternal _displayRequest_default_instance_;
PROTOBUF_CONSTEXPR displayResponse::displayResponse(
    ::_pbi::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct displayResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR displayResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~displayResponseDefaultTypeInternal() {}
  union {
    displayResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 displayResponseDefaultTypeInternal _displayResponse_default_instance_;
PROTOBUF_CONSTEXPR displayKeyRequest::displayKeyRequest(
    ::_pbi::ConstantInitialized)
  : img_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0)
  , key_(0){}
struct displayKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR displayKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~displayKeyRequestDefaultTypeInternal() {}
  union {
    displayKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 displayKeyRequestDefaultTypeInternal _displayKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR displayKeyResponse::displayKeyResponse(
    ::_pbi::ConstantInitialized)
  : key_(0)
  , xpcfgrpcreturnvalue_(0){}
struct displayKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR displayKeyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~displayKeyResponseDefaultTypeInternal() {}
  union {
    displayKeyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 displayKeyResponseDefaultTypeInternal _displayKeyResponse_default_instance_;
}  // namespace grpcIImageViewer
static ::_pb::Metadata file_level_metadata_grpcIImageViewerService_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIImageViewerService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIImageViewerService_2eproto = nullptr;

const uint32_t TableStruct_grpcIImageViewerService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayRequest, img_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayKeyRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayKeyRequest, img_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayKeyRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayKeyResponse, key_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageViewer::displayKeyResponse, xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIImageViewer::displayRequest)},
  { 8, -1, -1, sizeof(::grpcIImageViewer::displayResponse)},
  { 15, -1, -1, sizeof(::grpcIImageViewer::displayKeyRequest)},
  { 24, -1, -1, sizeof(::grpcIImageViewer::displayKeyResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIImageViewer::_displayRequest_default_instance_._instance,
  &::grpcIImageViewer::_displayResponse_default_instance_._instance,
  &::grpcIImageViewer::_displayKeyRequest_default_instance_._instance,
  &::grpcIImageViewer::_displayKeyResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIImageViewerService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035grpcIImageViewerService.proto\022\020grpcIIm"
  "ageViewer\032\033google/protobuf/empty.proto\"B"
  "\n\016displayRequest\022#\n\033grpcServerCompressio"
  "nFormat\030\001 \001(\005\022\013\n\003img\030\002 \001(\014\".\n\017displayRes"
  "ponse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"R\n\021di"
  "splayKeyRequest\022#\n\033grpcServerCompression"
  "Format\030\001 \001(\005\022\013\n\003img\030\002 \001(\014\022\013\n\003key\030\003 \001(\021\">"
  "\n\022displayKeyResponse\022\013\n\003key\030\001 \001(\021\022\033\n\023xpc"
  "fGrpcReturnValue\030\002 \001(\0212\306\001\n\027grpcIImageVie"
  "werService\022P\n\007display\022 .grpcIImageViewer"
  ".displayRequest\032!.grpcIImageViewer.displ"
  "ayResponse\"\000\022Y\n\ndisplayKey\022#.grpcIImageV"
  "iewer.displayKeyRequest\032$.grpcIImageView"
  "er.displayKeyResponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIImageViewerService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIImageViewerService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIImageViewerService_2eproto = {
    false, false, 551, descriptor_table_protodef_grpcIImageViewerService_2eproto,
    "grpcIImageViewerService.proto",
    &descriptor_table_grpcIImageViewerService_2eproto_once, descriptor_table_grpcIImageViewerService_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_grpcIImageViewerService_2eproto::offsets,
    file_level_metadata_grpcIImageViewerService_2eproto, file_level_enum_descriptors_grpcIImageViewerService_2eproto,
    file_level_service_descriptors_grpcIImageViewerService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIImageViewerService_2eproto_getter() {
  return &descriptor_table_grpcIImageViewerService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIImageViewerService_2eproto(&descriptor_table_grpcIImageViewerService_2eproto);
namespace grpcIImageViewer {

// ===================================================================

class displayRequest::_Internal {
 public:
};

displayRequest::displayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageViewer.displayRequest)
}
displayRequest::displayRequest(const displayRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  img_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    img_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_img().empty()) {
    img_.Set(from._internal_img(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageViewer.displayRequest)
}

inline void displayRequest::SharedCtor() {
img_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  img_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

displayRequest::~displayRequest() {
  // @@protoc_insertion_point(destructor:grpcIImageViewer.displayRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void displayRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  img_.Destroy();
}

void displayRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void displayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageViewer.displayRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  img_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* displayRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes img = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_img();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* displayRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageViewer.displayRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes img = 2;
  if (!this->_internal_img().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_img(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageViewer.displayRequest)
  return target;
}

size_t displayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageViewer.displayRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes img = 2;
  if (!this->_internal_img().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_img());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData displayRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    displayRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*displayRequest::GetClassData() const { return &_class_data_; }

void displayRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<displayRequest *>(to)->MergeFrom(
      static_cast<const displayRequest &>(from));
}


void displayRequest::MergeFrom(const displayRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageViewer.displayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_img().empty()) {
    _internal_set_img(from._internal_img());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void displayRequest::CopyFrom(const displayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageViewer.displayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool displayRequest::IsInitialized() const {
  return true;
}

void displayRequest::InternalSwap(displayRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &img_, lhs_arena,
      &other->img_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata displayRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageViewerService_2eproto_getter, &descriptor_table_grpcIImageViewerService_2eproto_once,
      file_level_metadata_grpcIImageViewerService_2eproto[0]);
}

// ===================================================================

class displayResponse::_Internal {
 public:
};

displayResponse::displayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageViewer.displayResponse)
}
displayResponse::displayResponse(const displayResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageViewer.displayResponse)
}

inline void displayResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

displayResponse::~displayResponse() {
  // @@protoc_insertion_point(destructor:grpcIImageViewer.displayResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void displayResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void displayResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void displayResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageViewer.displayResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* displayResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* displayResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageViewer.displayResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageViewer.displayResponse)
  return target;
}

size_t displayResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageViewer.displayResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData displayResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    displayResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*displayResponse::GetClassData() const { return &_class_data_; }

void displayResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<displayResponse *>(to)->MergeFrom(
      static_cast<const displayResponse &>(from));
}


void displayResponse::MergeFrom(const displayResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageViewer.displayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void displayResponse::CopyFrom(const displayResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageViewer.displayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool displayResponse::IsInitialized() const {
  return true;
}

void displayResponse::InternalSwap(displayResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata displayResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageViewerService_2eproto_getter, &descriptor_table_grpcIImageViewerService_2eproto_once,
      file_level_metadata_grpcIImageViewerService_2eproto[1]);
}

// ===================================================================

class displayKeyRequest::_Internal {
 public:
};

displayKeyRequest::displayKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageViewer.displayKeyRequest)
}
displayKeyRequest::displayKeyRequest(const displayKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  img_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    img_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_img().empty()) {
    img_.Set(from._internal_img(), 
      GetArenaForAllocation());
  }
  ::memcpy(&grpcservercompressionformat_, &from.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&grpcservercompressionformat_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:grpcIImageViewer.displayKeyRequest)
}

inline void displayKeyRequest::SharedCtor() {
img_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  img_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&grpcservercompressionformat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&grpcservercompressionformat_)) + sizeof(key_));
}

displayKeyRequest::~displayKeyRequest() {
  // @@protoc_insertion_point(destructor:grpcIImageViewer.displayKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void displayKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  img_.Destroy();
}

void displayKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void displayKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageViewer.displayKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  img_.ClearToEmpty();
  ::memset(&grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&grpcservercompressionformat_)) + sizeof(key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* displayKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes img = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_img();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* displayKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageViewer.displayKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes img = 2;
  if (!this->_internal_img().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_img(), target);
  }

  // sint32 key = 3;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageViewer.displayKeyRequest)
  return target;
}

size_t displayKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageViewer.displayKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes img = 2;
  if (!this->_internal_img().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_img());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 key = 3;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData displayKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    displayKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*displayKeyRequest::GetClassData() const { return &_class_data_; }

void displayKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<displayKeyRequest *>(to)->MergeFrom(
      static_cast<const displayKeyRequest &>(from));
}


void displayKeyRequest::MergeFrom(const displayKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageViewer.displayKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_img().empty()) {
    _internal_set_img(from._internal_img());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void displayKeyRequest::CopyFrom(const displayKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageViewer.displayKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool displayKeyRequest::IsInitialized() const {
  return true;
}

void displayKeyRequest::InternalSwap(displayKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &img_, lhs_arena,
      &other->img_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(displayKeyRequest, key_)
      + sizeof(displayKeyRequest::key_)
      - PROTOBUF_FIELD_OFFSET(displayKeyRequest, grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata displayKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageViewerService_2eproto_getter, &descriptor_table_grpcIImageViewerService_2eproto_once,
      file_level_metadata_grpcIImageViewerService_2eproto[2]);
}

// ===================================================================

class displayKeyResponse::_Internal {
 public:
};

displayKeyResponse::displayKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageViewer.displayKeyResponse)
}
displayKeyResponse::displayKeyResponse(const displayKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&xpcfgrpcreturnvalue_) -
    reinterpret_cast<char*>(&key_)) + sizeof(xpcfgrpcreturnvalue_));
  // @@protoc_insertion_point(copy_constructor:grpcIImageViewer.displayKeyResponse)
}

inline void displayKeyResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&xpcfgrpcreturnvalue_) -
    reinterpret_cast<char*>(&key_)) + sizeof(xpcfgrpcreturnvalue_));
}

displayKeyResponse::~displayKeyResponse() {
  // @@protoc_insertion_point(destructor:grpcIImageViewer.displayKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void displayKeyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void displayKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void displayKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageViewer.displayKeyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xpcfgrpcreturnvalue_) -
      reinterpret_cast<char*>(&key_)) + sizeof(xpcfgrpcreturnvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* displayKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* displayKeyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageViewer.displayKeyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 key = 1;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_key(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageViewer.displayKeyResponse)
  return target;
}

size_t displayKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageViewer.displayKeyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 key = 1;
  if (this->_internal_key() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_key());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData displayKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    displayKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*displayKeyResponse::GetClassData() const { return &_class_data_; }

void displayKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<displayKeyResponse *>(to)->MergeFrom(
      static_cast<const displayKeyResponse &>(from));
}


void displayKeyResponse::MergeFrom(const displayKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageViewer.displayKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void displayKeyResponse::CopyFrom(const displayKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageViewer.displayKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool displayKeyResponse::IsInitialized() const {
  return true;
}

void displayKeyResponse::InternalSwap(displayKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(displayKeyResponse, xpcfgrpcreturnvalue_)
      + sizeof(displayKeyResponse::xpcfgrpcreturnvalue_)
      - PROTOBUF_FIELD_OFFSET(displayKeyResponse, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata displayKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageViewerService_2eproto_getter, &descriptor_table_grpcIImageViewerService_2eproto_once,
      file_level_metadata_grpcIImageViewerService_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIImageViewer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIImageViewer::displayRequest*
Arena::CreateMaybeMessage< ::grpcIImageViewer::displayRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageViewer::displayRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageViewer::displayResponse*
Arena::CreateMaybeMessage< ::grpcIImageViewer::displayResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageViewer::displayResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageViewer::displayKeyRequest*
Arena::CreateMaybeMessage< ::grpcIImageViewer::displayKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageViewer::displayKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageViewer::displayKeyResponse*
Arena::CreateMaybeMessage< ::grpcIImageViewer::displayKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageViewer::displayKeyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
