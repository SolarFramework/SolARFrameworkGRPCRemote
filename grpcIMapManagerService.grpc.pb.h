// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMapManagerService.proto
#ifndef GRPC_grpcIMapManagerService_2eproto__INCLUDED
#define GRPC_grpcIMapManagerService_2eproto__INCLUDED

#include "grpcIMapManagerService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIMapManager {

class grpcIMapManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIMapManager.grpcIMapManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status init(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpcIMapManager::initResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::initResponse>> Asyncinit(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::initResponse>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::initResponse>> PrepareAsyncinit(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::initResponse>>(PrepareAsyncinitRaw(context, request, cq));
    }
    virtual ::grpc::Status createMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpcIMapManager::createMapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::createMapResponse>> AsynccreateMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::createMapResponse>>(AsynccreateMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::createMapResponse>> PrepareAsynccreateMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::createMapResponse>>(PrepareAsynccreateMapRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpcIMapManager::deleteMapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::deleteMapResponse>> AsyncdeleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::deleteMapResponse>>(AsyncdeleteMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::deleteMapResponse>> PrepareAsyncdeleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::deleteMapResponse>>(PrepareAsyncdeleteMapRaw(context, request, cq));
    }
    virtual ::grpc::Status getAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpcIMapManager::getAllMapsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::getAllMapsResponse>> AsyncgetAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::getAllMapsResponse>>(AsyncgetAllMapsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::getAllMapsResponse>> PrepareAsyncgetAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::getAllMapsResponse>>(PrepareAsyncgetAllMapsRaw(context, request, cq));
    }
    virtual ::grpc::Status registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpcIMapManager::registerMapUpdateServiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::registerMapUpdateServiceResponse>> AsyncregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::registerMapUpdateServiceResponse>>(AsyncregisterMapUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::registerMapUpdateServiceResponse>> PrepareAsyncregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::registerMapUpdateServiceResponse>>(PrepareAsyncregisterMapUpdateServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::unregisterMapUpdateServiceResponse>> AsyncunregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::unregisterMapUpdateServiceResponse>>(AsyncunregisterMapUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::unregisterMapUpdateServiceResponse>> PrepareAsyncunregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::unregisterMapUpdateServiceResponse>>(PrepareAsyncunregisterMapUpdateServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpcIMapManager::increaseMapClientsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::increaseMapClientsResponse>> AsyncincreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::increaseMapClientsResponse>>(AsyncincreaseMapClientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::increaseMapClientsResponse>> PrepareAsyncincreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::increaseMapClientsResponse>>(PrepareAsyncincreaseMapClientsRaw(context, request, cq));
    }
    virtual ::grpc::Status decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpcIMapManager::decreaseMapClientsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::decreaseMapClientsResponse>> AsyncdecreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::decreaseMapClientsResponse>>(AsyncdecreaseMapClientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::decreaseMapClientsResponse>> PrepareAsyncdecreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::decreaseMapClientsResponse>>(PrepareAsyncdecreaseMapClientsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void init(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest* request, ::grpcIMapManager::initResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest* request, ::grpcIMapManager::initResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void createMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest* request, ::grpcIMapManager::createMapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest* request, ::grpcIMapManager::createMapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest* request, ::grpcIMapManager::deleteMapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest* request, ::grpcIMapManager::deleteMapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest* request, ::grpcIMapManager::getAllMapsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest* request, ::grpcIMapManager::getAllMapsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpcIMapManager::registerMapUpdateServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpcIMapManager::registerMapUpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest* request, ::grpcIMapManager::increaseMapClientsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest* request, ::grpcIMapManager::increaseMapClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpcIMapManager::decreaseMapClientsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpcIMapManager::decreaseMapClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::initResponse>* AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::initResponse>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::createMapResponse>* AsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::createMapResponse>* PrepareAsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::deleteMapResponse>* AsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::deleteMapResponse>* PrepareAsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::getAllMapsResponse>* AsyncgetAllMapsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::getAllMapsResponse>* PrepareAsyncgetAllMapsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::registerMapUpdateServiceResponse>* AsyncregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::registerMapUpdateServiceResponse>* PrepareAsyncregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::unregisterMapUpdateServiceResponse>* AsyncunregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::unregisterMapUpdateServiceResponse>* PrepareAsyncunregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::increaseMapClientsResponse>* AsyncincreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::increaseMapClientsResponse>* PrepareAsyncincreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::decreaseMapClientsResponse>* AsyncdecreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapManager::decreaseMapClientsResponse>* PrepareAsyncdecreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status init(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpcIMapManager::initResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::initResponse>> Asyncinit(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::initResponse>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::initResponse>> PrepareAsyncinit(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::initResponse>>(PrepareAsyncinitRaw(context, request, cq));
    }
    ::grpc::Status createMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpcIMapManager::createMapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::createMapResponse>> AsynccreateMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::createMapResponse>>(AsynccreateMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::createMapResponse>> PrepareAsynccreateMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::createMapResponse>>(PrepareAsynccreateMapRaw(context, request, cq));
    }
    ::grpc::Status deleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpcIMapManager::deleteMapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteMapResponse>> AsyncdeleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteMapResponse>>(AsyncdeleteMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteMapResponse>> PrepareAsyncdeleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteMapResponse>>(PrepareAsyncdeleteMapRaw(context, request, cq));
    }
    ::grpc::Status getAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpcIMapManager::getAllMapsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getAllMapsResponse>> AsyncgetAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getAllMapsResponse>>(AsyncgetAllMapsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getAllMapsResponse>> PrepareAsyncgetAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getAllMapsResponse>>(PrepareAsyncgetAllMapsRaw(context, request, cq));
    }
    ::grpc::Status registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpcIMapManager::registerMapUpdateServiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::registerMapUpdateServiceResponse>> AsyncregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::registerMapUpdateServiceResponse>>(AsyncregisterMapUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::registerMapUpdateServiceResponse>> PrepareAsyncregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::registerMapUpdateServiceResponse>>(PrepareAsyncregisterMapUpdateServiceRaw(context, request, cq));
    }
    ::grpc::Status unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::unregisterMapUpdateServiceResponse>> AsyncunregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::unregisterMapUpdateServiceResponse>>(AsyncunregisterMapUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::unregisterMapUpdateServiceResponse>> PrepareAsyncunregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::unregisterMapUpdateServiceResponse>>(PrepareAsyncunregisterMapUpdateServiceRaw(context, request, cq));
    }
    ::grpc::Status increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpcIMapManager::increaseMapClientsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::increaseMapClientsResponse>> AsyncincreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::increaseMapClientsResponse>>(AsyncincreaseMapClientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::increaseMapClientsResponse>> PrepareAsyncincreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::increaseMapClientsResponse>>(PrepareAsyncincreaseMapClientsRaw(context, request, cq));
    }
    ::grpc::Status decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpcIMapManager::decreaseMapClientsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::decreaseMapClientsResponse>> AsyncdecreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::decreaseMapClientsResponse>>(AsyncdecreaseMapClientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::decreaseMapClientsResponse>> PrepareAsyncdecreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::decreaseMapClientsResponse>>(PrepareAsyncdecreaseMapClientsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void init(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest* request, ::grpcIMapManager::initResponse* response, std::function<void(::grpc::Status)>) override;
      void init(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest* request, ::grpcIMapManager::initResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest* request, ::grpcIMapManager::createMapResponse* response, std::function<void(::grpc::Status)>) override;
      void createMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest* request, ::grpcIMapManager::createMapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest* request, ::grpcIMapManager::deleteMapResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest* request, ::grpcIMapManager::deleteMapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest* request, ::grpcIMapManager::getAllMapsResponse* response, std::function<void(::grpc::Status)>) override;
      void getAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest* request, ::grpcIMapManager::getAllMapsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpcIMapManager::registerMapUpdateServiceResponse* response, std::function<void(::grpc::Status)>) override;
      void registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpcIMapManager::registerMapUpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response, std::function<void(::grpc::Status)>) override;
      void unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest* request, ::grpcIMapManager::increaseMapClientsResponse* response, std::function<void(::grpc::Status)>) override;
      void increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest* request, ::grpcIMapManager::increaseMapClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpcIMapManager::decreaseMapClientsResponse* response, std::function<void(::grpc::Status)>) override;
      void decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpcIMapManager::decreaseMapClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::initResponse>* AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::initResponse>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::createMapResponse>* AsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::createMapResponse>* PrepareAsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteMapResponse>* AsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteMapResponse>* PrepareAsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getAllMapsResponse>* AsyncgetAllMapsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getAllMapsResponse>* PrepareAsyncgetAllMapsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::registerMapUpdateServiceResponse>* AsyncregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::registerMapUpdateServiceResponse>* PrepareAsyncregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::unregisterMapUpdateServiceResponse>* AsyncunregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::unregisterMapUpdateServiceResponse>* PrepareAsyncunregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::increaseMapClientsResponse>* AsyncincreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::increaseMapClientsResponse>* PrepareAsyncincreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::decreaseMapClientsResponse>* AsyncdecreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapManager::decreaseMapClientsResponse>* PrepareAsyncdecreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_init_;
    const ::grpc::internal::RpcMethod rpcmethod_createMap_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteMap_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllMaps_;
    const ::grpc::internal::RpcMethod rpcmethod_registerMapUpdateService_;
    const ::grpc::internal::RpcMethod rpcmethod_unregisterMapUpdateService_;
    const ::grpc::internal::RpcMethod rpcmethod_increaseMapClients_;
    const ::grpc::internal::RpcMethod rpcmethod_decreaseMapClients_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status init(::grpc::ServerContext* context, const ::grpcIMapManager::initRequest* request, ::grpcIMapManager::initResponse* response);
    virtual ::grpc::Status createMap(::grpc::ServerContext* context, const ::grpcIMapManager::createMapRequest* request, ::grpcIMapManager::createMapResponse* response);
    virtual ::grpc::Status deleteMap(::grpc::ServerContext* context, const ::grpcIMapManager::deleteMapRequest* request, ::grpcIMapManager::deleteMapResponse* response);
    virtual ::grpc::Status getAllMaps(::grpc::ServerContext* context, const ::grpcIMapManager::getAllMapsRequest* request, ::grpcIMapManager::getAllMapsResponse* response);
    virtual ::grpc::Status registerMapUpdateService(::grpc::ServerContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpcIMapManager::registerMapUpdateServiceResponse* response);
    virtual ::grpc::Status unregisterMapUpdateService(::grpc::ServerContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response);
    virtual ::grpc::Status increaseMapClients(::grpc::ServerContext* context, const ::grpcIMapManager::increaseMapClientsRequest* request, ::grpcIMapManager::increaseMapClientsResponse* response);
    virtual ::grpc::Status decreaseMapClients(::grpc::ServerContext* context, const ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpcIMapManager::decreaseMapClientsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::initRequest* /*request*/, ::grpcIMapManager::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit(::grpc::ServerContext* context, ::grpcIMapManager::initRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapManager::initResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createMap() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::createMapRequest* /*request*/, ::grpcIMapManager::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateMap(::grpc::ServerContext* context, ::grpcIMapManager::createMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapManager::createMapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteMap() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::deleteMapRequest* /*request*/, ::grpcIMapManager::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteMap(::grpc::ServerContext* context, ::grpcIMapManager::deleteMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapManager::deleteMapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllMaps() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getAllMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMaps(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::getAllMapsRequest* /*request*/, ::grpcIMapManager::getAllMapsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllMaps(::grpc::ServerContext* context, ::grpcIMapManager::getAllMapsRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapManager::getAllMapsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_registerMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerMapUpdateService() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_registerMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::registerMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::registerMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterMapUpdateService(::grpc::ServerContext* context, ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapManager::registerMapUpdateServiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unregisterMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unregisterMapUpdateService() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_unregisterMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::unregisterMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunregisterMapUpdateService(::grpc::ServerContext* context, ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapManager::unregisterMapUpdateServiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_increaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_increaseMapClients() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_increaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status increaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::increaseMapClientsRequest* /*request*/, ::grpcIMapManager::increaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestincreaseMapClients(::grpc::ServerContext* context, ::grpcIMapManager::increaseMapClientsRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapManager::increaseMapClientsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_decreaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_decreaseMapClients() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_decreaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decreaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::decreaseMapClientsRequest* /*request*/, ::grpcIMapManager::decreaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdecreaseMapClients(::grpc::ServerContext* context, ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapManager::decreaseMapClientsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_init<WithAsyncMethod_createMap<WithAsyncMethod_deleteMap<WithAsyncMethod_getAllMaps<WithAsyncMethod_registerMapUpdateService<WithAsyncMethod_unregisterMapUpdateService<WithAsyncMethod_increaseMapClients<WithAsyncMethod_decreaseMapClients<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::initRequest, ::grpcIMapManager::initResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapManager::initRequest* request, ::grpcIMapManager::initResponse* response) { return this->init(context, request, response); }));}
    void SetMessageAllocatorFor_init(
        ::grpc::MessageAllocator< ::grpcIMapManager::initRequest, ::grpcIMapManager::initResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::initRequest, ::grpcIMapManager::initResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::initRequest* /*request*/, ::grpcIMapManager::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapManager::initRequest* /*request*/, ::grpcIMapManager::initResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createMap() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::createMapRequest, ::grpcIMapManager::createMapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapManager::createMapRequest* request, ::grpcIMapManager::createMapResponse* response) { return this->createMap(context, request, response); }));}
    void SetMessageAllocatorFor_createMap(
        ::grpc::MessageAllocator< ::grpcIMapManager::createMapRequest, ::grpcIMapManager::createMapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::createMapRequest, ::grpcIMapManager::createMapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::createMapRequest* /*request*/, ::grpcIMapManager::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapManager::createMapRequest* /*request*/, ::grpcIMapManager::createMapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteMap() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::deleteMapRequest, ::grpcIMapManager::deleteMapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapManager::deleteMapRequest* request, ::grpcIMapManager::deleteMapResponse* response) { return this->deleteMap(context, request, response); }));}
    void SetMessageAllocatorFor_deleteMap(
        ::grpc::MessageAllocator< ::grpcIMapManager::deleteMapRequest, ::grpcIMapManager::deleteMapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::deleteMapRequest, ::grpcIMapManager::deleteMapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::deleteMapRequest* /*request*/, ::grpcIMapManager::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapManager::deleteMapRequest* /*request*/, ::grpcIMapManager::deleteMapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAllMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAllMaps() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::getAllMapsRequest, ::grpcIMapManager::getAllMapsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapManager::getAllMapsRequest* request, ::grpcIMapManager::getAllMapsResponse* response) { return this->getAllMaps(context, request, response); }));}
    void SetMessageAllocatorFor_getAllMaps(
        ::grpc::MessageAllocator< ::grpcIMapManager::getAllMapsRequest, ::grpcIMapManager::getAllMapsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::getAllMapsRequest, ::grpcIMapManager::getAllMapsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAllMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMaps(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::getAllMapsRequest* /*request*/, ::grpcIMapManager::getAllMapsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllMaps(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapManager::getAllMapsRequest* /*request*/, ::grpcIMapManager::getAllMapsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_registerMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_registerMapUpdateService() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::registerMapUpdateServiceRequest, ::grpcIMapManager::registerMapUpdateServiceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpcIMapManager::registerMapUpdateServiceResponse* response) { return this->registerMapUpdateService(context, request, response); }));}
    void SetMessageAllocatorFor_registerMapUpdateService(
        ::grpc::MessageAllocator< ::grpcIMapManager::registerMapUpdateServiceRequest, ::grpcIMapManager::registerMapUpdateServiceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::registerMapUpdateServiceRequest, ::grpcIMapManager::registerMapUpdateServiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_registerMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::registerMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::registerMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerMapUpdateService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapManager::registerMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::registerMapUpdateServiceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unregisterMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unregisterMapUpdateService() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::unregisterMapUpdateServiceRequest, ::grpcIMapManager::unregisterMapUpdateServiceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response) { return this->unregisterMapUpdateService(context, request, response); }));}
    void SetMessageAllocatorFor_unregisterMapUpdateService(
        ::grpc::MessageAllocator< ::grpcIMapManager::unregisterMapUpdateServiceRequest, ::grpcIMapManager::unregisterMapUpdateServiceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::unregisterMapUpdateServiceRequest, ::grpcIMapManager::unregisterMapUpdateServiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unregisterMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::unregisterMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregisterMapUpdateService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::unregisterMapUpdateServiceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_increaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_increaseMapClients() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::increaseMapClientsRequest, ::grpcIMapManager::increaseMapClientsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapManager::increaseMapClientsRequest* request, ::grpcIMapManager::increaseMapClientsResponse* response) { return this->increaseMapClients(context, request, response); }));}
    void SetMessageAllocatorFor_increaseMapClients(
        ::grpc::MessageAllocator< ::grpcIMapManager::increaseMapClientsRequest, ::grpcIMapManager::increaseMapClientsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::increaseMapClientsRequest, ::grpcIMapManager::increaseMapClientsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_increaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status increaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::increaseMapClientsRequest* /*request*/, ::grpcIMapManager::increaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* increaseMapClients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapManager::increaseMapClientsRequest* /*request*/, ::grpcIMapManager::increaseMapClientsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_decreaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_decreaseMapClients() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::decreaseMapClientsRequest, ::grpcIMapManager::decreaseMapClientsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpcIMapManager::decreaseMapClientsResponse* response) { return this->decreaseMapClients(context, request, response); }));}
    void SetMessageAllocatorFor_decreaseMapClients(
        ::grpc::MessageAllocator< ::grpcIMapManager::decreaseMapClientsRequest, ::grpcIMapManager::decreaseMapClientsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapManager::decreaseMapClientsRequest, ::grpcIMapManager::decreaseMapClientsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_decreaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decreaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::decreaseMapClientsRequest* /*request*/, ::grpcIMapManager::decreaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* decreaseMapClients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapManager::decreaseMapClientsRequest* /*request*/, ::grpcIMapManager::decreaseMapClientsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_init<WithCallbackMethod_createMap<WithCallbackMethod_deleteMap<WithCallbackMethod_getAllMaps<WithCallbackMethod_registerMapUpdateService<WithCallbackMethod_unregisterMapUpdateService<WithCallbackMethod_increaseMapClients<WithCallbackMethod_decreaseMapClients<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::initRequest* /*request*/, ::grpcIMapManager::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createMap() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::createMapRequest* /*request*/, ::grpcIMapManager::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteMap() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::deleteMapRequest* /*request*/, ::grpcIMapManager::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllMaps() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getAllMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMaps(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::getAllMapsRequest* /*request*/, ::grpcIMapManager::getAllMapsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_registerMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerMapUpdateService() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_registerMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::registerMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::registerMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unregisterMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unregisterMapUpdateService() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_unregisterMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::unregisterMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_increaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_increaseMapClients() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_increaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status increaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::increaseMapClientsRequest* /*request*/, ::grpcIMapManager::increaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_decreaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_decreaseMapClients() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_decreaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decreaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::decreaseMapClientsRequest* /*request*/, ::grpcIMapManager::decreaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::initRequest* /*request*/, ::grpcIMapManager::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createMap() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::createMapRequest* /*request*/, ::grpcIMapManager::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteMap() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::deleteMapRequest* /*request*/, ::grpcIMapManager::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllMaps() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getAllMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMaps(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::getAllMapsRequest* /*request*/, ::grpcIMapManager::getAllMapsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllMaps(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerMapUpdateService() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_registerMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::registerMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::registerMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterMapUpdateService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unregisterMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unregisterMapUpdateService() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_unregisterMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::unregisterMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunregisterMapUpdateService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_increaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_increaseMapClients() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_increaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status increaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::increaseMapClientsRequest* /*request*/, ::grpcIMapManager::increaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestincreaseMapClients(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_decreaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_decreaseMapClients() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_decreaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decreaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::decreaseMapClientsRequest* /*request*/, ::grpcIMapManager::decreaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdecreaseMapClients(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init(context, request, response); }));
    }
    ~WithRawCallbackMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::initRequest* /*request*/, ::grpcIMapManager::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createMap() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::createMapRequest* /*request*/, ::grpcIMapManager::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteMap() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::deleteMapRequest* /*request*/, ::grpcIMapManager::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAllMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAllMaps() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllMaps(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAllMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMaps(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::getAllMapsRequest* /*request*/, ::grpcIMapManager::getAllMapsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllMaps(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_registerMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_registerMapUpdateService() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerMapUpdateService(context, request, response); }));
    }
    ~WithRawCallbackMethod_registerMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::registerMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::registerMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerMapUpdateService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unregisterMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unregisterMapUpdateService() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unregisterMapUpdateService(context, request, response); }));
    }
    ~WithRawCallbackMethod_unregisterMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::unregisterMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregisterMapUpdateService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_increaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_increaseMapClients() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->increaseMapClients(context, request, response); }));
    }
    ~WithRawCallbackMethod_increaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status increaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::increaseMapClientsRequest* /*request*/, ::grpcIMapManager::increaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* increaseMapClients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_decreaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_decreaseMapClients() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->decreaseMapClients(context, request, response); }));
    }
    ~WithRawCallbackMethod_decreaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decreaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::decreaseMapClientsRequest* /*request*/, ::grpcIMapManager::decreaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* decreaseMapClients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapManager::initRequest, ::grpcIMapManager::initResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapManager::initRequest, ::grpcIMapManager::initResponse>* streamer) {
                       return this->Streamedinit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::initRequest* /*request*/, ::grpcIMapManager::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapManager::initRequest,::grpcIMapManager::initResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createMap() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapManager::createMapRequest, ::grpcIMapManager::createMapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapManager::createMapRequest, ::grpcIMapManager::createMapResponse>* streamer) {
                       return this->StreamedcreateMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::createMapRequest* /*request*/, ::grpcIMapManager::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapManager::createMapRequest,::grpcIMapManager::createMapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteMap() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapManager::deleteMapRequest, ::grpcIMapManager::deleteMapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapManager::deleteMapRequest, ::grpcIMapManager::deleteMapResponse>* streamer) {
                       return this->StreameddeleteMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::deleteMapRequest* /*request*/, ::grpcIMapManager::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapManager::deleteMapRequest,::grpcIMapManager::deleteMapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllMaps() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapManager::getAllMapsRequest, ::grpcIMapManager::getAllMapsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapManager::getAllMapsRequest, ::grpcIMapManager::getAllMapsResponse>* streamer) {
                       return this->StreamedgetAllMaps(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllMaps(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::getAllMapsRequest* /*request*/, ::grpcIMapManager::getAllMapsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllMaps(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapManager::getAllMapsRequest,::grpcIMapManager::getAllMapsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerMapUpdateService() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapManager::registerMapUpdateServiceRequest, ::grpcIMapManager::registerMapUpdateServiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapManager::registerMapUpdateServiceRequest, ::grpcIMapManager::registerMapUpdateServiceResponse>* streamer) {
                       return this->StreamedregisterMapUpdateService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::registerMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::registerMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterMapUpdateService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapManager::registerMapUpdateServiceRequest,::grpcIMapManager::registerMapUpdateServiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unregisterMapUpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unregisterMapUpdateService() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapManager::unregisterMapUpdateServiceRequest, ::grpcIMapManager::unregisterMapUpdateServiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapManager::unregisterMapUpdateServiceRequest, ::grpcIMapManager::unregisterMapUpdateServiceResponse>* streamer) {
                       return this->StreamedunregisterMapUpdateService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unregisterMapUpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unregisterMapUpdateService(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* /*request*/, ::grpcIMapManager::unregisterMapUpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunregisterMapUpdateService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapManager::unregisterMapUpdateServiceRequest,::grpcIMapManager::unregisterMapUpdateServiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_increaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_increaseMapClients() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapManager::increaseMapClientsRequest, ::grpcIMapManager::increaseMapClientsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapManager::increaseMapClientsRequest, ::grpcIMapManager::increaseMapClientsResponse>* streamer) {
                       return this->StreamedincreaseMapClients(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_increaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status increaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::increaseMapClientsRequest* /*request*/, ::grpcIMapManager::increaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedincreaseMapClients(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapManager::increaseMapClientsRequest,::grpcIMapManager::increaseMapClientsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_decreaseMapClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_decreaseMapClients() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapManager::decreaseMapClientsRequest, ::grpcIMapManager::decreaseMapClientsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapManager::decreaseMapClientsRequest, ::grpcIMapManager::decreaseMapClientsResponse>* streamer) {
                       return this->StreameddecreaseMapClients(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_decreaseMapClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status decreaseMapClients(::grpc::ServerContext* /*context*/, const ::grpcIMapManager::decreaseMapClientsRequest* /*request*/, ::grpcIMapManager::decreaseMapClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddecreaseMapClients(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapManager::decreaseMapClientsRequest,::grpcIMapManager::decreaseMapClientsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_createMap<WithStreamedUnaryMethod_deleteMap<WithStreamedUnaryMethod_getAllMaps<WithStreamedUnaryMethod_registerMapUpdateService<WithStreamedUnaryMethod_unregisterMapUpdateService<WithStreamedUnaryMethod_increaseMapClients<WithStreamedUnaryMethod_decreaseMapClients<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_createMap<WithStreamedUnaryMethod_deleteMap<WithStreamedUnaryMethod_getAllMaps<WithStreamedUnaryMethod_registerMapUpdateService<WithStreamedUnaryMethod_unregisterMapUpdateService<WithStreamedUnaryMethod_increaseMapClients<WithStreamedUnaryMethod_decreaseMapClients<Service > > > > > > > > StreamedService;
};

}  // namespace grpcIMapManager


#endif  // GRPC_grpcIMapManagerService_2eproto__INCLUDED
