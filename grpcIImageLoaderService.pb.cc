// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIImageLoaderService.proto

#include "grpcIImageLoaderService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIImageLoader {
PROTOBUF_CONSTEXPR getImageRequest::getImageRequest(
    ::_pbi::ConstantInitialized)
  : img_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct getImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getImageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getImageRequestDefaultTypeInternal() {}
  union {
    getImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getImageRequestDefaultTypeInternal _getImageRequest_default_instance_;
PROTOBUF_CONSTEXPR getImageResponse::getImageResponse(
    ::_pbi::ConstantInitialized)
  : img_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct getImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getImageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getImageResponseDefaultTypeInternal() {}
  union {
    getImageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getImageResponseDefaultTypeInternal _getImageResponse_default_instance_;
PROTOBUF_CONSTEXPR reloadImageRequest::reloadImageRequest(
    ::_pbi::ConstantInitialized)
  : grpcservercompressionformat_(0){}
struct reloadImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR reloadImageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~reloadImageRequestDefaultTypeInternal() {}
  union {
    reloadImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 reloadImageRequestDefaultTypeInternal _reloadImageRequest_default_instance_;
PROTOBUF_CONSTEXPR reloadImageResponse::reloadImageResponse(
    ::_pbi::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct reloadImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR reloadImageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~reloadImageResponseDefaultTypeInternal() {}
  union {
    reloadImageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 reloadImageResponseDefaultTypeInternal _reloadImageResponse_default_instance_;
}  // namespace grpcIImageLoader
static ::_pb::Metadata file_level_metadata_grpcIImageLoaderService_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIImageLoaderService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIImageLoaderService_2eproto = nullptr;

const uint32_t TableStruct_grpcIImageLoaderService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::getImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::getImageRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::getImageRequest, img_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::getImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::getImageResponse, img_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::getImageResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::reloadImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::reloadImageRequest, grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::reloadImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageLoader::reloadImageResponse, xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIImageLoader::getImageRequest)},
  { 8, -1, -1, sizeof(::grpcIImageLoader::getImageResponse)},
  { 16, -1, -1, sizeof(::grpcIImageLoader::reloadImageRequest)},
  { 23, -1, -1, sizeof(::grpcIImageLoader::reloadImageResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIImageLoader::_getImageRequest_default_instance_._instance,
  &::grpcIImageLoader::_getImageResponse_default_instance_._instance,
  &::grpcIImageLoader::_reloadImageRequest_default_instance_._instance,
  &::grpcIImageLoader::_reloadImageResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIImageLoaderService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035grpcIImageLoaderService.proto\022\020grpcIIm"
  "ageLoader\032\033google/protobuf/empty.proto\"C"
  "\n\017getImageRequest\022#\n\033grpcServerCompressi"
  "onFormat\030\001 \001(\005\022\013\n\003img\030\002 \001(\014\"<\n\020getImageR"
  "esponse\022\013\n\003img\030\001 \001(\014\022\033\n\023xpcfGrpcReturnVa"
  "lue\030\002 \001(\021\"9\n\022reloadImageRequest\022#\n\033grpcS"
  "erverCompressionFormat\030\001 \001(\005\"2\n\023reloadIm"
  "ageResponse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021"
  "2\314\001\n\027grpcIImageLoaderService\022S\n\010getImage"
  "\022!.grpcIImageLoader.getImageRequest\032\".gr"
  "pcIImageLoader.getImageResponse\"\000\022\\\n\013rel"
  "oadImage\022$.grpcIImageLoader.reloadImageR"
  "equest\032%.grpcIImageLoader.reloadImageRes"
  "ponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIImageLoaderService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIImageLoaderService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIImageLoaderService_2eproto = {
    false, false, 535, descriptor_table_protodef_grpcIImageLoaderService_2eproto,
    "grpcIImageLoaderService.proto",
    &descriptor_table_grpcIImageLoaderService_2eproto_once, descriptor_table_grpcIImageLoaderService_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_grpcIImageLoaderService_2eproto::offsets,
    file_level_metadata_grpcIImageLoaderService_2eproto, file_level_enum_descriptors_grpcIImageLoaderService_2eproto,
    file_level_service_descriptors_grpcIImageLoaderService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIImageLoaderService_2eproto_getter() {
  return &descriptor_table_grpcIImageLoaderService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIImageLoaderService_2eproto(&descriptor_table_grpcIImageLoaderService_2eproto);
namespace grpcIImageLoader {

// ===================================================================

class getImageRequest::_Internal {
 public:
};

getImageRequest::getImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageLoader.getImageRequest)
}
getImageRequest::getImageRequest(const getImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  img_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    img_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_img().empty()) {
    img_.Set(from._internal_img(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageLoader.getImageRequest)
}

inline void getImageRequest::SharedCtor() {
img_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  img_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

getImageRequest::~getImageRequest() {
  // @@protoc_insertion_point(destructor:grpcIImageLoader.getImageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  img_.Destroy();
}

void getImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageLoader.getImageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  img_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getImageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes img = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_img();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getImageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageLoader.getImageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes img = 2;
  if (!this->_internal_img().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_img(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageLoader.getImageRequest)
  return target;
}

size_t getImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageLoader.getImageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes img = 2;
  if (!this->_internal_img().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_img());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    getImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getImageRequest::GetClassData() const { return &_class_data_; }

void getImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<getImageRequest *>(to)->MergeFrom(
      static_cast<const getImageRequest &>(from));
}


void getImageRequest::MergeFrom(const getImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageLoader.getImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_img().empty()) {
    _internal_set_img(from._internal_img());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getImageRequest::CopyFrom(const getImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageLoader.getImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getImageRequest::IsInitialized() const {
  return true;
}

void getImageRequest::InternalSwap(getImageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &img_, lhs_arena,
      &other->img_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageLoaderService_2eproto_getter, &descriptor_table_grpcIImageLoaderService_2eproto_once,
      file_level_metadata_grpcIImageLoaderService_2eproto[0]);
}

// ===================================================================

class getImageResponse::_Internal {
 public:
};

getImageResponse::getImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageLoader.getImageResponse)
}
getImageResponse::getImageResponse(const getImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  img_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    img_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_img().empty()) {
    img_.Set(from._internal_img(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageLoader.getImageResponse)
}

inline void getImageResponse::SharedCtor() {
img_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  img_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

getImageResponse::~getImageResponse() {
  // @@protoc_insertion_point(destructor:grpcIImageLoader.getImageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  img_.Destroy();
}

void getImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageLoader.getImageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  img_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getImageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes img = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_img();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getImageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageLoader.getImageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes img = 1;
  if (!this->_internal_img().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_img(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageLoader.getImageResponse)
  return target;
}

size_t getImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageLoader.getImageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes img = 1;
  if (!this->_internal_img().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_img());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getImageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    getImageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getImageResponse::GetClassData() const { return &_class_data_; }

void getImageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<getImageResponse *>(to)->MergeFrom(
      static_cast<const getImageResponse &>(from));
}


void getImageResponse::MergeFrom(const getImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageLoader.getImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_img().empty()) {
    _internal_set_img(from._internal_img());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getImageResponse::CopyFrom(const getImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageLoader.getImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getImageResponse::IsInitialized() const {
  return true;
}

void getImageResponse::InternalSwap(getImageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &img_, lhs_arena,
      &other->img_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageLoaderService_2eproto_getter, &descriptor_table_grpcIImageLoaderService_2eproto_once,
      file_level_metadata_grpcIImageLoaderService_2eproto[1]);
}

// ===================================================================

class reloadImageRequest::_Internal {
 public:
};

reloadImageRequest::reloadImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageLoader.reloadImageRequest)
}
reloadImageRequest::reloadImageRequest(const reloadImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageLoader.reloadImageRequest)
}

inline void reloadImageRequest::SharedCtor() {
grpcservercompressionformat_ = 0;
}

reloadImageRequest::~reloadImageRequest() {
  // @@protoc_insertion_point(destructor:grpcIImageLoader.reloadImageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void reloadImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void reloadImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void reloadImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageLoader.reloadImageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* reloadImageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* reloadImageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageLoader.reloadImageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageLoader.reloadImageRequest)
  return target;
}

size_t reloadImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageLoader.reloadImageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData reloadImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    reloadImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*reloadImageRequest::GetClassData() const { return &_class_data_; }

void reloadImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<reloadImageRequest *>(to)->MergeFrom(
      static_cast<const reloadImageRequest &>(from));
}


void reloadImageRequest::MergeFrom(const reloadImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageLoader.reloadImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void reloadImageRequest::CopyFrom(const reloadImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageLoader.reloadImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reloadImageRequest::IsInitialized() const {
  return true;
}

void reloadImageRequest::InternalSwap(reloadImageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata reloadImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageLoaderService_2eproto_getter, &descriptor_table_grpcIImageLoaderService_2eproto_once,
      file_level_metadata_grpcIImageLoaderService_2eproto[2]);
}

// ===================================================================

class reloadImageResponse::_Internal {
 public:
};

reloadImageResponse::reloadImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageLoader.reloadImageResponse)
}
reloadImageResponse::reloadImageResponse(const reloadImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageLoader.reloadImageResponse)
}

inline void reloadImageResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

reloadImageResponse::~reloadImageResponse() {
  // @@protoc_insertion_point(destructor:grpcIImageLoader.reloadImageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void reloadImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void reloadImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void reloadImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageLoader.reloadImageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* reloadImageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* reloadImageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageLoader.reloadImageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageLoader.reloadImageResponse)
  return target;
}

size_t reloadImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageLoader.reloadImageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData reloadImageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    reloadImageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*reloadImageResponse::GetClassData() const { return &_class_data_; }

void reloadImageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<reloadImageResponse *>(to)->MergeFrom(
      static_cast<const reloadImageResponse &>(from));
}


void reloadImageResponse::MergeFrom(const reloadImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageLoader.reloadImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void reloadImageResponse::CopyFrom(const reloadImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageLoader.reloadImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool reloadImageResponse::IsInitialized() const {
  return true;
}

void reloadImageResponse::InternalSwap(reloadImageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata reloadImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageLoaderService_2eproto_getter, &descriptor_table_grpcIImageLoaderService_2eproto_once,
      file_level_metadata_grpcIImageLoaderService_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIImageLoader
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIImageLoader::getImageRequest*
Arena::CreateMaybeMessage< ::grpcIImageLoader::getImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageLoader::getImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageLoader::getImageResponse*
Arena::CreateMaybeMessage< ::grpcIImageLoader::getImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageLoader::getImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageLoader::reloadImageRequest*
Arena::CreateMaybeMessage< ::grpcIImageLoader::reloadImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageLoader::reloadImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageLoader::reloadImageResponse*
Arena::CreateMaybeMessage< ::grpcIImageLoader::reloadImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageLoader::reloadImageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
