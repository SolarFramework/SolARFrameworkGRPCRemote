// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIPointCloudManagerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIPointCloudManagerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIPointCloudManagerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIPointCloudManagerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIPointCloudManagerService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIPointCloudManagerService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(int index);
namespace grpcIPointCloudManager {
class addPoint_grpc0Request;
struct addPoint_grpc0RequestDefaultTypeInternal;
extern addPoint_grpc0RequestDefaultTypeInternal _addPoint_grpc0Request_default_instance_;
class addPoint_grpc0Response;
struct addPoint_grpc0ResponseDefaultTypeInternal;
extern addPoint_grpc0ResponseDefaultTypeInternal _addPoint_grpc0Response_default_instance_;
class addPoint_grpc1Request;
struct addPoint_grpc1RequestDefaultTypeInternal;
extern addPoint_grpc1RequestDefaultTypeInternal _addPoint_grpc1Request_default_instance_;
class addPoint_grpc1Response;
struct addPoint_grpc1ResponseDefaultTypeInternal;
extern addPoint_grpc1ResponseDefaultTypeInternal _addPoint_grpc1Response_default_instance_;
class addPoints_grpc0Request;
struct addPoints_grpc0RequestDefaultTypeInternal;
extern addPoints_grpc0RequestDefaultTypeInternal _addPoints_grpc0Request_default_instance_;
class addPoints_grpc0Response;
struct addPoints_grpc0ResponseDefaultTypeInternal;
extern addPoints_grpc0ResponseDefaultTypeInternal _addPoints_grpc0Response_default_instance_;
class addPoints_grpc1Request;
struct addPoints_grpc1RequestDefaultTypeInternal;
extern addPoints_grpc1RequestDefaultTypeInternal _addPoints_grpc1Request_default_instance_;
class addPoints_grpc1Response;
struct addPoints_grpc1ResponseDefaultTypeInternal;
extern addPoints_grpc1ResponseDefaultTypeInternal _addPoints_grpc1Response_default_instance_;
class getAllPointsRequest;
struct getAllPointsRequestDefaultTypeInternal;
extern getAllPointsRequestDefaultTypeInternal _getAllPointsRequest_default_instance_;
class getAllPointsResponse;
struct getAllPointsResponseDefaultTypeInternal;
extern getAllPointsResponseDefaultTypeInternal _getAllPointsResponse_default_instance_;
class getConstPointCloudResponse;
struct getConstPointCloudResponseDefaultTypeInternal;
extern getConstPointCloudResponseDefaultTypeInternal _getConstPointCloudResponse_default_instance_;
class getDescriptorTypeResponse;
struct getDescriptorTypeResponseDefaultTypeInternal;
extern getDescriptorTypeResponseDefaultTypeInternal _getDescriptorTypeResponse_default_instance_;
class getNbPointsResponse;
struct getNbPointsResponseDefaultTypeInternal;
extern getNbPointsResponseDefaultTypeInternal _getNbPointsResponse_default_instance_;
class getPointCloudRequest;
struct getPointCloudRequestDefaultTypeInternal;
extern getPointCloudRequestDefaultTypeInternal _getPointCloudRequest_default_instance_;
class getPointCloudResponse;
struct getPointCloudResponseDefaultTypeInternal;
extern getPointCloudResponseDefaultTypeInternal _getPointCloudResponse_default_instance_;
class getPointRequest;
struct getPointRequestDefaultTypeInternal;
extern getPointRequestDefaultTypeInternal _getPointRequest_default_instance_;
class getPointResponse;
struct getPointResponseDefaultTypeInternal;
extern getPointResponseDefaultTypeInternal _getPointResponse_default_instance_;
class getPointsRequest;
struct getPointsRequestDefaultTypeInternal;
extern getPointsRequestDefaultTypeInternal _getPointsRequest_default_instance_;
class getPointsResponse;
struct getPointsResponseDefaultTypeInternal;
extern getPointsResponseDefaultTypeInternal _getPointsResponse_default_instance_;
class isExistPointRequest;
struct isExistPointRequestDefaultTypeInternal;
extern isExistPointRequestDefaultTypeInternal _isExistPointRequest_default_instance_;
class isExistPointResponse;
struct isExistPointResponseDefaultTypeInternal;
extern isExistPointResponseDefaultTypeInternal _isExistPointResponse_default_instance_;
class loadFromFileRequest;
struct loadFromFileRequestDefaultTypeInternal;
extern loadFromFileRequestDefaultTypeInternal _loadFromFileRequest_default_instance_;
class loadFromFileResponse;
struct loadFromFileResponseDefaultTypeInternal;
extern loadFromFileResponseDefaultTypeInternal _loadFromFileResponse_default_instance_;
class saveToFileRequest;
struct saveToFileRequestDefaultTypeInternal;
extern saveToFileRequestDefaultTypeInternal _saveToFileRequest_default_instance_;
class saveToFileResponse;
struct saveToFileResponseDefaultTypeInternal;
extern saveToFileResponseDefaultTypeInternal _saveToFileResponse_default_instance_;
class setDescriptorTypeRequest;
struct setDescriptorTypeRequestDefaultTypeInternal;
extern setDescriptorTypeRequestDefaultTypeInternal _setDescriptorTypeRequest_default_instance_;
class setDescriptorTypeResponse;
struct setDescriptorTypeResponseDefaultTypeInternal;
extern setDescriptorTypeResponseDefaultTypeInternal _setDescriptorTypeResponse_default_instance_;
class setPointCloudRequest;
struct setPointCloudRequestDefaultTypeInternal;
extern setPointCloudRequestDefaultTypeInternal _setPointCloudRequest_default_instance_;
class suppressPointRequest;
struct suppressPointRequestDefaultTypeInternal;
extern suppressPointRequestDefaultTypeInternal _suppressPointRequest_default_instance_;
class suppressPointResponse;
struct suppressPointResponseDefaultTypeInternal;
extern suppressPointResponseDefaultTypeInternal _suppressPointResponse_default_instance_;
class suppressPointsRequest;
struct suppressPointsRequestDefaultTypeInternal;
extern suppressPointsRequestDefaultTypeInternal _suppressPointsRequest_default_instance_;
class suppressPointsResponse;
struct suppressPointsResponseDefaultTypeInternal;
extern suppressPointsResponseDefaultTypeInternal _suppressPointsResponse_default_instance_;
}  // namespace grpcIPointCloudManager
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIPointCloudManager::addPoint_grpc0Request* Arena::CreateMaybeMessage<::grpcIPointCloudManager::addPoint_grpc0Request>(Arena*);
template<> ::grpcIPointCloudManager::addPoint_grpc0Response* Arena::CreateMaybeMessage<::grpcIPointCloudManager::addPoint_grpc0Response>(Arena*);
template<> ::grpcIPointCloudManager::addPoint_grpc1Request* Arena::CreateMaybeMessage<::grpcIPointCloudManager::addPoint_grpc1Request>(Arena*);
template<> ::grpcIPointCloudManager::addPoint_grpc1Response* Arena::CreateMaybeMessage<::grpcIPointCloudManager::addPoint_grpc1Response>(Arena*);
template<> ::grpcIPointCloudManager::addPoints_grpc0Request* Arena::CreateMaybeMessage<::grpcIPointCloudManager::addPoints_grpc0Request>(Arena*);
template<> ::grpcIPointCloudManager::addPoints_grpc0Response* Arena::CreateMaybeMessage<::grpcIPointCloudManager::addPoints_grpc0Response>(Arena*);
template<> ::grpcIPointCloudManager::addPoints_grpc1Request* Arena::CreateMaybeMessage<::grpcIPointCloudManager::addPoints_grpc1Request>(Arena*);
template<> ::grpcIPointCloudManager::addPoints_grpc1Response* Arena::CreateMaybeMessage<::grpcIPointCloudManager::addPoints_grpc1Response>(Arena*);
template<> ::grpcIPointCloudManager::getAllPointsRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getAllPointsRequest>(Arena*);
template<> ::grpcIPointCloudManager::getAllPointsResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getAllPointsResponse>(Arena*);
template<> ::grpcIPointCloudManager::getConstPointCloudResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getConstPointCloudResponse>(Arena*);
template<> ::grpcIPointCloudManager::getDescriptorTypeResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getDescriptorTypeResponse>(Arena*);
template<> ::grpcIPointCloudManager::getNbPointsResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getNbPointsResponse>(Arena*);
template<> ::grpcIPointCloudManager::getPointCloudRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getPointCloudRequest>(Arena*);
template<> ::grpcIPointCloudManager::getPointCloudResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getPointCloudResponse>(Arena*);
template<> ::grpcIPointCloudManager::getPointRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getPointRequest>(Arena*);
template<> ::grpcIPointCloudManager::getPointResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getPointResponse>(Arena*);
template<> ::grpcIPointCloudManager::getPointsRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getPointsRequest>(Arena*);
template<> ::grpcIPointCloudManager::getPointsResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::getPointsResponse>(Arena*);
template<> ::grpcIPointCloudManager::isExistPointRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::isExistPointRequest>(Arena*);
template<> ::grpcIPointCloudManager::isExistPointResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::isExistPointResponse>(Arena*);
template<> ::grpcIPointCloudManager::loadFromFileRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::loadFromFileRequest>(Arena*);
template<> ::grpcIPointCloudManager::loadFromFileResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::loadFromFileResponse>(Arena*);
template<> ::grpcIPointCloudManager::saveToFileRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::saveToFileRequest>(Arena*);
template<> ::grpcIPointCloudManager::saveToFileResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::saveToFileResponse>(Arena*);
template<> ::grpcIPointCloudManager::setDescriptorTypeRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::setDescriptorTypeRequest>(Arena*);
template<> ::grpcIPointCloudManager::setDescriptorTypeResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::setDescriptorTypeResponse>(Arena*);
template<> ::grpcIPointCloudManager::setPointCloudRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::setPointCloudRequest>(Arena*);
template<> ::grpcIPointCloudManager::suppressPointRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::suppressPointRequest>(Arena*);
template<> ::grpcIPointCloudManager::suppressPointResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::suppressPointResponse>(Arena*);
template<> ::grpcIPointCloudManager::suppressPointsRequest* Arena::CreateMaybeMessage<::grpcIPointCloudManager::suppressPointsRequest>(Arena*);
template<> ::grpcIPointCloudManager::suppressPointsResponse* Arena::CreateMaybeMessage<::grpcIPointCloudManager::suppressPointsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIPointCloudManager {

// ===================================================================

class addPoint_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.addPoint_grpc0Request) */ {
 public:
  inline addPoint_grpc0Request() : addPoint_grpc0Request(nullptr) {}
  virtual ~addPoint_grpc0Request();
  explicit constexpr addPoint_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addPoint_grpc0Request(const addPoint_grpc0Request& from);
  addPoint_grpc0Request(addPoint_grpc0Request&& from) noexcept
    : addPoint_grpc0Request() {
    *this = ::std::move(from);
  }

  inline addPoint_grpc0Request& operator=(const addPoint_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline addPoint_grpc0Request& operator=(addPoint_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addPoint_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const addPoint_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const addPoint_grpc0Request*>(
               &_addPoint_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(addPoint_grpc0Request& a, addPoint_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(addPoint_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addPoint_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addPoint_grpc0Request* New() const final {
    return CreateMaybeMessage<addPoint_grpc0Request>(nullptr);
  }

  addPoint_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addPoint_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addPoint_grpc0Request& from);
  void MergeFrom(const addPoint_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addPoint_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.addPoint_grpc0Request";
  }
  protected:
  explicit addPoint_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // bytes point = 1;
  void clear_point();
  const std::string& point() const;
  void set_point(const std::string& value);
  void set_point(std::string&& value);
  void set_point(const char* value);
  void set_point(const void* value, size_t size);
  std::string* mutable_point();
  std::string* release_point();
  void set_allocated_point(std::string* point);
  private:
  const std::string& _internal_point() const;
  void _internal_set_point(const std::string& value);
  std::string* _internal_mutable_point();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.addPoint_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class addPoint_grpc0Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.addPoint_grpc0Response) */ {
 public:
  inline addPoint_grpc0Response() : addPoint_grpc0Response(nullptr) {}
  virtual ~addPoint_grpc0Response();
  explicit constexpr addPoint_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addPoint_grpc0Response(const addPoint_grpc0Response& from);
  addPoint_grpc0Response(addPoint_grpc0Response&& from) noexcept
    : addPoint_grpc0Response() {
    *this = ::std::move(from);
  }

  inline addPoint_grpc0Response& operator=(const addPoint_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline addPoint_grpc0Response& operator=(addPoint_grpc0Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addPoint_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const addPoint_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const addPoint_grpc0Response*>(
               &_addPoint_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(addPoint_grpc0Response& a, addPoint_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(addPoint_grpc0Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addPoint_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addPoint_grpc0Response* New() const final {
    return CreateMaybeMessage<addPoint_grpc0Response>(nullptr);
  }

  addPoint_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addPoint_grpc0Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addPoint_grpc0Response& from);
  void MergeFrom(const addPoint_grpc0Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addPoint_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.addPoint_grpc0Response";
  }
  protected:
  explicit addPoint_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.addPoint_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class addPoints_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.addPoints_grpc0Request) */ {
 public:
  inline addPoints_grpc0Request() : addPoints_grpc0Request(nullptr) {}
  virtual ~addPoints_grpc0Request();
  explicit constexpr addPoints_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addPoints_grpc0Request(const addPoints_grpc0Request& from);
  addPoints_grpc0Request(addPoints_grpc0Request&& from) noexcept
    : addPoints_grpc0Request() {
    *this = ::std::move(from);
  }

  inline addPoints_grpc0Request& operator=(const addPoints_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline addPoints_grpc0Request& operator=(addPoints_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addPoints_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const addPoints_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const addPoints_grpc0Request*>(
               &_addPoints_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(addPoints_grpc0Request& a, addPoints_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(addPoints_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addPoints_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addPoints_grpc0Request* New() const final {
    return CreateMaybeMessage<addPoints_grpc0Request>(nullptr);
  }

  addPoints_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addPoints_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addPoints_grpc0Request& from);
  void MergeFrom(const addPoints_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addPoints_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.addPoints_grpc0Request";
  }
  protected:
  explicit addPoints_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // bytes points = 1;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.addPoints_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class addPoints_grpc0Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.addPoints_grpc0Response) */ {
 public:
  inline addPoints_grpc0Response() : addPoints_grpc0Response(nullptr) {}
  virtual ~addPoints_grpc0Response();
  explicit constexpr addPoints_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addPoints_grpc0Response(const addPoints_grpc0Response& from);
  addPoints_grpc0Response(addPoints_grpc0Response&& from) noexcept
    : addPoints_grpc0Response() {
    *this = ::std::move(from);
  }

  inline addPoints_grpc0Response& operator=(const addPoints_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline addPoints_grpc0Response& operator=(addPoints_grpc0Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addPoints_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const addPoints_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const addPoints_grpc0Response*>(
               &_addPoints_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(addPoints_grpc0Response& a, addPoints_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(addPoints_grpc0Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addPoints_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addPoints_grpc0Response* New() const final {
    return CreateMaybeMessage<addPoints_grpc0Response>(nullptr);
  }

  addPoints_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addPoints_grpc0Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addPoints_grpc0Response& from);
  void MergeFrom(const addPoints_grpc0Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addPoints_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.addPoints_grpc0Response";
  }
  protected:
  explicit addPoints_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.addPoints_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class addPoint_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.addPoint_grpc1Request) */ {
 public:
  inline addPoint_grpc1Request() : addPoint_grpc1Request(nullptr) {}
  virtual ~addPoint_grpc1Request();
  explicit constexpr addPoint_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addPoint_grpc1Request(const addPoint_grpc1Request& from);
  addPoint_grpc1Request(addPoint_grpc1Request&& from) noexcept
    : addPoint_grpc1Request() {
    *this = ::std::move(from);
  }

  inline addPoint_grpc1Request& operator=(const addPoint_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline addPoint_grpc1Request& operator=(addPoint_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addPoint_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const addPoint_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const addPoint_grpc1Request*>(
               &_addPoint_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(addPoint_grpc1Request& a, addPoint_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(addPoint_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addPoint_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addPoint_grpc1Request* New() const final {
    return CreateMaybeMessage<addPoint_grpc1Request>(nullptr);
  }

  addPoint_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addPoint_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addPoint_grpc1Request& from);
  void MergeFrom(const addPoint_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addPoint_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.addPoint_grpc1Request";
  }
  protected:
  explicit addPoint_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // bytes point = 1;
  void clear_point();
  const std::string& point() const;
  void set_point(const std::string& value);
  void set_point(std::string&& value);
  void set_point(const char* value);
  void set_point(const void* value, size_t size);
  std::string* mutable_point();
  std::string* release_point();
  void set_allocated_point(std::string* point);
  private:
  const std::string& _internal_point() const;
  void _internal_set_point(const std::string& value);
  std::string* _internal_mutable_point();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.addPoint_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class addPoint_grpc1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.addPoint_grpc1Response) */ {
 public:
  inline addPoint_grpc1Response() : addPoint_grpc1Response(nullptr) {}
  virtual ~addPoint_grpc1Response();
  explicit constexpr addPoint_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addPoint_grpc1Response(const addPoint_grpc1Response& from);
  addPoint_grpc1Response(addPoint_grpc1Response&& from) noexcept
    : addPoint_grpc1Response() {
    *this = ::std::move(from);
  }

  inline addPoint_grpc1Response& operator=(const addPoint_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline addPoint_grpc1Response& operator=(addPoint_grpc1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addPoint_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const addPoint_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const addPoint_grpc1Response*>(
               &_addPoint_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(addPoint_grpc1Response& a, addPoint_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(addPoint_grpc1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addPoint_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addPoint_grpc1Response* New() const final {
    return CreateMaybeMessage<addPoint_grpc1Response>(nullptr);
  }

  addPoint_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addPoint_grpc1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addPoint_grpc1Response& from);
  void MergeFrom(const addPoint_grpc1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addPoint_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.addPoint_grpc1Response";
  }
  protected:
  explicit addPoint_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.addPoint_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class addPoints_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.addPoints_grpc1Request) */ {
 public:
  inline addPoints_grpc1Request() : addPoints_grpc1Request(nullptr) {}
  virtual ~addPoints_grpc1Request();
  explicit constexpr addPoints_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addPoints_grpc1Request(const addPoints_grpc1Request& from);
  addPoints_grpc1Request(addPoints_grpc1Request&& from) noexcept
    : addPoints_grpc1Request() {
    *this = ::std::move(from);
  }

  inline addPoints_grpc1Request& operator=(const addPoints_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline addPoints_grpc1Request& operator=(addPoints_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addPoints_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const addPoints_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const addPoints_grpc1Request*>(
               &_addPoints_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(addPoints_grpc1Request& a, addPoints_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(addPoints_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addPoints_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addPoints_grpc1Request* New() const final {
    return CreateMaybeMessage<addPoints_grpc1Request>(nullptr);
  }

  addPoints_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addPoints_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addPoints_grpc1Request& from);
  void MergeFrom(const addPoints_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addPoints_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.addPoints_grpc1Request";
  }
  protected:
  explicit addPoints_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // bytes points = 1;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.addPoints_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class addPoints_grpc1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.addPoints_grpc1Response) */ {
 public:
  inline addPoints_grpc1Response() : addPoints_grpc1Response(nullptr) {}
  virtual ~addPoints_grpc1Response();
  explicit constexpr addPoints_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addPoints_grpc1Response(const addPoints_grpc1Response& from);
  addPoints_grpc1Response(addPoints_grpc1Response&& from) noexcept
    : addPoints_grpc1Response() {
    *this = ::std::move(from);
  }

  inline addPoints_grpc1Response& operator=(const addPoints_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline addPoints_grpc1Response& operator=(addPoints_grpc1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addPoints_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const addPoints_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const addPoints_grpc1Response*>(
               &_addPoints_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(addPoints_grpc1Response& a, addPoints_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(addPoints_grpc1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addPoints_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addPoints_grpc1Response* New() const final {
    return CreateMaybeMessage<addPoints_grpc1Response>(nullptr);
  }

  addPoints_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addPoints_grpc1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addPoints_grpc1Response& from);
  void MergeFrom(const addPoints_grpc1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addPoints_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.addPoints_grpc1Response";
  }
  protected:
  explicit addPoints_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.addPoints_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getPointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getPointRequest) */ {
 public:
  inline getPointRequest() : getPointRequest(nullptr) {}
  virtual ~getPointRequest();
  explicit constexpr getPointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointRequest(const getPointRequest& from);
  getPointRequest(getPointRequest&& from) noexcept
    : getPointRequest() {
    *this = ::std::move(from);
  }

  inline getPointRequest& operator=(const getPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointRequest& operator=(getPointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getPointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointRequest* internal_default_instance() {
    return reinterpret_cast<const getPointRequest*>(
               &_getPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(getPointRequest& a, getPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointRequest* New() const final {
    return CreateMaybeMessage<getPointRequest>(nullptr);
  }

  getPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getPointRequest& from);
  void MergeFrom(const getPointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getPointRequest";
  }
  protected:
  explicit getPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes point = 2;
  void clear_point();
  const std::string& point() const;
  void set_point(const std::string& value);
  void set_point(std::string&& value);
  void set_point(const char* value);
  void set_point(const void* value, size_t size);
  std::string* mutable_point();
  std::string* release_point();
  void set_allocated_point(std::string* point);
  private:
  const std::string& _internal_point() const;
  void _internal_set_point(const std::string& value);
  std::string* _internal_mutable_point();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getPointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getPointResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getPointResponse) */ {
 public:
  inline getPointResponse() : getPointResponse(nullptr) {}
  virtual ~getPointResponse();
  explicit constexpr getPointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointResponse(const getPointResponse& from);
  getPointResponse(getPointResponse&& from) noexcept
    : getPointResponse() {
    *this = ::std::move(from);
  }

  inline getPointResponse& operator=(const getPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointResponse& operator=(getPointResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getPointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointResponse* internal_default_instance() {
    return reinterpret_cast<const getPointResponse*>(
               &_getPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(getPointResponse& a, getPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointResponse* New() const final {
    return CreateMaybeMessage<getPointResponse>(nullptr);
  }

  getPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getPointResponse& from);
  void MergeFrom(const getPointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getPointResponse";
  }
  protected:
  explicit getPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes point = 1;
  void clear_point();
  const std::string& point() const;
  void set_point(const std::string& value);
  void set_point(std::string&& value);
  void set_point(const char* value);
  void set_point(const void* value, size_t size);
  std::string* mutable_point();
  std::string* release_point();
  void set_allocated_point(std::string* point);
  private:
  const std::string& _internal_point() const;
  void _internal_set_point(const std::string& value);
  std::string* _internal_mutable_point();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getPointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getPointsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getPointsRequest) */ {
 public:
  inline getPointsRequest() : getPointsRequest(nullptr) {}
  virtual ~getPointsRequest();
  explicit constexpr getPointsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointsRequest(const getPointsRequest& from);
  getPointsRequest(getPointsRequest&& from) noexcept
    : getPointsRequest() {
    *this = ::std::move(from);
  }

  inline getPointsRequest& operator=(const getPointsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointsRequest& operator=(getPointsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getPointsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointsRequest* internal_default_instance() {
    return reinterpret_cast<const getPointsRequest*>(
               &_getPointsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(getPointsRequest& a, getPointsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointsRequest* New() const final {
    return CreateMaybeMessage<getPointsRequest>(nullptr);
  }

  getPointsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getPointsRequest& from);
  void MergeFrom(const getPointsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getPointsRequest";
  }
  protected:
  explicit getPointsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kPointsFieldNumber = 2,
  };
  // bytes ids = 1;
  void clear_ids();
  const std::string& ids() const;
  void set_ids(const std::string& value);
  void set_ids(std::string&& value);
  void set_ids(const char* value);
  void set_ids(const void* value, size_t size);
  std::string* mutable_ids();
  std::string* release_ids();
  void set_allocated_ids(std::string* ids);
  private:
  const std::string& _internal_ids() const;
  void _internal_set_ids(const std::string& value);
  std::string* _internal_mutable_ids();
  public:

  // bytes points = 2;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getPointsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getPointsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getPointsResponse) */ {
 public:
  inline getPointsResponse() : getPointsResponse(nullptr) {}
  virtual ~getPointsResponse();
  explicit constexpr getPointsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointsResponse(const getPointsResponse& from);
  getPointsResponse(getPointsResponse&& from) noexcept
    : getPointsResponse() {
    *this = ::std::move(from);
  }

  inline getPointsResponse& operator=(const getPointsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointsResponse& operator=(getPointsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getPointsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointsResponse* internal_default_instance() {
    return reinterpret_cast<const getPointsResponse*>(
               &_getPointsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(getPointsResponse& a, getPointsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointsResponse* New() const final {
    return CreateMaybeMessage<getPointsResponse>(nullptr);
  }

  getPointsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getPointsResponse& from);
  void MergeFrom(const getPointsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getPointsResponse";
  }
  protected:
  explicit getPointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes points = 1;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getPointsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getAllPointsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getAllPointsRequest) */ {
 public:
  inline getAllPointsRequest() : getAllPointsRequest(nullptr) {}
  virtual ~getAllPointsRequest();
  explicit constexpr getAllPointsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllPointsRequest(const getAllPointsRequest& from);
  getAllPointsRequest(getAllPointsRequest&& from) noexcept
    : getAllPointsRequest() {
    *this = ::std::move(from);
  }

  inline getAllPointsRequest& operator=(const getAllPointsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllPointsRequest& operator=(getAllPointsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getAllPointsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllPointsRequest* internal_default_instance() {
    return reinterpret_cast<const getAllPointsRequest*>(
               &_getAllPointsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(getAllPointsRequest& a, getAllPointsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllPointsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllPointsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAllPointsRequest* New() const final {
    return CreateMaybeMessage<getAllPointsRequest>(nullptr);
  }

  getAllPointsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAllPointsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getAllPointsRequest& from);
  void MergeFrom(const getAllPointsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllPointsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getAllPointsRequest";
  }
  protected:
  explicit getAllPointsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // bytes points = 1;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getAllPointsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getAllPointsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getAllPointsResponse) */ {
 public:
  inline getAllPointsResponse() : getAllPointsResponse(nullptr) {}
  virtual ~getAllPointsResponse();
  explicit constexpr getAllPointsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllPointsResponse(const getAllPointsResponse& from);
  getAllPointsResponse(getAllPointsResponse&& from) noexcept
    : getAllPointsResponse() {
    *this = ::std::move(from);
  }

  inline getAllPointsResponse& operator=(const getAllPointsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllPointsResponse& operator=(getAllPointsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getAllPointsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllPointsResponse* internal_default_instance() {
    return reinterpret_cast<const getAllPointsResponse*>(
               &_getAllPointsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(getAllPointsResponse& a, getAllPointsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllPointsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllPointsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAllPointsResponse* New() const final {
    return CreateMaybeMessage<getAllPointsResponse>(nullptr);
  }

  getAllPointsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAllPointsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getAllPointsResponse& from);
  void MergeFrom(const getAllPointsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllPointsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getAllPointsResponse";
  }
  protected:
  explicit getAllPointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes points = 1;
  void clear_points();
  const std::string& points() const;
  void set_points(const std::string& value);
  void set_points(std::string&& value);
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  std::string* mutable_points();
  std::string* release_points();
  void set_allocated_points(std::string* points);
  private:
  const std::string& _internal_points() const;
  void _internal_set_points(const std::string& value);
  std::string* _internal_mutable_points();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getAllPointsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr points_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class suppressPointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.suppressPointRequest) */ {
 public:
  inline suppressPointRequest() : suppressPointRequest(nullptr) {}
  virtual ~suppressPointRequest();
  explicit constexpr suppressPointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  suppressPointRequest(const suppressPointRequest& from);
  suppressPointRequest(suppressPointRequest&& from) noexcept
    : suppressPointRequest() {
    *this = ::std::move(from);
  }

  inline suppressPointRequest& operator=(const suppressPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline suppressPointRequest& operator=(suppressPointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const suppressPointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const suppressPointRequest* internal_default_instance() {
    return reinterpret_cast<const suppressPointRequest*>(
               &_suppressPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(suppressPointRequest& a, suppressPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(suppressPointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(suppressPointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline suppressPointRequest* New() const final {
    return CreateMaybeMessage<suppressPointRequest>(nullptr);
  }

  suppressPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<suppressPointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const suppressPointRequest& from);
  void MergeFrom(const suppressPointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(suppressPointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.suppressPointRequest";
  }
  protected:
  explicit suppressPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.suppressPointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class suppressPointResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.suppressPointResponse) */ {
 public:
  inline suppressPointResponse() : suppressPointResponse(nullptr) {}
  virtual ~suppressPointResponse();
  explicit constexpr suppressPointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  suppressPointResponse(const suppressPointResponse& from);
  suppressPointResponse(suppressPointResponse&& from) noexcept
    : suppressPointResponse() {
    *this = ::std::move(from);
  }

  inline suppressPointResponse& operator=(const suppressPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline suppressPointResponse& operator=(suppressPointResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const suppressPointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const suppressPointResponse* internal_default_instance() {
    return reinterpret_cast<const suppressPointResponse*>(
               &_suppressPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(suppressPointResponse& a, suppressPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(suppressPointResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(suppressPointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline suppressPointResponse* New() const final {
    return CreateMaybeMessage<suppressPointResponse>(nullptr);
  }

  suppressPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<suppressPointResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const suppressPointResponse& from);
  void MergeFrom(const suppressPointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(suppressPointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.suppressPointResponse";
  }
  protected:
  explicit suppressPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.suppressPointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class suppressPointsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.suppressPointsRequest) */ {
 public:
  inline suppressPointsRequest() : suppressPointsRequest(nullptr) {}
  virtual ~suppressPointsRequest();
  explicit constexpr suppressPointsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  suppressPointsRequest(const suppressPointsRequest& from);
  suppressPointsRequest(suppressPointsRequest&& from) noexcept
    : suppressPointsRequest() {
    *this = ::std::move(from);
  }

  inline suppressPointsRequest& operator=(const suppressPointsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline suppressPointsRequest& operator=(suppressPointsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const suppressPointsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const suppressPointsRequest* internal_default_instance() {
    return reinterpret_cast<const suppressPointsRequest*>(
               &_suppressPointsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(suppressPointsRequest& a, suppressPointsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(suppressPointsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(suppressPointsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline suppressPointsRequest* New() const final {
    return CreateMaybeMessage<suppressPointsRequest>(nullptr);
  }

  suppressPointsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<suppressPointsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const suppressPointsRequest& from);
  void MergeFrom(const suppressPointsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(suppressPointsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.suppressPointsRequest";
  }
  protected:
  explicit suppressPointsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // bytes ids = 1;
  void clear_ids();
  const std::string& ids() const;
  void set_ids(const std::string& value);
  void set_ids(std::string&& value);
  void set_ids(const char* value);
  void set_ids(const void* value, size_t size);
  std::string* mutable_ids();
  std::string* release_ids();
  void set_allocated_ids(std::string* ids);
  private:
  const std::string& _internal_ids() const;
  void _internal_set_ids(const std::string& value);
  std::string* _internal_mutable_ids();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.suppressPointsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class suppressPointsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.suppressPointsResponse) */ {
 public:
  inline suppressPointsResponse() : suppressPointsResponse(nullptr) {}
  virtual ~suppressPointsResponse();
  explicit constexpr suppressPointsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  suppressPointsResponse(const suppressPointsResponse& from);
  suppressPointsResponse(suppressPointsResponse&& from) noexcept
    : suppressPointsResponse() {
    *this = ::std::move(from);
  }

  inline suppressPointsResponse& operator=(const suppressPointsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline suppressPointsResponse& operator=(suppressPointsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const suppressPointsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const suppressPointsResponse* internal_default_instance() {
    return reinterpret_cast<const suppressPointsResponse*>(
               &_suppressPointsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(suppressPointsResponse& a, suppressPointsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(suppressPointsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(suppressPointsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline suppressPointsResponse* New() const final {
    return CreateMaybeMessage<suppressPointsResponse>(nullptr);
  }

  suppressPointsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<suppressPointsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const suppressPointsResponse& from);
  void MergeFrom(const suppressPointsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(suppressPointsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.suppressPointsResponse";
  }
  protected:
  explicit suppressPointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.suppressPointsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getDescriptorTypeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getDescriptorTypeResponse) */ {
 public:
  inline getDescriptorTypeResponse() : getDescriptorTypeResponse(nullptr) {}
  virtual ~getDescriptorTypeResponse();
  explicit constexpr getDescriptorTypeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDescriptorTypeResponse(const getDescriptorTypeResponse& from);
  getDescriptorTypeResponse(getDescriptorTypeResponse&& from) noexcept
    : getDescriptorTypeResponse() {
    *this = ::std::move(from);
  }

  inline getDescriptorTypeResponse& operator=(const getDescriptorTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDescriptorTypeResponse& operator=(getDescriptorTypeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getDescriptorTypeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDescriptorTypeResponse* internal_default_instance() {
    return reinterpret_cast<const getDescriptorTypeResponse*>(
               &_getDescriptorTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(getDescriptorTypeResponse& a, getDescriptorTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDescriptorTypeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDescriptorTypeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDescriptorTypeResponse* New() const final {
    return CreateMaybeMessage<getDescriptorTypeResponse>(nullptr);
  }

  getDescriptorTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDescriptorTypeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getDescriptorTypeResponse& from);
  void MergeFrom(const getDescriptorTypeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDescriptorTypeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getDescriptorTypeResponse";
  }
  protected:
  explicit getDescriptorTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getDescriptorTypeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class setDescriptorTypeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.setDescriptorTypeRequest) */ {
 public:
  inline setDescriptorTypeRequest() : setDescriptorTypeRequest(nullptr) {}
  virtual ~setDescriptorTypeRequest();
  explicit constexpr setDescriptorTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDescriptorTypeRequest(const setDescriptorTypeRequest& from);
  setDescriptorTypeRequest(setDescriptorTypeRequest&& from) noexcept
    : setDescriptorTypeRequest() {
    *this = ::std::move(from);
  }

  inline setDescriptorTypeRequest& operator=(const setDescriptorTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDescriptorTypeRequest& operator=(setDescriptorTypeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setDescriptorTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDescriptorTypeRequest* internal_default_instance() {
    return reinterpret_cast<const setDescriptorTypeRequest*>(
               &_setDescriptorTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(setDescriptorTypeRequest& a, setDescriptorTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setDescriptorTypeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDescriptorTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDescriptorTypeRequest* New() const final {
    return CreateMaybeMessage<setDescriptorTypeRequest>(nullptr);
  }

  setDescriptorTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDescriptorTypeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setDescriptorTypeRequest& from);
  void MergeFrom(const setDescriptorTypeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDescriptorTypeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.setDescriptorTypeRequest";
  }
  protected:
  explicit setDescriptorTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // sint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.setDescriptorTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class setDescriptorTypeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.setDescriptorTypeResponse) */ {
 public:
  inline setDescriptorTypeResponse() : setDescriptorTypeResponse(nullptr) {}
  virtual ~setDescriptorTypeResponse();
  explicit constexpr setDescriptorTypeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDescriptorTypeResponse(const setDescriptorTypeResponse& from);
  setDescriptorTypeResponse(setDescriptorTypeResponse&& from) noexcept
    : setDescriptorTypeResponse() {
    *this = ::std::move(from);
  }

  inline setDescriptorTypeResponse& operator=(const setDescriptorTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDescriptorTypeResponse& operator=(setDescriptorTypeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setDescriptorTypeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDescriptorTypeResponse* internal_default_instance() {
    return reinterpret_cast<const setDescriptorTypeResponse*>(
               &_setDescriptorTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(setDescriptorTypeResponse& a, setDescriptorTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setDescriptorTypeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDescriptorTypeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDescriptorTypeResponse* New() const final {
    return CreateMaybeMessage<setDescriptorTypeResponse>(nullptr);
  }

  setDescriptorTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDescriptorTypeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setDescriptorTypeResponse& from);
  void MergeFrom(const setDescriptorTypeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDescriptorTypeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.setDescriptorTypeResponse";
  }
  protected:
  explicit setDescriptorTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.setDescriptorTypeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class isExistPointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.isExistPointRequest) */ {
 public:
  inline isExistPointRequest() : isExistPointRequest(nullptr) {}
  virtual ~isExistPointRequest();
  explicit constexpr isExistPointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isExistPointRequest(const isExistPointRequest& from);
  isExistPointRequest(isExistPointRequest&& from) noexcept
    : isExistPointRequest() {
    *this = ::std::move(from);
  }

  inline isExistPointRequest& operator=(const isExistPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline isExistPointRequest& operator=(isExistPointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const isExistPointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const isExistPointRequest* internal_default_instance() {
    return reinterpret_cast<const isExistPointRequest*>(
               &_isExistPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(isExistPointRequest& a, isExistPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(isExistPointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isExistPointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isExistPointRequest* New() const final {
    return CreateMaybeMessage<isExistPointRequest>(nullptr);
  }

  isExistPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isExistPointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const isExistPointRequest& from);
  void MergeFrom(const isExistPointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isExistPointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.isExistPointRequest";
  }
  protected:
  explicit isExistPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.isExistPointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class isExistPointResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.isExistPointResponse) */ {
 public:
  inline isExistPointResponse() : isExistPointResponse(nullptr) {}
  virtual ~isExistPointResponse();
  explicit constexpr isExistPointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isExistPointResponse(const isExistPointResponse& from);
  isExistPointResponse(isExistPointResponse&& from) noexcept
    : isExistPointResponse() {
    *this = ::std::move(from);
  }

  inline isExistPointResponse& operator=(const isExistPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline isExistPointResponse& operator=(isExistPointResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const isExistPointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const isExistPointResponse* internal_default_instance() {
    return reinterpret_cast<const isExistPointResponse*>(
               &_isExistPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(isExistPointResponse& a, isExistPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(isExistPointResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isExistPointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isExistPointResponse* New() const final {
    return CreateMaybeMessage<isExistPointResponse>(nullptr);
  }

  isExistPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isExistPointResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const isExistPointResponse& from);
  void MergeFrom(const isExistPointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isExistPointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.isExistPointResponse";
  }
  protected:
  explicit isExistPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.isExistPointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getNbPointsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getNbPointsResponse) */ {
 public:
  inline getNbPointsResponse() : getNbPointsResponse(nullptr) {}
  virtual ~getNbPointsResponse();
  explicit constexpr getNbPointsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNbPointsResponse(const getNbPointsResponse& from);
  getNbPointsResponse(getNbPointsResponse&& from) noexcept
    : getNbPointsResponse() {
    *this = ::std::move(from);
  }

  inline getNbPointsResponse& operator=(const getNbPointsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNbPointsResponse& operator=(getNbPointsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getNbPointsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNbPointsResponse* internal_default_instance() {
    return reinterpret_cast<const getNbPointsResponse*>(
               &_getNbPointsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(getNbPointsResponse& a, getNbPointsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNbPointsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNbPointsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNbPointsResponse* New() const final {
    return CreateMaybeMessage<getNbPointsResponse>(nullptr);
  }

  getNbPointsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNbPointsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getNbPointsResponse& from);
  void MergeFrom(const getNbPointsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNbPointsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getNbPointsResponse";
  }
  protected:
  explicit getNbPointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getNbPointsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.saveToFileRequest) */ {
 public:
  inline saveToFileRequest() : saveToFileRequest(nullptr) {}
  virtual ~saveToFileRequest();
  explicit constexpr saveToFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileRequest(const saveToFileRequest& from);
  saveToFileRequest(saveToFileRequest&& from) noexcept
    : saveToFileRequest() {
    *this = ::std::move(from);
  }

  inline saveToFileRequest& operator=(const saveToFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileRequest& operator=(saveToFileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const saveToFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileRequest* internal_default_instance() {
    return reinterpret_cast<const saveToFileRequest*>(
               &_saveToFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(saveToFileRequest& a, saveToFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline saveToFileRequest* New() const final {
    return CreateMaybeMessage<saveToFileRequest>(nullptr);
  }

  saveToFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<saveToFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const saveToFileRequest& from);
  void MergeFrom(const saveToFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.saveToFileRequest";
  }
  protected:
  explicit saveToFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.saveToFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.saveToFileResponse) */ {
 public:
  inline saveToFileResponse() : saveToFileResponse(nullptr) {}
  virtual ~saveToFileResponse();
  explicit constexpr saveToFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileResponse(const saveToFileResponse& from);
  saveToFileResponse(saveToFileResponse&& from) noexcept
    : saveToFileResponse() {
    *this = ::std::move(from);
  }

  inline saveToFileResponse& operator=(const saveToFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileResponse& operator=(saveToFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const saveToFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileResponse* internal_default_instance() {
    return reinterpret_cast<const saveToFileResponse*>(
               &_saveToFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(saveToFileResponse& a, saveToFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline saveToFileResponse* New() const final {
    return CreateMaybeMessage<saveToFileResponse>(nullptr);
  }

  saveToFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<saveToFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const saveToFileResponse& from);
  void MergeFrom(const saveToFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.saveToFileResponse";
  }
  protected:
  explicit saveToFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.saveToFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.loadFromFileRequest) */ {
 public:
  inline loadFromFileRequest() : loadFromFileRequest(nullptr) {}
  virtual ~loadFromFileRequest();
  explicit constexpr loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileRequest(const loadFromFileRequest& from);
  loadFromFileRequest(loadFromFileRequest&& from) noexcept
    : loadFromFileRequest() {
    *this = ::std::move(from);
  }

  inline loadFromFileRequest& operator=(const loadFromFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileRequest& operator=(loadFromFileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loadFromFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileRequest* internal_default_instance() {
    return reinterpret_cast<const loadFromFileRequest*>(
               &_loadFromFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(loadFromFileRequest& a, loadFromFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadFromFileRequest* New() const final {
    return CreateMaybeMessage<loadFromFileRequest>(nullptr);
  }

  loadFromFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadFromFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loadFromFileRequest& from);
  void MergeFrom(const loadFromFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.loadFromFileRequest";
  }
  protected:
  explicit loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.loadFromFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.loadFromFileResponse) */ {
 public:
  inline loadFromFileResponse() : loadFromFileResponse(nullptr) {}
  virtual ~loadFromFileResponse();
  explicit constexpr loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileResponse(const loadFromFileResponse& from);
  loadFromFileResponse(loadFromFileResponse&& from) noexcept
    : loadFromFileResponse() {
    *this = ::std::move(from);
  }

  inline loadFromFileResponse& operator=(const loadFromFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileResponse& operator=(loadFromFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loadFromFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileResponse* internal_default_instance() {
    return reinterpret_cast<const loadFromFileResponse*>(
               &_loadFromFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(loadFromFileResponse& a, loadFromFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadFromFileResponse* New() const final {
    return CreateMaybeMessage<loadFromFileResponse>(nullptr);
  }

  loadFromFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadFromFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loadFromFileResponse& from);
  void MergeFrom(const loadFromFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.loadFromFileResponse";
  }
  protected:
  explicit loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.loadFromFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getConstPointCloudResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getConstPointCloudResponse) */ {
 public:
  inline getConstPointCloudResponse() : getConstPointCloudResponse(nullptr) {}
  virtual ~getConstPointCloudResponse();
  explicit constexpr getConstPointCloudResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getConstPointCloudResponse(const getConstPointCloudResponse& from);
  getConstPointCloudResponse(getConstPointCloudResponse&& from) noexcept
    : getConstPointCloudResponse() {
    *this = ::std::move(from);
  }

  inline getConstPointCloudResponse& operator=(const getConstPointCloudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getConstPointCloudResponse& operator=(getConstPointCloudResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getConstPointCloudResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getConstPointCloudResponse* internal_default_instance() {
    return reinterpret_cast<const getConstPointCloudResponse*>(
               &_getConstPointCloudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(getConstPointCloudResponse& a, getConstPointCloudResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getConstPointCloudResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getConstPointCloudResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getConstPointCloudResponse* New() const final {
    return CreateMaybeMessage<getConstPointCloudResponse>(nullptr);
  }

  getConstPointCloudResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getConstPointCloudResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getConstPointCloudResponse& from);
  void MergeFrom(const getConstPointCloudResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getConstPointCloudResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getConstPointCloudResponse";
  }
  protected:
  explicit getConstPointCloudResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const void* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getConstPointCloudResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getPointCloudRequest) */ {
 public:
  inline getPointCloudRequest() : getPointCloudRequest(nullptr) {}
  virtual ~getPointCloudRequest();
  explicit constexpr getPointCloudRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequest(const getPointCloudRequest& from);
  getPointCloudRequest(getPointCloudRequest&& from) noexcept
    : getPointCloudRequest() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequest& operator=(const getPointCloudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequest& operator=(getPointCloudRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getPointCloudRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequest* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequest*>(
               &_getPointCloudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(getPointCloudRequest& a, getPointCloudRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointCloudRequest* New() const final {
    return CreateMaybeMessage<getPointCloudRequest>(nullptr);
  }

  getPointCloudRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointCloudRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getPointCloudRequest& from);
  void MergeFrom(const getPointCloudRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getPointCloudRequest";
  }
  protected:
  explicit getPointCloudRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
  };
  // bytes pointCloud = 1;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  void set_pointcloud(const std::string& value);
  void set_pointcloud(std::string&& value);
  void set_pointcloud(const char* value);
  void set_pointcloud(const void* value, size_t size);
  std::string* mutable_pointcloud();
  std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getPointCloudRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.getPointCloudResponse) */ {
 public:
  inline getPointCloudResponse() : getPointCloudResponse(nullptr) {}
  virtual ~getPointCloudResponse();
  explicit constexpr getPointCloudResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudResponse(const getPointCloudResponse& from);
  getPointCloudResponse(getPointCloudResponse&& from) noexcept
    : getPointCloudResponse() {
    *this = ::std::move(from);
  }

  inline getPointCloudResponse& operator=(const getPointCloudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudResponse& operator=(getPointCloudResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getPointCloudResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudResponse* internal_default_instance() {
    return reinterpret_cast<const getPointCloudResponse*>(
               &_getPointCloudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(getPointCloudResponse& a, getPointCloudResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointCloudResponse* New() const final {
    return CreateMaybeMessage<getPointCloudResponse>(nullptr);
  }

  getPointCloudResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointCloudResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getPointCloudResponse& from);
  void MergeFrom(const getPointCloudResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.getPointCloudResponse";
  }
  protected:
  explicit getPointCloudResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pointCloud = 1;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  void set_pointcloud(const std::string& value);
  void set_pointcloud(std::string&& value);
  void set_pointcloud(const char* value);
  void set_pointcloud(const void* value, size_t size);
  std::string* mutable_pointcloud();
  std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // bytes xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const void* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.getPointCloudResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// -------------------------------------------------------------------

class setPointCloudRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPointCloudManager.setPointCloudRequest) */ {
 public:
  inline setPointCloudRequest() : setPointCloudRequest(nullptr) {}
  virtual ~setPointCloudRequest();
  explicit constexpr setPointCloudRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setPointCloudRequest(const setPointCloudRequest& from);
  setPointCloudRequest(setPointCloudRequest&& from) noexcept
    : setPointCloudRequest() {
    *this = ::std::move(from);
  }

  inline setPointCloudRequest& operator=(const setPointCloudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setPointCloudRequest& operator=(setPointCloudRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setPointCloudRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setPointCloudRequest* internal_default_instance() {
    return reinterpret_cast<const setPointCloudRequest*>(
               &_setPointCloudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(setPointCloudRequest& a, setPointCloudRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setPointCloudRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setPointCloudRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setPointCloudRequest* New() const final {
    return CreateMaybeMessage<setPointCloudRequest>(nullptr);
  }

  setPointCloudRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setPointCloudRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setPointCloudRequest& from);
  void MergeFrom(const setPointCloudRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setPointCloudRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPointCloudManager.setPointCloudRequest";
  }
  protected:
  explicit setPointCloudRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIPointCloudManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
  };
  // bytes pointCloud = 1;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  void set_pointcloud(const std::string& value);
  void set_pointcloud(std::string&& value);
  void set_pointcloud(const char* value);
  void set_pointcloud(const void* value, size_t size);
  std::string* mutable_pointcloud();
  std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // @@protoc_insertion_point(class_scope:grpcIPointCloudManager.setPointCloudRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPointCloudManagerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// addPoint_grpc0Request

// bytes point = 1;
inline void addPoint_grpc0Request::clear_point() {
  point_.ClearToEmpty();
}
inline const std::string& addPoint_grpc0Request::point() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.addPoint_grpc0Request.point)
  return _internal_point();
}
inline void addPoint_grpc0Request::set_point(const std::string& value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.addPoint_grpc0Request.point)
}
inline std::string* addPoint_grpc0Request::mutable_point() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.addPoint_grpc0Request.point)
  return _internal_mutable_point();
}
inline const std::string& addPoint_grpc0Request::_internal_point() const {
  return point_.Get();
}
inline void addPoint_grpc0Request::_internal_set_point(const std::string& value) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addPoint_grpc0Request::set_point(std::string&& value) {
  
  point_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.addPoint_grpc0Request.point)
}
inline void addPoint_grpc0Request::set_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.addPoint_grpc0Request.point)
}
inline void addPoint_grpc0Request::set_point(const void* value,
    size_t size) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.addPoint_grpc0Request.point)
}
inline std::string* addPoint_grpc0Request::_internal_mutable_point() {
  
  return point_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addPoint_grpc0Request::release_point() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.addPoint_grpc0Request.point)
  return point_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addPoint_grpc0Request::set_allocated_point(std::string* point) {
  if (point != nullptr) {
    
  } else {
    
  }
  point_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), point,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.addPoint_grpc0Request.point)
}

// -------------------------------------------------------------------

// addPoint_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void addPoint_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addPoint_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addPoint_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.addPoint_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addPoint_grpc0Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addPoint_grpc0Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.addPoint_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addPoints_grpc0Request

// bytes points = 1;
inline void addPoints_grpc0Request::clear_points() {
  points_.ClearToEmpty();
}
inline const std::string& addPoints_grpc0Request::points() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.addPoints_grpc0Request.points)
  return _internal_points();
}
inline void addPoints_grpc0Request::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.addPoints_grpc0Request.points)
}
inline std::string* addPoints_grpc0Request::mutable_points() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.addPoints_grpc0Request.points)
  return _internal_mutable_points();
}
inline const std::string& addPoints_grpc0Request::_internal_points() const {
  return points_.Get();
}
inline void addPoints_grpc0Request::_internal_set_points(const std::string& value) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addPoints_grpc0Request::set_points(std::string&& value) {
  
  points_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.addPoints_grpc0Request.points)
}
inline void addPoints_grpc0Request::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.addPoints_grpc0Request.points)
}
inline void addPoints_grpc0Request::set_points(const void* value,
    size_t size) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.addPoints_grpc0Request.points)
}
inline std::string* addPoints_grpc0Request::_internal_mutable_points() {
  
  return points_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addPoints_grpc0Request::release_points() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.addPoints_grpc0Request.points)
  return points_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addPoints_grpc0Request::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.addPoints_grpc0Request.points)
}

// -------------------------------------------------------------------

// addPoints_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void addPoints_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addPoints_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addPoints_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.addPoints_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addPoints_grpc0Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addPoints_grpc0Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.addPoints_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addPoint_grpc1Request

// bytes point = 1;
inline void addPoint_grpc1Request::clear_point() {
  point_.ClearToEmpty();
}
inline const std::string& addPoint_grpc1Request::point() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.addPoint_grpc1Request.point)
  return _internal_point();
}
inline void addPoint_grpc1Request::set_point(const std::string& value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.addPoint_grpc1Request.point)
}
inline std::string* addPoint_grpc1Request::mutable_point() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.addPoint_grpc1Request.point)
  return _internal_mutable_point();
}
inline const std::string& addPoint_grpc1Request::_internal_point() const {
  return point_.Get();
}
inline void addPoint_grpc1Request::_internal_set_point(const std::string& value) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addPoint_grpc1Request::set_point(std::string&& value) {
  
  point_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.addPoint_grpc1Request.point)
}
inline void addPoint_grpc1Request::set_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.addPoint_grpc1Request.point)
}
inline void addPoint_grpc1Request::set_point(const void* value,
    size_t size) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.addPoint_grpc1Request.point)
}
inline std::string* addPoint_grpc1Request::_internal_mutable_point() {
  
  return point_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addPoint_grpc1Request::release_point() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.addPoint_grpc1Request.point)
  return point_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addPoint_grpc1Request::set_allocated_point(std::string* point) {
  if (point != nullptr) {
    
  } else {
    
  }
  point_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), point,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.addPoint_grpc1Request.point)
}

// -------------------------------------------------------------------

// addPoint_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void addPoint_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addPoint_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addPoint_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.addPoint_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addPoint_grpc1Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addPoint_grpc1Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.addPoint_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addPoints_grpc1Request

// bytes points = 1;
inline void addPoints_grpc1Request::clear_points() {
  points_.ClearToEmpty();
}
inline const std::string& addPoints_grpc1Request::points() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.addPoints_grpc1Request.points)
  return _internal_points();
}
inline void addPoints_grpc1Request::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.addPoints_grpc1Request.points)
}
inline std::string* addPoints_grpc1Request::mutable_points() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.addPoints_grpc1Request.points)
  return _internal_mutable_points();
}
inline const std::string& addPoints_grpc1Request::_internal_points() const {
  return points_.Get();
}
inline void addPoints_grpc1Request::_internal_set_points(const std::string& value) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addPoints_grpc1Request::set_points(std::string&& value) {
  
  points_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.addPoints_grpc1Request.points)
}
inline void addPoints_grpc1Request::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.addPoints_grpc1Request.points)
}
inline void addPoints_grpc1Request::set_points(const void* value,
    size_t size) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.addPoints_grpc1Request.points)
}
inline std::string* addPoints_grpc1Request::_internal_mutable_points() {
  
  return points_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addPoints_grpc1Request::release_points() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.addPoints_grpc1Request.points)
  return points_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addPoints_grpc1Request::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.addPoints_grpc1Request.points)
}

// -------------------------------------------------------------------

// addPoints_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void addPoints_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addPoints_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addPoints_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.addPoints_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addPoints_grpc1Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addPoints_grpc1Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.addPoints_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPointRequest

// uint32 id = 1;
inline void getPointRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getPointRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getPointRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointRequest.id)
  return _internal_id();
}
inline void getPointRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void getPointRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointRequest.id)
}

// bytes point = 2;
inline void getPointRequest::clear_point() {
  point_.ClearToEmpty();
}
inline const std::string& getPointRequest::point() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointRequest.point)
  return _internal_point();
}
inline void getPointRequest::set_point(const std::string& value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointRequest.point)
}
inline std::string* getPointRequest::mutable_point() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getPointRequest.point)
  return _internal_mutable_point();
}
inline const std::string& getPointRequest::_internal_point() const {
  return point_.Get();
}
inline void getPointRequest::_internal_set_point(const std::string& value) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getPointRequest::set_point(std::string&& value) {
  
  point_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getPointRequest.point)
}
inline void getPointRequest::set_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getPointRequest.point)
}
inline void getPointRequest::set_point(const void* value,
    size_t size) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getPointRequest.point)
}
inline std::string* getPointRequest::_internal_mutable_point() {
  
  return point_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getPointRequest::release_point() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getPointRequest.point)
  return point_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getPointRequest::set_allocated_point(std::string* point) {
  if (point != nullptr) {
    
  } else {
    
  }
  point_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), point,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getPointRequest.point)
}

// -------------------------------------------------------------------

// getPointResponse

// bytes point = 1;
inline void getPointResponse::clear_point() {
  point_.ClearToEmpty();
}
inline const std::string& getPointResponse::point() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointResponse.point)
  return _internal_point();
}
inline void getPointResponse::set_point(const std::string& value) {
  _internal_set_point(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointResponse.point)
}
inline std::string* getPointResponse::mutable_point() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getPointResponse.point)
  return _internal_mutable_point();
}
inline const std::string& getPointResponse::_internal_point() const {
  return point_.Get();
}
inline void getPointResponse::_internal_set_point(const std::string& value) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getPointResponse::set_point(std::string&& value) {
  
  point_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getPointResponse.point)
}
inline void getPointResponse::set_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getPointResponse.point)
}
inline void getPointResponse::set_point(const void* value,
    size_t size) {
  
  point_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getPointResponse.point)
}
inline std::string* getPointResponse::_internal_mutable_point() {
  
  return point_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getPointResponse::release_point() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getPointResponse.point)
  return point_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getPointResponse::set_allocated_point(std::string* point) {
  if (point != nullptr) {
    
  } else {
    
  }
  point_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), point,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getPointResponse.point)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getPointResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getPointResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getPointResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getPointResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getPointResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPointsRequest

// bytes ids = 1;
inline void getPointsRequest::clear_ids() {
  ids_.ClearToEmpty();
}
inline const std::string& getPointsRequest::ids() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointsRequest.ids)
  return _internal_ids();
}
inline void getPointsRequest::set_ids(const std::string& value) {
  _internal_set_ids(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointsRequest.ids)
}
inline std::string* getPointsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getPointsRequest.ids)
  return _internal_mutable_ids();
}
inline const std::string& getPointsRequest::_internal_ids() const {
  return ids_.Get();
}
inline void getPointsRequest::_internal_set_ids(const std::string& value) {
  
  ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getPointsRequest::set_ids(std::string&& value) {
  
  ids_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getPointsRequest.ids)
}
inline void getPointsRequest::set_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getPointsRequest.ids)
}
inline void getPointsRequest::set_ids(const void* value,
    size_t size) {
  
  ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getPointsRequest.ids)
}
inline std::string* getPointsRequest::_internal_mutable_ids() {
  
  return ids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getPointsRequest::release_ids() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getPointsRequest.ids)
  return ids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getPointsRequest::set_allocated_ids(std::string* ids) {
  if (ids != nullptr) {
    
  } else {
    
  }
  ids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getPointsRequest.ids)
}

// bytes points = 2;
inline void getPointsRequest::clear_points() {
  points_.ClearToEmpty();
}
inline const std::string& getPointsRequest::points() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointsRequest.points)
  return _internal_points();
}
inline void getPointsRequest::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointsRequest.points)
}
inline std::string* getPointsRequest::mutable_points() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getPointsRequest.points)
  return _internal_mutable_points();
}
inline const std::string& getPointsRequest::_internal_points() const {
  return points_.Get();
}
inline void getPointsRequest::_internal_set_points(const std::string& value) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getPointsRequest::set_points(std::string&& value) {
  
  points_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getPointsRequest.points)
}
inline void getPointsRequest::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getPointsRequest.points)
}
inline void getPointsRequest::set_points(const void* value,
    size_t size) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getPointsRequest.points)
}
inline std::string* getPointsRequest::_internal_mutable_points() {
  
  return points_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getPointsRequest::release_points() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getPointsRequest.points)
  return points_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getPointsRequest::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getPointsRequest.points)
}

// -------------------------------------------------------------------

// getPointsResponse

// bytes points = 1;
inline void getPointsResponse::clear_points() {
  points_.ClearToEmpty();
}
inline const std::string& getPointsResponse::points() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointsResponse.points)
  return _internal_points();
}
inline void getPointsResponse::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointsResponse.points)
}
inline std::string* getPointsResponse::mutable_points() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getPointsResponse.points)
  return _internal_mutable_points();
}
inline const std::string& getPointsResponse::_internal_points() const {
  return points_.Get();
}
inline void getPointsResponse::_internal_set_points(const std::string& value) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getPointsResponse::set_points(std::string&& value) {
  
  points_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getPointsResponse.points)
}
inline void getPointsResponse::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getPointsResponse.points)
}
inline void getPointsResponse::set_points(const void* value,
    size_t size) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getPointsResponse.points)
}
inline std::string* getPointsResponse::_internal_mutable_points() {
  
  return points_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getPointsResponse::release_points() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getPointsResponse.points)
  return points_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getPointsResponse::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getPointsResponse.points)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getPointsResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getPointsResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getPointsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getPointsResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getPointsResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getAllPointsRequest

// bytes points = 1;
inline void getAllPointsRequest::clear_points() {
  points_.ClearToEmpty();
}
inline const std::string& getAllPointsRequest::points() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getAllPointsRequest.points)
  return _internal_points();
}
inline void getAllPointsRequest::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getAllPointsRequest.points)
}
inline std::string* getAllPointsRequest::mutable_points() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getAllPointsRequest.points)
  return _internal_mutable_points();
}
inline const std::string& getAllPointsRequest::_internal_points() const {
  return points_.Get();
}
inline void getAllPointsRequest::_internal_set_points(const std::string& value) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getAllPointsRequest::set_points(std::string&& value) {
  
  points_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getAllPointsRequest.points)
}
inline void getAllPointsRequest::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getAllPointsRequest.points)
}
inline void getAllPointsRequest::set_points(const void* value,
    size_t size) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getAllPointsRequest.points)
}
inline std::string* getAllPointsRequest::_internal_mutable_points() {
  
  return points_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getAllPointsRequest::release_points() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getAllPointsRequest.points)
  return points_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getAllPointsRequest::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getAllPointsRequest.points)
}

// -------------------------------------------------------------------

// getAllPointsResponse

// bytes points = 1;
inline void getAllPointsResponse::clear_points() {
  points_.ClearToEmpty();
}
inline const std::string& getAllPointsResponse::points() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getAllPointsResponse.points)
  return _internal_points();
}
inline void getAllPointsResponse::set_points(const std::string& value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getAllPointsResponse.points)
}
inline std::string* getAllPointsResponse::mutable_points() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getAllPointsResponse.points)
  return _internal_mutable_points();
}
inline const std::string& getAllPointsResponse::_internal_points() const {
  return points_.Get();
}
inline void getAllPointsResponse::_internal_set_points(const std::string& value) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getAllPointsResponse::set_points(std::string&& value) {
  
  points_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getAllPointsResponse.points)
}
inline void getAllPointsResponse::set_points(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getAllPointsResponse.points)
}
inline void getAllPointsResponse::set_points(const void* value,
    size_t size) {
  
  points_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getAllPointsResponse.points)
}
inline std::string* getAllPointsResponse::_internal_mutable_points() {
  
  return points_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getAllPointsResponse::release_points() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getAllPointsResponse.points)
  return points_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getAllPointsResponse::set_allocated_points(std::string* points) {
  if (points != nullptr) {
    
  } else {
    
  }
  points_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), points,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getAllPointsResponse.points)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getAllPointsResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAllPointsResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAllPointsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getAllPointsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getAllPointsResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getAllPointsResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getAllPointsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// suppressPointRequest

// uint32 id = 1;
inline void suppressPointRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 suppressPointRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 suppressPointRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.suppressPointRequest.id)
  return _internal_id();
}
inline void suppressPointRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void suppressPointRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.suppressPointRequest.id)
}

// -------------------------------------------------------------------

// suppressPointResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void suppressPointResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 suppressPointResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 suppressPointResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.suppressPointResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void suppressPointResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void suppressPointResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.suppressPointResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// suppressPointsRequest

// bytes ids = 1;
inline void suppressPointsRequest::clear_ids() {
  ids_.ClearToEmpty();
}
inline const std::string& suppressPointsRequest::ids() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.suppressPointsRequest.ids)
  return _internal_ids();
}
inline void suppressPointsRequest::set_ids(const std::string& value) {
  _internal_set_ids(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.suppressPointsRequest.ids)
}
inline std::string* suppressPointsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.suppressPointsRequest.ids)
  return _internal_mutable_ids();
}
inline const std::string& suppressPointsRequest::_internal_ids() const {
  return ids_.Get();
}
inline void suppressPointsRequest::_internal_set_ids(const std::string& value) {
  
  ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void suppressPointsRequest::set_ids(std::string&& value) {
  
  ids_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.suppressPointsRequest.ids)
}
inline void suppressPointsRequest::set_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.suppressPointsRequest.ids)
}
inline void suppressPointsRequest::set_ids(const void* value,
    size_t size) {
  
  ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.suppressPointsRequest.ids)
}
inline std::string* suppressPointsRequest::_internal_mutable_ids() {
  
  return ids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* suppressPointsRequest::release_ids() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.suppressPointsRequest.ids)
  return ids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void suppressPointsRequest::set_allocated_ids(std::string* ids) {
  if (ids != nullptr) {
    
  } else {
    
  }
  ids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.suppressPointsRequest.ids)
}

// -------------------------------------------------------------------

// suppressPointsResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void suppressPointsResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 suppressPointsResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 suppressPointsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.suppressPointsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void suppressPointsResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void suppressPointsResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.suppressPointsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDescriptorTypeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void getDescriptorTypeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDescriptorTypeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDescriptorTypeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getDescriptorTypeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDescriptorTypeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getDescriptorTypeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getDescriptorTypeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setDescriptorTypeRequest

// sint32 type = 1;
inline void setDescriptorTypeRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDescriptorTypeRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDescriptorTypeRequest::type() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.setDescriptorTypeRequest.type)
  return _internal_type();
}
inline void setDescriptorTypeRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void setDescriptorTypeRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.setDescriptorTypeRequest.type)
}

// -------------------------------------------------------------------

// setDescriptorTypeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setDescriptorTypeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDescriptorTypeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDescriptorTypeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.setDescriptorTypeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setDescriptorTypeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setDescriptorTypeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.setDescriptorTypeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// isExistPointRequest

// uint32 id = 1;
inline void isExistPointRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 isExistPointRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 isExistPointRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.isExistPointRequest.id)
  return _internal_id();
}
inline void isExistPointRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void isExistPointRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.isExistPointRequest.id)
}

// -------------------------------------------------------------------

// isExistPointResponse

// bool xpcfGrpcReturnValue = 1;
inline void isExistPointResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool isExistPointResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool isExistPointResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.isExistPointResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void isExistPointResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void isExistPointResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.isExistPointResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNbPointsResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void getNbPointsResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNbPointsResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNbPointsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getNbPointsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNbPointsResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNbPointsResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getNbPointsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// saveToFileRequest

// string file = 1;
inline void saveToFileRequest::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& saveToFileRequest::file() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.saveToFileRequest.file)
  return _internal_file();
}
inline void saveToFileRequest::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.saveToFileRequest.file)
}
inline std::string* saveToFileRequest::mutable_file() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.saveToFileRequest.file)
  return _internal_mutable_file();
}
inline const std::string& saveToFileRequest::_internal_file() const {
  return file_.Get();
}
inline void saveToFileRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void saveToFileRequest::set_file(std::string&& value) {
  
  file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.saveToFileRequest.file)
}
inline void saveToFileRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.saveToFileRequest.file)
}
inline void saveToFileRequest::set_file(const char* value,
    size_t size) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.saveToFileRequest.file)
}
inline std::string* saveToFileRequest::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* saveToFileRequest::release_file() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.saveToFileRequest.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void saveToFileRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.saveToFileRequest.file)
}

// -------------------------------------------------------------------

// saveToFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void saveToFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 saveToFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 saveToFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.saveToFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void saveToFileResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void saveToFileResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.saveToFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// loadFromFileRequest

// string file = 1;
inline void loadFromFileRequest::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& loadFromFileRequest::file() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.loadFromFileRequest.file)
  return _internal_file();
}
inline void loadFromFileRequest::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.loadFromFileRequest.file)
}
inline std::string* loadFromFileRequest::mutable_file() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.loadFromFileRequest.file)
  return _internal_mutable_file();
}
inline const std::string& loadFromFileRequest::_internal_file() const {
  return file_.Get();
}
inline void loadFromFileRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void loadFromFileRequest::set_file(std::string&& value) {
  
  file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.loadFromFileRequest.file)
}
inline void loadFromFileRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.loadFromFileRequest.file)
}
inline void loadFromFileRequest::set_file(const char* value,
    size_t size) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.loadFromFileRequest.file)
}
inline std::string* loadFromFileRequest::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* loadFromFileRequest::release_file() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.loadFromFileRequest.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void loadFromFileRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.loadFromFileRequest.file)
}

// -------------------------------------------------------------------

// loadFromFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void loadFromFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadFromFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadFromFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.loadFromFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void loadFromFileResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void loadFromFileResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.loadFromFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getConstPointCloudResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getConstPointCloudResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getConstPointCloudResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getConstPointCloudResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getConstPointCloudResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getConstPointCloudResponse.xpcfGrpcReturnValue)
}
inline std::string* getConstPointCloudResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getConstPointCloudResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getConstPointCloudResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getConstPointCloudResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getConstPointCloudResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getConstPointCloudResponse.xpcfGrpcReturnValue)
}
inline void getConstPointCloudResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getConstPointCloudResponse.xpcfGrpcReturnValue)
}
inline void getConstPointCloudResponse::set_xpcfgrpcreturnvalue(const void* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getConstPointCloudResponse.xpcfGrpcReturnValue)
}
inline std::string* getConstPointCloudResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getConstPointCloudResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getConstPointCloudResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getConstPointCloudResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getConstPointCloudResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPointCloudRequest

// bytes pointCloud = 1;
inline void getPointCloudRequest::clear_pointcloud() {
  pointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudRequest::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointCloudRequest.pointCloud)
  return _internal_pointcloud();
}
inline void getPointCloudRequest::set_pointcloud(const std::string& value) {
  _internal_set_pointcloud(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointCloudRequest.pointCloud)
}
inline std::string* getPointCloudRequest::mutable_pointcloud() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getPointCloudRequest.pointCloud)
  return _internal_mutable_pointcloud();
}
inline const std::string& getPointCloudRequest::_internal_pointcloud() const {
  return pointcloud_.Get();
}
inline void getPointCloudRequest::_internal_set_pointcloud(const std::string& value) {
  
  pointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getPointCloudRequest::set_pointcloud(std::string&& value) {
  
  pointcloud_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getPointCloudRequest.pointCloud)
}
inline void getPointCloudRequest::set_pointcloud(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getPointCloudRequest.pointCloud)
}
inline void getPointCloudRequest::set_pointcloud(const void* value,
    size_t size) {
  
  pointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getPointCloudRequest.pointCloud)
}
inline std::string* getPointCloudRequest::_internal_mutable_pointcloud() {
  
  return pointcloud_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getPointCloudRequest::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getPointCloudRequest.pointCloud)
  return pointcloud_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getPointCloudRequest::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  pointcloud_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pointcloud,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getPointCloudRequest.pointCloud)
}

// -------------------------------------------------------------------

// getPointCloudResponse

// bytes pointCloud = 1;
inline void getPointCloudResponse::clear_pointcloud() {
  pointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudResponse::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointCloudResponse.pointCloud)
  return _internal_pointcloud();
}
inline void getPointCloudResponse::set_pointcloud(const std::string& value) {
  _internal_set_pointcloud(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointCloudResponse.pointCloud)
}
inline std::string* getPointCloudResponse::mutable_pointcloud() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getPointCloudResponse.pointCloud)
  return _internal_mutable_pointcloud();
}
inline const std::string& getPointCloudResponse::_internal_pointcloud() const {
  return pointcloud_.Get();
}
inline void getPointCloudResponse::_internal_set_pointcloud(const std::string& value) {
  
  pointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getPointCloudResponse::set_pointcloud(std::string&& value) {
  
  pointcloud_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getPointCloudResponse.pointCloud)
}
inline void getPointCloudResponse::set_pointcloud(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getPointCloudResponse.pointCloud)
}
inline void getPointCloudResponse::set_pointcloud(const void* value,
    size_t size) {
  
  pointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getPointCloudResponse.pointCloud)
}
inline std::string* getPointCloudResponse::_internal_mutable_pointcloud() {
  
  return pointcloud_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getPointCloudResponse::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getPointCloudResponse.pointCloud)
  return pointcloud_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getPointCloudResponse::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  pointcloud_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pointcloud,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getPointCloudResponse.pointCloud)
}

// bytes xpcfGrpcReturnValue = 2;
inline void getPointCloudResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getPointCloudResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.getPointCloudResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getPointCloudResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.getPointCloudResponse.xpcfGrpcReturnValue)
}
inline std::string* getPointCloudResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.getPointCloudResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getPointCloudResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getPointCloudResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getPointCloudResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.getPointCloudResponse.xpcfGrpcReturnValue)
}
inline void getPointCloudResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.getPointCloudResponse.xpcfGrpcReturnValue)
}
inline void getPointCloudResponse::set_xpcfgrpcreturnvalue(const void* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.getPointCloudResponse.xpcfGrpcReturnValue)
}
inline std::string* getPointCloudResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getPointCloudResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.getPointCloudResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getPointCloudResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.getPointCloudResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setPointCloudRequest

// bytes pointCloud = 1;
inline void setPointCloudRequest::clear_pointcloud() {
  pointcloud_.ClearToEmpty();
}
inline const std::string& setPointCloudRequest::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIPointCloudManager.setPointCloudRequest.pointCloud)
  return _internal_pointcloud();
}
inline void setPointCloudRequest::set_pointcloud(const std::string& value) {
  _internal_set_pointcloud(value);
  // @@protoc_insertion_point(field_set:grpcIPointCloudManager.setPointCloudRequest.pointCloud)
}
inline std::string* setPointCloudRequest::mutable_pointcloud() {
  // @@protoc_insertion_point(field_mutable:grpcIPointCloudManager.setPointCloudRequest.pointCloud)
  return _internal_mutable_pointcloud();
}
inline const std::string& setPointCloudRequest::_internal_pointcloud() const {
  return pointcloud_.Get();
}
inline void setPointCloudRequest::_internal_set_pointcloud(const std::string& value) {
  
  pointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setPointCloudRequest::set_pointcloud(std::string&& value) {
  
  pointcloud_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIPointCloudManager.setPointCloudRequest.pointCloud)
}
inline void setPointCloudRequest::set_pointcloud(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIPointCloudManager.setPointCloudRequest.pointCloud)
}
inline void setPointCloudRequest::set_pointcloud(const void* value,
    size_t size) {
  
  pointcloud_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIPointCloudManager.setPointCloudRequest.pointCloud)
}
inline std::string* setPointCloudRequest::_internal_mutable_pointcloud() {
  
  return pointcloud_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setPointCloudRequest::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIPointCloudManager.setPointCloudRequest.pointCloud)
  return pointcloud_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setPointCloudRequest::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  pointcloud_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pointcloud,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIPointCloudManager.setPointCloudRequest.pointCloud)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIPointCloudManager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIPointCloudManagerService_2eproto
