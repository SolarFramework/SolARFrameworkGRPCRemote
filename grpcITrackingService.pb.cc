// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcITrackingService.proto

#include "grpcITrackingService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpcITracking {
constexpr setNewKeyframeRequest::setNewKeyframeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : newkeyframe_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct setNewKeyframeRequestDefaultTypeInternal {
  constexpr setNewKeyframeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~setNewKeyframeRequestDefaultTypeInternal() {}
  union {
    setNewKeyframeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT setNewKeyframeRequestDefaultTypeInternal _setNewKeyframeRequest_default_instance_;
constexpr checkNeedNewKeyframeRequest::checkNeedNewKeyframeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : grpcservercompressionformat_(0){}
struct checkNeedNewKeyframeRequestDefaultTypeInternal {
  constexpr checkNeedNewKeyframeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~checkNeedNewKeyframeRequestDefaultTypeInternal() {}
  union {
    checkNeedNewKeyframeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT checkNeedNewKeyframeRequestDefaultTypeInternal _checkNeedNewKeyframeRequest_default_instance_;
constexpr checkNeedNewKeyframeResponse::checkNeedNewKeyframeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xpcfgrpcreturnvalue_(false){}
struct checkNeedNewKeyframeResponseDefaultTypeInternal {
  constexpr checkNeedNewKeyframeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~checkNeedNewKeyframeResponseDefaultTypeInternal() {}
  union {
    checkNeedNewKeyframeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT checkNeedNewKeyframeResponseDefaultTypeInternal _checkNeedNewKeyframeResponse_default_instance_;
constexpr processRequest::processRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , displayimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , grpcservercompressionformat_(0){}
struct processRequestDefaultTypeInternal {
  constexpr processRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~processRequestDefaultTypeInternal() {}
  union {
    processRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT processRequestDefaultTypeInternal _processRequest_default_instance_;
constexpr processResponse::processResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : displayimage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xpcfgrpcreturnvalue_(0){}
struct processResponseDefaultTypeInternal {
  constexpr processResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~processResponseDefaultTypeInternal() {}
  union {
    processResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT processResponseDefaultTypeInternal _processResponse_default_instance_;
}  // namespace grpcITracking
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpcITrackingService_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpcITrackingService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpcITrackingService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpcITrackingService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::setNewKeyframeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::setNewKeyframeRequest, newkeyframe_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::checkNeedNewKeyframeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::checkNeedNewKeyframeRequest, grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::checkNeedNewKeyframeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::checkNeedNewKeyframeResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::processRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::processRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcITracking::processRequest, frame_),
  PROTOBUF_FIELD_OFFSET(::grpcITracking::processRequest, displayimage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::processResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcITracking::processResponse, displayimage_),
  PROTOBUF_FIELD_OFFSET(::grpcITracking::processResponse, xpcfgrpcreturnvalue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpcITracking::setNewKeyframeRequest)},
  { 6, -1, sizeof(::grpcITracking::checkNeedNewKeyframeRequest)},
  { 12, -1, sizeof(::grpcITracking::checkNeedNewKeyframeResponse)},
  { 18, -1, sizeof(::grpcITracking::processRequest)},
  { 26, -1, sizeof(::grpcITracking::processResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcITracking::_setNewKeyframeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcITracking::_checkNeedNewKeyframeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcITracking::_checkNeedNewKeyframeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcITracking::_processRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcITracking::_processResponse_default_instance_),
};

const char descriptor_table_protodef_grpcITrackingService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032grpcITrackingService.proto\022\rgrpcITrack"
  "ing\032\033google/protobuf/empty.proto\",\n\025setN"
  "ewKeyframeRequest\022\023\n\013newKeyframe\030\001 \001(\014\"B"
  "\n\033checkNeedNewKeyframeRequest\022#\n\033grpcSer"
  "verCompressionFormat\030\001 \001(\005\";\n\034checkNeedN"
  "ewKeyframeResponse\022\033\n\023xpcfGrpcReturnValu"
  "e\030\001 \001(\010\"Z\n\016processRequest\022#\n\033grpcServerC"
  "ompressionFormat\030\001 \001(\005\022\r\n\005frame\030\002 \001(\014\022\024\n"
  "\014displayImage\030\003 \001(\014\"D\n\017processResponse\022\024"
  "\n\014displayImage\030\001 \001(\014\022\033\n\023xpcfGrpcReturnVa"
  "lue\030\002 \001(\0212\247\002\n\024grpcITrackingService\022P\n\016se"
  "tNewKeyframe\022$.grpcITracking.setNewKeyfr"
  "ameRequest\032\026.google.protobuf.Empty\"\000\022q\n\024"
  "checkNeedNewKeyframe\022*.grpcITracking.che"
  "ckNeedNewKeyframeRequest\032+.grpcITracking"
  ".checkNeedNewKeyframeResponse\"\000\022J\n\007proce"
  "ss\022\035.grpcITracking.processRequest\032\036.grpc"
  "ITracking.processResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpcITrackingService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpcITrackingService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcITrackingService_2eproto = {
  false, false, 715, descriptor_table_protodef_grpcITrackingService_2eproto, "grpcITrackingService.proto", 
  &descriptor_table_grpcITrackingService_2eproto_once, descriptor_table_grpcITrackingService_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_grpcITrackingService_2eproto::offsets,
  file_level_metadata_grpcITrackingService_2eproto, file_level_enum_descriptors_grpcITrackingService_2eproto, file_level_service_descriptors_grpcITrackingService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_grpcITrackingService_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grpcITrackingService_2eproto);
  return descriptor_table_grpcITrackingService_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_grpcITrackingService_2eproto(&descriptor_table_grpcITrackingService_2eproto);
namespace grpcITracking {

// ===================================================================

class setNewKeyframeRequest::_Internal {
 public:
};

setNewKeyframeRequest::setNewKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcITracking.setNewKeyframeRequest)
}
setNewKeyframeRequest::setNewKeyframeRequest(const setNewKeyframeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  newkeyframe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newkeyframe().empty()) {
    newkeyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newkeyframe(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:grpcITracking.setNewKeyframeRequest)
}

void setNewKeyframeRequest::SharedCtor() {
newkeyframe_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

setNewKeyframeRequest::~setNewKeyframeRequest() {
  // @@protoc_insertion_point(destructor:grpcITracking.setNewKeyframeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void setNewKeyframeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  newkeyframe_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void setNewKeyframeRequest::ArenaDtor(void* object) {
  setNewKeyframeRequest* _this = reinterpret_cast< setNewKeyframeRequest* >(object);
  (void)_this;
}
void setNewKeyframeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void setNewKeyframeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setNewKeyframeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITracking.setNewKeyframeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newkeyframe_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setNewKeyframeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes newKeyframe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_newkeyframe();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* setNewKeyframeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITracking.setNewKeyframeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes newKeyframe = 1;
  if (this->newkeyframe().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_newkeyframe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITracking.setNewKeyframeRequest)
  return target;
}

size_t setNewKeyframeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITracking.setNewKeyframeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes newKeyframe = 1;
  if (this->newkeyframe().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_newkeyframe());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void setNewKeyframeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcITracking.setNewKeyframeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const setNewKeyframeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<setNewKeyframeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcITracking.setNewKeyframeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcITracking.setNewKeyframeRequest)
    MergeFrom(*source);
  }
}

void setNewKeyframeRequest::MergeFrom(const setNewKeyframeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITracking.setNewKeyframeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newkeyframe().size() > 0) {
    _internal_set_newkeyframe(from._internal_newkeyframe());
  }
}

void setNewKeyframeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcITracking.setNewKeyframeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setNewKeyframeRequest::CopyFrom(const setNewKeyframeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITracking.setNewKeyframeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setNewKeyframeRequest::IsInitialized() const {
  return true;
}

void setNewKeyframeRequest::InternalSwap(setNewKeyframeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  newkeyframe_.Swap(&other->newkeyframe_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata setNewKeyframeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class checkNeedNewKeyframeRequest::_Internal {
 public:
};

checkNeedNewKeyframeRequest::checkNeedNewKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcITracking.checkNeedNewKeyframeRequest)
}
checkNeedNewKeyframeRequest::checkNeedNewKeyframeRequest(const checkNeedNewKeyframeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcITracking.checkNeedNewKeyframeRequest)
}

void checkNeedNewKeyframeRequest::SharedCtor() {
grpcservercompressionformat_ = 0;
}

checkNeedNewKeyframeRequest::~checkNeedNewKeyframeRequest() {
  // @@protoc_insertion_point(destructor:grpcITracking.checkNeedNewKeyframeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void checkNeedNewKeyframeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void checkNeedNewKeyframeRequest::ArenaDtor(void* object) {
  checkNeedNewKeyframeRequest* _this = reinterpret_cast< checkNeedNewKeyframeRequest* >(object);
  (void)_this;
}
void checkNeedNewKeyframeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void checkNeedNewKeyframeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void checkNeedNewKeyframeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITracking.checkNeedNewKeyframeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* checkNeedNewKeyframeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* checkNeedNewKeyframeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITracking.checkNeedNewKeyframeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITracking.checkNeedNewKeyframeRequest)
  return target;
}

size_t checkNeedNewKeyframeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITracking.checkNeedNewKeyframeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void checkNeedNewKeyframeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcITracking.checkNeedNewKeyframeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const checkNeedNewKeyframeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<checkNeedNewKeyframeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcITracking.checkNeedNewKeyframeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcITracking.checkNeedNewKeyframeRequest)
    MergeFrom(*source);
  }
}

void checkNeedNewKeyframeRequest::MergeFrom(const checkNeedNewKeyframeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITracking.checkNeedNewKeyframeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void checkNeedNewKeyframeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcITracking.checkNeedNewKeyframeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void checkNeedNewKeyframeRequest::CopyFrom(const checkNeedNewKeyframeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITracking.checkNeedNewKeyframeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool checkNeedNewKeyframeRequest::IsInitialized() const {
  return true;
}

void checkNeedNewKeyframeRequest::InternalSwap(checkNeedNewKeyframeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata checkNeedNewKeyframeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class checkNeedNewKeyframeResponse::_Internal {
 public:
};

checkNeedNewKeyframeResponse::checkNeedNewKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcITracking.checkNeedNewKeyframeResponse)
}
checkNeedNewKeyframeResponse::checkNeedNewKeyframeResponse(const checkNeedNewKeyframeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcITracking.checkNeedNewKeyframeResponse)
}

void checkNeedNewKeyframeResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = false;
}

checkNeedNewKeyframeResponse::~checkNeedNewKeyframeResponse() {
  // @@protoc_insertion_point(destructor:grpcITracking.checkNeedNewKeyframeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void checkNeedNewKeyframeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void checkNeedNewKeyframeResponse::ArenaDtor(void* object) {
  checkNeedNewKeyframeResponse* _this = reinterpret_cast< checkNeedNewKeyframeResponse* >(object);
  (void)_this;
}
void checkNeedNewKeyframeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void checkNeedNewKeyframeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void checkNeedNewKeyframeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITracking.checkNeedNewKeyframeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* checkNeedNewKeyframeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* checkNeedNewKeyframeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITracking.checkNeedNewKeyframeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITracking.checkNeedNewKeyframeResponse)
  return target;
}

size_t checkNeedNewKeyframeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITracking.checkNeedNewKeyframeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool xpcfGrpcReturnValue = 1;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void checkNeedNewKeyframeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcITracking.checkNeedNewKeyframeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const checkNeedNewKeyframeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<checkNeedNewKeyframeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcITracking.checkNeedNewKeyframeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcITracking.checkNeedNewKeyframeResponse)
    MergeFrom(*source);
  }
}

void checkNeedNewKeyframeResponse::MergeFrom(const checkNeedNewKeyframeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITracking.checkNeedNewKeyframeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void checkNeedNewKeyframeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcITracking.checkNeedNewKeyframeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void checkNeedNewKeyframeResponse::CopyFrom(const checkNeedNewKeyframeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITracking.checkNeedNewKeyframeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool checkNeedNewKeyframeResponse::IsInitialized() const {
  return true;
}

void checkNeedNewKeyframeResponse::InternalSwap(checkNeedNewKeyframeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata checkNeedNewKeyframeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class processRequest::_Internal {
 public:
};

processRequest::processRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcITracking.processRequest)
}
processRequest::processRequest(const processRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame().empty()) {
    frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame(), 
      GetArena());
  }
  displayimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_displayimage().empty()) {
    displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayimage(), 
      GetArena());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcITracking.processRequest)
}

void processRequest::SharedCtor() {
frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
displayimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
grpcservercompressionformat_ = 0;
}

processRequest::~processRequest() {
  // @@protoc_insertion_point(destructor:grpcITracking.processRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void processRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  displayimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void processRequest::ArenaDtor(void* object) {
  processRequest* _this = reinterpret_cast< processRequest* >(object);
  (void)_this;
}
void processRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void processRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void processRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITracking.processRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.ClearToEmpty();
  displayimage_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* processRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes displayImage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_displayimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* processRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITracking.processRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes frame = 2;
  if (this->frame().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_frame(), target);
  }

  // bytes displayImage = 3;
  if (this->displayimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_displayimage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITracking.processRequest)
  return target;
}

size_t processRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITracking.processRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes frame = 2;
  if (this->frame().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_frame());
  }

  // bytes displayImage = 3;
  if (this->displayimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_displayimage());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->grpcservercompressionformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grpcservercompressionformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void processRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcITracking.processRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const processRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<processRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcITracking.processRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcITracking.processRequest)
    MergeFrom(*source);
  }
}

void processRequest::MergeFrom(const processRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITracking.processRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame().size() > 0) {
    _internal_set_frame(from._internal_frame());
  }
  if (from.displayimage().size() > 0) {
    _internal_set_displayimage(from._internal_displayimage());
  }
  if (from.grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
}

void processRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcITracking.processRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void processRequest::CopyFrom(const processRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITracking.processRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool processRequest::IsInitialized() const {
  return true;
}

void processRequest::InternalSwap(processRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frame_.Swap(&other->frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  displayimage_.Swap(&other->displayimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata processRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class processResponse::_Internal {
 public:
};

processResponse::processResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcITracking.processResponse)
}
processResponse::processResponse(const processResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  displayimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_displayimage().empty()) {
    displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_displayimage(), 
      GetArena());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcITracking.processResponse)
}

void processResponse::SharedCtor() {
displayimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xpcfgrpcreturnvalue_ = 0;
}

processResponse::~processResponse() {
  // @@protoc_insertion_point(destructor:grpcITracking.processResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void processResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  displayimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void processResponse::ArenaDtor(void* object) {
  processResponse* _this = reinterpret_cast< processResponse* >(object);
  (void)_this;
}
void processResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void processResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void processResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITracking.processResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  displayimage_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* processResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes displayImage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_displayimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* processResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITracking.processResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes displayImage = 1;
  if (this->displayimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_displayimage(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITracking.processResponse)
  return target;
}

size_t processResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITracking.processResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes displayImage = 1;
  if (this->displayimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_displayimage());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void processResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcITracking.processResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const processResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<processResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcITracking.processResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcITracking.processResponse)
    MergeFrom(*source);
  }
}

void processResponse::MergeFrom(const processResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITracking.processResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.displayimage().size() > 0) {
    _internal_set_displayimage(from._internal_displayimage());
  }
  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void processResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcITracking.processResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void processResponse::CopyFrom(const processResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITracking.processResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool processResponse::IsInitialized() const {
  return true;
}

void processResponse::InternalSwap(processResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  displayimage_.Swap(&other->displayimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata processResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcITracking
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcITracking::setNewKeyframeRequest* Arena::CreateMaybeMessage< ::grpcITracking::setNewKeyframeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITracking::setNewKeyframeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcITracking::checkNeedNewKeyframeRequest* Arena::CreateMaybeMessage< ::grpcITracking::checkNeedNewKeyframeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITracking::checkNeedNewKeyframeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcITracking::checkNeedNewKeyframeResponse* Arena::CreateMaybeMessage< ::grpcITracking::checkNeedNewKeyframeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITracking::checkNeedNewKeyframeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcITracking::processRequest* Arena::CreateMaybeMessage< ::grpcITracking::processRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITracking::processRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcITracking::processResponse* Arena::CreateMaybeMessage< ::grpcITracking::processResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITracking::processResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
