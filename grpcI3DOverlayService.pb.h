// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcI3DOverlayService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcI3DOverlayService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcI3DOverlayService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcI3DOverlayService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcI3DOverlayService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcI3DOverlayService_2eproto;
namespace grpcI3DOverlay {
class drawRequest;
struct drawRequestDefaultTypeInternal;
extern drawRequestDefaultTypeInternal _drawRequest_default_instance_;
class setCameraParametersRequest;
struct setCameraParametersRequestDefaultTypeInternal;
extern setCameraParametersRequestDefaultTypeInternal _setCameraParametersRequest_default_instance_;
}  // namespace grpcI3DOverlay
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcI3DOverlay::drawRequest* Arena::CreateMaybeMessage<::grpcI3DOverlay::drawRequest>(Arena*);
template<> ::grpcI3DOverlay::setCameraParametersRequest* Arena::CreateMaybeMessage<::grpcI3DOverlay::setCameraParametersRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcI3DOverlay {

// ===================================================================

class setCameraParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DOverlay.setCameraParametersRequest) */ {
 public:
  inline setCameraParametersRequest() : setCameraParametersRequest(nullptr) {}
  ~setCameraParametersRequest() override;
  explicit constexpr setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParametersRequest(const setCameraParametersRequest& from);
  setCameraParametersRequest(setCameraParametersRequest&& from) noexcept
    : setCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline setCameraParametersRequest& operator=(const setCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParametersRequest& operator=(setCameraParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setCameraParametersRequest*>(
               &_setCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setCameraParametersRequest& a, setCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParametersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setCameraParametersRequest* New() const final {
    return new setCameraParametersRequest();
  }

  setCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setCameraParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setCameraParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DOverlay.setCameraParametersRequest";
  }
  protected:
  explicit setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntrinsicParametersFieldNumber = 1,
    kDistorsionParametersFieldNumber = 2,
  };
  // bytes intrinsic_parameters = 1;
  void clear_intrinsic_parameters();
  const std::string& intrinsic_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intrinsic_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intrinsic_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_intrinsic_parameters();
  void set_allocated_intrinsic_parameters(std::string* intrinsic_parameters);
  private:
  const std::string& _internal_intrinsic_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intrinsic_parameters(const std::string& value);
  std::string* _internal_mutable_intrinsic_parameters();
  public:

  // bytes distorsion_parameters = 2;
  void clear_distorsion_parameters();
  const std::string& distorsion_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_distorsion_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_distorsion_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_distorsion_parameters();
  void set_allocated_distorsion_parameters(std::string* distorsion_parameters);
  private:
  const std::string& _internal_distorsion_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distorsion_parameters(const std::string& value);
  std::string* _internal_mutable_distorsion_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DOverlay.setCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsic_parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distorsion_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI3DOverlayService_2eproto;
};
// -------------------------------------------------------------------

class drawRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DOverlay.drawRequest) */ {
 public:
  inline drawRequest() : drawRequest(nullptr) {}
  ~drawRequest() override;
  explicit constexpr drawRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  drawRequest(const drawRequest& from);
  drawRequest(drawRequest&& from) noexcept
    : drawRequest() {
    *this = ::std::move(from);
  }

  inline drawRequest& operator=(const drawRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline drawRequest& operator=(drawRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const drawRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const drawRequest* internal_default_instance() {
    return reinterpret_cast<const drawRequest*>(
               &_drawRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(drawRequest& a, drawRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(drawRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(drawRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline drawRequest* New() const final {
    return new drawRequest();
  }

  drawRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<drawRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const drawRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const drawRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(drawRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DOverlay.drawRequest";
  }
  protected:
  explicit drawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kDisplayImageFieldNumber = 2,
  };
  // bytes pose = 1;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_MUST_USE_RESULT std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes displayImage = 2;
  void clear_displayimage();
  const std::string& displayimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_displayimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_displayimage();
  PROTOBUF_MUST_USE_RESULT std::string* release_displayimage();
  void set_allocated_displayimage(std::string* displayimage);
  private:
  const std::string& _internal_displayimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_displayimage(const std::string& value);
  std::string* _internal_mutable_displayimage();
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DOverlay.drawRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI3DOverlayService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setCameraParametersRequest

// bytes intrinsic_parameters = 1;
inline void setCameraParametersRequest::clear_intrinsic_parameters() {
  intrinsic_parameters_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::intrinsic_parameters() const {
  // @@protoc_insertion_point(field_get:grpcI3DOverlay.setCameraParametersRequest.intrinsic_parameters)
  return _internal_intrinsic_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParametersRequest::set_intrinsic_parameters(ArgT0&& arg0, ArgT... args) {
 
 intrinsic_parameters_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DOverlay.setCameraParametersRequest.intrinsic_parameters)
}
inline std::string* setCameraParametersRequest::mutable_intrinsic_parameters() {
  std::string* _s = _internal_mutable_intrinsic_parameters();
  // @@protoc_insertion_point(field_mutable:grpcI3DOverlay.setCameraParametersRequest.intrinsic_parameters)
  return _s;
}
inline const std::string& setCameraParametersRequest::_internal_intrinsic_parameters() const {
  return intrinsic_parameters_.Get();
}
inline void setCameraParametersRequest::_internal_set_intrinsic_parameters(const std::string& value) {
  
  intrinsic_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::_internal_mutable_intrinsic_parameters() {
  
  return intrinsic_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::release_intrinsic_parameters() {
  // @@protoc_insertion_point(field_release:grpcI3DOverlay.setCameraParametersRequest.intrinsic_parameters)
  return intrinsic_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setCameraParametersRequest::set_allocated_intrinsic_parameters(std::string* intrinsic_parameters) {
  if (intrinsic_parameters != nullptr) {
    
  } else {
    
  }
  intrinsic_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intrinsic_parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI3DOverlay.setCameraParametersRequest.intrinsic_parameters)
}

// bytes distorsion_parameters = 2;
inline void setCameraParametersRequest::clear_distorsion_parameters() {
  distorsion_parameters_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::distorsion_parameters() const {
  // @@protoc_insertion_point(field_get:grpcI3DOverlay.setCameraParametersRequest.distorsion_parameters)
  return _internal_distorsion_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParametersRequest::set_distorsion_parameters(ArgT0&& arg0, ArgT... args) {
 
 distorsion_parameters_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DOverlay.setCameraParametersRequest.distorsion_parameters)
}
inline std::string* setCameraParametersRequest::mutable_distorsion_parameters() {
  std::string* _s = _internal_mutable_distorsion_parameters();
  // @@protoc_insertion_point(field_mutable:grpcI3DOverlay.setCameraParametersRequest.distorsion_parameters)
  return _s;
}
inline const std::string& setCameraParametersRequest::_internal_distorsion_parameters() const {
  return distorsion_parameters_.Get();
}
inline void setCameraParametersRequest::_internal_set_distorsion_parameters(const std::string& value) {
  
  distorsion_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::_internal_mutable_distorsion_parameters() {
  
  return distorsion_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::release_distorsion_parameters() {
  // @@protoc_insertion_point(field_release:grpcI3DOverlay.setCameraParametersRequest.distorsion_parameters)
  return distorsion_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setCameraParametersRequest::set_allocated_distorsion_parameters(std::string* distorsion_parameters) {
  if (distorsion_parameters != nullptr) {
    
  } else {
    
  }
  distorsion_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distorsion_parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI3DOverlay.setCameraParametersRequest.distorsion_parameters)
}

// -------------------------------------------------------------------

// drawRequest

// bytes pose = 1;
inline void drawRequest::clear_pose() {
  pose_.ClearToEmpty();
}
inline const std::string& drawRequest::pose() const {
  // @@protoc_insertion_point(field_get:grpcI3DOverlay.drawRequest.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void drawRequest::set_pose(ArgT0&& arg0, ArgT... args) {
 
 pose_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DOverlay.drawRequest.pose)
}
inline std::string* drawRequest::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcI3DOverlay.drawRequest.pose)
  return _s;
}
inline const std::string& drawRequest::_internal_pose() const {
  return pose_.Get();
}
inline void drawRequest::_internal_set_pose(const std::string& value) {
  
  pose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* drawRequest::_internal_mutable_pose() {
  
  return pose_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* drawRequest::release_pose() {
  // @@protoc_insertion_point(field_release:grpcI3DOverlay.drawRequest.pose)
  return pose_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void drawRequest::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  pose_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pose,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI3DOverlay.drawRequest.pose)
}

// bytes displayImage = 2;
inline void drawRequest::clear_displayimage() {
  displayimage_.ClearToEmpty();
}
inline const std::string& drawRequest::displayimage() const {
  // @@protoc_insertion_point(field_get:grpcI3DOverlay.drawRequest.displayImage)
  return _internal_displayimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void drawRequest::set_displayimage(ArgT0&& arg0, ArgT... args) {
 
 displayimage_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DOverlay.drawRequest.displayImage)
}
inline std::string* drawRequest::mutable_displayimage() {
  std::string* _s = _internal_mutable_displayimage();
  // @@protoc_insertion_point(field_mutable:grpcI3DOverlay.drawRequest.displayImage)
  return _s;
}
inline const std::string& drawRequest::_internal_displayimage() const {
  return displayimage_.Get();
}
inline void drawRequest::_internal_set_displayimage(const std::string& value) {
  
  displayimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* drawRequest::_internal_mutable_displayimage() {
  
  return displayimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* drawRequest::release_displayimage() {
  // @@protoc_insertion_point(field_release:grpcI3DOverlay.drawRequest.displayImage)
  return displayimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void drawRequest::set_allocated_displayimage(std::string* displayimage) {
  if (displayimage != nullptr) {
    
  } else {
    
  }
  displayimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayimage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcI3DOverlay.drawRequest.displayImage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcI3DOverlay

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcI3DOverlayService_2eproto
