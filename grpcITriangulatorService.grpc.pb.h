// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcITriangulatorService.proto
#ifndef GRPC_grpcITriangulatorService_2eproto__INCLUDED
#define GRPC_grpcITriangulatorService_2eproto__INCLUDED

#include "grpcITriangulatorService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcITriangulator {

class grpcITriangulatorService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcITriangulator.grpcITriangulatorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpcITriangulator::triangulate_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc0Response>> Asynctriangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc0Response>>(Asynctriangulate_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc0Response>> PrepareAsynctriangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc0Response>>(PrepareAsynctriangulate_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpcITriangulator::triangulate_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc1Response>> Asynctriangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc1Response>>(Asynctriangulate_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc1Response>> PrepareAsynctriangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc1Response>>(PrepareAsynctriangulate_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpcITriangulator::triangulate_grpc2Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc2Response>> Asynctriangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc2Response>>(Asynctriangulate_grpc2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc2Response>> PrepareAsynctriangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc2Response>>(PrepareAsynctriangulate_grpc2Raw(context, request, cq));
    }
    virtual ::grpc::Status triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpcITriangulator::triangulate_grpc3Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc3Response>> Asynctriangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc3Response>>(Asynctriangulate_grpc3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc3Response>> PrepareAsynctriangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc3Response>>(PrepareAsynctriangulate_grpc3Raw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc0Response>* Asynctriangulate_grpc0Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc0Response>* PrepareAsynctriangulate_grpc0Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc1Response>* Asynctriangulate_grpc1Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc1Response>* PrepareAsynctriangulate_grpc1Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc2Response>* Asynctriangulate_grpc2Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc2Response>* PrepareAsynctriangulate_grpc2Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc3Response>* Asynctriangulate_grpc3Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITriangulator::triangulate_grpc3Response>* PrepareAsynctriangulate_grpc3Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpcITriangulator::triangulate_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc0Response>> Asynctriangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc0Response>>(Asynctriangulate_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc0Response>> PrepareAsynctriangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc0Response>>(PrepareAsynctriangulate_grpc0Raw(context, request, cq));
    }
    ::grpc::Status triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpcITriangulator::triangulate_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc1Response>> Asynctriangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc1Response>>(Asynctriangulate_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc1Response>> PrepareAsynctriangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc1Response>>(PrepareAsynctriangulate_grpc1Raw(context, request, cq));
    }
    ::grpc::Status triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpcITriangulator::triangulate_grpc2Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc2Response>> Asynctriangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc2Response>>(Asynctriangulate_grpc2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc2Response>> PrepareAsynctriangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc2Response>>(PrepareAsynctriangulate_grpc2Raw(context, request, cq));
    }
    ::grpc::Status triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpcITriangulator::triangulate_grpc3Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc3Response>> Asynctriangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc3Response>>(Asynctriangulate_grpc3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc3Response>> PrepareAsynctriangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc3Response>>(PrepareAsynctriangulate_grpc3Raw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc0Response>* Asynctriangulate_grpc0Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc0Response>* PrepareAsynctriangulate_grpc0Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc1Response>* Asynctriangulate_grpc1Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc1Response>* PrepareAsynctriangulate_grpc1Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc2Response>* Asynctriangulate_grpc2Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc2Response>* PrepareAsynctriangulate_grpc2Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc3Response>* Asynctriangulate_grpc3Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc3Response>* PrepareAsynctriangulate_grpc3Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_triangulate_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_triangulate_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_triangulate_grpc2_;
    const ::grpc::internal::RpcMethod rpcmethod_triangulate_grpc3_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status triangulate_grpc0(::grpc::ServerContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response);
    virtual ::grpc::Status triangulate_grpc1(::grpc::ServerContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response);
    virtual ::grpc::Status triangulate_grpc2(::grpc::ServerContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response);
    virtual ::grpc::Status triangulate_grpc3(::grpc::ServerContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_triangulate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_triangulate_grpc0() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_triangulate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc0Request* /*request*/, ::grpcITriangulator::triangulate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttriangulate_grpc0(::grpc::ServerContext* context, ::grpcITriangulator::triangulate_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcITriangulator::triangulate_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_triangulate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_triangulate_grpc1() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_triangulate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc1Request* /*request*/, ::grpcITriangulator::triangulate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttriangulate_grpc1(::grpc::ServerContext* context, ::grpcITriangulator::triangulate_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcITriangulator::triangulate_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_triangulate_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_triangulate_grpc2() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_triangulate_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc2(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc2Request* /*request*/, ::grpcITriangulator::triangulate_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttriangulate_grpc2(::grpc::ServerContext* context, ::grpcITriangulator::triangulate_grpc2Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcITriangulator::triangulate_grpc2Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_triangulate_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_triangulate_grpc3() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_triangulate_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc3(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc3Request* /*request*/, ::grpcITriangulator::triangulate_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttriangulate_grpc3(::grpc::ServerContext* context, ::grpcITriangulator::triangulate_grpc3Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcITriangulator::triangulate_grpc3Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_triangulate_grpc0<WithAsyncMethod_triangulate_grpc1<WithAsyncMethod_triangulate_grpc2<WithAsyncMethod_triangulate_grpc3<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_triangulate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_triangulate_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcITriangulator::triangulate_grpc0Request, ::grpcITriangulator::triangulate_grpc0Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response) { return this->triangulate_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_triangulate_grpc0(
        ::grpc::experimental::MessageAllocator< ::grpcITriangulator::triangulate_grpc0Request, ::grpcITriangulator::triangulate_grpc0Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcITriangulator::triangulate_grpc0Request, ::grpcITriangulator::triangulate_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_triangulate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc0Request* /*request*/, ::grpcITriangulator::triangulate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* triangulate_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc0Request* /*request*/, ::grpcITriangulator::triangulate_grpc0Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* triangulate_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc0Request* /*request*/, ::grpcITriangulator::triangulate_grpc0Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_triangulate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_triangulate_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcITriangulator::triangulate_grpc1Request, ::grpcITriangulator::triangulate_grpc1Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response) { return this->triangulate_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_triangulate_grpc1(
        ::grpc::experimental::MessageAllocator< ::grpcITriangulator::triangulate_grpc1Request, ::grpcITriangulator::triangulate_grpc1Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcITriangulator::triangulate_grpc1Request, ::grpcITriangulator::triangulate_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_triangulate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc1Request* /*request*/, ::grpcITriangulator::triangulate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* triangulate_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc1Request* /*request*/, ::grpcITriangulator::triangulate_grpc1Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* triangulate_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc1Request* /*request*/, ::grpcITriangulator::triangulate_grpc1Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_triangulate_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_triangulate_grpc2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcITriangulator::triangulate_grpc2Request, ::grpcITriangulator::triangulate_grpc2Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response) { return this->triangulate_grpc2(context, request, response); }));}
    void SetMessageAllocatorFor_triangulate_grpc2(
        ::grpc::experimental::MessageAllocator< ::grpcITriangulator::triangulate_grpc2Request, ::grpcITriangulator::triangulate_grpc2Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcITriangulator::triangulate_grpc2Request, ::grpcITriangulator::triangulate_grpc2Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_triangulate_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc2(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc2Request* /*request*/, ::grpcITriangulator::triangulate_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* triangulate_grpc2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc2Request* /*request*/, ::grpcITriangulator::triangulate_grpc2Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* triangulate_grpc2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc2Request* /*request*/, ::grpcITriangulator::triangulate_grpc2Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_triangulate_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_triangulate_grpc3() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcITriangulator::triangulate_grpc3Request, ::grpcITriangulator::triangulate_grpc3Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response) { return this->triangulate_grpc3(context, request, response); }));}
    void SetMessageAllocatorFor_triangulate_grpc3(
        ::grpc::experimental::MessageAllocator< ::grpcITriangulator::triangulate_grpc3Request, ::grpcITriangulator::triangulate_grpc3Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcITriangulator::triangulate_grpc3Request, ::grpcITriangulator::triangulate_grpc3Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_triangulate_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc3(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc3Request* /*request*/, ::grpcITriangulator::triangulate_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* triangulate_grpc3(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc3Request* /*request*/, ::grpcITriangulator::triangulate_grpc3Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* triangulate_grpc3(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc3Request* /*request*/, ::grpcITriangulator::triangulate_grpc3Response* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_triangulate_grpc0<ExperimentalWithCallbackMethod_triangulate_grpc1<ExperimentalWithCallbackMethod_triangulate_grpc2<ExperimentalWithCallbackMethod_triangulate_grpc3<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_triangulate_grpc0<ExperimentalWithCallbackMethod_triangulate_grpc1<ExperimentalWithCallbackMethod_triangulate_grpc2<ExperimentalWithCallbackMethod_triangulate_grpc3<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_triangulate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_triangulate_grpc0() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_triangulate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc0Request* /*request*/, ::grpcITriangulator::triangulate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_triangulate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_triangulate_grpc1() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_triangulate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc1Request* /*request*/, ::grpcITriangulator::triangulate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_triangulate_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_triangulate_grpc2() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_triangulate_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc2(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc2Request* /*request*/, ::grpcITriangulator::triangulate_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_triangulate_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_triangulate_grpc3() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_triangulate_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc3(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc3Request* /*request*/, ::grpcITriangulator::triangulate_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_triangulate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_triangulate_grpc0() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_triangulate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc0Request* /*request*/, ::grpcITriangulator::triangulate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttriangulate_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_triangulate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_triangulate_grpc1() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_triangulate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc1Request* /*request*/, ::grpcITriangulator::triangulate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttriangulate_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_triangulate_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_triangulate_grpc2() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_triangulate_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc2(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc2Request* /*request*/, ::grpcITriangulator::triangulate_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttriangulate_grpc2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_triangulate_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_triangulate_grpc3() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_triangulate_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc3(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc3Request* /*request*/, ::grpcITriangulator::triangulate_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttriangulate_grpc3(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_triangulate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_triangulate_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->triangulate_grpc0(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_triangulate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc0Request* /*request*/, ::grpcITriangulator::triangulate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* triangulate_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* triangulate_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_triangulate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_triangulate_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->triangulate_grpc1(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_triangulate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc1Request* /*request*/, ::grpcITriangulator::triangulate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* triangulate_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* triangulate_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_triangulate_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_triangulate_grpc2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->triangulate_grpc2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_triangulate_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc2(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc2Request* /*request*/, ::grpcITriangulator::triangulate_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* triangulate_grpc2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* triangulate_grpc2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_triangulate_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_triangulate_grpc3() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->triangulate_grpc3(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_triangulate_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status triangulate_grpc3(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc3Request* /*request*/, ::grpcITriangulator::triangulate_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* triangulate_grpc3(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* triangulate_grpc3(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_triangulate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_triangulate_grpc0() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcITriangulator::triangulate_grpc0Request, ::grpcITriangulator::triangulate_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcITriangulator::triangulate_grpc0Request, ::grpcITriangulator::triangulate_grpc0Response>* streamer) {
                       return this->Streamedtriangulate_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_triangulate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status triangulate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc0Request* /*request*/, ::grpcITriangulator::triangulate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedtriangulate_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcITriangulator::triangulate_grpc0Request,::grpcITriangulator::triangulate_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_triangulate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_triangulate_grpc1() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcITriangulator::triangulate_grpc1Request, ::grpcITriangulator::triangulate_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcITriangulator::triangulate_grpc1Request, ::grpcITriangulator::triangulate_grpc1Response>* streamer) {
                       return this->Streamedtriangulate_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_triangulate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status triangulate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc1Request* /*request*/, ::grpcITriangulator::triangulate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedtriangulate_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcITriangulator::triangulate_grpc1Request,::grpcITriangulator::triangulate_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_triangulate_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_triangulate_grpc2() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcITriangulator::triangulate_grpc2Request, ::grpcITriangulator::triangulate_grpc2Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcITriangulator::triangulate_grpc2Request, ::grpcITriangulator::triangulate_grpc2Response>* streamer) {
                       return this->Streamedtriangulate_grpc2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_triangulate_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status triangulate_grpc2(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc2Request* /*request*/, ::grpcITriangulator::triangulate_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedtriangulate_grpc2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcITriangulator::triangulate_grpc2Request,::grpcITriangulator::triangulate_grpc2Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_triangulate_grpc3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_triangulate_grpc3() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcITriangulator::triangulate_grpc3Request, ::grpcITriangulator::triangulate_grpc3Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcITriangulator::triangulate_grpc3Request, ::grpcITriangulator::triangulate_grpc3Response>* streamer) {
                       return this->Streamedtriangulate_grpc3(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_triangulate_grpc3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status triangulate_grpc3(::grpc::ServerContext* /*context*/, const ::grpcITriangulator::triangulate_grpc3Request* /*request*/, ::grpcITriangulator::triangulate_grpc3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedtriangulate_grpc3(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcITriangulator::triangulate_grpc3Request,::grpcITriangulator::triangulate_grpc3Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_triangulate_grpc0<WithStreamedUnaryMethod_triangulate_grpc1<WithStreamedUnaryMethod_triangulate_grpc2<WithStreamedUnaryMethod_triangulate_grpc3<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_triangulate_grpc0<WithStreamedUnaryMethod_triangulate_grpc1<WithStreamedUnaryMethod_triangulate_grpc2<WithStreamedUnaryMethod_triangulate_grpc3<Service > > > > StreamedService;
};

}  // namespace grpcITriangulator


#endif  // GRPC_grpcITriangulatorService_2eproto__INCLUDED
