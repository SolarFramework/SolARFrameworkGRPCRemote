// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIKeypointDetectorService.proto
#ifndef GRPC_grpcIKeypointDetectorService_2eproto__INCLUDED
#define GRPC_grpcIKeypointDetectorService_2eproto__INCLUDED

#include "grpcIKeypointDetectorService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIKeypointDetector {

class grpcIKeypointDetectorService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIKeypointDetector.grpcIKeypointDetectorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status setType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status getType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpcIKeypointDetector::getTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::getTypeResponse>> AsyncgetType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::getTypeResponse>>(AsyncgetTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::getTypeResponse>> PrepareAsyncgetType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::getTypeResponse>>(PrepareAsyncgetTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status detect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpcIKeypointDetector::detectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::detectResponse>> Asyncdetect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::detectResponse>>(AsyncdetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::detectResponse>> PrepareAsyncdetect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::detectResponse>>(PrepareAsyncdetectRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void setType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest* request, ::grpcIKeypointDetector::getTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest* request, ::grpcIKeypointDetector::getTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void detect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest* request, ::grpcIKeypointDetector::detectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest* request, ::grpcIKeypointDetector::detectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::getTypeResponse>* AsyncgetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::getTypeResponse>* PrepareAsyncgetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::detectResponse>* AsyncdetectRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeypointDetector::detectResponse>* PrepareAsyncdetectRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status setType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetTypeRaw(context, request, cq));
    }
    ::grpc::Status getType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpcIKeypointDetector::getTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::getTypeResponse>> AsyncgetType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::getTypeResponse>>(AsyncgetTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::getTypeResponse>> PrepareAsyncgetType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::getTypeResponse>>(PrepareAsyncgetTypeRaw(context, request, cq));
    }
    ::grpc::Status detect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpcIKeypointDetector::detectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::detectResponse>> Asyncdetect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::detectResponse>>(AsyncdetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::detectResponse>> PrepareAsyncdetect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::detectResponse>>(PrepareAsyncdetectRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void setType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest* request, ::grpcIKeypointDetector::getTypeResponse* response, std::function<void(::grpc::Status)>) override;
      void getType(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest* request, ::grpcIKeypointDetector::getTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void detect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest* request, ::grpcIKeypointDetector::detectResponse* response, std::function<void(::grpc::Status)>) override;
      void detect(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest* request, ::grpcIKeypointDetector::detectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::setTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::getTypeResponse>* AsyncgetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::getTypeResponse>* PrepareAsyncgetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::getTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::detectResponse>* AsyncdetectRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetector::detectResponse>* PrepareAsyncdetectRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetector::detectRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_setType_;
    const ::grpc::internal::RpcMethod rpcmethod_getType_;
    const ::grpc::internal::RpcMethod rpcmethod_detect_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status setType(::grpc::ServerContext* context, const ::grpcIKeypointDetector::setTypeRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status getType(::grpc::ServerContext* context, const ::grpcIKeypointDetector::getTypeRequest* request, ::grpcIKeypointDetector::getTypeResponse* response);
    virtual ::grpc::Status detect(::grpc::ServerContext* context, const ::grpcIKeypointDetector::detectRequest* request, ::grpcIKeypointDetector::detectResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_setType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setType() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::setTypeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetType(::grpc::ServerContext* context, ::grpcIKeypointDetector::setTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getType() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::getTypeRequest* /*request*/, ::grpcIKeypointDetector::getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetType(::grpc::ServerContext* context, ::grpcIKeypointDetector::getTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeypointDetector::getTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_detect() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::detectRequest* /*request*/, ::grpcIKeypointDetector::detectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdetect(::grpc::ServerContext* context, ::grpcIKeypointDetector::detectRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeypointDetector::detectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setType<WithAsyncMethod_getType<WithAsyncMethod_detect<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_setType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setType() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeypointDetector::setTypeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIKeypointDetector::setTypeRequest* request, ::google::protobuf::Empty* response) { return this->setType(context, request, response); }));}
    void SetMessageAllocatorFor_setType(
        ::grpc::MessageAllocator< ::grpcIKeypointDetector::setTypeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeypointDetector::setTypeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::setTypeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeypointDetector::setTypeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getType() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeypointDetector::getTypeRequest, ::grpcIKeypointDetector::getTypeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIKeypointDetector::getTypeRequest* request, ::grpcIKeypointDetector::getTypeResponse* response) { return this->getType(context, request, response); }));}
    void SetMessageAllocatorFor_getType(
        ::grpc::MessageAllocator< ::grpcIKeypointDetector::getTypeRequest, ::grpcIKeypointDetector::getTypeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeypointDetector::getTypeRequest, ::grpcIKeypointDetector::getTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::getTypeRequest* /*request*/, ::grpcIKeypointDetector::getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeypointDetector::getTypeRequest* /*request*/, ::grpcIKeypointDetector::getTypeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_detect() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeypointDetector::detectRequest, ::grpcIKeypointDetector::detectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIKeypointDetector::detectRequest* request, ::grpcIKeypointDetector::detectResponse* response) { return this->detect(context, request, response); }));}
    void SetMessageAllocatorFor_detect(
        ::grpc::MessageAllocator< ::grpcIKeypointDetector::detectRequest, ::grpcIKeypointDetector::detectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeypointDetector::detectRequest, ::grpcIKeypointDetector::detectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::detectRequest* /*request*/, ::grpcIKeypointDetector::detectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* detect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeypointDetector::detectRequest* /*request*/, ::grpcIKeypointDetector::detectResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_setType<WithCallbackMethod_getType<WithCallbackMethod_detect<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_setType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setType() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::setTypeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getType() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::getTypeRequest* /*request*/, ::grpcIKeypointDetector::getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_detect() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::detectRequest* /*request*/, ::grpcIKeypointDetector::detectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_setType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setType() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_setType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::setTypeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getType() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::getTypeRequest* /*request*/, ::grpcIKeypointDetector::getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_detect() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::detectRequest* /*request*/, ::grpcIKeypointDetector::detectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setType() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setType(context, request, response); }));
    }
    ~WithRawCallbackMethod_setType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::setTypeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getType() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getType(context, request, response); }));
    }
    ~WithRawCallbackMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::getTypeRequest* /*request*/, ::grpcIKeypointDetector::getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_detect() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->detect(context, request, response); }));
    }
    ~WithRawCallbackMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::detectRequest* /*request*/, ::grpcIKeypointDetector::detectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* detect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setType() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeypointDetector::setTypeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeypointDetector::setTypeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::setTypeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeypointDetector::setTypeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getType() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeypointDetector::getTypeRequest, ::grpcIKeypointDetector::getTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeypointDetector::getTypeRequest, ::grpcIKeypointDetector::getTypeResponse>* streamer) {
                       return this->StreamedgetType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getType(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::getTypeRequest* /*request*/, ::grpcIKeypointDetector::getTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeypointDetector::getTypeRequest,::grpcIKeypointDetector::getTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_detect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_detect() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeypointDetector::detectRequest, ::grpcIKeypointDetector::detectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeypointDetector::detectRequest, ::grpcIKeypointDetector::detectResponse>* streamer) {
                       return this->Streameddetect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_detect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status detect(::grpc::ServerContext* /*context*/, const ::grpcIKeypointDetector::detectRequest* /*request*/, ::grpcIKeypointDetector::detectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddetect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeypointDetector::detectRequest,::grpcIKeypointDetector::detectResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_setType<WithStreamedUnaryMethod_getType<WithStreamedUnaryMethod_detect<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_setType<WithStreamedUnaryMethod_getType<WithStreamedUnaryMethod_detect<Service > > > StreamedService;
};

}  // namespace grpcIKeypointDetector


#endif  // GRPC_grpcIKeypointDetectorService_2eproto__INCLUDED
