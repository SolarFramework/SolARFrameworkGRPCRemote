// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMapFilterService.proto

#include "grpcIMapFilterService.pb.h"
#include "grpcIMapFilterService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIMapFilter {

static const char* grpcIMapFilterService_method_names[] = {
  "/grpcIMapFilter.grpcIMapFilterService/filter_grpc0",
  "/grpcIMapFilter.grpcIMapFilterService/filter_grpc1",
};

std::unique_ptr< grpcIMapFilterService::Stub> grpcIMapFilterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIMapFilterService::Stub> stub(new grpcIMapFilterService::Stub(channel));
  return stub;
}

grpcIMapFilterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_filter_grpc0_(grpcIMapFilterService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_filter_grpc1_(grpcIMapFilterService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIMapFilterService::Stub::filter_grpc0(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc0Request& request, ::grpcIMapFilter::filter_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapFilter::filter_grpc0Request, ::grpcIMapFilter::filter_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_filter_grpc0_, context, request, response);
}

void grpcIMapFilterService::Stub::experimental_async::filter_grpc0(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc0Request* request, ::grpcIMapFilter::filter_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapFilter::filter_grpc0Request, ::grpcIMapFilter::filter_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_filter_grpc0_, context, request, response, std::move(f));
}

void grpcIMapFilterService::Stub::experimental_async::filter_grpc0(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc0Request* request, ::grpcIMapFilter::filter_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_filter_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapFilter::filter_grpc0Response>* grpcIMapFilterService::Stub::PrepareAsyncfilter_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapFilter::filter_grpc0Response, ::grpcIMapFilter::filter_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_filter_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapFilter::filter_grpc0Response>* grpcIMapFilterService::Stub::Asyncfilter_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfilter_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapFilterService::Stub::filter_grpc1(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc1Request& request, ::grpcIMapFilter::filter_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapFilter::filter_grpc1Request, ::grpcIMapFilter::filter_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_filter_grpc1_, context, request, response);
}

void grpcIMapFilterService::Stub::experimental_async::filter_grpc1(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc1Request* request, ::grpcIMapFilter::filter_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapFilter::filter_grpc1Request, ::grpcIMapFilter::filter_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_filter_grpc1_, context, request, response, std::move(f));
}

void grpcIMapFilterService::Stub::experimental_async::filter_grpc1(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc1Request* request, ::grpcIMapFilter::filter_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_filter_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapFilter::filter_grpc1Response>* grpcIMapFilterService::Stub::PrepareAsyncfilter_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapFilter::filter_grpc1Response, ::grpcIMapFilter::filter_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_filter_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapFilter::filter_grpc1Response>* grpcIMapFilterService::Stub::Asyncfilter_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMapFilter::filter_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncfilter_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIMapFilterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapFilterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapFilterService::Service, ::grpcIMapFilter::filter_grpc0Request, ::grpcIMapFilter::filter_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapFilterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapFilter::filter_grpc0Request* req,
             ::grpcIMapFilter::filter_grpc0Response* resp) {
               return service->filter_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapFilterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapFilterService::Service, ::grpcIMapFilter::filter_grpc1Request, ::grpcIMapFilter::filter_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapFilterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapFilter::filter_grpc1Request* req,
             ::grpcIMapFilter::filter_grpc1Response* resp) {
               return service->filter_grpc1(ctx, req, resp);
             }, this)));
}

grpcIMapFilterService::Service::~Service() {
}

::grpc::Status grpcIMapFilterService::Service::filter_grpc0(::grpc::ServerContext* context, const ::grpcIMapFilter::filter_grpc0Request* request, ::grpcIMapFilter::filter_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapFilterService::Service::filter_grpc1(::grpc::ServerContext* context, const ::grpcIMapFilter::filter_grpc1Request* request, ::grpcIMapFilter::filter_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIMapFilter

