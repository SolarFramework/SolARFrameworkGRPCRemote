// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcICovisibilityGraphManagerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcICovisibilityGraphManagerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcICovisibilityGraphManagerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcICovisibilityGraphManagerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcICovisibilityGraphManagerService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcICovisibilityGraphManagerService_2eproto;
namespace grpcICovisibilityGraphManager {
class decreaseEdgeRequest;
struct decreaseEdgeRequestDefaultTypeInternal;
extern decreaseEdgeRequestDefaultTypeInternal _decreaseEdgeRequest_default_instance_;
class decreaseEdgeResponse;
struct decreaseEdgeResponseDefaultTypeInternal;
extern decreaseEdgeResponseDefaultTypeInternal _decreaseEdgeResponse_default_instance_;
class displayResponse;
struct displayResponseDefaultTypeInternal;
extern displayResponseDefaultTypeInternal _displayResponse_default_instance_;
class getAllNodesRequest;
struct getAllNodesRequestDefaultTypeInternal;
extern getAllNodesRequestDefaultTypeInternal _getAllNodesRequest_default_instance_;
class getAllNodesResponse;
struct getAllNodesResponseDefaultTypeInternal;
extern getAllNodesResponseDefaultTypeInternal _getAllNodesResponse_default_instance_;
class getConstCovisibilityGraphResponse;
struct getConstCovisibilityGraphResponseDefaultTypeInternal;
extern getConstCovisibilityGraphResponseDefaultTypeInternal _getConstCovisibilityGraphResponse_default_instance_;
class getCovisibilityGraphRequest;
struct getCovisibilityGraphRequestDefaultTypeInternal;
extern getCovisibilityGraphRequestDefaultTypeInternal _getCovisibilityGraphRequest_default_instance_;
class getCovisibilityGraphResponse;
struct getCovisibilityGraphResponseDefaultTypeInternal;
extern getCovisibilityGraphResponseDefaultTypeInternal _getCovisibilityGraphResponse_default_instance_;
class getEdgeRequest;
struct getEdgeRequestDefaultTypeInternal;
extern getEdgeRequestDefaultTypeInternal _getEdgeRequest_default_instance_;
class getEdgeResponse;
struct getEdgeResponseDefaultTypeInternal;
extern getEdgeResponseDefaultTypeInternal _getEdgeResponse_default_instance_;
class getNeighborsRequest;
struct getNeighborsRequestDefaultTypeInternal;
extern getNeighborsRequestDefaultTypeInternal _getNeighborsRequest_default_instance_;
class getNeighborsResponse;
struct getNeighborsResponseDefaultTypeInternal;
extern getNeighborsResponseDefaultTypeInternal _getNeighborsResponse_default_instance_;
class getShortestPathRequest;
struct getShortestPathRequestDefaultTypeInternal;
extern getShortestPathRequestDefaultTypeInternal _getShortestPathRequest_default_instance_;
class getShortestPathResponse;
struct getShortestPathResponseDefaultTypeInternal;
extern getShortestPathResponseDefaultTypeInternal _getShortestPathResponse_default_instance_;
class increaseEdgeRequest;
struct increaseEdgeRequestDefaultTypeInternal;
extern increaseEdgeRequestDefaultTypeInternal _increaseEdgeRequest_default_instance_;
class increaseEdgeResponse;
struct increaseEdgeResponseDefaultTypeInternal;
extern increaseEdgeResponseDefaultTypeInternal _increaseEdgeResponse_default_instance_;
class isEdgeRequest;
struct isEdgeRequestDefaultTypeInternal;
extern isEdgeRequestDefaultTypeInternal _isEdgeRequest_default_instance_;
class isEdgeResponse;
struct isEdgeResponseDefaultTypeInternal;
extern isEdgeResponseDefaultTypeInternal _isEdgeResponse_default_instance_;
class loadFromFileRequest;
struct loadFromFileRequestDefaultTypeInternal;
extern loadFromFileRequestDefaultTypeInternal _loadFromFileRequest_default_instance_;
class loadFromFileResponse;
struct loadFromFileResponseDefaultTypeInternal;
extern loadFromFileResponseDefaultTypeInternal _loadFromFileResponse_default_instance_;
class maximalSpanningTreeRequest;
struct maximalSpanningTreeRequestDefaultTypeInternal;
extern maximalSpanningTreeRequestDefaultTypeInternal _maximalSpanningTreeRequest_default_instance_;
class maximalSpanningTreeResponse;
struct maximalSpanningTreeResponseDefaultTypeInternal;
extern maximalSpanningTreeResponseDefaultTypeInternal _maximalSpanningTreeResponse_default_instance_;
class minimalSpanningTreeRequest;
struct minimalSpanningTreeRequestDefaultTypeInternal;
extern minimalSpanningTreeRequestDefaultTypeInternal _minimalSpanningTreeRequest_default_instance_;
class minimalSpanningTreeResponse;
struct minimalSpanningTreeResponseDefaultTypeInternal;
extern minimalSpanningTreeResponseDefaultTypeInternal _minimalSpanningTreeResponse_default_instance_;
class removeEdgeRequest;
struct removeEdgeRequestDefaultTypeInternal;
extern removeEdgeRequestDefaultTypeInternal _removeEdgeRequest_default_instance_;
class removeEdgeResponse;
struct removeEdgeResponseDefaultTypeInternal;
extern removeEdgeResponseDefaultTypeInternal _removeEdgeResponse_default_instance_;
class saveToFileRequest;
struct saveToFileRequestDefaultTypeInternal;
extern saveToFileRequestDefaultTypeInternal _saveToFileRequest_default_instance_;
class saveToFileResponse;
struct saveToFileResponseDefaultTypeInternal;
extern saveToFileResponseDefaultTypeInternal _saveToFileResponse_default_instance_;
class setCovisibilityGraphRequest;
struct setCovisibilityGraphRequestDefaultTypeInternal;
extern setCovisibilityGraphRequestDefaultTypeInternal _setCovisibilityGraphRequest_default_instance_;
class suppressNodeRequest;
struct suppressNodeRequestDefaultTypeInternal;
extern suppressNodeRequestDefaultTypeInternal _suppressNodeRequest_default_instance_;
class suppressNodeResponse;
struct suppressNodeResponseDefaultTypeInternal;
extern suppressNodeResponseDefaultTypeInternal _suppressNodeResponse_default_instance_;
}  // namespace grpcICovisibilityGraphManager
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcICovisibilityGraphManager::decreaseEdgeRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::decreaseEdgeRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::decreaseEdgeResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::decreaseEdgeResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::displayResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::displayResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::getAllNodesRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getAllNodesRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::getAllNodesResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getAllNodesResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getConstCovisibilityGraphResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::getCovisibilityGraphRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getCovisibilityGraphRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::getCovisibilityGraphResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getCovisibilityGraphResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::getEdgeRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getEdgeRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::getEdgeResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getEdgeResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::getNeighborsRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getNeighborsRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::getNeighborsResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getNeighborsResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::getShortestPathRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getShortestPathRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::getShortestPathResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::getShortestPathResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::increaseEdgeRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::increaseEdgeRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::increaseEdgeResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::increaseEdgeResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::isEdgeRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::isEdgeRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::isEdgeResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::isEdgeResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::loadFromFileRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::loadFromFileRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::loadFromFileResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::loadFromFileResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::maximalSpanningTreeRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::maximalSpanningTreeRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::maximalSpanningTreeResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::maximalSpanningTreeResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::minimalSpanningTreeRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::minimalSpanningTreeRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::minimalSpanningTreeResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::minimalSpanningTreeResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::removeEdgeRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::removeEdgeRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::removeEdgeResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::removeEdgeResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::saveToFileRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::saveToFileRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::saveToFileResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::saveToFileResponse>(Arena*);
template<> ::grpcICovisibilityGraphManager::setCovisibilityGraphRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::setCovisibilityGraphRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::suppressNodeRequest* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::suppressNodeRequest>(Arena*);
template<> ::grpcICovisibilityGraphManager::suppressNodeResponse* Arena::CreateMaybeMessage<::grpcICovisibilityGraphManager::suppressNodeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcICovisibilityGraphManager {

// ===================================================================

class increaseEdgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.increaseEdgeRequest) */ {
 public:
  inline increaseEdgeRequest() : increaseEdgeRequest(nullptr) {}
  ~increaseEdgeRequest() override;
  explicit constexpr increaseEdgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  increaseEdgeRequest(const increaseEdgeRequest& from);
  increaseEdgeRequest(increaseEdgeRequest&& from) noexcept
    : increaseEdgeRequest() {
    *this = ::std::move(from);
  }

  inline increaseEdgeRequest& operator=(const increaseEdgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline increaseEdgeRequest& operator=(increaseEdgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const increaseEdgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const increaseEdgeRequest* internal_default_instance() {
    return reinterpret_cast<const increaseEdgeRequest*>(
               &_increaseEdgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(increaseEdgeRequest& a, increaseEdgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(increaseEdgeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(increaseEdgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline increaseEdgeRequest* New() const final {
    return new increaseEdgeRequest();
  }

  increaseEdgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<increaseEdgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const increaseEdgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const increaseEdgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(increaseEdgeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.increaseEdgeRequest";
  }
  protected:
  explicit increaseEdgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNode1IdFieldNumber = 1,
    kNode2IdFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 node1_id = 1;
  void clear_node1_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id() const;
  void set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node1_id() const;
  void _internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 node2_id = 2;
  void clear_node2_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id() const;
  void set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node2_id() const;
  void _internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float weight = 3;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.increaseEdgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id_;
  float weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class increaseEdgeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.increaseEdgeResponse) */ {
 public:
  inline increaseEdgeResponse() : increaseEdgeResponse(nullptr) {}
  ~increaseEdgeResponse() override;
  explicit constexpr increaseEdgeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  increaseEdgeResponse(const increaseEdgeResponse& from);
  increaseEdgeResponse(increaseEdgeResponse&& from) noexcept
    : increaseEdgeResponse() {
    *this = ::std::move(from);
  }

  inline increaseEdgeResponse& operator=(const increaseEdgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline increaseEdgeResponse& operator=(increaseEdgeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const increaseEdgeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const increaseEdgeResponse* internal_default_instance() {
    return reinterpret_cast<const increaseEdgeResponse*>(
               &_increaseEdgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(increaseEdgeResponse& a, increaseEdgeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(increaseEdgeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(increaseEdgeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline increaseEdgeResponse* New() const final {
    return new increaseEdgeResponse();
  }

  increaseEdgeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<increaseEdgeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const increaseEdgeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const increaseEdgeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(increaseEdgeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.increaseEdgeResponse";
  }
  protected:
  explicit increaseEdgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.increaseEdgeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class decreaseEdgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.decreaseEdgeRequest) */ {
 public:
  inline decreaseEdgeRequest() : decreaseEdgeRequest(nullptr) {}
  ~decreaseEdgeRequest() override;
  explicit constexpr decreaseEdgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decreaseEdgeRequest(const decreaseEdgeRequest& from);
  decreaseEdgeRequest(decreaseEdgeRequest&& from) noexcept
    : decreaseEdgeRequest() {
    *this = ::std::move(from);
  }

  inline decreaseEdgeRequest& operator=(const decreaseEdgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline decreaseEdgeRequest& operator=(decreaseEdgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decreaseEdgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const decreaseEdgeRequest* internal_default_instance() {
    return reinterpret_cast<const decreaseEdgeRequest*>(
               &_decreaseEdgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(decreaseEdgeRequest& a, decreaseEdgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(decreaseEdgeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decreaseEdgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline decreaseEdgeRequest* New() const final {
    return new decreaseEdgeRequest();
  }

  decreaseEdgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<decreaseEdgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decreaseEdgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const decreaseEdgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decreaseEdgeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.decreaseEdgeRequest";
  }
  protected:
  explicit decreaseEdgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNode1IdFieldNumber = 1,
    kNode2IdFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 node1_id = 1;
  void clear_node1_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id() const;
  void set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node1_id() const;
  void _internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 node2_id = 2;
  void clear_node2_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id() const;
  void set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node2_id() const;
  void _internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float weight = 3;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.decreaseEdgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id_;
  float weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class decreaseEdgeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.decreaseEdgeResponse) */ {
 public:
  inline decreaseEdgeResponse() : decreaseEdgeResponse(nullptr) {}
  ~decreaseEdgeResponse() override;
  explicit constexpr decreaseEdgeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decreaseEdgeResponse(const decreaseEdgeResponse& from);
  decreaseEdgeResponse(decreaseEdgeResponse&& from) noexcept
    : decreaseEdgeResponse() {
    *this = ::std::move(from);
  }

  inline decreaseEdgeResponse& operator=(const decreaseEdgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline decreaseEdgeResponse& operator=(decreaseEdgeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decreaseEdgeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const decreaseEdgeResponse* internal_default_instance() {
    return reinterpret_cast<const decreaseEdgeResponse*>(
               &_decreaseEdgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(decreaseEdgeResponse& a, decreaseEdgeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(decreaseEdgeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decreaseEdgeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline decreaseEdgeResponse* New() const final {
    return new decreaseEdgeResponse();
  }

  decreaseEdgeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<decreaseEdgeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decreaseEdgeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const decreaseEdgeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decreaseEdgeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.decreaseEdgeResponse";
  }
  protected:
  explicit decreaseEdgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.decreaseEdgeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeEdgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.removeEdgeRequest) */ {
 public:
  inline removeEdgeRequest() : removeEdgeRequest(nullptr) {}
  ~removeEdgeRequest() override;
  explicit constexpr removeEdgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeEdgeRequest(const removeEdgeRequest& from);
  removeEdgeRequest(removeEdgeRequest&& from) noexcept
    : removeEdgeRequest() {
    *this = ::std::move(from);
  }

  inline removeEdgeRequest& operator=(const removeEdgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeEdgeRequest& operator=(removeEdgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeEdgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeEdgeRequest* internal_default_instance() {
    return reinterpret_cast<const removeEdgeRequest*>(
               &_removeEdgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(removeEdgeRequest& a, removeEdgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(removeEdgeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeEdgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline removeEdgeRequest* New() const final {
    return new removeEdgeRequest();
  }

  removeEdgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<removeEdgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeEdgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const removeEdgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeEdgeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.removeEdgeRequest";
  }
  protected:
  explicit removeEdgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNode1IdFieldNumber = 1,
    kNode2IdFieldNumber = 2,
  };
  // uint32 node1_id = 1;
  void clear_node1_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id() const;
  void set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node1_id() const;
  void _internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 node2_id = 2;
  void clear_node2_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id() const;
  void set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node2_id() const;
  void _internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.removeEdgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeEdgeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.removeEdgeResponse) */ {
 public:
  inline removeEdgeResponse() : removeEdgeResponse(nullptr) {}
  ~removeEdgeResponse() override;
  explicit constexpr removeEdgeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeEdgeResponse(const removeEdgeResponse& from);
  removeEdgeResponse(removeEdgeResponse&& from) noexcept
    : removeEdgeResponse() {
    *this = ::std::move(from);
  }

  inline removeEdgeResponse& operator=(const removeEdgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeEdgeResponse& operator=(removeEdgeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeEdgeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeEdgeResponse* internal_default_instance() {
    return reinterpret_cast<const removeEdgeResponse*>(
               &_removeEdgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(removeEdgeResponse& a, removeEdgeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(removeEdgeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeEdgeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline removeEdgeResponse* New() const final {
    return new removeEdgeResponse();
  }

  removeEdgeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<removeEdgeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeEdgeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const removeEdgeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeEdgeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.removeEdgeResponse";
  }
  protected:
  explicit removeEdgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.removeEdgeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getEdgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getEdgeRequest) */ {
 public:
  inline getEdgeRequest() : getEdgeRequest(nullptr) {}
  ~getEdgeRequest() override;
  explicit constexpr getEdgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getEdgeRequest(const getEdgeRequest& from);
  getEdgeRequest(getEdgeRequest&& from) noexcept
    : getEdgeRequest() {
    *this = ::std::move(from);
  }

  inline getEdgeRequest& operator=(const getEdgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getEdgeRequest& operator=(getEdgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getEdgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getEdgeRequest* internal_default_instance() {
    return reinterpret_cast<const getEdgeRequest*>(
               &_getEdgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(getEdgeRequest& a, getEdgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getEdgeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getEdgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getEdgeRequest* New() const final {
    return new getEdgeRequest();
  }

  getEdgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getEdgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getEdgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getEdgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getEdgeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getEdgeRequest";
  }
  protected:
  explicit getEdgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNode1IdFieldNumber = 1,
    kNode2IdFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 node1_id = 1;
  void clear_node1_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id() const;
  void set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node1_id() const;
  void _internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 node2_id = 2;
  void clear_node2_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id() const;
  void set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node2_id() const;
  void _internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float weight = 3;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getEdgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id_;
  float weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getEdgeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getEdgeResponse) */ {
 public:
  inline getEdgeResponse() : getEdgeResponse(nullptr) {}
  ~getEdgeResponse() override;
  explicit constexpr getEdgeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getEdgeResponse(const getEdgeResponse& from);
  getEdgeResponse(getEdgeResponse&& from) noexcept
    : getEdgeResponse() {
    *this = ::std::move(from);
  }

  inline getEdgeResponse& operator=(const getEdgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getEdgeResponse& operator=(getEdgeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getEdgeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getEdgeResponse* internal_default_instance() {
    return reinterpret_cast<const getEdgeResponse*>(
               &_getEdgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(getEdgeResponse& a, getEdgeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getEdgeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getEdgeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getEdgeResponse* New() const final {
    return new getEdgeResponse();
  }

  getEdgeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getEdgeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getEdgeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getEdgeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getEdgeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getEdgeResponse";
  }
  protected:
  explicit getEdgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // float weight = 1;
  void clear_weight();
  float weight() const;
  void set_weight(float value);
  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getEdgeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class isEdgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.isEdgeRequest) */ {
 public:
  inline isEdgeRequest() : isEdgeRequest(nullptr) {}
  ~isEdgeRequest() override;
  explicit constexpr isEdgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isEdgeRequest(const isEdgeRequest& from);
  isEdgeRequest(isEdgeRequest&& from) noexcept
    : isEdgeRequest() {
    *this = ::std::move(from);
  }

  inline isEdgeRequest& operator=(const isEdgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline isEdgeRequest& operator=(isEdgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const isEdgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const isEdgeRequest* internal_default_instance() {
    return reinterpret_cast<const isEdgeRequest*>(
               &_isEdgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(isEdgeRequest& a, isEdgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(isEdgeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isEdgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isEdgeRequest* New() const final {
    return new isEdgeRequest();
  }

  isEdgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isEdgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const isEdgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const isEdgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isEdgeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.isEdgeRequest";
  }
  protected:
  explicit isEdgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNode1IdFieldNumber = 1,
    kNode2IdFieldNumber = 2,
  };
  // uint32 node1_id = 1;
  void clear_node1_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id() const;
  void set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node1_id() const;
  void _internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 node2_id = 2;
  void clear_node2_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id() const;
  void set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node2_id() const;
  void _internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.isEdgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class isEdgeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.isEdgeResponse) */ {
 public:
  inline isEdgeResponse() : isEdgeResponse(nullptr) {}
  ~isEdgeResponse() override;
  explicit constexpr isEdgeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isEdgeResponse(const isEdgeResponse& from);
  isEdgeResponse(isEdgeResponse&& from) noexcept
    : isEdgeResponse() {
    *this = ::std::move(from);
  }

  inline isEdgeResponse& operator=(const isEdgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline isEdgeResponse& operator=(isEdgeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const isEdgeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const isEdgeResponse* internal_default_instance() {
    return reinterpret_cast<const isEdgeResponse*>(
               &_isEdgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(isEdgeResponse& a, isEdgeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(isEdgeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isEdgeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isEdgeResponse* New() const final {
    return new isEdgeResponse();
  }

  isEdgeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isEdgeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const isEdgeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const isEdgeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isEdgeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.isEdgeResponse";
  }
  protected:
  explicit isEdgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.isEdgeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getAllNodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getAllNodesRequest) */ {
 public:
  inline getAllNodesRequest() : getAllNodesRequest(nullptr) {}
  ~getAllNodesRequest() override;
  explicit constexpr getAllNodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllNodesRequest(const getAllNodesRequest& from);
  getAllNodesRequest(getAllNodesRequest&& from) noexcept
    : getAllNodesRequest() {
    *this = ::std::move(from);
  }

  inline getAllNodesRequest& operator=(const getAllNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllNodesRequest& operator=(getAllNodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllNodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllNodesRequest* internal_default_instance() {
    return reinterpret_cast<const getAllNodesRequest*>(
               &_getAllNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(getAllNodesRequest& a, getAllNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllNodesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAllNodesRequest* New() const final {
    return new getAllNodesRequest();
  }

  getAllNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAllNodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllNodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getAllNodesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllNodesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getAllNodesRequest";
  }
  protected:
  explicit getAllNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesIdFieldNumber = 1,
  };
  // bytes nodes_id = 1;
  void clear_nodes_id();
  const std::string& nodes_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodes_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodes_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_nodes_id();
  void set_allocated_nodes_id(std::string* nodes_id);
  private:
  const std::string& _internal_nodes_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodes_id(const std::string& value);
  std::string* _internal_mutable_nodes_id();
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getAllNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodes_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getAllNodesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getAllNodesResponse) */ {
 public:
  inline getAllNodesResponse() : getAllNodesResponse(nullptr) {}
  ~getAllNodesResponse() override;
  explicit constexpr getAllNodesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllNodesResponse(const getAllNodesResponse& from);
  getAllNodesResponse(getAllNodesResponse&& from) noexcept
    : getAllNodesResponse() {
    *this = ::std::move(from);
  }

  inline getAllNodesResponse& operator=(const getAllNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllNodesResponse& operator=(getAllNodesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllNodesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllNodesResponse* internal_default_instance() {
    return reinterpret_cast<const getAllNodesResponse*>(
               &_getAllNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(getAllNodesResponse& a, getAllNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllNodesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllNodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAllNodesResponse* New() const final {
    return new getAllNodesResponse();
  }

  getAllNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAllNodesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllNodesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getAllNodesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllNodesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getAllNodesResponse";
  }
  protected:
  explicit getAllNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesIdFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes nodes_id = 1;
  void clear_nodes_id();
  const std::string& nodes_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodes_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodes_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_nodes_id();
  void set_allocated_nodes_id(std::string* nodes_id);
  private:
  const std::string& _internal_nodes_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodes_id(const std::string& value);
  std::string* _internal_mutable_nodes_id();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getAllNodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodes_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class suppressNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.suppressNodeRequest) */ {
 public:
  inline suppressNodeRequest() : suppressNodeRequest(nullptr) {}
  ~suppressNodeRequest() override;
  explicit constexpr suppressNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  suppressNodeRequest(const suppressNodeRequest& from);
  suppressNodeRequest(suppressNodeRequest&& from) noexcept
    : suppressNodeRequest() {
    *this = ::std::move(from);
  }

  inline suppressNodeRequest& operator=(const suppressNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline suppressNodeRequest& operator=(suppressNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const suppressNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const suppressNodeRequest* internal_default_instance() {
    return reinterpret_cast<const suppressNodeRequest*>(
               &_suppressNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(suppressNodeRequest& a, suppressNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(suppressNodeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(suppressNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline suppressNodeRequest* New() const final {
    return new suppressNodeRequest();
  }

  suppressNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<suppressNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const suppressNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const suppressNodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(suppressNodeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.suppressNodeRequest";
  }
  protected:
  explicit suppressNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // uint32 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.suppressNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class suppressNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.suppressNodeResponse) */ {
 public:
  inline suppressNodeResponse() : suppressNodeResponse(nullptr) {}
  ~suppressNodeResponse() override;
  explicit constexpr suppressNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  suppressNodeResponse(const suppressNodeResponse& from);
  suppressNodeResponse(suppressNodeResponse&& from) noexcept
    : suppressNodeResponse() {
    *this = ::std::move(from);
  }

  inline suppressNodeResponse& operator=(const suppressNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline suppressNodeResponse& operator=(suppressNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const suppressNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const suppressNodeResponse* internal_default_instance() {
    return reinterpret_cast<const suppressNodeResponse*>(
               &_suppressNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(suppressNodeResponse& a, suppressNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(suppressNodeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(suppressNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline suppressNodeResponse* New() const final {
    return new suppressNodeResponse();
  }

  suppressNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<suppressNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const suppressNodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const suppressNodeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(suppressNodeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.suppressNodeResponse";
  }
  protected:
  explicit suppressNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.suppressNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getNeighborsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getNeighborsRequest) */ {
 public:
  inline getNeighborsRequest() : getNeighborsRequest(nullptr) {}
  ~getNeighborsRequest() override;
  explicit constexpr getNeighborsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNeighborsRequest(const getNeighborsRequest& from);
  getNeighborsRequest(getNeighborsRequest&& from) noexcept
    : getNeighborsRequest() {
    *this = ::std::move(from);
  }

  inline getNeighborsRequest& operator=(const getNeighborsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNeighborsRequest& operator=(getNeighborsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNeighborsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNeighborsRequest* internal_default_instance() {
    return reinterpret_cast<const getNeighborsRequest*>(
               &_getNeighborsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(getNeighborsRequest& a, getNeighborsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getNeighborsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNeighborsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNeighborsRequest* New() const final {
    return new getNeighborsRequest();
  }

  getNeighborsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNeighborsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNeighborsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNeighborsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNeighborsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getNeighborsRequest";
  }
  protected:
  explicit getNeighborsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborsFieldNumber = 3,
    kNodeIdFieldNumber = 1,
    kMinWeightFieldNumber = 2,
  };
  // bytes neighbors = 3;
  void clear_neighbors();
  const std::string& neighbors() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_neighbors(ArgT0&& arg0, ArgT... args);
  std::string* mutable_neighbors();
  PROTOBUF_MUST_USE_RESULT std::string* release_neighbors();
  void set_allocated_neighbors(std::string* neighbors);
  private:
  const std::string& _internal_neighbors() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_neighbors(const std::string& value);
  std::string* _internal_mutable_neighbors();
  public:

  // uint32 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float minWeight = 2;
  void clear_minweight();
  float minweight() const;
  void set_minweight(float value);
  private:
  float _internal_minweight() const;
  void _internal_set_minweight(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getNeighborsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id_;
  float minweight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getNeighborsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getNeighborsResponse) */ {
 public:
  inline getNeighborsResponse() : getNeighborsResponse(nullptr) {}
  ~getNeighborsResponse() override;
  explicit constexpr getNeighborsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNeighborsResponse(const getNeighborsResponse& from);
  getNeighborsResponse(getNeighborsResponse&& from) noexcept
    : getNeighborsResponse() {
    *this = ::std::move(from);
  }

  inline getNeighborsResponse& operator=(const getNeighborsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNeighborsResponse& operator=(getNeighborsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNeighborsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNeighborsResponse* internal_default_instance() {
    return reinterpret_cast<const getNeighborsResponse*>(
               &_getNeighborsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(getNeighborsResponse& a, getNeighborsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNeighborsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNeighborsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNeighborsResponse* New() const final {
    return new getNeighborsResponse();
  }

  getNeighborsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNeighborsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNeighborsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNeighborsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNeighborsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getNeighborsResponse";
  }
  protected:
  explicit getNeighborsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes neighbors = 1;
  void clear_neighbors();
  const std::string& neighbors() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_neighbors(ArgT0&& arg0, ArgT... args);
  std::string* mutable_neighbors();
  PROTOBUF_MUST_USE_RESULT std::string* release_neighbors();
  void set_allocated_neighbors(std::string* neighbors);
  private:
  const std::string& _internal_neighbors() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_neighbors(const std::string& value);
  std::string* _internal_mutable_neighbors();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getNeighborsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr neighbors_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class minimalSpanningTreeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.minimalSpanningTreeRequest) */ {
 public:
  inline minimalSpanningTreeRequest() : minimalSpanningTreeRequest(nullptr) {}
  ~minimalSpanningTreeRequest() override;
  explicit constexpr minimalSpanningTreeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  minimalSpanningTreeRequest(const minimalSpanningTreeRequest& from);
  minimalSpanningTreeRequest(minimalSpanningTreeRequest&& from) noexcept
    : minimalSpanningTreeRequest() {
    *this = ::std::move(from);
  }

  inline minimalSpanningTreeRequest& operator=(const minimalSpanningTreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline minimalSpanningTreeRequest& operator=(minimalSpanningTreeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const minimalSpanningTreeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const minimalSpanningTreeRequest* internal_default_instance() {
    return reinterpret_cast<const minimalSpanningTreeRequest*>(
               &_minimalSpanningTreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(minimalSpanningTreeRequest& a, minimalSpanningTreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(minimalSpanningTreeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(minimalSpanningTreeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline minimalSpanningTreeRequest* New() const final {
    return new minimalSpanningTreeRequest();
  }

  minimalSpanningTreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<minimalSpanningTreeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const minimalSpanningTreeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const minimalSpanningTreeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(minimalSpanningTreeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.minimalSpanningTreeRequest";
  }
  protected:
  explicit minimalSpanningTreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesWeightsFieldNumber = 1,
    kMinTotalWeightsFieldNumber = 2,
  };
  // bytes edges_weights = 1;
  void clear_edges_weights();
  const std::string& edges_weights() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edges_weights(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edges_weights();
  PROTOBUF_MUST_USE_RESULT std::string* release_edges_weights();
  void set_allocated_edges_weights(std::string* edges_weights);
  private:
  const std::string& _internal_edges_weights() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edges_weights(const std::string& value);
  std::string* _internal_mutable_edges_weights();
  public:

  // float minTotalWeights = 2;
  void clear_mintotalweights();
  float mintotalweights() const;
  void set_mintotalweights(float value);
  private:
  float _internal_mintotalweights() const;
  void _internal_set_mintotalweights(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.minimalSpanningTreeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edges_weights_;
  float mintotalweights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class minimalSpanningTreeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.minimalSpanningTreeResponse) */ {
 public:
  inline minimalSpanningTreeResponse() : minimalSpanningTreeResponse(nullptr) {}
  ~minimalSpanningTreeResponse() override;
  explicit constexpr minimalSpanningTreeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  minimalSpanningTreeResponse(const minimalSpanningTreeResponse& from);
  minimalSpanningTreeResponse(minimalSpanningTreeResponse&& from) noexcept
    : minimalSpanningTreeResponse() {
    *this = ::std::move(from);
  }

  inline minimalSpanningTreeResponse& operator=(const minimalSpanningTreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline minimalSpanningTreeResponse& operator=(minimalSpanningTreeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const minimalSpanningTreeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const minimalSpanningTreeResponse* internal_default_instance() {
    return reinterpret_cast<const minimalSpanningTreeResponse*>(
               &_minimalSpanningTreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(minimalSpanningTreeResponse& a, minimalSpanningTreeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(minimalSpanningTreeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(minimalSpanningTreeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline minimalSpanningTreeResponse* New() const final {
    return new minimalSpanningTreeResponse();
  }

  minimalSpanningTreeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<minimalSpanningTreeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const minimalSpanningTreeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const minimalSpanningTreeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(minimalSpanningTreeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.minimalSpanningTreeResponse";
  }
  protected:
  explicit minimalSpanningTreeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesWeightsFieldNumber = 1,
    kMinTotalWeightsFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes edges_weights = 1;
  void clear_edges_weights();
  const std::string& edges_weights() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edges_weights(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edges_weights();
  PROTOBUF_MUST_USE_RESULT std::string* release_edges_weights();
  void set_allocated_edges_weights(std::string* edges_weights);
  private:
  const std::string& _internal_edges_weights() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edges_weights(const std::string& value);
  std::string* _internal_mutable_edges_weights();
  public:

  // float minTotalWeights = 2;
  void clear_mintotalweights();
  float mintotalweights() const;
  void set_mintotalweights(float value);
  private:
  float _internal_mintotalweights() const;
  void _internal_set_mintotalweights(float value);
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.minimalSpanningTreeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edges_weights_;
  float mintotalweights_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class maximalSpanningTreeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.maximalSpanningTreeRequest) */ {
 public:
  inline maximalSpanningTreeRequest() : maximalSpanningTreeRequest(nullptr) {}
  ~maximalSpanningTreeRequest() override;
  explicit constexpr maximalSpanningTreeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  maximalSpanningTreeRequest(const maximalSpanningTreeRequest& from);
  maximalSpanningTreeRequest(maximalSpanningTreeRequest&& from) noexcept
    : maximalSpanningTreeRequest() {
    *this = ::std::move(from);
  }

  inline maximalSpanningTreeRequest& operator=(const maximalSpanningTreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline maximalSpanningTreeRequest& operator=(maximalSpanningTreeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const maximalSpanningTreeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const maximalSpanningTreeRequest* internal_default_instance() {
    return reinterpret_cast<const maximalSpanningTreeRequest*>(
               &_maximalSpanningTreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(maximalSpanningTreeRequest& a, maximalSpanningTreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(maximalSpanningTreeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(maximalSpanningTreeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline maximalSpanningTreeRequest* New() const final {
    return new maximalSpanningTreeRequest();
  }

  maximalSpanningTreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<maximalSpanningTreeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const maximalSpanningTreeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const maximalSpanningTreeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(maximalSpanningTreeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.maximalSpanningTreeRequest";
  }
  protected:
  explicit maximalSpanningTreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesWeightsFieldNumber = 1,
    kMaxTotalWeightsFieldNumber = 2,
  };
  // bytes edges_weights = 1;
  void clear_edges_weights();
  const std::string& edges_weights() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edges_weights(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edges_weights();
  PROTOBUF_MUST_USE_RESULT std::string* release_edges_weights();
  void set_allocated_edges_weights(std::string* edges_weights);
  private:
  const std::string& _internal_edges_weights() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edges_weights(const std::string& value);
  std::string* _internal_mutable_edges_weights();
  public:

  // float maxTotalWeights = 2;
  void clear_maxtotalweights();
  float maxtotalweights() const;
  void set_maxtotalweights(float value);
  private:
  float _internal_maxtotalweights() const;
  void _internal_set_maxtotalweights(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.maximalSpanningTreeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edges_weights_;
  float maxtotalweights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class maximalSpanningTreeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.maximalSpanningTreeResponse) */ {
 public:
  inline maximalSpanningTreeResponse() : maximalSpanningTreeResponse(nullptr) {}
  ~maximalSpanningTreeResponse() override;
  explicit constexpr maximalSpanningTreeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  maximalSpanningTreeResponse(const maximalSpanningTreeResponse& from);
  maximalSpanningTreeResponse(maximalSpanningTreeResponse&& from) noexcept
    : maximalSpanningTreeResponse() {
    *this = ::std::move(from);
  }

  inline maximalSpanningTreeResponse& operator=(const maximalSpanningTreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline maximalSpanningTreeResponse& operator=(maximalSpanningTreeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const maximalSpanningTreeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const maximalSpanningTreeResponse* internal_default_instance() {
    return reinterpret_cast<const maximalSpanningTreeResponse*>(
               &_maximalSpanningTreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(maximalSpanningTreeResponse& a, maximalSpanningTreeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(maximalSpanningTreeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(maximalSpanningTreeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline maximalSpanningTreeResponse* New() const final {
    return new maximalSpanningTreeResponse();
  }

  maximalSpanningTreeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<maximalSpanningTreeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const maximalSpanningTreeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const maximalSpanningTreeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(maximalSpanningTreeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.maximalSpanningTreeResponse";
  }
  protected:
  explicit maximalSpanningTreeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesWeightsFieldNumber = 1,
    kMaxTotalWeightsFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes edges_weights = 1;
  void clear_edges_weights();
  const std::string& edges_weights() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edges_weights(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edges_weights();
  PROTOBUF_MUST_USE_RESULT std::string* release_edges_weights();
  void set_allocated_edges_weights(std::string* edges_weights);
  private:
  const std::string& _internal_edges_weights() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edges_weights(const std::string& value);
  std::string* _internal_mutable_edges_weights();
  public:

  // float maxTotalWeights = 2;
  void clear_maxtotalweights();
  float maxtotalweights() const;
  void set_maxtotalweights(float value);
  private:
  float _internal_maxtotalweights() const;
  void _internal_set_maxtotalweights(float value);
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.maximalSpanningTreeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edges_weights_;
  float maxtotalweights_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getShortestPathRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getShortestPathRequest) */ {
 public:
  inline getShortestPathRequest() : getShortestPathRequest(nullptr) {}
  ~getShortestPathRequest() override;
  explicit constexpr getShortestPathRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getShortestPathRequest(const getShortestPathRequest& from);
  getShortestPathRequest(getShortestPathRequest&& from) noexcept
    : getShortestPathRequest() {
    *this = ::std::move(from);
  }

  inline getShortestPathRequest& operator=(const getShortestPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getShortestPathRequest& operator=(getShortestPathRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getShortestPathRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getShortestPathRequest* internal_default_instance() {
    return reinterpret_cast<const getShortestPathRequest*>(
               &_getShortestPathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(getShortestPathRequest& a, getShortestPathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getShortestPathRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getShortestPathRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getShortestPathRequest* New() const final {
    return new getShortestPathRequest();
  }

  getShortestPathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getShortestPathRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getShortestPathRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getShortestPathRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getShortestPathRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getShortestPathRequest";
  }
  protected:
  explicit getShortestPathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kNode1IdFieldNumber = 1,
    kNode2IdFieldNumber = 2,
  };
  // bytes path = 3;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // uint32 node1_id = 1;
  void clear_node1_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id() const;
  void set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node1_id() const;
  void _internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 node2_id = 2;
  void clear_node2_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id() const;
  void set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node2_id() const;
  void _internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getShortestPathRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node1_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node2_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getShortestPathResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getShortestPathResponse) */ {
 public:
  inline getShortestPathResponse() : getShortestPathResponse(nullptr) {}
  ~getShortestPathResponse() override;
  explicit constexpr getShortestPathResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getShortestPathResponse(const getShortestPathResponse& from);
  getShortestPathResponse(getShortestPathResponse&& from) noexcept
    : getShortestPathResponse() {
    *this = ::std::move(from);
  }

  inline getShortestPathResponse& operator=(const getShortestPathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getShortestPathResponse& operator=(getShortestPathResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getShortestPathResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getShortestPathResponse* internal_default_instance() {
    return reinterpret_cast<const getShortestPathResponse*>(
               &_getShortestPathResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(getShortestPathResponse& a, getShortestPathResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getShortestPathResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getShortestPathResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getShortestPathResponse* New() const final {
    return new getShortestPathResponse();
  }

  getShortestPathResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getShortestPathResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getShortestPathResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getShortestPathResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getShortestPathResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getShortestPathResponse";
  }
  protected:
  explicit getShortestPathResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getShortestPathResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class displayResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.displayResponse) */ {
 public:
  inline displayResponse() : displayResponse(nullptr) {}
  ~displayResponse() override;
  explicit constexpr displayResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  displayResponse(const displayResponse& from);
  displayResponse(displayResponse&& from) noexcept
    : displayResponse() {
    *this = ::std::move(from);
  }

  inline displayResponse& operator=(const displayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline displayResponse& operator=(displayResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const displayResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const displayResponse* internal_default_instance() {
    return reinterpret_cast<const displayResponse*>(
               &_displayResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(displayResponse& a, displayResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(displayResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(displayResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline displayResponse* New() const final {
    return new displayResponse();
  }

  displayResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<displayResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const displayResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const displayResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(displayResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.displayResponse";
  }
  protected:
  explicit displayResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.displayResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.saveToFileRequest) */ {
 public:
  inline saveToFileRequest() : saveToFileRequest(nullptr) {}
  ~saveToFileRequest() override;
  explicit constexpr saveToFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileRequest(const saveToFileRequest& from);
  saveToFileRequest(saveToFileRequest&& from) noexcept
    : saveToFileRequest() {
    *this = ::std::move(from);
  }

  inline saveToFileRequest& operator=(const saveToFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileRequest& operator=(saveToFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const saveToFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileRequest* internal_default_instance() {
    return reinterpret_cast<const saveToFileRequest*>(
               &_saveToFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(saveToFileRequest& a, saveToFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline saveToFileRequest* New() const final {
    return new saveToFileRequest();
  }

  saveToFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<saveToFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const saveToFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const saveToFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.saveToFileRequest";
  }
  protected:
  explicit saveToFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.saveToFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.saveToFileResponse) */ {
 public:
  inline saveToFileResponse() : saveToFileResponse(nullptr) {}
  ~saveToFileResponse() override;
  explicit constexpr saveToFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileResponse(const saveToFileResponse& from);
  saveToFileResponse(saveToFileResponse&& from) noexcept
    : saveToFileResponse() {
    *this = ::std::move(from);
  }

  inline saveToFileResponse& operator=(const saveToFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileResponse& operator=(saveToFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const saveToFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileResponse* internal_default_instance() {
    return reinterpret_cast<const saveToFileResponse*>(
               &_saveToFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(saveToFileResponse& a, saveToFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline saveToFileResponse* New() const final {
    return new saveToFileResponse();
  }

  saveToFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<saveToFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const saveToFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const saveToFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.saveToFileResponse";
  }
  protected:
  explicit saveToFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.saveToFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.loadFromFileRequest) */ {
 public:
  inline loadFromFileRequest() : loadFromFileRequest(nullptr) {}
  ~loadFromFileRequest() override;
  explicit constexpr loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileRequest(const loadFromFileRequest& from);
  loadFromFileRequest(loadFromFileRequest&& from) noexcept
    : loadFromFileRequest() {
    *this = ::std::move(from);
  }

  inline loadFromFileRequest& operator=(const loadFromFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileRequest& operator=(loadFromFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadFromFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileRequest* internal_default_instance() {
    return reinterpret_cast<const loadFromFileRequest*>(
               &_loadFromFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(loadFromFileRequest& a, loadFromFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadFromFileRequest* New() const final {
    return new loadFromFileRequest();
  }

  loadFromFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadFromFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadFromFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const loadFromFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.loadFromFileRequest";
  }
  protected:
  explicit loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_MUST_USE_RESULT std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.loadFromFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.loadFromFileResponse) */ {
 public:
  inline loadFromFileResponse() : loadFromFileResponse(nullptr) {}
  ~loadFromFileResponse() override;
  explicit constexpr loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileResponse(const loadFromFileResponse& from);
  loadFromFileResponse(loadFromFileResponse&& from) noexcept
    : loadFromFileResponse() {
    *this = ::std::move(from);
  }

  inline loadFromFileResponse& operator=(const loadFromFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileResponse& operator=(loadFromFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadFromFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileResponse* internal_default_instance() {
    return reinterpret_cast<const loadFromFileResponse*>(
               &_loadFromFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(loadFromFileResponse& a, loadFromFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadFromFileResponse* New() const final {
    return new loadFromFileResponse();
  }

  loadFromFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadFromFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadFromFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const loadFromFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.loadFromFileResponse";
  }
  protected:
  explicit loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.loadFromFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getConstCovisibilityGraphResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getConstCovisibilityGraphResponse) */ {
 public:
  inline getConstCovisibilityGraphResponse() : getConstCovisibilityGraphResponse(nullptr) {}
  ~getConstCovisibilityGraphResponse() override;
  explicit constexpr getConstCovisibilityGraphResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getConstCovisibilityGraphResponse(const getConstCovisibilityGraphResponse& from);
  getConstCovisibilityGraphResponse(getConstCovisibilityGraphResponse&& from) noexcept
    : getConstCovisibilityGraphResponse() {
    *this = ::std::move(from);
  }

  inline getConstCovisibilityGraphResponse& operator=(const getConstCovisibilityGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getConstCovisibilityGraphResponse& operator=(getConstCovisibilityGraphResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getConstCovisibilityGraphResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getConstCovisibilityGraphResponse* internal_default_instance() {
    return reinterpret_cast<const getConstCovisibilityGraphResponse*>(
               &_getConstCovisibilityGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(getConstCovisibilityGraphResponse& a, getConstCovisibilityGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getConstCovisibilityGraphResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getConstCovisibilityGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getConstCovisibilityGraphResponse* New() const final {
    return new getConstCovisibilityGraphResponse();
  }

  getConstCovisibilityGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getConstCovisibilityGraphResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getConstCovisibilityGraphResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getConstCovisibilityGraphResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getConstCovisibilityGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getConstCovisibilityGraphResponse";
  }
  protected:
  explicit getConstCovisibilityGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getConstCovisibilityGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getCovisibilityGraphRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getCovisibilityGraphRequest) */ {
 public:
  inline getCovisibilityGraphRequest() : getCovisibilityGraphRequest(nullptr) {}
  ~getCovisibilityGraphRequest() override;
  explicit constexpr getCovisibilityGraphRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCovisibilityGraphRequest(const getCovisibilityGraphRequest& from);
  getCovisibilityGraphRequest(getCovisibilityGraphRequest&& from) noexcept
    : getCovisibilityGraphRequest() {
    *this = ::std::move(from);
  }

  inline getCovisibilityGraphRequest& operator=(const getCovisibilityGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCovisibilityGraphRequest& operator=(getCovisibilityGraphRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCovisibilityGraphRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCovisibilityGraphRequest* internal_default_instance() {
    return reinterpret_cast<const getCovisibilityGraphRequest*>(
               &_getCovisibilityGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(getCovisibilityGraphRequest& a, getCovisibilityGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getCovisibilityGraphRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCovisibilityGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getCovisibilityGraphRequest* New() const final {
    return new getCovisibilityGraphRequest();
  }

  getCovisibilityGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getCovisibilityGraphRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCovisibilityGraphRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getCovisibilityGraphRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCovisibilityGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getCovisibilityGraphRequest";
  }
  protected:
  explicit getCovisibilityGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovisibilityGraphFieldNumber = 1,
  };
  // bytes covisibilityGraph = 1;
  void clear_covisibilitygraph();
  const std::string& covisibilitygraph() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_covisibilitygraph(ArgT0&& arg0, ArgT... args);
  std::string* mutable_covisibilitygraph();
  PROTOBUF_MUST_USE_RESULT std::string* release_covisibilitygraph();
  void set_allocated_covisibilitygraph(std::string* covisibilitygraph);
  private:
  const std::string& _internal_covisibilitygraph() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_covisibilitygraph(const std::string& value);
  std::string* _internal_mutable_covisibilitygraph();
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getCovisibilityGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr covisibilitygraph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getCovisibilityGraphResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.getCovisibilityGraphResponse) */ {
 public:
  inline getCovisibilityGraphResponse() : getCovisibilityGraphResponse(nullptr) {}
  ~getCovisibilityGraphResponse() override;
  explicit constexpr getCovisibilityGraphResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCovisibilityGraphResponse(const getCovisibilityGraphResponse& from);
  getCovisibilityGraphResponse(getCovisibilityGraphResponse&& from) noexcept
    : getCovisibilityGraphResponse() {
    *this = ::std::move(from);
  }

  inline getCovisibilityGraphResponse& operator=(const getCovisibilityGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCovisibilityGraphResponse& operator=(getCovisibilityGraphResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCovisibilityGraphResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCovisibilityGraphResponse* internal_default_instance() {
    return reinterpret_cast<const getCovisibilityGraphResponse*>(
               &_getCovisibilityGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(getCovisibilityGraphResponse& a, getCovisibilityGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getCovisibilityGraphResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCovisibilityGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getCovisibilityGraphResponse* New() const final {
    return new getCovisibilityGraphResponse();
  }

  getCovisibilityGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getCovisibilityGraphResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCovisibilityGraphResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getCovisibilityGraphResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCovisibilityGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.getCovisibilityGraphResponse";
  }
  protected:
  explicit getCovisibilityGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovisibilityGraphFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes covisibilityGraph = 1;
  void clear_covisibilitygraph();
  const std::string& covisibilitygraph() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_covisibilitygraph(ArgT0&& arg0, ArgT... args);
  std::string* mutable_covisibilitygraph();
  PROTOBUF_MUST_USE_RESULT std::string* release_covisibilitygraph();
  void set_allocated_covisibilitygraph(std::string* covisibilitygraph);
  private:
  const std::string& _internal_covisibilitygraph() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_covisibilitygraph(const std::string& value);
  std::string* _internal_mutable_covisibilitygraph();
  public:

  // bytes xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.getCovisibilityGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr covisibilitygraph_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class setCovisibilityGraphRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICovisibilityGraphManager.setCovisibilityGraphRequest) */ {
 public:
  inline setCovisibilityGraphRequest() : setCovisibilityGraphRequest(nullptr) {}
  ~setCovisibilityGraphRequest() override;
  explicit constexpr setCovisibilityGraphRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCovisibilityGraphRequest(const setCovisibilityGraphRequest& from);
  setCovisibilityGraphRequest(setCovisibilityGraphRequest&& from) noexcept
    : setCovisibilityGraphRequest() {
    *this = ::std::move(from);
  }

  inline setCovisibilityGraphRequest& operator=(const setCovisibilityGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCovisibilityGraphRequest& operator=(setCovisibilityGraphRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCovisibilityGraphRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCovisibilityGraphRequest* internal_default_instance() {
    return reinterpret_cast<const setCovisibilityGraphRequest*>(
               &_setCovisibilityGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(setCovisibilityGraphRequest& a, setCovisibilityGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setCovisibilityGraphRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCovisibilityGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setCovisibilityGraphRequest* New() const final {
    return new setCovisibilityGraphRequest();
  }

  setCovisibilityGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setCovisibilityGraphRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCovisibilityGraphRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setCovisibilityGraphRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCovisibilityGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICovisibilityGraphManager.setCovisibilityGraphRequest";
  }
  protected:
  explicit setCovisibilityGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovisibilityGraphFieldNumber = 1,
  };
  // bytes covisibilityGraph = 1;
  void clear_covisibilitygraph();
  const std::string& covisibilitygraph() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_covisibilitygraph(ArgT0&& arg0, ArgT... args);
  std::string* mutable_covisibilitygraph();
  PROTOBUF_MUST_USE_RESULT std::string* release_covisibilitygraph();
  void set_allocated_covisibilitygraph(std::string* covisibilitygraph);
  private:
  const std::string& _internal_covisibilitygraph() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_covisibilitygraph(const std::string& value);
  std::string* _internal_mutable_covisibilitygraph();
  public:

  // @@protoc_insertion_point(class_scope:grpcICovisibilityGraphManager.setCovisibilityGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr covisibilitygraph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICovisibilityGraphManagerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// increaseEdgeRequest

// uint32 node1_id = 1;
inline void increaseEdgeRequest::clear_node1_id() {
  node1_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 increaseEdgeRequest::_internal_node1_id() const {
  return node1_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 increaseEdgeRequest::node1_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.increaseEdgeRequest.node1_id)
  return _internal_node1_id();
}
inline void increaseEdgeRequest::_internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node1_id_ = value;
}
inline void increaseEdgeRequest::set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node1_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.increaseEdgeRequest.node1_id)
}

// uint32 node2_id = 2;
inline void increaseEdgeRequest::clear_node2_id() {
  node2_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 increaseEdgeRequest::_internal_node2_id() const {
  return node2_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 increaseEdgeRequest::node2_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.increaseEdgeRequest.node2_id)
  return _internal_node2_id();
}
inline void increaseEdgeRequest::_internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node2_id_ = value;
}
inline void increaseEdgeRequest::set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node2_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.increaseEdgeRequest.node2_id)
}

// float weight = 3;
inline void increaseEdgeRequest::clear_weight() {
  weight_ = 0;
}
inline float increaseEdgeRequest::_internal_weight() const {
  return weight_;
}
inline float increaseEdgeRequest::weight() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.increaseEdgeRequest.weight)
  return _internal_weight();
}
inline void increaseEdgeRequest::_internal_set_weight(float value) {
  
  weight_ = value;
}
inline void increaseEdgeRequest::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.increaseEdgeRequest.weight)
}

// -------------------------------------------------------------------

// increaseEdgeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void increaseEdgeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 increaseEdgeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 increaseEdgeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.increaseEdgeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void increaseEdgeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void increaseEdgeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.increaseEdgeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// decreaseEdgeRequest

// uint32 node1_id = 1;
inline void decreaseEdgeRequest::clear_node1_id() {
  node1_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 decreaseEdgeRequest::_internal_node1_id() const {
  return node1_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 decreaseEdgeRequest::node1_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.decreaseEdgeRequest.node1_id)
  return _internal_node1_id();
}
inline void decreaseEdgeRequest::_internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node1_id_ = value;
}
inline void decreaseEdgeRequest::set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node1_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.decreaseEdgeRequest.node1_id)
}

// uint32 node2_id = 2;
inline void decreaseEdgeRequest::clear_node2_id() {
  node2_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 decreaseEdgeRequest::_internal_node2_id() const {
  return node2_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 decreaseEdgeRequest::node2_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.decreaseEdgeRequest.node2_id)
  return _internal_node2_id();
}
inline void decreaseEdgeRequest::_internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node2_id_ = value;
}
inline void decreaseEdgeRequest::set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node2_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.decreaseEdgeRequest.node2_id)
}

// float weight = 3;
inline void decreaseEdgeRequest::clear_weight() {
  weight_ = 0;
}
inline float decreaseEdgeRequest::_internal_weight() const {
  return weight_;
}
inline float decreaseEdgeRequest::weight() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.decreaseEdgeRequest.weight)
  return _internal_weight();
}
inline void decreaseEdgeRequest::_internal_set_weight(float value) {
  
  weight_ = value;
}
inline void decreaseEdgeRequest::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.decreaseEdgeRequest.weight)
}

// -------------------------------------------------------------------

// decreaseEdgeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void decreaseEdgeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 decreaseEdgeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 decreaseEdgeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.decreaseEdgeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void decreaseEdgeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void decreaseEdgeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.decreaseEdgeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeEdgeRequest

// uint32 node1_id = 1;
inline void removeEdgeRequest::clear_node1_id() {
  node1_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 removeEdgeRequest::_internal_node1_id() const {
  return node1_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 removeEdgeRequest::node1_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.removeEdgeRequest.node1_id)
  return _internal_node1_id();
}
inline void removeEdgeRequest::_internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node1_id_ = value;
}
inline void removeEdgeRequest::set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node1_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.removeEdgeRequest.node1_id)
}

// uint32 node2_id = 2;
inline void removeEdgeRequest::clear_node2_id() {
  node2_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 removeEdgeRequest::_internal_node2_id() const {
  return node2_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 removeEdgeRequest::node2_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.removeEdgeRequest.node2_id)
  return _internal_node2_id();
}
inline void removeEdgeRequest::_internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node2_id_ = value;
}
inline void removeEdgeRequest::set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node2_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.removeEdgeRequest.node2_id)
}

// -------------------------------------------------------------------

// removeEdgeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void removeEdgeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 removeEdgeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 removeEdgeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.removeEdgeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeEdgeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void removeEdgeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.removeEdgeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getEdgeRequest

// uint32 node1_id = 1;
inline void getEdgeRequest::clear_node1_id() {
  node1_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getEdgeRequest::_internal_node1_id() const {
  return node1_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getEdgeRequest::node1_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getEdgeRequest.node1_id)
  return _internal_node1_id();
}
inline void getEdgeRequest::_internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node1_id_ = value;
}
inline void getEdgeRequest::set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node1_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getEdgeRequest.node1_id)
}

// uint32 node2_id = 2;
inline void getEdgeRequest::clear_node2_id() {
  node2_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getEdgeRequest::_internal_node2_id() const {
  return node2_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getEdgeRequest::node2_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getEdgeRequest.node2_id)
  return _internal_node2_id();
}
inline void getEdgeRequest::_internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node2_id_ = value;
}
inline void getEdgeRequest::set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node2_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getEdgeRequest.node2_id)
}

// float weight = 3;
inline void getEdgeRequest::clear_weight() {
  weight_ = 0;
}
inline float getEdgeRequest::_internal_weight() const {
  return weight_;
}
inline float getEdgeRequest::weight() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getEdgeRequest.weight)
  return _internal_weight();
}
inline void getEdgeRequest::_internal_set_weight(float value) {
  
  weight_ = value;
}
inline void getEdgeRequest::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getEdgeRequest.weight)
}

// -------------------------------------------------------------------

// getEdgeResponse

// float weight = 1;
inline void getEdgeResponse::clear_weight() {
  weight_ = 0;
}
inline float getEdgeResponse::_internal_weight() const {
  return weight_;
}
inline float getEdgeResponse::weight() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getEdgeResponse.weight)
  return _internal_weight();
}
inline void getEdgeResponse::_internal_set_weight(float value) {
  
  weight_ = value;
}
inline void getEdgeResponse::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getEdgeResponse.weight)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getEdgeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getEdgeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getEdgeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getEdgeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getEdgeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getEdgeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getEdgeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// isEdgeRequest

// uint32 node1_id = 1;
inline void isEdgeRequest::clear_node1_id() {
  node1_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 isEdgeRequest::_internal_node1_id() const {
  return node1_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 isEdgeRequest::node1_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.isEdgeRequest.node1_id)
  return _internal_node1_id();
}
inline void isEdgeRequest::_internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node1_id_ = value;
}
inline void isEdgeRequest::set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node1_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.isEdgeRequest.node1_id)
}

// uint32 node2_id = 2;
inline void isEdgeRequest::clear_node2_id() {
  node2_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 isEdgeRequest::_internal_node2_id() const {
  return node2_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 isEdgeRequest::node2_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.isEdgeRequest.node2_id)
  return _internal_node2_id();
}
inline void isEdgeRequest::_internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node2_id_ = value;
}
inline void isEdgeRequest::set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node2_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.isEdgeRequest.node2_id)
}

// -------------------------------------------------------------------

// isEdgeResponse

// bool xpcfGrpcReturnValue = 1;
inline void isEdgeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool isEdgeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool isEdgeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.isEdgeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void isEdgeResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void isEdgeResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.isEdgeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getAllNodesRequest

// bytes nodes_id = 1;
inline void getAllNodesRequest::clear_nodes_id() {
  nodes_id_.ClearToEmpty();
}
inline const std::string& getAllNodesRequest::nodes_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getAllNodesRequest.nodes_id)
  return _internal_nodes_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllNodesRequest::set_nodes_id(ArgT0&& arg0, ArgT... args) {
 
 nodes_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getAllNodesRequest.nodes_id)
}
inline std::string* getAllNodesRequest::mutable_nodes_id() {
  std::string* _s = _internal_mutable_nodes_id();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getAllNodesRequest.nodes_id)
  return _s;
}
inline const std::string& getAllNodesRequest::_internal_nodes_id() const {
  return nodes_id_.Get();
}
inline void getAllNodesRequest::_internal_set_nodes_id(const std::string& value) {
  
  nodes_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAllNodesRequest::_internal_mutable_nodes_id() {
  
  return nodes_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAllNodesRequest::release_nodes_id() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getAllNodesRequest.nodes_id)
  return nodes_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAllNodesRequest::set_allocated_nodes_id(std::string* nodes_id) {
  if (nodes_id != nullptr) {
    
  } else {
    
  }
  nodes_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodes_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getAllNodesRequest.nodes_id)
}

// -------------------------------------------------------------------

// getAllNodesResponse

// bytes nodes_id = 1;
inline void getAllNodesResponse::clear_nodes_id() {
  nodes_id_.ClearToEmpty();
}
inline const std::string& getAllNodesResponse::nodes_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getAllNodesResponse.nodes_id)
  return _internal_nodes_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllNodesResponse::set_nodes_id(ArgT0&& arg0, ArgT... args) {
 
 nodes_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getAllNodesResponse.nodes_id)
}
inline std::string* getAllNodesResponse::mutable_nodes_id() {
  std::string* _s = _internal_mutable_nodes_id();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getAllNodesResponse.nodes_id)
  return _s;
}
inline const std::string& getAllNodesResponse::_internal_nodes_id() const {
  return nodes_id_.Get();
}
inline void getAllNodesResponse::_internal_set_nodes_id(const std::string& value) {
  
  nodes_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getAllNodesResponse::_internal_mutable_nodes_id() {
  
  return nodes_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getAllNodesResponse::release_nodes_id() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getAllNodesResponse.nodes_id)
  return nodes_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getAllNodesResponse::set_allocated_nodes_id(std::string* nodes_id) {
  if (nodes_id != nullptr) {
    
  } else {
    
  }
  nodes_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodes_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getAllNodesResponse.nodes_id)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getAllNodesResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAllNodesResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAllNodesResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getAllNodesResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getAllNodesResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getAllNodesResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getAllNodesResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// suppressNodeRequest

// uint32 node_id = 1;
inline void suppressNodeRequest::clear_node_id() {
  node_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 suppressNodeRequest::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 suppressNodeRequest::node_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.suppressNodeRequest.node_id)
  return _internal_node_id();
}
inline void suppressNodeRequest::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_id_ = value;
}
inline void suppressNodeRequest::set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.suppressNodeRequest.node_id)
}

// -------------------------------------------------------------------

// suppressNodeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void suppressNodeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 suppressNodeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 suppressNodeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.suppressNodeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void suppressNodeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void suppressNodeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.suppressNodeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNeighborsRequest

// uint32 node_id = 1;
inline void getNeighborsRequest::clear_node_id() {
  node_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getNeighborsRequest::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getNeighborsRequest::node_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getNeighborsRequest.node_id)
  return _internal_node_id();
}
inline void getNeighborsRequest::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_id_ = value;
}
inline void getNeighborsRequest::set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getNeighborsRequest.node_id)
}

// float minWeight = 2;
inline void getNeighborsRequest::clear_minweight() {
  minweight_ = 0;
}
inline float getNeighborsRequest::_internal_minweight() const {
  return minweight_;
}
inline float getNeighborsRequest::minweight() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getNeighborsRequest.minWeight)
  return _internal_minweight();
}
inline void getNeighborsRequest::_internal_set_minweight(float value) {
  
  minweight_ = value;
}
inline void getNeighborsRequest::set_minweight(float value) {
  _internal_set_minweight(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getNeighborsRequest.minWeight)
}

// bytes neighbors = 3;
inline void getNeighborsRequest::clear_neighbors() {
  neighbors_.ClearToEmpty();
}
inline const std::string& getNeighborsRequest::neighbors() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getNeighborsRequest.neighbors)
  return _internal_neighbors();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNeighborsRequest::set_neighbors(ArgT0&& arg0, ArgT... args) {
 
 neighbors_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getNeighborsRequest.neighbors)
}
inline std::string* getNeighborsRequest::mutable_neighbors() {
  std::string* _s = _internal_mutable_neighbors();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getNeighborsRequest.neighbors)
  return _s;
}
inline const std::string& getNeighborsRequest::_internal_neighbors() const {
  return neighbors_.Get();
}
inline void getNeighborsRequest::_internal_set_neighbors(const std::string& value) {
  
  neighbors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNeighborsRequest::_internal_mutable_neighbors() {
  
  return neighbors_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNeighborsRequest::release_neighbors() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getNeighborsRequest.neighbors)
  return neighbors_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNeighborsRequest::set_allocated_neighbors(std::string* neighbors) {
  if (neighbors != nullptr) {
    
  } else {
    
  }
  neighbors_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbors,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getNeighborsRequest.neighbors)
}

// -------------------------------------------------------------------

// getNeighborsResponse

// bytes neighbors = 1;
inline void getNeighborsResponse::clear_neighbors() {
  neighbors_.ClearToEmpty();
}
inline const std::string& getNeighborsResponse::neighbors() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getNeighborsResponse.neighbors)
  return _internal_neighbors();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNeighborsResponse::set_neighbors(ArgT0&& arg0, ArgT... args) {
 
 neighbors_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getNeighborsResponse.neighbors)
}
inline std::string* getNeighborsResponse::mutable_neighbors() {
  std::string* _s = _internal_mutable_neighbors();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getNeighborsResponse.neighbors)
  return _s;
}
inline const std::string& getNeighborsResponse::_internal_neighbors() const {
  return neighbors_.Get();
}
inline void getNeighborsResponse::_internal_set_neighbors(const std::string& value) {
  
  neighbors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNeighborsResponse::_internal_mutable_neighbors() {
  
  return neighbors_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNeighborsResponse::release_neighbors() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getNeighborsResponse.neighbors)
  return neighbors_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNeighborsResponse::set_allocated_neighbors(std::string* neighbors) {
  if (neighbors != nullptr) {
    
  } else {
    
  }
  neighbors_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), neighbors,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getNeighborsResponse.neighbors)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getNeighborsResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNeighborsResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNeighborsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getNeighborsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNeighborsResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNeighborsResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getNeighborsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// minimalSpanningTreeRequest

// bytes edges_weights = 1;
inline void minimalSpanningTreeRequest::clear_edges_weights() {
  edges_weights_.ClearToEmpty();
}
inline const std::string& minimalSpanningTreeRequest::edges_weights() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.minimalSpanningTreeRequest.edges_weights)
  return _internal_edges_weights();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void minimalSpanningTreeRequest::set_edges_weights(ArgT0&& arg0, ArgT... args) {
 
 edges_weights_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.minimalSpanningTreeRequest.edges_weights)
}
inline std::string* minimalSpanningTreeRequest::mutable_edges_weights() {
  std::string* _s = _internal_mutable_edges_weights();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.minimalSpanningTreeRequest.edges_weights)
  return _s;
}
inline const std::string& minimalSpanningTreeRequest::_internal_edges_weights() const {
  return edges_weights_.Get();
}
inline void minimalSpanningTreeRequest::_internal_set_edges_weights(const std::string& value) {
  
  edges_weights_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* minimalSpanningTreeRequest::_internal_mutable_edges_weights() {
  
  return edges_weights_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* minimalSpanningTreeRequest::release_edges_weights() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.minimalSpanningTreeRequest.edges_weights)
  return edges_weights_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void minimalSpanningTreeRequest::set_allocated_edges_weights(std::string* edges_weights) {
  if (edges_weights != nullptr) {
    
  } else {
    
  }
  edges_weights_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edges_weights,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.minimalSpanningTreeRequest.edges_weights)
}

// float minTotalWeights = 2;
inline void minimalSpanningTreeRequest::clear_mintotalweights() {
  mintotalweights_ = 0;
}
inline float minimalSpanningTreeRequest::_internal_mintotalweights() const {
  return mintotalweights_;
}
inline float minimalSpanningTreeRequest::mintotalweights() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.minimalSpanningTreeRequest.minTotalWeights)
  return _internal_mintotalweights();
}
inline void minimalSpanningTreeRequest::_internal_set_mintotalweights(float value) {
  
  mintotalweights_ = value;
}
inline void minimalSpanningTreeRequest::set_mintotalweights(float value) {
  _internal_set_mintotalweights(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.minimalSpanningTreeRequest.minTotalWeights)
}

// -------------------------------------------------------------------

// minimalSpanningTreeResponse

// bytes edges_weights = 1;
inline void minimalSpanningTreeResponse::clear_edges_weights() {
  edges_weights_.ClearToEmpty();
}
inline const std::string& minimalSpanningTreeResponse::edges_weights() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.minimalSpanningTreeResponse.edges_weights)
  return _internal_edges_weights();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void minimalSpanningTreeResponse::set_edges_weights(ArgT0&& arg0, ArgT... args) {
 
 edges_weights_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.minimalSpanningTreeResponse.edges_weights)
}
inline std::string* minimalSpanningTreeResponse::mutable_edges_weights() {
  std::string* _s = _internal_mutable_edges_weights();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.minimalSpanningTreeResponse.edges_weights)
  return _s;
}
inline const std::string& minimalSpanningTreeResponse::_internal_edges_weights() const {
  return edges_weights_.Get();
}
inline void minimalSpanningTreeResponse::_internal_set_edges_weights(const std::string& value) {
  
  edges_weights_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* minimalSpanningTreeResponse::_internal_mutable_edges_weights() {
  
  return edges_weights_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* minimalSpanningTreeResponse::release_edges_weights() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.minimalSpanningTreeResponse.edges_weights)
  return edges_weights_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void minimalSpanningTreeResponse::set_allocated_edges_weights(std::string* edges_weights) {
  if (edges_weights != nullptr) {
    
  } else {
    
  }
  edges_weights_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edges_weights,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.minimalSpanningTreeResponse.edges_weights)
}

// float minTotalWeights = 2;
inline void minimalSpanningTreeResponse::clear_mintotalweights() {
  mintotalweights_ = 0;
}
inline float minimalSpanningTreeResponse::_internal_mintotalweights() const {
  return mintotalweights_;
}
inline float minimalSpanningTreeResponse::mintotalweights() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.minimalSpanningTreeResponse.minTotalWeights)
  return _internal_mintotalweights();
}
inline void minimalSpanningTreeResponse::_internal_set_mintotalweights(float value) {
  
  mintotalweights_ = value;
}
inline void minimalSpanningTreeResponse::set_mintotalweights(float value) {
  _internal_set_mintotalweights(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.minimalSpanningTreeResponse.minTotalWeights)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void minimalSpanningTreeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 minimalSpanningTreeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 minimalSpanningTreeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.minimalSpanningTreeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void minimalSpanningTreeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void minimalSpanningTreeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.minimalSpanningTreeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// maximalSpanningTreeRequest

// bytes edges_weights = 1;
inline void maximalSpanningTreeRequest::clear_edges_weights() {
  edges_weights_.ClearToEmpty();
}
inline const std::string& maximalSpanningTreeRequest::edges_weights() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.maximalSpanningTreeRequest.edges_weights)
  return _internal_edges_weights();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void maximalSpanningTreeRequest::set_edges_weights(ArgT0&& arg0, ArgT... args) {
 
 edges_weights_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.maximalSpanningTreeRequest.edges_weights)
}
inline std::string* maximalSpanningTreeRequest::mutable_edges_weights() {
  std::string* _s = _internal_mutable_edges_weights();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.maximalSpanningTreeRequest.edges_weights)
  return _s;
}
inline const std::string& maximalSpanningTreeRequest::_internal_edges_weights() const {
  return edges_weights_.Get();
}
inline void maximalSpanningTreeRequest::_internal_set_edges_weights(const std::string& value) {
  
  edges_weights_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* maximalSpanningTreeRequest::_internal_mutable_edges_weights() {
  
  return edges_weights_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* maximalSpanningTreeRequest::release_edges_weights() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.maximalSpanningTreeRequest.edges_weights)
  return edges_weights_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void maximalSpanningTreeRequest::set_allocated_edges_weights(std::string* edges_weights) {
  if (edges_weights != nullptr) {
    
  } else {
    
  }
  edges_weights_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edges_weights,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.maximalSpanningTreeRequest.edges_weights)
}

// float maxTotalWeights = 2;
inline void maximalSpanningTreeRequest::clear_maxtotalweights() {
  maxtotalweights_ = 0;
}
inline float maximalSpanningTreeRequest::_internal_maxtotalweights() const {
  return maxtotalweights_;
}
inline float maximalSpanningTreeRequest::maxtotalweights() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.maximalSpanningTreeRequest.maxTotalWeights)
  return _internal_maxtotalweights();
}
inline void maximalSpanningTreeRequest::_internal_set_maxtotalweights(float value) {
  
  maxtotalweights_ = value;
}
inline void maximalSpanningTreeRequest::set_maxtotalweights(float value) {
  _internal_set_maxtotalweights(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.maximalSpanningTreeRequest.maxTotalWeights)
}

// -------------------------------------------------------------------

// maximalSpanningTreeResponse

// bytes edges_weights = 1;
inline void maximalSpanningTreeResponse::clear_edges_weights() {
  edges_weights_.ClearToEmpty();
}
inline const std::string& maximalSpanningTreeResponse::edges_weights() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.maximalSpanningTreeResponse.edges_weights)
  return _internal_edges_weights();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void maximalSpanningTreeResponse::set_edges_weights(ArgT0&& arg0, ArgT... args) {
 
 edges_weights_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.maximalSpanningTreeResponse.edges_weights)
}
inline std::string* maximalSpanningTreeResponse::mutable_edges_weights() {
  std::string* _s = _internal_mutable_edges_weights();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.maximalSpanningTreeResponse.edges_weights)
  return _s;
}
inline const std::string& maximalSpanningTreeResponse::_internal_edges_weights() const {
  return edges_weights_.Get();
}
inline void maximalSpanningTreeResponse::_internal_set_edges_weights(const std::string& value) {
  
  edges_weights_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* maximalSpanningTreeResponse::_internal_mutable_edges_weights() {
  
  return edges_weights_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* maximalSpanningTreeResponse::release_edges_weights() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.maximalSpanningTreeResponse.edges_weights)
  return edges_weights_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void maximalSpanningTreeResponse::set_allocated_edges_weights(std::string* edges_weights) {
  if (edges_weights != nullptr) {
    
  } else {
    
  }
  edges_weights_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edges_weights,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.maximalSpanningTreeResponse.edges_weights)
}

// float maxTotalWeights = 2;
inline void maximalSpanningTreeResponse::clear_maxtotalweights() {
  maxtotalweights_ = 0;
}
inline float maximalSpanningTreeResponse::_internal_maxtotalweights() const {
  return maxtotalweights_;
}
inline float maximalSpanningTreeResponse::maxtotalweights() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.maximalSpanningTreeResponse.maxTotalWeights)
  return _internal_maxtotalweights();
}
inline void maximalSpanningTreeResponse::_internal_set_maxtotalweights(float value) {
  
  maxtotalweights_ = value;
}
inline void maximalSpanningTreeResponse::set_maxtotalweights(float value) {
  _internal_set_maxtotalweights(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.maximalSpanningTreeResponse.maxTotalWeights)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void maximalSpanningTreeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 maximalSpanningTreeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 maximalSpanningTreeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.maximalSpanningTreeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void maximalSpanningTreeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void maximalSpanningTreeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.maximalSpanningTreeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getShortestPathRequest

// uint32 node1_id = 1;
inline void getShortestPathRequest::clear_node1_id() {
  node1_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getShortestPathRequest::_internal_node1_id() const {
  return node1_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getShortestPathRequest::node1_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getShortestPathRequest.node1_id)
  return _internal_node1_id();
}
inline void getShortestPathRequest::_internal_set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node1_id_ = value;
}
inline void getShortestPathRequest::set_node1_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node1_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getShortestPathRequest.node1_id)
}

// uint32 node2_id = 2;
inline void getShortestPathRequest::clear_node2_id() {
  node2_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getShortestPathRequest::_internal_node2_id() const {
  return node2_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getShortestPathRequest::node2_id() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getShortestPathRequest.node2_id)
  return _internal_node2_id();
}
inline void getShortestPathRequest::_internal_set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node2_id_ = value;
}
inline void getShortestPathRequest::set_node2_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node2_id(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getShortestPathRequest.node2_id)
}

// bytes path = 3;
inline void getShortestPathRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& getShortestPathRequest::path() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getShortestPathRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getShortestPathRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getShortestPathRequest.path)
}
inline std::string* getShortestPathRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getShortestPathRequest.path)
  return _s;
}
inline const std::string& getShortestPathRequest::_internal_path() const {
  return path_.Get();
}
inline void getShortestPathRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getShortestPathRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getShortestPathRequest::release_path() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getShortestPathRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getShortestPathRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getShortestPathRequest.path)
}

// -------------------------------------------------------------------

// getShortestPathResponse

// bytes path = 1;
inline void getShortestPathResponse::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& getShortestPathResponse::path() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getShortestPathResponse.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getShortestPathResponse::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getShortestPathResponse.path)
}
inline std::string* getShortestPathResponse::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getShortestPathResponse.path)
  return _s;
}
inline const std::string& getShortestPathResponse::_internal_path() const {
  return path_.Get();
}
inline void getShortestPathResponse::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getShortestPathResponse::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getShortestPathResponse::release_path() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getShortestPathResponse.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getShortestPathResponse::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getShortestPathResponse.path)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getShortestPathResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getShortestPathResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getShortestPathResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getShortestPathResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getShortestPathResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getShortestPathResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getShortestPathResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// displayResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void displayResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 displayResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 displayResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.displayResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void displayResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void displayResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.displayResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// saveToFileRequest

// string file = 1;
inline void saveToFileRequest::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& saveToFileRequest::file() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.saveToFileRequest.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void saveToFileRequest::set_file(ArgT0&& arg0, ArgT... args) {
 
 file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.saveToFileRequest.file)
}
inline std::string* saveToFileRequest::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.saveToFileRequest.file)
  return _s;
}
inline const std::string& saveToFileRequest::_internal_file() const {
  return file_.Get();
}
inline void saveToFileRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* saveToFileRequest::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* saveToFileRequest::release_file() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.saveToFileRequest.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void saveToFileRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.saveToFileRequest.file)
}

// -------------------------------------------------------------------

// saveToFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void saveToFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 saveToFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 saveToFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.saveToFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void saveToFileResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void saveToFileResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.saveToFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// loadFromFileRequest

// string file = 1;
inline void loadFromFileRequest::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& loadFromFileRequest::file() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.loadFromFileRequest.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void loadFromFileRequest::set_file(ArgT0&& arg0, ArgT... args) {
 
 file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.loadFromFileRequest.file)
}
inline std::string* loadFromFileRequest::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.loadFromFileRequest.file)
  return _s;
}
inline const std::string& loadFromFileRequest::_internal_file() const {
  return file_.Get();
}
inline void loadFromFileRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* loadFromFileRequest::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* loadFromFileRequest::release_file() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.loadFromFileRequest.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void loadFromFileRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.loadFromFileRequest.file)
}

// -------------------------------------------------------------------

// loadFromFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void loadFromFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadFromFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadFromFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.loadFromFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void loadFromFileResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void loadFromFileResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.loadFromFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getConstCovisibilityGraphResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getConstCovisibilityGraphResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getConstCovisibilityGraphResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getConstCovisibilityGraphResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getConstCovisibilityGraphResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getConstCovisibilityGraphResponse.xpcfGrpcReturnValue)
}
inline std::string* getConstCovisibilityGraphResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getConstCovisibilityGraphResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getConstCovisibilityGraphResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getConstCovisibilityGraphResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getConstCovisibilityGraphResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getConstCovisibilityGraphResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getConstCovisibilityGraphResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getConstCovisibilityGraphResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getConstCovisibilityGraphResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getCovisibilityGraphRequest

// bytes covisibilityGraph = 1;
inline void getCovisibilityGraphRequest::clear_covisibilitygraph() {
  covisibilitygraph_.ClearToEmpty();
}
inline const std::string& getCovisibilityGraphRequest::covisibilitygraph() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getCovisibilityGraphRequest.covisibilityGraph)
  return _internal_covisibilitygraph();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCovisibilityGraphRequest::set_covisibilitygraph(ArgT0&& arg0, ArgT... args) {
 
 covisibilitygraph_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getCovisibilityGraphRequest.covisibilityGraph)
}
inline std::string* getCovisibilityGraphRequest::mutable_covisibilitygraph() {
  std::string* _s = _internal_mutable_covisibilitygraph();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getCovisibilityGraphRequest.covisibilityGraph)
  return _s;
}
inline const std::string& getCovisibilityGraphRequest::_internal_covisibilitygraph() const {
  return covisibilitygraph_.Get();
}
inline void getCovisibilityGraphRequest::_internal_set_covisibilitygraph(const std::string& value) {
  
  covisibilitygraph_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getCovisibilityGraphRequest::_internal_mutable_covisibilitygraph() {
  
  return covisibilitygraph_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getCovisibilityGraphRequest::release_covisibilitygraph() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getCovisibilityGraphRequest.covisibilityGraph)
  return covisibilitygraph_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getCovisibilityGraphRequest::set_allocated_covisibilitygraph(std::string* covisibilitygraph) {
  if (covisibilitygraph != nullptr) {
    
  } else {
    
  }
  covisibilitygraph_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), covisibilitygraph,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getCovisibilityGraphRequest.covisibilityGraph)
}

// -------------------------------------------------------------------

// getCovisibilityGraphResponse

// bytes covisibilityGraph = 1;
inline void getCovisibilityGraphResponse::clear_covisibilitygraph() {
  covisibilitygraph_.ClearToEmpty();
}
inline const std::string& getCovisibilityGraphResponse::covisibilitygraph() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.covisibilityGraph)
  return _internal_covisibilitygraph();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCovisibilityGraphResponse::set_covisibilitygraph(ArgT0&& arg0, ArgT... args) {
 
 covisibilitygraph_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.covisibilityGraph)
}
inline std::string* getCovisibilityGraphResponse::mutable_covisibilitygraph() {
  std::string* _s = _internal_mutable_covisibilitygraph();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.covisibilityGraph)
  return _s;
}
inline const std::string& getCovisibilityGraphResponse::_internal_covisibilitygraph() const {
  return covisibilitygraph_.Get();
}
inline void getCovisibilityGraphResponse::_internal_set_covisibilitygraph(const std::string& value) {
  
  covisibilitygraph_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getCovisibilityGraphResponse::_internal_mutable_covisibilitygraph() {
  
  return covisibilitygraph_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getCovisibilityGraphResponse::release_covisibilitygraph() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.covisibilityGraph)
  return covisibilitygraph_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getCovisibilityGraphResponse::set_allocated_covisibilitygraph(std::string* covisibilitygraph) {
  if (covisibilitygraph != nullptr) {
    
  } else {
    
  }
  covisibilitygraph_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), covisibilitygraph,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.covisibilityGraph)
}

// bytes xpcfGrpcReturnValue = 2;
inline void getCovisibilityGraphResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getCovisibilityGraphResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCovisibilityGraphResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.xpcfGrpcReturnValue)
}
inline std::string* getCovisibilityGraphResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getCovisibilityGraphResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getCovisibilityGraphResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getCovisibilityGraphResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getCovisibilityGraphResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getCovisibilityGraphResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.getCovisibilityGraphResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setCovisibilityGraphRequest

// bytes covisibilityGraph = 1;
inline void setCovisibilityGraphRequest::clear_covisibilitygraph() {
  covisibilitygraph_.ClearToEmpty();
}
inline const std::string& setCovisibilityGraphRequest::covisibilitygraph() const {
  // @@protoc_insertion_point(field_get:grpcICovisibilityGraphManager.setCovisibilityGraphRequest.covisibilityGraph)
  return _internal_covisibilitygraph();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCovisibilityGraphRequest::set_covisibilitygraph(ArgT0&& arg0, ArgT... args) {
 
 covisibilitygraph_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcICovisibilityGraphManager.setCovisibilityGraphRequest.covisibilityGraph)
}
inline std::string* setCovisibilityGraphRequest::mutable_covisibilitygraph() {
  std::string* _s = _internal_mutable_covisibilitygraph();
  // @@protoc_insertion_point(field_mutable:grpcICovisibilityGraphManager.setCovisibilityGraphRequest.covisibilityGraph)
  return _s;
}
inline const std::string& setCovisibilityGraphRequest::_internal_covisibilitygraph() const {
  return covisibilitygraph_.Get();
}
inline void setCovisibilityGraphRequest::_internal_set_covisibilitygraph(const std::string& value) {
  
  covisibilitygraph_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setCovisibilityGraphRequest::_internal_mutable_covisibilitygraph() {
  
  return covisibilitygraph_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setCovisibilityGraphRequest::release_covisibilitygraph() {
  // @@protoc_insertion_point(field_release:grpcICovisibilityGraphManager.setCovisibilityGraphRequest.covisibilityGraph)
  return covisibilitygraph_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setCovisibilityGraphRequest::set_allocated_covisibilitygraph(std::string* covisibilitygraph) {
  if (covisibilitygraph != nullptr) {
    
  } else {
    
  }
  covisibilitygraph_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), covisibilitygraph,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcICovisibilityGraphManager.setCovisibilityGraphRequest.covisibilityGraph)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcICovisibilityGraphManager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcICovisibilityGraphManagerService_2eproto
