// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIImage2WorldMapperService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIImage2WorldMapperService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIImage2WorldMapperService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIImage2WorldMapperService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIImage2WorldMapperService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIImage2WorldMapperService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIImage2WorldMapperService_2eproto_metadata_getter(int index);
namespace grpcIImage2WorldMapper {
class mapRequest;
struct mapRequestDefaultTypeInternal;
extern mapRequestDefaultTypeInternal _mapRequest_default_instance_;
class mapResponse;
struct mapResponseDefaultTypeInternal;
extern mapResponseDefaultTypeInternal _mapResponse_default_instance_;
}  // namespace grpcIImage2WorldMapper
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIImage2WorldMapper::mapRequest* Arena::CreateMaybeMessage<::grpcIImage2WorldMapper::mapRequest>(Arena*);
template<> ::grpcIImage2WorldMapper::mapResponse* Arena::CreateMaybeMessage<::grpcIImage2WorldMapper::mapResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIImage2WorldMapper {

// ===================================================================

class mapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImage2WorldMapper.mapRequest) */ {
 public:
  inline mapRequest() : mapRequest(nullptr) {}
  virtual ~mapRequest();
  explicit constexpr mapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mapRequest(const mapRequest& from);
  mapRequest(mapRequest&& from) noexcept
    : mapRequest() {
    *this = ::std::move(from);
  }

  inline mapRequest& operator=(const mapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline mapRequest& operator=(mapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const mapRequest* internal_default_instance() {
    return reinterpret_cast<const mapRequest*>(
               &_mapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(mapRequest& a, mapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(mapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mapRequest* New() const final {
    return CreateMaybeMessage<mapRequest>(nullptr);
  }

  mapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mapRequest& from);
  void MergeFrom(const mapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImage2WorldMapper.mapRequest";
  }
  protected:
  explicit mapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIImage2WorldMapperService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigitalPointsFieldNumber = 1,
    kWorldPointsFieldNumber = 2,
  };
  // bytes digitalPoints = 1;
  void clear_digitalpoints();
  const std::string& digitalpoints() const;
  void set_digitalpoints(const std::string& value);
  void set_digitalpoints(std::string&& value);
  void set_digitalpoints(const char* value);
  void set_digitalpoints(const void* value, size_t size);
  std::string* mutable_digitalpoints();
  std::string* release_digitalpoints();
  void set_allocated_digitalpoints(std::string* digitalpoints);
  private:
  const std::string& _internal_digitalpoints() const;
  void _internal_set_digitalpoints(const std::string& value);
  std::string* _internal_mutable_digitalpoints();
  public:

  // bytes worldPoints = 2;
  void clear_worldpoints();
  const std::string& worldpoints() const;
  void set_worldpoints(const std::string& value);
  void set_worldpoints(std::string&& value);
  void set_worldpoints(const char* value);
  void set_worldpoints(const void* value, size_t size);
  std::string* mutable_worldpoints();
  std::string* release_worldpoints();
  void set_allocated_worldpoints(std::string* worldpoints);
  private:
  const std::string& _internal_worldpoints() const;
  void _internal_set_worldpoints(const std::string& value);
  std::string* _internal_mutable_worldpoints();
  public:

  // @@protoc_insertion_point(class_scope:grpcIImage2WorldMapper.mapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digitalpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldpoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImage2WorldMapperService_2eproto;
};
// -------------------------------------------------------------------

class mapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImage2WorldMapper.mapResponse) */ {
 public:
  inline mapResponse() : mapResponse(nullptr) {}
  virtual ~mapResponse();
  explicit constexpr mapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mapResponse(const mapResponse& from);
  mapResponse(mapResponse&& from) noexcept
    : mapResponse() {
    *this = ::std::move(from);
  }

  inline mapResponse& operator=(const mapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline mapResponse& operator=(mapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const mapResponse* internal_default_instance() {
    return reinterpret_cast<const mapResponse*>(
               &_mapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(mapResponse& a, mapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(mapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mapResponse* New() const final {
    return CreateMaybeMessage<mapResponse>(nullptr);
  }

  mapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mapResponse& from);
  void MergeFrom(const mapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImage2WorldMapper.mapResponse";
  }
  protected:
  explicit mapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIImage2WorldMapperService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldPointsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes worldPoints = 1;
  void clear_worldpoints();
  const std::string& worldpoints() const;
  void set_worldpoints(const std::string& value);
  void set_worldpoints(std::string&& value);
  void set_worldpoints(const char* value);
  void set_worldpoints(const void* value, size_t size);
  std::string* mutable_worldpoints();
  std::string* release_worldpoints();
  void set_allocated_worldpoints(std::string* worldpoints);
  private:
  const std::string& _internal_worldpoints() const;
  void _internal_set_worldpoints(const std::string& value);
  std::string* _internal_mutable_worldpoints();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIImage2WorldMapper.mapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldpoints_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImage2WorldMapperService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mapRequest

// bytes digitalPoints = 1;
inline void mapRequest::clear_digitalpoints() {
  digitalpoints_.ClearToEmpty();
}
inline const std::string& mapRequest::digitalpoints() const {
  // @@protoc_insertion_point(field_get:grpcIImage2WorldMapper.mapRequest.digitalPoints)
  return _internal_digitalpoints();
}
inline void mapRequest::set_digitalpoints(const std::string& value) {
  _internal_set_digitalpoints(value);
  // @@protoc_insertion_point(field_set:grpcIImage2WorldMapper.mapRequest.digitalPoints)
}
inline std::string* mapRequest::mutable_digitalpoints() {
  // @@protoc_insertion_point(field_mutable:grpcIImage2WorldMapper.mapRequest.digitalPoints)
  return _internal_mutable_digitalpoints();
}
inline const std::string& mapRequest::_internal_digitalpoints() const {
  return digitalpoints_.Get();
}
inline void mapRequest::_internal_set_digitalpoints(const std::string& value) {
  
  digitalpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mapRequest::set_digitalpoints(std::string&& value) {
  
  digitalpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIImage2WorldMapper.mapRequest.digitalPoints)
}
inline void mapRequest::set_digitalpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  digitalpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIImage2WorldMapper.mapRequest.digitalPoints)
}
inline void mapRequest::set_digitalpoints(const void* value,
    size_t size) {
  
  digitalpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIImage2WorldMapper.mapRequest.digitalPoints)
}
inline std::string* mapRequest::_internal_mutable_digitalpoints() {
  
  return digitalpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mapRequest::release_digitalpoints() {
  // @@protoc_insertion_point(field_release:grpcIImage2WorldMapper.mapRequest.digitalPoints)
  return digitalpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mapRequest::set_allocated_digitalpoints(std::string* digitalpoints) {
  if (digitalpoints != nullptr) {
    
  } else {
    
  }
  digitalpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digitalpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIImage2WorldMapper.mapRequest.digitalPoints)
}

// bytes worldPoints = 2;
inline void mapRequest::clear_worldpoints() {
  worldpoints_.ClearToEmpty();
}
inline const std::string& mapRequest::worldpoints() const {
  // @@protoc_insertion_point(field_get:grpcIImage2WorldMapper.mapRequest.worldPoints)
  return _internal_worldpoints();
}
inline void mapRequest::set_worldpoints(const std::string& value) {
  _internal_set_worldpoints(value);
  // @@protoc_insertion_point(field_set:grpcIImage2WorldMapper.mapRequest.worldPoints)
}
inline std::string* mapRequest::mutable_worldpoints() {
  // @@protoc_insertion_point(field_mutable:grpcIImage2WorldMapper.mapRequest.worldPoints)
  return _internal_mutable_worldpoints();
}
inline const std::string& mapRequest::_internal_worldpoints() const {
  return worldpoints_.Get();
}
inline void mapRequest::_internal_set_worldpoints(const std::string& value) {
  
  worldpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mapRequest::set_worldpoints(std::string&& value) {
  
  worldpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIImage2WorldMapper.mapRequest.worldPoints)
}
inline void mapRequest::set_worldpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worldpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIImage2WorldMapper.mapRequest.worldPoints)
}
inline void mapRequest::set_worldpoints(const void* value,
    size_t size) {
  
  worldpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIImage2WorldMapper.mapRequest.worldPoints)
}
inline std::string* mapRequest::_internal_mutable_worldpoints() {
  
  return worldpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mapRequest::release_worldpoints() {
  // @@protoc_insertion_point(field_release:grpcIImage2WorldMapper.mapRequest.worldPoints)
  return worldpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mapRequest::set_allocated_worldpoints(std::string* worldpoints) {
  if (worldpoints != nullptr) {
    
  } else {
    
  }
  worldpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worldpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIImage2WorldMapper.mapRequest.worldPoints)
}

// -------------------------------------------------------------------

// mapResponse

// bytes worldPoints = 1;
inline void mapResponse::clear_worldpoints() {
  worldpoints_.ClearToEmpty();
}
inline const std::string& mapResponse::worldpoints() const {
  // @@protoc_insertion_point(field_get:grpcIImage2WorldMapper.mapResponse.worldPoints)
  return _internal_worldpoints();
}
inline void mapResponse::set_worldpoints(const std::string& value) {
  _internal_set_worldpoints(value);
  // @@protoc_insertion_point(field_set:grpcIImage2WorldMapper.mapResponse.worldPoints)
}
inline std::string* mapResponse::mutable_worldpoints() {
  // @@protoc_insertion_point(field_mutable:grpcIImage2WorldMapper.mapResponse.worldPoints)
  return _internal_mutable_worldpoints();
}
inline const std::string& mapResponse::_internal_worldpoints() const {
  return worldpoints_.Get();
}
inline void mapResponse::_internal_set_worldpoints(const std::string& value) {
  
  worldpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void mapResponse::set_worldpoints(std::string&& value) {
  
  worldpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIImage2WorldMapper.mapResponse.worldPoints)
}
inline void mapResponse::set_worldpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  worldpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIImage2WorldMapper.mapResponse.worldPoints)
}
inline void mapResponse::set_worldpoints(const void* value,
    size_t size) {
  
  worldpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIImage2WorldMapper.mapResponse.worldPoints)
}
inline std::string* mapResponse::_internal_mutable_worldpoints() {
  
  return worldpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* mapResponse::release_worldpoints() {
  // @@protoc_insertion_point(field_release:grpcIImage2WorldMapper.mapResponse.worldPoints)
  return worldpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void mapResponse::set_allocated_worldpoints(std::string* worldpoints) {
  if (worldpoints != nullptr) {
    
  } else {
    
  }
  worldpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worldpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIImage2WorldMapper.mapResponse.worldPoints)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void mapResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mapResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIImage2WorldMapper.mapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void mapResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void mapResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIImage2WorldMapper.mapResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIImage2WorldMapper

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIImage2WorldMapperService_2eproto
