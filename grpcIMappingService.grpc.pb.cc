// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMappingService.proto

#include "grpcIMappingService.pb.h"
#include "grpcIMappingService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIMapping {

static const char* grpcIMappingService_method_names[] = {
  "/grpcIMapping.grpcIMappingService/setCameraParameters",
  "/grpcIMapping.grpcIMappingService/process",
};

std::unique_ptr< grpcIMappingService::Stub> grpcIMappingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIMappingService::Stub> stub(new grpcIMappingService::Stub(channel));
  return stub;
}

grpcIMappingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setCameraParameters_(grpcIMappingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_process_(grpcIMappingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIMappingService::Stub::setCameraParameters(::grpc::ClientContext* context, const ::grpcIMapping::setCameraParametersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapping::setCameraParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCameraParameters_, context, request, response);
}

void grpcIMappingService::Stub::experimental_async::setCameraParameters(::grpc::ClientContext* context, const ::grpcIMapping::setCameraParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapping::setCameraParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_, context, request, response, std::move(f));
}

void grpcIMappingService::Stub::experimental_async::setCameraParameters(::grpc::ClientContext* context, const ::grpcIMapping::setCameraParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIMappingService::Stub::PrepareAsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIMapping::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIMapping::setCameraParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIMappingService::Stub::AsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIMapping::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMappingService::Stub::process(::grpc::ClientContext* context, const ::grpcIMapping::processRequest& request, ::grpcIMapping::processResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapping::processRequest, ::grpcIMapping::processResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_process_, context, request, response);
}

void grpcIMappingService::Stub::experimental_async::process(::grpc::ClientContext* context, const ::grpcIMapping::processRequest* request, ::grpcIMapping::processResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapping::processRequest, ::grpcIMapping::processResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_process_, context, request, response, std::move(f));
}

void grpcIMappingService::Stub::experimental_async::process(::grpc::ClientContext* context, const ::grpcIMapping::processRequest* request, ::grpcIMapping::processResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_process_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapping::processResponse>* grpcIMappingService::Stub::PrepareAsyncprocessRaw(::grpc::ClientContext* context, const ::grpcIMapping::processRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapping::processResponse, ::grpcIMapping::processRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_process_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapping::processResponse>* grpcIMappingService::Stub::AsyncprocessRaw(::grpc::ClientContext* context, const ::grpcIMapping::processRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprocessRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIMappingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingService::Service, ::grpcIMapping::setCameraParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapping::setCameraParametersRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setCameraParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMappingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMappingService::Service, ::grpcIMapping::processRequest, ::grpcIMapping::processResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMappingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapping::processRequest* req,
             ::grpcIMapping::processResponse* resp) {
               return service->process(ctx, req, resp);
             }, this)));
}

grpcIMappingService::Service::~Service() {
}

::grpc::Status grpcIMappingService::Service::setCameraParameters(::grpc::ServerContext* context, const ::grpcIMapping::setCameraParametersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMappingService::Service::process(::grpc::ServerContext* context, const ::grpcIMapping::processRequest* request, ::grpcIMapping::processResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIMapping

