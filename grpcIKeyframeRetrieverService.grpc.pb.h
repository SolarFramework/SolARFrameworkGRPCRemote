// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIKeyframeRetrieverService.proto
#ifndef GRPC_grpcIKeyframeRetrieverService_2eproto__INCLUDED
#define GRPC_grpcIKeyframeRetrieverService_2eproto__INCLUDED

#include "grpcIKeyframeRetrieverService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIKeyframeRetriever {

class grpcIKeyframeRetrieverService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIKeyframeRetriever.grpcIKeyframeRetrieverService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status addKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpcIKeyframeRetriever::addKeyframeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::addKeyframeResponse>> AsyncaddKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::addKeyframeResponse>>(AsyncaddKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::addKeyframeResponse>> PrepareAsyncaddKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::addKeyframeResponse>>(PrepareAsyncaddKeyframeRaw(context, request, cq));
    }
    virtual ::grpc::Status suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::suppressKeyframeResponse>> AsyncsuppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::suppressKeyframeResponse>>(AsyncsuppressKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::suppressKeyframeResponse>> PrepareAsyncsuppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::suppressKeyframeResponse>>(PrepareAsyncsuppressKeyframeRaw(context, request, cq));
    }
    virtual ::grpc::Status retrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc0Response>> Asyncretrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc0Response>>(Asyncretrieve_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc0Response>> PrepareAsyncretrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc0Response>>(PrepareAsyncretrieve_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status retrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc1Response>> Asyncretrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc1Response>>(Asyncretrieve_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc1Response>> PrepareAsyncretrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc1Response>>(PrepareAsyncretrieve_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpcIKeyframeRetriever::saveToFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    virtual ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpcIKeyframeRetriever::loadFromFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    virtual ::grpc::Status match_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpcIKeyframeRetriever::match_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc0Response>> Asyncmatch_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc0Response>>(Asyncmatch_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc0Response>> PrepareAsyncmatch_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc0Response>>(PrepareAsyncmatch_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status match_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpcIKeyframeRetriever::match_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc1Response>> Asyncmatch_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc1Response>>(Asyncmatch_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc1Response>> PrepareAsyncmatch_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc1Response>>(PrepareAsyncmatch_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status getConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>> AsyncgetConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>>(AsyncgetConstKeyframeRetrievalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>> PrepareAsyncgetConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>>(PrepareAsyncgetConstKeyframeRetrievalRaw(context, request, cq));
    }
    virtual ::grpc::Status getKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>> AsyncgetKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>>(AsyncgetKeyframeRetrievalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>> PrepareAsyncgetKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>>(PrepareAsyncgetKeyframeRetrievalRaw(context, request, cq));
    }
    virtual ::grpc::Status setKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetKeyframeRetrievalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetKeyframeRetrievalRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void addKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest* request, ::grpcIKeyframeRetriever::addKeyframeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest* request, ::grpcIKeyframeRetriever::addKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void addKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest* request, ::grpcIKeyframeRetriever::addKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void retrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void retrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void retrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void retrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void retrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void retrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest* request, ::grpcIKeyframeRetriever::saveToFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest* request, ::grpcIKeyframeRetriever::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest* request, ::grpcIKeyframeRetriever::saveToFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest* request, ::grpcIKeyframeRetriever::loadFromFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest* request, ::grpcIKeyframeRetriever::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest* request, ::grpcIKeyframeRetriever::loadFromFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void match_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request* request, ::grpcIKeyframeRetriever::match_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void match_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request* request, ::grpcIKeyframeRetriever::match_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void match_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request* request, ::grpcIKeyframeRetriever::match_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void match_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request* request, ::grpcIKeyframeRetriever::match_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void match_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request* request, ::grpcIKeyframeRetriever::match_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void match_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request* request, ::grpcIKeyframeRetriever::match_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::addKeyframeResponse>* AsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::addKeyframeResponse>* PrepareAsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::suppressKeyframeResponse>* AsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::suppressKeyframeResponse>* PrepareAsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc0Response>* Asyncretrieve_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc0Response>* PrepareAsyncretrieve_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc1Response>* Asyncretrieve_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::retrieve_grpc1Response>* PrepareAsyncretrieve_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc0Response>* Asyncmatch_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc0Response>* PrepareAsyncmatch_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc1Response>* Asyncmatch_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::match_grpc1Response>* PrepareAsyncmatch_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>* AsyncgetConstKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>* PrepareAsyncgetConstKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>* AsyncgetKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>* PrepareAsyncgetKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status addKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpcIKeyframeRetriever::addKeyframeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::addKeyframeResponse>> AsyncaddKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::addKeyframeResponse>>(AsyncaddKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::addKeyframeResponse>> PrepareAsyncaddKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::addKeyframeResponse>>(PrepareAsyncaddKeyframeRaw(context, request, cq));
    }
    ::grpc::Status suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::suppressKeyframeResponse>> AsyncsuppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::suppressKeyframeResponse>>(AsyncsuppressKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::suppressKeyframeResponse>> PrepareAsyncsuppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::suppressKeyframeResponse>>(PrepareAsyncsuppressKeyframeRaw(context, request, cq));
    }
    ::grpc::Status retrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc0Response>> Asyncretrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc0Response>>(Asyncretrieve_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc0Response>> PrepareAsyncretrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc0Response>>(PrepareAsyncretrieve_grpc0Raw(context, request, cq));
    }
    ::grpc::Status retrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc1Response>> Asyncretrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc1Response>>(Asyncretrieve_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc1Response>> PrepareAsyncretrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc1Response>>(PrepareAsyncretrieve_grpc1Raw(context, request, cq));
    }
    ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpcIKeyframeRetriever::saveToFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpcIKeyframeRetriever::loadFromFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    ::grpc::Status match_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpcIKeyframeRetriever::match_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc0Response>> Asyncmatch_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc0Response>>(Asyncmatch_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc0Response>> PrepareAsyncmatch_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc0Response>>(PrepareAsyncmatch_grpc0Raw(context, request, cq));
    }
    ::grpc::Status match_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpcIKeyframeRetriever::match_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc1Response>> Asyncmatch_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc1Response>>(Asyncmatch_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc1Response>> PrepareAsyncmatch_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc1Response>>(PrepareAsyncmatch_grpc1Raw(context, request, cq));
    }
    ::grpc::Status getConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>> AsyncgetConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>>(AsyncgetConstKeyframeRetrievalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>> PrepareAsyncgetConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>>(PrepareAsyncgetConstKeyframeRetrievalRaw(context, request, cq));
    }
    ::grpc::Status getKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>> AsyncgetKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>>(AsyncgetKeyframeRetrievalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>> PrepareAsyncgetKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>>(PrepareAsyncgetKeyframeRetrievalRaw(context, request, cq));
    }
    ::grpc::Status setKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetKeyframeRetrievalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetKeyframeRetrievalRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void addKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest* request, ::grpcIKeyframeRetriever::addKeyframeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest* request, ::grpcIKeyframeRetriever::addKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void addKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest* request, ::grpcIKeyframeRetriever::addKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void retrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void retrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void retrieve_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void retrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void retrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void retrieve_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest* request, ::grpcIKeyframeRetriever::saveToFileResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest* request, ::grpcIKeyframeRetriever::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest* request, ::grpcIKeyframeRetriever::saveToFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest* request, ::grpcIKeyframeRetriever::loadFromFileResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest* request, ::grpcIKeyframeRetriever::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest* request, ::grpcIKeyframeRetriever::loadFromFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void match_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request* request, ::grpcIKeyframeRetriever::match_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void match_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request* request, ::grpcIKeyframeRetriever::match_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void match_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request* request, ::grpcIKeyframeRetriever::match_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void match_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request* request, ::grpcIKeyframeRetriever::match_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void match_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request* request, ::grpcIKeyframeRetriever::match_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void match_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request* request, ::grpcIKeyframeRetriever::match_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getConstKeyframeRetrieval(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setKeyframeRetrieval(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::addKeyframeResponse>* AsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::addKeyframeResponse>* PrepareAsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::suppressKeyframeResponse>* AsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::suppressKeyframeResponse>* PrepareAsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc0Response>* Asyncretrieve_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc0Response>* PrepareAsyncretrieve_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc1Response>* Asyncretrieve_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::retrieve_grpc1Response>* PrepareAsyncretrieve_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc0Response>* Asyncmatch_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc0Response>* PrepareAsyncmatch_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc1Response>* Asyncmatch_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::match_grpc1Response>* PrepareAsyncmatch_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>* AsyncgetConstKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>* PrepareAsyncgetConstKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>* AsyncgetKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>* PrepareAsyncgetKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetKeyframeRetrievalRaw(::grpc::ClientContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_addKeyframe_;
    const ::grpc::internal::RpcMethod rpcmethod_suppressKeyframe_;
    const ::grpc::internal::RpcMethod rpcmethod_retrieve_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_retrieve_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_saveToFile_;
    const ::grpc::internal::RpcMethod rpcmethod_loadFromFile_;
    const ::grpc::internal::RpcMethod rpcmethod_match_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_match_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_getConstKeyframeRetrieval_;
    const ::grpc::internal::RpcMethod rpcmethod_getKeyframeRetrieval_;
    const ::grpc::internal::RpcMethod rpcmethod_setKeyframeRetrieval_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status addKeyframe(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::addKeyframeRequest* request, ::grpcIKeyframeRetriever::addKeyframeResponse* response);
    virtual ::grpc::Status suppressKeyframe(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response);
    virtual ::grpc::Status retrieve_grpc0(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response);
    virtual ::grpc::Status retrieve_grpc1(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response);
    virtual ::grpc::Status saveToFile(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::saveToFileRequest* request, ::grpcIKeyframeRetriever::saveToFileResponse* response);
    virtual ::grpc::Status loadFromFile(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::loadFromFileRequest* request, ::grpcIKeyframeRetriever::loadFromFileResponse* response);
    virtual ::grpc::Status match_grpc0(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::match_grpc0Request* request, ::grpcIKeyframeRetriever::match_grpc0Response* response);
    virtual ::grpc::Status match_grpc1(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::match_grpc1Request* request, ::grpcIKeyframeRetriever::match_grpc1Response* response);
    virtual ::grpc::Status getConstKeyframeRetrieval(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response);
    virtual ::grpc::Status getKeyframeRetrieval(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response);
    virtual ::grpc::Status setKeyframeRetrieval(::grpc::ServerContext* context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addKeyframe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::addKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddKeyframe(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::addKeyframeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::addKeyframeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_suppressKeyframe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsuppressKeyframe(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::suppressKeyframeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::suppressKeyframeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_retrieve_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_retrieve_grpc0() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_retrieve_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestretrieve_grpc0(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::retrieve_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::retrieve_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_retrieve_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_retrieve_grpc1() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_retrieve_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestretrieve_grpc1(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::retrieve_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::retrieve_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveToFile() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::saveToFileRequest* /*request*/, ::grpcIKeyframeRetriever::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::saveToFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::saveToFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadFromFile() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::loadFromFileRequest* /*request*/, ::grpcIKeyframeRetriever::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::loadFromFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::loadFromFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_match_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_match_grpc0() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_match_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmatch_grpc0(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::match_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::match_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_match_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_match_grpc1() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_match_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmatch_grpc1(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::match_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::match_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getConstKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getConstKeyframeRetrieval() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getConstKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConstKeyframeRetrieval(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getKeyframeRetrieval() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* /*request*/, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKeyframeRetrieval(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setKeyframeRetrieval() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_setKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetKeyframeRetrieval(::grpc::ServerContext* context, ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_addKeyframe<WithAsyncMethod_suppressKeyframe<WithAsyncMethod_retrieve_grpc0<WithAsyncMethod_retrieve_grpc1<WithAsyncMethod_saveToFile<WithAsyncMethod_loadFromFile<WithAsyncMethod_match_grpc0<WithAsyncMethod_match_grpc1<WithAsyncMethod_getConstKeyframeRetrieval<WithAsyncMethod_getKeyframeRetrieval<WithAsyncMethod_setKeyframeRetrieval<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::addKeyframeRequest, ::grpcIKeyframeRetriever::addKeyframeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::addKeyframeRequest* request, ::grpcIKeyframeRetriever::addKeyframeResponse* response) { return this->addKeyframe(context, request, response); }));}
    void SetMessageAllocatorFor_addKeyframe(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::addKeyframeRequest, ::grpcIKeyframeRetriever::addKeyframeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::addKeyframeRequest, ::grpcIKeyframeRetriever::addKeyframeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::addKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::addKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::addKeyframeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::addKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::addKeyframeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_suppressKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::suppressKeyframeRequest, ::grpcIKeyframeRetriever::suppressKeyframeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* request, ::grpcIKeyframeRetriever::suppressKeyframeResponse* response) { return this->suppressKeyframe(context, request, response); }));}
    void SetMessageAllocatorFor_suppressKeyframe(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::suppressKeyframeRequest, ::grpcIKeyframeRetriever::suppressKeyframeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::suppressKeyframeRequest, ::grpcIKeyframeRetriever::suppressKeyframeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* suppressKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::suppressKeyframeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* suppressKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::suppressKeyframeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_retrieve_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_retrieve_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::retrieve_grpc0Request, ::grpcIKeyframeRetriever::retrieve_grpc0Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* request, ::grpcIKeyframeRetriever::retrieve_grpc0Response* response) { return this->retrieve_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_retrieve_grpc0(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::retrieve_grpc0Request, ::grpcIKeyframeRetriever::retrieve_grpc0Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::retrieve_grpc0Request, ::grpcIKeyframeRetriever::retrieve_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_retrieve_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* retrieve_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc0Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* retrieve_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc0Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_retrieve_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_retrieve_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::retrieve_grpc1Request, ::grpcIKeyframeRetriever::retrieve_grpc1Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* request, ::grpcIKeyframeRetriever::retrieve_grpc1Response* response) { return this->retrieve_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_retrieve_grpc1(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::retrieve_grpc1Request, ::grpcIKeyframeRetriever::retrieve_grpc1Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::retrieve_grpc1Request, ::grpcIKeyframeRetriever::retrieve_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_retrieve_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* retrieve_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc1Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* retrieve_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc1Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_saveToFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::saveToFileRequest, ::grpcIKeyframeRetriever::saveToFileResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::saveToFileRequest* request, ::grpcIKeyframeRetriever::saveToFileResponse* response) { return this->saveToFile(context, request, response); }));}
    void SetMessageAllocatorFor_saveToFile(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::saveToFileRequest, ::grpcIKeyframeRetriever::saveToFileResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::saveToFileRequest, ::grpcIKeyframeRetriever::saveToFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::saveToFileRequest* /*request*/, ::grpcIKeyframeRetriever::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::saveToFileRequest* /*request*/, ::grpcIKeyframeRetriever::saveToFileResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* saveToFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::saveToFileRequest* /*request*/, ::grpcIKeyframeRetriever::saveToFileResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_loadFromFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::loadFromFileRequest, ::grpcIKeyframeRetriever::loadFromFileResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::loadFromFileRequest* request, ::grpcIKeyframeRetriever::loadFromFileResponse* response) { return this->loadFromFile(context, request, response); }));}
    void SetMessageAllocatorFor_loadFromFile(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::loadFromFileRequest, ::grpcIKeyframeRetriever::loadFromFileResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::loadFromFileRequest, ::grpcIKeyframeRetriever::loadFromFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::loadFromFileRequest* /*request*/, ::grpcIKeyframeRetriever::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::loadFromFileRequest* /*request*/, ::grpcIKeyframeRetriever::loadFromFileResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* loadFromFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::loadFromFileRequest* /*request*/, ::grpcIKeyframeRetriever::loadFromFileResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_match_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_match_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::match_grpc0Request, ::grpcIKeyframeRetriever::match_grpc0Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::match_grpc0Request* request, ::grpcIKeyframeRetriever::match_grpc0Response* response) { return this->match_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_match_grpc0(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::match_grpc0Request, ::grpcIKeyframeRetriever::match_grpc0Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::match_grpc0Request, ::grpcIKeyframeRetriever::match_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_match_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* match_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc0Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* match_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc0Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_match_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_match_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::match_grpc1Request, ::grpcIKeyframeRetriever::match_grpc1Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::match_grpc1Request* request, ::grpcIKeyframeRetriever::match_grpc1Response* response) { return this->match_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_match_grpc1(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::match_grpc1Request, ::grpcIKeyframeRetriever::match_grpc1Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::match_grpc1Request, ::grpcIKeyframeRetriever::match_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_match_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* match_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc1Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* match_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc1Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getConstKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getConstKeyframeRetrieval() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* response) { return this->getConstKeyframeRetrieval(context, request, response); }));}
    void SetMessageAllocatorFor_getConstKeyframeRetrieval(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getConstKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getConstKeyframeRetrieval(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getConstKeyframeRetrieval(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getKeyframeRetrieval() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* request, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* response) { return this->getKeyframeRetrieval(context, request, response); }));}
    void SetMessageAllocatorFor_getKeyframeRetrieval(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* /*request*/, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKeyframeRetrieval(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* /*request*/, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKeyframeRetrieval(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* /*request*/, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setKeyframeRetrieval() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* request, ::google::protobuf::Empty* response) { return this->setKeyframeRetrieval(context, request, response); }));}
    void SetMessageAllocatorFor_setKeyframeRetrieval(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setKeyframeRetrieval(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setKeyframeRetrieval(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_addKeyframe<ExperimentalWithCallbackMethod_suppressKeyframe<ExperimentalWithCallbackMethod_retrieve_grpc0<ExperimentalWithCallbackMethod_retrieve_grpc1<ExperimentalWithCallbackMethod_saveToFile<ExperimentalWithCallbackMethod_loadFromFile<ExperimentalWithCallbackMethod_match_grpc0<ExperimentalWithCallbackMethod_match_grpc1<ExperimentalWithCallbackMethod_getConstKeyframeRetrieval<ExperimentalWithCallbackMethod_getKeyframeRetrieval<ExperimentalWithCallbackMethod_setKeyframeRetrieval<Service > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_addKeyframe<ExperimentalWithCallbackMethod_suppressKeyframe<ExperimentalWithCallbackMethod_retrieve_grpc0<ExperimentalWithCallbackMethod_retrieve_grpc1<ExperimentalWithCallbackMethod_saveToFile<ExperimentalWithCallbackMethod_loadFromFile<ExperimentalWithCallbackMethod_match_grpc0<ExperimentalWithCallbackMethod_match_grpc1<ExperimentalWithCallbackMethod_getConstKeyframeRetrieval<ExperimentalWithCallbackMethod_getKeyframeRetrieval<ExperimentalWithCallbackMethod_setKeyframeRetrieval<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addKeyframe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::addKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_suppressKeyframe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_retrieve_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_retrieve_grpc0() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_retrieve_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_retrieve_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_retrieve_grpc1() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_retrieve_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveToFile() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::saveToFileRequest* /*request*/, ::grpcIKeyframeRetriever::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadFromFile() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::loadFromFileRequest* /*request*/, ::grpcIKeyframeRetriever::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_match_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_match_grpc0() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_match_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_match_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_match_grpc1() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_match_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getConstKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getConstKeyframeRetrieval() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getConstKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getKeyframeRetrieval() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* /*request*/, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setKeyframeRetrieval() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_setKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addKeyframe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::addKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddKeyframe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_suppressKeyframe() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsuppressKeyframe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_retrieve_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_retrieve_grpc0() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_retrieve_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestretrieve_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_retrieve_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_retrieve_grpc1() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_retrieve_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestretrieve_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveToFile() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::saveToFileRequest* /*request*/, ::grpcIKeyframeRetriever::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadFromFile() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::loadFromFileRequest* /*request*/, ::grpcIKeyframeRetriever::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_match_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_match_grpc0() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_match_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmatch_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_match_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_match_grpc1() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_match_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmatch_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getConstKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getConstKeyframeRetrieval() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getConstKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConstKeyframeRetrieval(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getKeyframeRetrieval() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* /*request*/, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKeyframeRetrieval(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setKeyframeRetrieval() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_setKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetKeyframeRetrieval(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addKeyframe(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::addKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_suppressKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->suppressKeyframe(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* suppressKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* suppressKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_retrieve_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_retrieve_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->retrieve_grpc0(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_retrieve_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* retrieve_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* retrieve_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_retrieve_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_retrieve_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->retrieve_grpc1(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_retrieve_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status retrieve_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* retrieve_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* retrieve_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_saveToFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveToFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::saveToFileRequest* /*request*/, ::grpcIKeyframeRetriever::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* saveToFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_loadFromFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadFromFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::loadFromFileRequest* /*request*/, ::grpcIKeyframeRetriever::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* loadFromFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_match_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_match_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->match_grpc0(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_match_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* match_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* match_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_match_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_match_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->match_grpc1(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_match_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status match_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* match_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* match_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getConstKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getConstKeyframeRetrieval() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getConstKeyframeRetrieval(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getConstKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getConstKeyframeRetrieval(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getConstKeyframeRetrieval(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getKeyframeRetrieval() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getKeyframeRetrieval(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* /*request*/, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKeyframeRetrieval(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKeyframeRetrieval(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setKeyframeRetrieval() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setKeyframeRetrieval(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setKeyframeRetrieval(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setKeyframeRetrieval(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addKeyframe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::addKeyframeRequest, ::grpcIKeyframeRetriever::addKeyframeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::addKeyframeRequest, ::grpcIKeyframeRetriever::addKeyframeResponse>* streamer) {
                       return this->StreamedaddKeyframe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::addKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::addKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddKeyframe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::addKeyframeRequest,::grpcIKeyframeRetriever::addKeyframeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_suppressKeyframe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::suppressKeyframeRequest, ::grpcIKeyframeRetriever::suppressKeyframeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::suppressKeyframeRequest, ::grpcIKeyframeRetriever::suppressKeyframeResponse>* streamer) {
                       return this->StreamedsuppressKeyframe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::suppressKeyframeRequest* /*request*/, ::grpcIKeyframeRetriever::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsuppressKeyframe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::suppressKeyframeRequest,::grpcIKeyframeRetriever::suppressKeyframeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_retrieve_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_retrieve_grpc0() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::retrieve_grpc0Request, ::grpcIKeyframeRetriever::retrieve_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::retrieve_grpc0Request, ::grpcIKeyframeRetriever::retrieve_grpc0Response>* streamer) {
                       return this->Streamedretrieve_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_retrieve_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status retrieve_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedretrieve_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::retrieve_grpc0Request,::grpcIKeyframeRetriever::retrieve_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_retrieve_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_retrieve_grpc1() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::retrieve_grpc1Request, ::grpcIKeyframeRetriever::retrieve_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::retrieve_grpc1Request, ::grpcIKeyframeRetriever::retrieve_grpc1Response>* streamer) {
                       return this->Streamedretrieve_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_retrieve_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status retrieve_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::retrieve_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::retrieve_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedretrieve_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::retrieve_grpc1Request,::grpcIKeyframeRetriever::retrieve_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveToFile() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::saveToFileRequest, ::grpcIKeyframeRetriever::saveToFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::saveToFileRequest, ::grpcIKeyframeRetriever::saveToFileResponse>* streamer) {
                       return this->StreamedsaveToFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::saveToFileRequest* /*request*/, ::grpcIKeyframeRetriever::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveToFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::saveToFileRequest,::grpcIKeyframeRetriever::saveToFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadFromFile() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::loadFromFileRequest, ::grpcIKeyframeRetriever::loadFromFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::loadFromFileRequest, ::grpcIKeyframeRetriever::loadFromFileResponse>* streamer) {
                       return this->StreamedloadFromFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::loadFromFileRequest* /*request*/, ::grpcIKeyframeRetriever::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadFromFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::loadFromFileRequest,::grpcIKeyframeRetriever::loadFromFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_match_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_match_grpc0() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::match_grpc0Request, ::grpcIKeyframeRetriever::match_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::match_grpc0Request, ::grpcIKeyframeRetriever::match_grpc0Response>* streamer) {
                       return this->Streamedmatch_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_match_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status match_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc0Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmatch_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::match_grpc0Request,::grpcIKeyframeRetriever::match_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_match_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_match_grpc1() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::match_grpc1Request, ::grpcIKeyframeRetriever::match_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::match_grpc1Request, ::grpcIKeyframeRetriever::match_grpc1Response>* streamer) {
                       return this->Streamedmatch_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_match_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status match_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::match_grpc1Request* /*request*/, ::grpcIKeyframeRetriever::match_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmatch_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::match_grpc1Request,::grpcIKeyframeRetriever::match_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getConstKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getConstKeyframeRetrieval() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>* streamer) {
                       return this->StreamedgetConstKeyframeRetrieval(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getConstKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getConstKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetConstKeyframeRetrieval(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIKeyframeRetriever::getConstKeyframeRetrievalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getKeyframeRetrieval() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>* streamer) {
                       return this->StreamedgetKeyframeRetrieval(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest* /*request*/, ::grpcIKeyframeRetriever::getKeyframeRetrievalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetKeyframeRetrieval(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::getKeyframeRetrievalRequest,::grpcIKeyframeRetriever::getKeyframeRetrievalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setKeyframeRetrieval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setKeyframeRetrieval() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetKeyframeRetrieval(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setKeyframeRetrieval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setKeyframeRetrieval(::grpc::ServerContext* /*context*/, const ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetKeyframeRetrieval(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframeRetriever::setKeyframeRetrievalRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addKeyframe<WithStreamedUnaryMethod_suppressKeyframe<WithStreamedUnaryMethod_retrieve_grpc0<WithStreamedUnaryMethod_retrieve_grpc1<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_match_grpc0<WithStreamedUnaryMethod_match_grpc1<WithStreamedUnaryMethod_getConstKeyframeRetrieval<WithStreamedUnaryMethod_getKeyframeRetrieval<WithStreamedUnaryMethod_setKeyframeRetrieval<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_addKeyframe<WithStreamedUnaryMethod_suppressKeyframe<WithStreamedUnaryMethod_retrieve_grpc0<WithStreamedUnaryMethod_retrieve_grpc1<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_match_grpc0<WithStreamedUnaryMethod_match_grpc1<WithStreamedUnaryMethod_getConstKeyframeRetrieval<WithStreamedUnaryMethod_getKeyframeRetrieval<WithStreamedUnaryMethod_setKeyframeRetrieval<Service > > > > > > > > > > > StreamedService;
};

}  // namespace grpcIKeyframeRetriever


#endif  // GRPC_grpcIKeyframeRetrieverService_2eproto__INCLUDED
