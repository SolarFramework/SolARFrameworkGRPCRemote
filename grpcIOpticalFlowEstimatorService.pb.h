// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIOpticalFlowEstimatorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIOpticalFlowEstimatorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIOpticalFlowEstimatorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIOpticalFlowEstimatorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIOpticalFlowEstimatorService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIOpticalFlowEstimatorService_2eproto;
namespace grpcIOpticalFlowEstimator {
class estimate_grpc0Request;
struct estimate_grpc0RequestDefaultTypeInternal;
extern estimate_grpc0RequestDefaultTypeInternal _estimate_grpc0Request_default_instance_;
class estimate_grpc0Response;
struct estimate_grpc0ResponseDefaultTypeInternal;
extern estimate_grpc0ResponseDefaultTypeInternal _estimate_grpc0Response_default_instance_;
class estimate_grpc1Request;
struct estimate_grpc1RequestDefaultTypeInternal;
extern estimate_grpc1RequestDefaultTypeInternal _estimate_grpc1Request_default_instance_;
class estimate_grpc1Response;
struct estimate_grpc1ResponseDefaultTypeInternal;
extern estimate_grpc1ResponseDefaultTypeInternal _estimate_grpc1Response_default_instance_;
}  // namespace grpcIOpticalFlowEstimator
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIOpticalFlowEstimator::estimate_grpc0Request* Arena::CreateMaybeMessage<::grpcIOpticalFlowEstimator::estimate_grpc0Request>(Arena*);
template<> ::grpcIOpticalFlowEstimator::estimate_grpc0Response* Arena::CreateMaybeMessage<::grpcIOpticalFlowEstimator::estimate_grpc0Response>(Arena*);
template<> ::grpcIOpticalFlowEstimator::estimate_grpc1Request* Arena::CreateMaybeMessage<::grpcIOpticalFlowEstimator::estimate_grpc1Request>(Arena*);
template<> ::grpcIOpticalFlowEstimator::estimate_grpc1Response* Arena::CreateMaybeMessage<::grpcIOpticalFlowEstimator::estimate_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIOpticalFlowEstimator {

// ===================================================================

class estimate_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOpticalFlowEstimator.estimate_grpc0Request) */ {
 public:
  inline estimate_grpc0Request() : estimate_grpc0Request(nullptr) {}
  ~estimate_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR estimate_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc0Request(const estimate_grpc0Request& from);
  estimate_grpc0Request(estimate_grpc0Request&& from) noexcept
    : estimate_grpc0Request() {
    *this = ::std::move(from);
  }

  inline estimate_grpc0Request& operator=(const estimate_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc0Request& operator=(estimate_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimate_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc0Request*>(
               &_estimate_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(estimate_grpc0Request& a, estimate_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimate_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimate_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimate_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const estimate_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOpticalFlowEstimator.estimate_grpc0Request";
  }
  protected:
  explicit estimate_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousImageFieldNumber = 2,
    kCurrentImageFieldNumber = 3,
    kPointsToTrackFieldNumber = 4,
    kTrackedPointsFieldNumber = 5,
    kStatusFieldNumber = 6,
    kErrorFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes previousImage = 2;
  void clear_previousimage();
  const std::string& previousimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previousimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previousimage();
  PROTOBUF_NODISCARD std::string* release_previousimage();
  void set_allocated_previousimage(std::string* previousimage);
  private:
  const std::string& _internal_previousimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previousimage(const std::string& value);
  std::string* _internal_mutable_previousimage();
  public:

  // bytes currentImage = 3;
  void clear_currentimage();
  const std::string& currentimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currentimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currentimage();
  PROTOBUF_NODISCARD std::string* release_currentimage();
  void set_allocated_currentimage(std::string* currentimage);
  private:
  const std::string& _internal_currentimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentimage(const std::string& value);
  std::string* _internal_mutable_currentimage();
  public:

  // bytes pointsToTrack = 4;
  void clear_pointstotrack();
  const std::string& pointstotrack() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointstotrack(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointstotrack();
  PROTOBUF_NODISCARD std::string* release_pointstotrack();
  void set_allocated_pointstotrack(std::string* pointstotrack);
  private:
  const std::string& _internal_pointstotrack() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointstotrack(const std::string& value);
  std::string* _internal_mutable_pointstotrack();
  public:

  // bytes trackedPoints = 5;
  void clear_trackedpoints();
  const std::string& trackedpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackedpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackedpoints();
  PROTOBUF_NODISCARD std::string* release_trackedpoints();
  void set_allocated_trackedpoints(std::string* trackedpoints);
  private:
  const std::string& _internal_trackedpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackedpoints(const std::string& value);
  std::string* _internal_mutable_trackedpoints();
  public:

  // bytes status = 6;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes error = 7;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOpticalFlowEstimator.estimate_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previousimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointstotrack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackedpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOpticalFlowEstimatorService_2eproto;
};
// -------------------------------------------------------------------

class estimate_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOpticalFlowEstimator.estimate_grpc0Response) */ {
 public:
  inline estimate_grpc0Response() : estimate_grpc0Response(nullptr) {}
  ~estimate_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR estimate_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc0Response(const estimate_grpc0Response& from);
  estimate_grpc0Response(estimate_grpc0Response&& from) noexcept
    : estimate_grpc0Response() {
    *this = ::std::move(from);
  }

  inline estimate_grpc0Response& operator=(const estimate_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc0Response& operator=(estimate_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimate_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc0Response*>(
               &_estimate_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(estimate_grpc0Response& a, estimate_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimate_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimate_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimate_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const estimate_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOpticalFlowEstimator.estimate_grpc0Response";
  }
  protected:
  explicit estimate_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedPointsFieldNumber = 1,
    kStatusFieldNumber = 2,
    kErrorFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes trackedPoints = 1;
  void clear_trackedpoints();
  const std::string& trackedpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackedpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackedpoints();
  PROTOBUF_NODISCARD std::string* release_trackedpoints();
  void set_allocated_trackedpoints(std::string* trackedpoints);
  private:
  const std::string& _internal_trackedpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackedpoints(const std::string& value);
  std::string* _internal_mutable_trackedpoints();
  public:

  // bytes status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes error = 3;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOpticalFlowEstimator.estimate_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackedpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOpticalFlowEstimatorService_2eproto;
};
// -------------------------------------------------------------------

class estimate_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOpticalFlowEstimator.estimate_grpc1Request) */ {
 public:
  inline estimate_grpc1Request() : estimate_grpc1Request(nullptr) {}
  ~estimate_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR estimate_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc1Request(const estimate_grpc1Request& from);
  estimate_grpc1Request(estimate_grpc1Request&& from) noexcept
    : estimate_grpc1Request() {
    *this = ::std::move(from);
  }

  inline estimate_grpc1Request& operator=(const estimate_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc1Request& operator=(estimate_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimate_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc1Request*>(
               &_estimate_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(estimate_grpc1Request& a, estimate_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimate_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimate_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimate_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const estimate_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOpticalFlowEstimator.estimate_grpc1Request";
  }
  protected:
  explicit estimate_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousImageFieldNumber = 2,
    kCurrentImageFieldNumber = 3,
    kPointsToTrackFieldNumber = 4,
    kTrackedPointsFieldNumber = 5,
    kStatusFieldNumber = 6,
    kErrorFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes previousImage = 2;
  void clear_previousimage();
  const std::string& previousimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previousimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previousimage();
  PROTOBUF_NODISCARD std::string* release_previousimage();
  void set_allocated_previousimage(std::string* previousimage);
  private:
  const std::string& _internal_previousimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previousimage(const std::string& value);
  std::string* _internal_mutable_previousimage();
  public:

  // bytes currentImage = 3;
  void clear_currentimage();
  const std::string& currentimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currentimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currentimage();
  PROTOBUF_NODISCARD std::string* release_currentimage();
  void set_allocated_currentimage(std::string* currentimage);
  private:
  const std::string& _internal_currentimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentimage(const std::string& value);
  std::string* _internal_mutable_currentimage();
  public:

  // bytes pointsToTrack = 4;
  void clear_pointstotrack();
  const std::string& pointstotrack() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointstotrack(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointstotrack();
  PROTOBUF_NODISCARD std::string* release_pointstotrack();
  void set_allocated_pointstotrack(std::string* pointstotrack);
  private:
  const std::string& _internal_pointstotrack() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointstotrack(const std::string& value);
  std::string* _internal_mutable_pointstotrack();
  public:

  // bytes trackedPoints = 5;
  void clear_trackedpoints();
  const std::string& trackedpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackedpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackedpoints();
  PROTOBUF_NODISCARD std::string* release_trackedpoints();
  void set_allocated_trackedpoints(std::string* trackedpoints);
  private:
  const std::string& _internal_trackedpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackedpoints(const std::string& value);
  std::string* _internal_mutable_trackedpoints();
  public:

  // bytes status = 6;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes error = 7;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOpticalFlowEstimator.estimate_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previousimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointstotrack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackedpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOpticalFlowEstimatorService_2eproto;
};
// -------------------------------------------------------------------

class estimate_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOpticalFlowEstimator.estimate_grpc1Response) */ {
 public:
  inline estimate_grpc1Response() : estimate_grpc1Response(nullptr) {}
  ~estimate_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR estimate_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc1Response(const estimate_grpc1Response& from);
  estimate_grpc1Response(estimate_grpc1Response&& from) noexcept
    : estimate_grpc1Response() {
    *this = ::std::move(from);
  }

  inline estimate_grpc1Response& operator=(const estimate_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc1Response& operator=(estimate_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimate_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc1Response*>(
               &_estimate_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(estimate_grpc1Response& a, estimate_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimate_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimate_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimate_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const estimate_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOpticalFlowEstimator.estimate_grpc1Response";
  }
  protected:
  explicit estimate_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedPointsFieldNumber = 1,
    kStatusFieldNumber = 2,
    kErrorFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes trackedPoints = 1;
  void clear_trackedpoints();
  const std::string& trackedpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackedpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackedpoints();
  PROTOBUF_NODISCARD std::string* release_trackedpoints();
  void set_allocated_trackedpoints(std::string* trackedpoints);
  private:
  const std::string& _internal_trackedpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackedpoints(const std::string& value);
  std::string* _internal_mutable_trackedpoints();
  public:

  // bytes status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes error = 3;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOpticalFlowEstimator.estimate_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackedpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOpticalFlowEstimatorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// estimate_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void estimate_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t estimate_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t estimate_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void estimate_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void estimate_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.grpcServerCompressionFormat)
}

// bytes previousImage = 2;
inline void estimate_grpc0Request::clear_previousimage() {
  previousimage_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::previousimage() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
  return _internal_previousimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_previousimage(ArgT0&& arg0, ArgT... args) {
 
 previousimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
}
inline std::string* estimate_grpc0Request::mutable_previousimage() {
  std::string* _s = _internal_mutable_previousimage();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_previousimage() const {
  return previousimage_.Get();
}
inline void estimate_grpc0Request::_internal_set_previousimage(const std::string& value) {
  
  previousimage_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_previousimage() {
  
  return previousimage_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_previousimage() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
  return previousimage_.Release();
}
inline void estimate_grpc0Request::set_allocated_previousimage(std::string* previousimage) {
  if (previousimage != nullptr) {
    
  } else {
    
  }
  previousimage_.SetAllocated(previousimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (previousimage_.IsDefault()) {
    previousimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
}

// bytes currentImage = 3;
inline void estimate_grpc0Request::clear_currentimage() {
  currentimage_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::currentimage() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
  return _internal_currentimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_currentimage(ArgT0&& arg0, ArgT... args) {
 
 currentimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
}
inline std::string* estimate_grpc0Request::mutable_currentimage() {
  std::string* _s = _internal_mutable_currentimage();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_currentimage() const {
  return currentimage_.Get();
}
inline void estimate_grpc0Request::_internal_set_currentimage(const std::string& value) {
  
  currentimage_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_currentimage() {
  
  return currentimage_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_currentimage() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
  return currentimage_.Release();
}
inline void estimate_grpc0Request::set_allocated_currentimage(std::string* currentimage) {
  if (currentimage != nullptr) {
    
  } else {
    
  }
  currentimage_.SetAllocated(currentimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currentimage_.IsDefault()) {
    currentimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
}

// bytes pointsToTrack = 4;
inline void estimate_grpc0Request::clear_pointstotrack() {
  pointstotrack_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::pointstotrack() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
  return _internal_pointstotrack();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_pointstotrack(ArgT0&& arg0, ArgT... args) {
 
 pointstotrack_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
}
inline std::string* estimate_grpc0Request::mutable_pointstotrack() {
  std::string* _s = _internal_mutable_pointstotrack();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_pointstotrack() const {
  return pointstotrack_.Get();
}
inline void estimate_grpc0Request::_internal_set_pointstotrack(const std::string& value) {
  
  pointstotrack_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_pointstotrack() {
  
  return pointstotrack_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_pointstotrack() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
  return pointstotrack_.Release();
}
inline void estimate_grpc0Request::set_allocated_pointstotrack(std::string* pointstotrack) {
  if (pointstotrack != nullptr) {
    
  } else {
    
  }
  pointstotrack_.SetAllocated(pointstotrack, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pointstotrack_.IsDefault()) {
    pointstotrack_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
}

// bytes trackedPoints = 5;
inline void estimate_grpc0Request::clear_trackedpoints() {
  trackedpoints_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::trackedpoints() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
  return _internal_trackedpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_trackedpoints(ArgT0&& arg0, ArgT... args) {
 
 trackedpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
}
inline std::string* estimate_grpc0Request::mutable_trackedpoints() {
  std::string* _s = _internal_mutable_trackedpoints();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_trackedpoints() const {
  return trackedpoints_.Get();
}
inline void estimate_grpc0Request::_internal_set_trackedpoints(const std::string& value) {
  
  trackedpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_trackedpoints() {
  
  return trackedpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_trackedpoints() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
  return trackedpoints_.Release();
}
inline void estimate_grpc0Request::set_allocated_trackedpoints(std::string* trackedpoints) {
  if (trackedpoints != nullptr) {
    
  } else {
    
  }
  trackedpoints_.SetAllocated(trackedpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trackedpoints_.IsDefault()) {
    trackedpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
}

// bytes status = 6;
inline void estimate_grpc0Request::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
}
inline std::string* estimate_grpc0Request::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_status() const {
  return status_.Get();
}
inline void estimate_grpc0Request::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
  return status_.Release();
}
inline void estimate_grpc0Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
}

// bytes error = 7;
inline void estimate_grpc0Request::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::error() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
}
inline std::string* estimate_grpc0Request::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_error() const {
  return error_.Get();
}
inline void estimate_grpc0Request::_internal_set_error(const std::string& value) {
  
  error_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_error() {
  
  return error_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_error() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
  return error_.Release();
}
inline void estimate_grpc0Request::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault()) {
    error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
}

// -------------------------------------------------------------------

// estimate_grpc0Response

// bytes trackedPoints = 1;
inline void estimate_grpc0Response::clear_trackedpoints() {
  trackedpoints_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Response::trackedpoints() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
  return _internal_trackedpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Response::set_trackedpoints(ArgT0&& arg0, ArgT... args) {
 
 trackedpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
}
inline std::string* estimate_grpc0Response::mutable_trackedpoints() {
  std::string* _s = _internal_mutable_trackedpoints();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
  return _s;
}
inline const std::string& estimate_grpc0Response::_internal_trackedpoints() const {
  return trackedpoints_.Get();
}
inline void estimate_grpc0Response::_internal_set_trackedpoints(const std::string& value) {
  
  trackedpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::_internal_mutable_trackedpoints() {
  
  return trackedpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::release_trackedpoints() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
  return trackedpoints_.Release();
}
inline void estimate_grpc0Response::set_allocated_trackedpoints(std::string* trackedpoints) {
  if (trackedpoints != nullptr) {
    
  } else {
    
  }
  trackedpoints_.SetAllocated(trackedpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trackedpoints_.IsDefault()) {
    trackedpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
}

// bytes status = 2;
inline void estimate_grpc0Response::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Response::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
}
inline std::string* estimate_grpc0Response::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
  return _s;
}
inline const std::string& estimate_grpc0Response::_internal_status() const {
  return status_.Get();
}
inline void estimate_grpc0Response::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
  return status_.Release();
}
inline void estimate_grpc0Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
}

// bytes error = 3;
inline void estimate_grpc0Response::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Response::error() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Response::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
}
inline std::string* estimate_grpc0Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
  return _s;
}
inline const std::string& estimate_grpc0Response::_internal_error() const {
  return error_.Get();
}
inline void estimate_grpc0Response::_internal_set_error(const std::string& value) {
  
  error_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::_internal_mutable_error() {
  
  return error_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::release_error() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
  return error_.Release();
}
inline void estimate_grpc0Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault()) {
    error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void estimate_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t estimate_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t estimate_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void estimate_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void estimate_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// estimate_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void estimate_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t estimate_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t estimate_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void estimate_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void estimate_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.grpcServerCompressionFormat)
}

// bytes previousImage = 2;
inline void estimate_grpc1Request::clear_previousimage() {
  previousimage_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::previousimage() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
  return _internal_previousimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_previousimage(ArgT0&& arg0, ArgT... args) {
 
 previousimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
}
inline std::string* estimate_grpc1Request::mutable_previousimage() {
  std::string* _s = _internal_mutable_previousimage();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_previousimage() const {
  return previousimage_.Get();
}
inline void estimate_grpc1Request::_internal_set_previousimage(const std::string& value) {
  
  previousimage_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_previousimage() {
  
  return previousimage_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_previousimage() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
  return previousimage_.Release();
}
inline void estimate_grpc1Request::set_allocated_previousimage(std::string* previousimage) {
  if (previousimage != nullptr) {
    
  } else {
    
  }
  previousimage_.SetAllocated(previousimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (previousimage_.IsDefault()) {
    previousimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
}

// bytes currentImage = 3;
inline void estimate_grpc1Request::clear_currentimage() {
  currentimage_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::currentimage() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
  return _internal_currentimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_currentimage(ArgT0&& arg0, ArgT... args) {
 
 currentimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
}
inline std::string* estimate_grpc1Request::mutable_currentimage() {
  std::string* _s = _internal_mutable_currentimage();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_currentimage() const {
  return currentimage_.Get();
}
inline void estimate_grpc1Request::_internal_set_currentimage(const std::string& value) {
  
  currentimage_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_currentimage() {
  
  return currentimage_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_currentimage() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
  return currentimage_.Release();
}
inline void estimate_grpc1Request::set_allocated_currentimage(std::string* currentimage) {
  if (currentimage != nullptr) {
    
  } else {
    
  }
  currentimage_.SetAllocated(currentimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (currentimage_.IsDefault()) {
    currentimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
}

// bytes pointsToTrack = 4;
inline void estimate_grpc1Request::clear_pointstotrack() {
  pointstotrack_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::pointstotrack() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
  return _internal_pointstotrack();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_pointstotrack(ArgT0&& arg0, ArgT... args) {
 
 pointstotrack_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
}
inline std::string* estimate_grpc1Request::mutable_pointstotrack() {
  std::string* _s = _internal_mutable_pointstotrack();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_pointstotrack() const {
  return pointstotrack_.Get();
}
inline void estimate_grpc1Request::_internal_set_pointstotrack(const std::string& value) {
  
  pointstotrack_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_pointstotrack() {
  
  return pointstotrack_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_pointstotrack() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
  return pointstotrack_.Release();
}
inline void estimate_grpc1Request::set_allocated_pointstotrack(std::string* pointstotrack) {
  if (pointstotrack != nullptr) {
    
  } else {
    
  }
  pointstotrack_.SetAllocated(pointstotrack, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pointstotrack_.IsDefault()) {
    pointstotrack_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
}

// bytes trackedPoints = 5;
inline void estimate_grpc1Request::clear_trackedpoints() {
  trackedpoints_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::trackedpoints() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
  return _internal_trackedpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_trackedpoints(ArgT0&& arg0, ArgT... args) {
 
 trackedpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
}
inline std::string* estimate_grpc1Request::mutable_trackedpoints() {
  std::string* _s = _internal_mutable_trackedpoints();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_trackedpoints() const {
  return trackedpoints_.Get();
}
inline void estimate_grpc1Request::_internal_set_trackedpoints(const std::string& value) {
  
  trackedpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_trackedpoints() {
  
  return trackedpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_trackedpoints() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
  return trackedpoints_.Release();
}
inline void estimate_grpc1Request::set_allocated_trackedpoints(std::string* trackedpoints) {
  if (trackedpoints != nullptr) {
    
  } else {
    
  }
  trackedpoints_.SetAllocated(trackedpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trackedpoints_.IsDefault()) {
    trackedpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
}

// bytes status = 6;
inline void estimate_grpc1Request::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
}
inline std::string* estimate_grpc1Request::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_status() const {
  return status_.Get();
}
inline void estimate_grpc1Request::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
  return status_.Release();
}
inline void estimate_grpc1Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
}

// bytes error = 7;
inline void estimate_grpc1Request::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::error() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
}
inline std::string* estimate_grpc1Request::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_error() const {
  return error_.Get();
}
inline void estimate_grpc1Request::_internal_set_error(const std::string& value) {
  
  error_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_error() {
  
  return error_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_error() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
  return error_.Release();
}
inline void estimate_grpc1Request::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault()) {
    error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
}

// -------------------------------------------------------------------

// estimate_grpc1Response

// bytes trackedPoints = 1;
inline void estimate_grpc1Response::clear_trackedpoints() {
  trackedpoints_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Response::trackedpoints() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
  return _internal_trackedpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Response::set_trackedpoints(ArgT0&& arg0, ArgT... args) {
 
 trackedpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
}
inline std::string* estimate_grpc1Response::mutable_trackedpoints() {
  std::string* _s = _internal_mutable_trackedpoints();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
  return _s;
}
inline const std::string& estimate_grpc1Response::_internal_trackedpoints() const {
  return trackedpoints_.Get();
}
inline void estimate_grpc1Response::_internal_set_trackedpoints(const std::string& value) {
  
  trackedpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::_internal_mutable_trackedpoints() {
  
  return trackedpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::release_trackedpoints() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
  return trackedpoints_.Release();
}
inline void estimate_grpc1Response::set_allocated_trackedpoints(std::string* trackedpoints) {
  if (trackedpoints != nullptr) {
    
  } else {
    
  }
  trackedpoints_.SetAllocated(trackedpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trackedpoints_.IsDefault()) {
    trackedpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
}

// bytes status = 2;
inline void estimate_grpc1Response::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Response::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
}
inline std::string* estimate_grpc1Response::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
  return _s;
}
inline const std::string& estimate_grpc1Response::_internal_status() const {
  return status_.Get();
}
inline void estimate_grpc1Response::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
  return status_.Release();
}
inline void estimate_grpc1Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
}

// bytes error = 3;
inline void estimate_grpc1Response::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Response::error() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Response::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
}
inline std::string* estimate_grpc1Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
  return _s;
}
inline const std::string& estimate_grpc1Response::_internal_error() const {
  return error_.Get();
}
inline void estimate_grpc1Response::_internal_set_error(const std::string& value) {
  
  error_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::_internal_mutable_error() {
  
  return error_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::release_error() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
  return error_.Release();
}
inline void estimate_grpc1Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault()) {
    error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void estimate_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t estimate_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t estimate_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void estimate_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void estimate_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIOpticalFlowEstimator

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIOpticalFlowEstimatorService_2eproto
