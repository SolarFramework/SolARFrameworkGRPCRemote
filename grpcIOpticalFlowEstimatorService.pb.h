// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIOpticalFlowEstimatorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIOpticalFlowEstimatorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIOpticalFlowEstimatorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIOpticalFlowEstimatorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIOpticalFlowEstimatorService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIOpticalFlowEstimatorService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_metadata_getter(int index);
namespace grpcIOpticalFlowEstimator {
class estimate_grpc0Request;
struct estimate_grpc0RequestDefaultTypeInternal;
extern estimate_grpc0RequestDefaultTypeInternal _estimate_grpc0Request_default_instance_;
class estimate_grpc0Response;
struct estimate_grpc0ResponseDefaultTypeInternal;
extern estimate_grpc0ResponseDefaultTypeInternal _estimate_grpc0Response_default_instance_;
class estimate_grpc1Request;
struct estimate_grpc1RequestDefaultTypeInternal;
extern estimate_grpc1RequestDefaultTypeInternal _estimate_grpc1Request_default_instance_;
class estimate_grpc1Response;
struct estimate_grpc1ResponseDefaultTypeInternal;
extern estimate_grpc1ResponseDefaultTypeInternal _estimate_grpc1Response_default_instance_;
}  // namespace grpcIOpticalFlowEstimator
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIOpticalFlowEstimator::estimate_grpc0Request* Arena::CreateMaybeMessage<::grpcIOpticalFlowEstimator::estimate_grpc0Request>(Arena*);
template<> ::grpcIOpticalFlowEstimator::estimate_grpc0Response* Arena::CreateMaybeMessage<::grpcIOpticalFlowEstimator::estimate_grpc0Response>(Arena*);
template<> ::grpcIOpticalFlowEstimator::estimate_grpc1Request* Arena::CreateMaybeMessage<::grpcIOpticalFlowEstimator::estimate_grpc1Request>(Arena*);
template<> ::grpcIOpticalFlowEstimator::estimate_grpc1Response* Arena::CreateMaybeMessage<::grpcIOpticalFlowEstimator::estimate_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIOpticalFlowEstimator {

// ===================================================================

class estimate_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOpticalFlowEstimator.estimate_grpc0Request) */ {
 public:
  inline estimate_grpc0Request() : estimate_grpc0Request(nullptr) {}
  virtual ~estimate_grpc0Request();
  explicit constexpr estimate_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc0Request(const estimate_grpc0Request& from);
  estimate_grpc0Request(estimate_grpc0Request&& from) noexcept
    : estimate_grpc0Request() {
    *this = ::std::move(from);
  }

  inline estimate_grpc0Request& operator=(const estimate_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc0Request& operator=(estimate_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const estimate_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc0Request*>(
               &_estimate_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(estimate_grpc0Request& a, estimate_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline estimate_grpc0Request* New() const final {
    return CreateMaybeMessage<estimate_grpc0Request>(nullptr);
  }

  estimate_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<estimate_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const estimate_grpc0Request& from);
  void MergeFrom(const estimate_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOpticalFlowEstimator.estimate_grpc0Request";
  }
  protected:
  explicit estimate_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousImageFieldNumber = 1,
    kCurrentImageFieldNumber = 2,
    kPointsToTrackFieldNumber = 3,
    kTrackedPointsFieldNumber = 4,
    kStatusFieldNumber = 5,
    kErrorFieldNumber = 6,
  };
  // bytes previousImage = 1;
  void clear_previousimage();
  const std::string& previousimage() const;
  void set_previousimage(const std::string& value);
  void set_previousimage(std::string&& value);
  void set_previousimage(const char* value);
  void set_previousimage(const void* value, size_t size);
  std::string* mutable_previousimage();
  std::string* release_previousimage();
  void set_allocated_previousimage(std::string* previousimage);
  private:
  const std::string& _internal_previousimage() const;
  void _internal_set_previousimage(const std::string& value);
  std::string* _internal_mutable_previousimage();
  public:

  // bytes currentImage = 2;
  void clear_currentimage();
  const std::string& currentimage() const;
  void set_currentimage(const std::string& value);
  void set_currentimage(std::string&& value);
  void set_currentimage(const char* value);
  void set_currentimage(const void* value, size_t size);
  std::string* mutable_currentimage();
  std::string* release_currentimage();
  void set_allocated_currentimage(std::string* currentimage);
  private:
  const std::string& _internal_currentimage() const;
  void _internal_set_currentimage(const std::string& value);
  std::string* _internal_mutable_currentimage();
  public:

  // bytes pointsToTrack = 3;
  void clear_pointstotrack();
  const std::string& pointstotrack() const;
  void set_pointstotrack(const std::string& value);
  void set_pointstotrack(std::string&& value);
  void set_pointstotrack(const char* value);
  void set_pointstotrack(const void* value, size_t size);
  std::string* mutable_pointstotrack();
  std::string* release_pointstotrack();
  void set_allocated_pointstotrack(std::string* pointstotrack);
  private:
  const std::string& _internal_pointstotrack() const;
  void _internal_set_pointstotrack(const std::string& value);
  std::string* _internal_mutable_pointstotrack();
  public:

  // bytes trackedPoints = 4;
  void clear_trackedpoints();
  const std::string& trackedpoints() const;
  void set_trackedpoints(const std::string& value);
  void set_trackedpoints(std::string&& value);
  void set_trackedpoints(const char* value);
  void set_trackedpoints(const void* value, size_t size);
  std::string* mutable_trackedpoints();
  std::string* release_trackedpoints();
  void set_allocated_trackedpoints(std::string* trackedpoints);
  private:
  const std::string& _internal_trackedpoints() const;
  void _internal_set_trackedpoints(const std::string& value);
  std::string* _internal_mutable_trackedpoints();
  public:

  // bytes status = 5;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes error = 6;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const void* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:grpcIOpticalFlowEstimator.estimate_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previousimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointstotrack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackedpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOpticalFlowEstimatorService_2eproto;
};
// -------------------------------------------------------------------

class estimate_grpc0Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOpticalFlowEstimator.estimate_grpc0Response) */ {
 public:
  inline estimate_grpc0Response() : estimate_grpc0Response(nullptr) {}
  virtual ~estimate_grpc0Response();
  explicit constexpr estimate_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc0Response(const estimate_grpc0Response& from);
  estimate_grpc0Response(estimate_grpc0Response&& from) noexcept
    : estimate_grpc0Response() {
    *this = ::std::move(from);
  }

  inline estimate_grpc0Response& operator=(const estimate_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc0Response& operator=(estimate_grpc0Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const estimate_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc0Response*>(
               &_estimate_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(estimate_grpc0Response& a, estimate_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc0Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline estimate_grpc0Response* New() const final {
    return CreateMaybeMessage<estimate_grpc0Response>(nullptr);
  }

  estimate_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<estimate_grpc0Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const estimate_grpc0Response& from);
  void MergeFrom(const estimate_grpc0Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOpticalFlowEstimator.estimate_grpc0Response";
  }
  protected:
  explicit estimate_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedPointsFieldNumber = 1,
    kStatusFieldNumber = 2,
    kErrorFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes trackedPoints = 1;
  void clear_trackedpoints();
  const std::string& trackedpoints() const;
  void set_trackedpoints(const std::string& value);
  void set_trackedpoints(std::string&& value);
  void set_trackedpoints(const char* value);
  void set_trackedpoints(const void* value, size_t size);
  std::string* mutable_trackedpoints();
  std::string* release_trackedpoints();
  void set_allocated_trackedpoints(std::string* trackedpoints);
  private:
  const std::string& _internal_trackedpoints() const;
  void _internal_set_trackedpoints(const std::string& value);
  std::string* _internal_mutable_trackedpoints();
  public:

  // bytes status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes error = 3;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const void* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOpticalFlowEstimator.estimate_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackedpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOpticalFlowEstimatorService_2eproto;
};
// -------------------------------------------------------------------

class estimate_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOpticalFlowEstimator.estimate_grpc1Request) */ {
 public:
  inline estimate_grpc1Request() : estimate_grpc1Request(nullptr) {}
  virtual ~estimate_grpc1Request();
  explicit constexpr estimate_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc1Request(const estimate_grpc1Request& from);
  estimate_grpc1Request(estimate_grpc1Request&& from) noexcept
    : estimate_grpc1Request() {
    *this = ::std::move(from);
  }

  inline estimate_grpc1Request& operator=(const estimate_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc1Request& operator=(estimate_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const estimate_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc1Request*>(
               &_estimate_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(estimate_grpc1Request& a, estimate_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline estimate_grpc1Request* New() const final {
    return CreateMaybeMessage<estimate_grpc1Request>(nullptr);
  }

  estimate_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<estimate_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const estimate_grpc1Request& from);
  void MergeFrom(const estimate_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOpticalFlowEstimator.estimate_grpc1Request";
  }
  protected:
  explicit estimate_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreviousImageFieldNumber = 1,
    kCurrentImageFieldNumber = 2,
    kPointsToTrackFieldNumber = 3,
    kTrackedPointsFieldNumber = 4,
    kStatusFieldNumber = 5,
    kErrorFieldNumber = 6,
  };
  // bytes previousImage = 1;
  void clear_previousimage();
  const std::string& previousimage() const;
  void set_previousimage(const std::string& value);
  void set_previousimage(std::string&& value);
  void set_previousimage(const char* value);
  void set_previousimage(const void* value, size_t size);
  std::string* mutable_previousimage();
  std::string* release_previousimage();
  void set_allocated_previousimage(std::string* previousimage);
  private:
  const std::string& _internal_previousimage() const;
  void _internal_set_previousimage(const std::string& value);
  std::string* _internal_mutable_previousimage();
  public:

  // bytes currentImage = 2;
  void clear_currentimage();
  const std::string& currentimage() const;
  void set_currentimage(const std::string& value);
  void set_currentimage(std::string&& value);
  void set_currentimage(const char* value);
  void set_currentimage(const void* value, size_t size);
  std::string* mutable_currentimage();
  std::string* release_currentimage();
  void set_allocated_currentimage(std::string* currentimage);
  private:
  const std::string& _internal_currentimage() const;
  void _internal_set_currentimage(const std::string& value);
  std::string* _internal_mutable_currentimage();
  public:

  // bytes pointsToTrack = 3;
  void clear_pointstotrack();
  const std::string& pointstotrack() const;
  void set_pointstotrack(const std::string& value);
  void set_pointstotrack(std::string&& value);
  void set_pointstotrack(const char* value);
  void set_pointstotrack(const void* value, size_t size);
  std::string* mutable_pointstotrack();
  std::string* release_pointstotrack();
  void set_allocated_pointstotrack(std::string* pointstotrack);
  private:
  const std::string& _internal_pointstotrack() const;
  void _internal_set_pointstotrack(const std::string& value);
  std::string* _internal_mutable_pointstotrack();
  public:

  // bytes trackedPoints = 4;
  void clear_trackedpoints();
  const std::string& trackedpoints() const;
  void set_trackedpoints(const std::string& value);
  void set_trackedpoints(std::string&& value);
  void set_trackedpoints(const char* value);
  void set_trackedpoints(const void* value, size_t size);
  std::string* mutable_trackedpoints();
  std::string* release_trackedpoints();
  void set_allocated_trackedpoints(std::string* trackedpoints);
  private:
  const std::string& _internal_trackedpoints() const;
  void _internal_set_trackedpoints(const std::string& value);
  std::string* _internal_mutable_trackedpoints();
  public:

  // bytes status = 5;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes error = 6;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const void* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:grpcIOpticalFlowEstimator.estimate_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previousimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointstotrack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackedpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOpticalFlowEstimatorService_2eproto;
};
// -------------------------------------------------------------------

class estimate_grpc1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIOpticalFlowEstimator.estimate_grpc1Response) */ {
 public:
  inline estimate_grpc1Response() : estimate_grpc1Response(nullptr) {}
  virtual ~estimate_grpc1Response();
  explicit constexpr estimate_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc1Response(const estimate_grpc1Response& from);
  estimate_grpc1Response(estimate_grpc1Response&& from) noexcept
    : estimate_grpc1Response() {
    *this = ::std::move(from);
  }

  inline estimate_grpc1Response& operator=(const estimate_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc1Response& operator=(estimate_grpc1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const estimate_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc1Response*>(
               &_estimate_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(estimate_grpc1Response& a, estimate_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline estimate_grpc1Response* New() const final {
    return CreateMaybeMessage<estimate_grpc1Response>(nullptr);
  }

  estimate_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<estimate_grpc1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const estimate_grpc1Response& from);
  void MergeFrom(const estimate_grpc1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIOpticalFlowEstimator.estimate_grpc1Response";
  }
  protected:
  explicit estimate_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIOpticalFlowEstimatorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackedPointsFieldNumber = 1,
    kStatusFieldNumber = 2,
    kErrorFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes trackedPoints = 1;
  void clear_trackedpoints();
  const std::string& trackedpoints() const;
  void set_trackedpoints(const std::string& value);
  void set_trackedpoints(std::string&& value);
  void set_trackedpoints(const char* value);
  void set_trackedpoints(const void* value, size_t size);
  std::string* mutable_trackedpoints();
  std::string* release_trackedpoints();
  void set_allocated_trackedpoints(std::string* trackedpoints);
  private:
  const std::string& _internal_trackedpoints() const;
  void _internal_set_trackedpoints(const std::string& value);
  std::string* _internal_mutable_trackedpoints();
  public:

  // bytes status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // bytes error = 3;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const void* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIOpticalFlowEstimator.estimate_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackedpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIOpticalFlowEstimatorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// estimate_grpc0Request

// bytes previousImage = 1;
inline void estimate_grpc0Request::clear_previousimage() {
  previousimage_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::previousimage() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
  return _internal_previousimage();
}
inline void estimate_grpc0Request::set_previousimage(const std::string& value) {
  _internal_set_previousimage(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
}
inline std::string* estimate_grpc0Request::mutable_previousimage() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
  return _internal_mutable_previousimage();
}
inline const std::string& estimate_grpc0Request::_internal_previousimage() const {
  return previousimage_.Get();
}
inline void estimate_grpc0Request::_internal_set_previousimage(const std::string& value) {
  
  previousimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc0Request::set_previousimage(std::string&& value) {
  
  previousimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
}
inline void estimate_grpc0Request::set_previousimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previousimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
}
inline void estimate_grpc0Request::set_previousimage(const void* value,
    size_t size) {
  
  previousimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
}
inline std::string* estimate_grpc0Request::_internal_mutable_previousimage() {
  
  return previousimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc0Request::release_previousimage() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
  return previousimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc0Request::set_allocated_previousimage(std::string* previousimage) {
  if (previousimage != nullptr) {
    
  } else {
    
  }
  previousimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previousimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.previousImage)
}

// bytes currentImage = 2;
inline void estimate_grpc0Request::clear_currentimage() {
  currentimage_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::currentimage() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
  return _internal_currentimage();
}
inline void estimate_grpc0Request::set_currentimage(const std::string& value) {
  _internal_set_currentimage(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
}
inline std::string* estimate_grpc0Request::mutable_currentimage() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
  return _internal_mutable_currentimage();
}
inline const std::string& estimate_grpc0Request::_internal_currentimage() const {
  return currentimage_.Get();
}
inline void estimate_grpc0Request::_internal_set_currentimage(const std::string& value) {
  
  currentimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc0Request::set_currentimage(std::string&& value) {
  
  currentimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
}
inline void estimate_grpc0Request::set_currentimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currentimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
}
inline void estimate_grpc0Request::set_currentimage(const void* value,
    size_t size) {
  
  currentimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
}
inline std::string* estimate_grpc0Request::_internal_mutable_currentimage() {
  
  return currentimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc0Request::release_currentimage() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
  return currentimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc0Request::set_allocated_currentimage(std::string* currentimage) {
  if (currentimage != nullptr) {
    
  } else {
    
  }
  currentimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.currentImage)
}

// bytes pointsToTrack = 3;
inline void estimate_grpc0Request::clear_pointstotrack() {
  pointstotrack_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::pointstotrack() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
  return _internal_pointstotrack();
}
inline void estimate_grpc0Request::set_pointstotrack(const std::string& value) {
  _internal_set_pointstotrack(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
}
inline std::string* estimate_grpc0Request::mutable_pointstotrack() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
  return _internal_mutable_pointstotrack();
}
inline const std::string& estimate_grpc0Request::_internal_pointstotrack() const {
  return pointstotrack_.Get();
}
inline void estimate_grpc0Request::_internal_set_pointstotrack(const std::string& value) {
  
  pointstotrack_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc0Request::set_pointstotrack(std::string&& value) {
  
  pointstotrack_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
}
inline void estimate_grpc0Request::set_pointstotrack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pointstotrack_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
}
inline void estimate_grpc0Request::set_pointstotrack(const void* value,
    size_t size) {
  
  pointstotrack_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
}
inline std::string* estimate_grpc0Request::_internal_mutable_pointstotrack() {
  
  return pointstotrack_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc0Request::release_pointstotrack() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
  return pointstotrack_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc0Request::set_allocated_pointstotrack(std::string* pointstotrack) {
  if (pointstotrack != nullptr) {
    
  } else {
    
  }
  pointstotrack_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pointstotrack,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.pointsToTrack)
}

// bytes trackedPoints = 4;
inline void estimate_grpc0Request::clear_trackedpoints() {
  trackedpoints_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::trackedpoints() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
  return _internal_trackedpoints();
}
inline void estimate_grpc0Request::set_trackedpoints(const std::string& value) {
  _internal_set_trackedpoints(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
}
inline std::string* estimate_grpc0Request::mutable_trackedpoints() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
  return _internal_mutable_trackedpoints();
}
inline const std::string& estimate_grpc0Request::_internal_trackedpoints() const {
  return trackedpoints_.Get();
}
inline void estimate_grpc0Request::_internal_set_trackedpoints(const std::string& value) {
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc0Request::set_trackedpoints(std::string&& value) {
  
  trackedpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
}
inline void estimate_grpc0Request::set_trackedpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
}
inline void estimate_grpc0Request::set_trackedpoints(const void* value,
    size_t size) {
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
}
inline std::string* estimate_grpc0Request::_internal_mutable_trackedpoints() {
  
  return trackedpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc0Request::release_trackedpoints() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
  return trackedpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc0Request::set_allocated_trackedpoints(std::string* trackedpoints) {
  if (trackedpoints != nullptr) {
    
  } else {
    
  }
  trackedpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trackedpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.trackedPoints)
}

// bytes status = 5;
inline void estimate_grpc0Request::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
  return _internal_status();
}
inline void estimate_grpc0Request::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
}
inline std::string* estimate_grpc0Request::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
  return _internal_mutable_status();
}
inline const std::string& estimate_grpc0Request::_internal_status() const {
  return status_.Get();
}
inline void estimate_grpc0Request::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc0Request::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
}
inline void estimate_grpc0Request::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
}
inline void estimate_grpc0Request::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
}
inline std::string* estimate_grpc0Request::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc0Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc0Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.status)
}

// bytes error = 6;
inline void estimate_grpc0Request::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::error() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
  return _internal_error();
}
inline void estimate_grpc0Request::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
}
inline std::string* estimate_grpc0Request::mutable_error() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
  return _internal_mutable_error();
}
inline const std::string& estimate_grpc0Request::_internal_error() const {
  return error_.Get();
}
inline void estimate_grpc0Request::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc0Request::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
}
inline void estimate_grpc0Request::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
}
inline void estimate_grpc0Request::set_error(const void* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
}
inline std::string* estimate_grpc0Request::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc0Request::release_error() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc0Request::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Request.error)
}

// -------------------------------------------------------------------

// estimate_grpc0Response

// bytes trackedPoints = 1;
inline void estimate_grpc0Response::clear_trackedpoints() {
  trackedpoints_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Response::trackedpoints() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
  return _internal_trackedpoints();
}
inline void estimate_grpc0Response::set_trackedpoints(const std::string& value) {
  _internal_set_trackedpoints(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
}
inline std::string* estimate_grpc0Response::mutable_trackedpoints() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
  return _internal_mutable_trackedpoints();
}
inline const std::string& estimate_grpc0Response::_internal_trackedpoints() const {
  return trackedpoints_.Get();
}
inline void estimate_grpc0Response::_internal_set_trackedpoints(const std::string& value) {
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc0Response::set_trackedpoints(std::string&& value) {
  
  trackedpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
}
inline void estimate_grpc0Response::set_trackedpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
}
inline void estimate_grpc0Response::set_trackedpoints(const void* value,
    size_t size) {
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
}
inline std::string* estimate_grpc0Response::_internal_mutable_trackedpoints() {
  
  return trackedpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc0Response::release_trackedpoints() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
  return trackedpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc0Response::set_allocated_trackedpoints(std::string* trackedpoints) {
  if (trackedpoints != nullptr) {
    
  } else {
    
  }
  trackedpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trackedpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Response.trackedPoints)
}

// bytes status = 2;
inline void estimate_grpc0Response::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
  return _internal_status();
}
inline void estimate_grpc0Response::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
}
inline std::string* estimate_grpc0Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
  return _internal_mutable_status();
}
inline const std::string& estimate_grpc0Response::_internal_status() const {
  return status_.Get();
}
inline void estimate_grpc0Response::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc0Response::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
}
inline void estimate_grpc0Response::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
}
inline void estimate_grpc0Response::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
}
inline std::string* estimate_grpc0Response::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc0Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc0Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Response.status)
}

// bytes error = 3;
inline void estimate_grpc0Response::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Response::error() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
  return _internal_error();
}
inline void estimate_grpc0Response::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
}
inline std::string* estimate_grpc0Response::mutable_error() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
  return _internal_mutable_error();
}
inline const std::string& estimate_grpc0Response::_internal_error() const {
  return error_.Get();
}
inline void estimate_grpc0Response::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc0Response::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
}
inline void estimate_grpc0Response::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
}
inline void estimate_grpc0Response::set_error(const void* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
}
inline std::string* estimate_grpc0Response::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc0Response::release_error() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc0Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc0Response.error)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void estimate_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 estimate_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 estimate_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void estimate_grpc0Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void estimate_grpc0Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// estimate_grpc1Request

// bytes previousImage = 1;
inline void estimate_grpc1Request::clear_previousimage() {
  previousimage_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::previousimage() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
  return _internal_previousimage();
}
inline void estimate_grpc1Request::set_previousimage(const std::string& value) {
  _internal_set_previousimage(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
}
inline std::string* estimate_grpc1Request::mutable_previousimage() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
  return _internal_mutable_previousimage();
}
inline const std::string& estimate_grpc1Request::_internal_previousimage() const {
  return previousimage_.Get();
}
inline void estimate_grpc1Request::_internal_set_previousimage(const std::string& value) {
  
  previousimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc1Request::set_previousimage(std::string&& value) {
  
  previousimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
}
inline void estimate_grpc1Request::set_previousimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  previousimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
}
inline void estimate_grpc1Request::set_previousimage(const void* value,
    size_t size) {
  
  previousimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
}
inline std::string* estimate_grpc1Request::_internal_mutable_previousimage() {
  
  return previousimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc1Request::release_previousimage() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
  return previousimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc1Request::set_allocated_previousimage(std::string* previousimage) {
  if (previousimage != nullptr) {
    
  } else {
    
  }
  previousimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previousimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.previousImage)
}

// bytes currentImage = 2;
inline void estimate_grpc1Request::clear_currentimage() {
  currentimage_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::currentimage() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
  return _internal_currentimage();
}
inline void estimate_grpc1Request::set_currentimage(const std::string& value) {
  _internal_set_currentimage(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
}
inline std::string* estimate_grpc1Request::mutable_currentimage() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
  return _internal_mutable_currentimage();
}
inline const std::string& estimate_grpc1Request::_internal_currentimage() const {
  return currentimage_.Get();
}
inline void estimate_grpc1Request::_internal_set_currentimage(const std::string& value) {
  
  currentimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc1Request::set_currentimage(std::string&& value) {
  
  currentimage_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
}
inline void estimate_grpc1Request::set_currentimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currentimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
}
inline void estimate_grpc1Request::set_currentimage(const void* value,
    size_t size) {
  
  currentimage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
}
inline std::string* estimate_grpc1Request::_internal_mutable_currentimage() {
  
  return currentimage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc1Request::release_currentimage() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
  return currentimage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc1Request::set_allocated_currentimage(std::string* currentimage) {
  if (currentimage != nullptr) {
    
  } else {
    
  }
  currentimage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currentimage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.currentImage)
}

// bytes pointsToTrack = 3;
inline void estimate_grpc1Request::clear_pointstotrack() {
  pointstotrack_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::pointstotrack() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
  return _internal_pointstotrack();
}
inline void estimate_grpc1Request::set_pointstotrack(const std::string& value) {
  _internal_set_pointstotrack(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
}
inline std::string* estimate_grpc1Request::mutable_pointstotrack() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
  return _internal_mutable_pointstotrack();
}
inline const std::string& estimate_grpc1Request::_internal_pointstotrack() const {
  return pointstotrack_.Get();
}
inline void estimate_grpc1Request::_internal_set_pointstotrack(const std::string& value) {
  
  pointstotrack_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc1Request::set_pointstotrack(std::string&& value) {
  
  pointstotrack_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
}
inline void estimate_grpc1Request::set_pointstotrack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pointstotrack_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
}
inline void estimate_grpc1Request::set_pointstotrack(const void* value,
    size_t size) {
  
  pointstotrack_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
}
inline std::string* estimate_grpc1Request::_internal_mutable_pointstotrack() {
  
  return pointstotrack_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc1Request::release_pointstotrack() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
  return pointstotrack_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc1Request::set_allocated_pointstotrack(std::string* pointstotrack) {
  if (pointstotrack != nullptr) {
    
  } else {
    
  }
  pointstotrack_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pointstotrack,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.pointsToTrack)
}

// bytes trackedPoints = 4;
inline void estimate_grpc1Request::clear_trackedpoints() {
  trackedpoints_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::trackedpoints() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
  return _internal_trackedpoints();
}
inline void estimate_grpc1Request::set_trackedpoints(const std::string& value) {
  _internal_set_trackedpoints(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
}
inline std::string* estimate_grpc1Request::mutable_trackedpoints() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
  return _internal_mutable_trackedpoints();
}
inline const std::string& estimate_grpc1Request::_internal_trackedpoints() const {
  return trackedpoints_.Get();
}
inline void estimate_grpc1Request::_internal_set_trackedpoints(const std::string& value) {
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc1Request::set_trackedpoints(std::string&& value) {
  
  trackedpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
}
inline void estimate_grpc1Request::set_trackedpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
}
inline void estimate_grpc1Request::set_trackedpoints(const void* value,
    size_t size) {
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
}
inline std::string* estimate_grpc1Request::_internal_mutable_trackedpoints() {
  
  return trackedpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc1Request::release_trackedpoints() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
  return trackedpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc1Request::set_allocated_trackedpoints(std::string* trackedpoints) {
  if (trackedpoints != nullptr) {
    
  } else {
    
  }
  trackedpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trackedpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.trackedPoints)
}

// bytes status = 5;
inline void estimate_grpc1Request::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
  return _internal_status();
}
inline void estimate_grpc1Request::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
}
inline std::string* estimate_grpc1Request::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
  return _internal_mutable_status();
}
inline const std::string& estimate_grpc1Request::_internal_status() const {
  return status_.Get();
}
inline void estimate_grpc1Request::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc1Request::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
}
inline void estimate_grpc1Request::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
}
inline void estimate_grpc1Request::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
}
inline std::string* estimate_grpc1Request::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc1Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc1Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.status)
}

// bytes error = 6;
inline void estimate_grpc1Request::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::error() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
  return _internal_error();
}
inline void estimate_grpc1Request::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
}
inline std::string* estimate_grpc1Request::mutable_error() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
  return _internal_mutable_error();
}
inline const std::string& estimate_grpc1Request::_internal_error() const {
  return error_.Get();
}
inline void estimate_grpc1Request::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc1Request::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
}
inline void estimate_grpc1Request::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
}
inline void estimate_grpc1Request::set_error(const void* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
}
inline std::string* estimate_grpc1Request::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc1Request::release_error() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc1Request::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Request.error)
}

// -------------------------------------------------------------------

// estimate_grpc1Response

// bytes trackedPoints = 1;
inline void estimate_grpc1Response::clear_trackedpoints() {
  trackedpoints_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Response::trackedpoints() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
  return _internal_trackedpoints();
}
inline void estimate_grpc1Response::set_trackedpoints(const std::string& value) {
  _internal_set_trackedpoints(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
}
inline std::string* estimate_grpc1Response::mutable_trackedpoints() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
  return _internal_mutable_trackedpoints();
}
inline const std::string& estimate_grpc1Response::_internal_trackedpoints() const {
  return trackedpoints_.Get();
}
inline void estimate_grpc1Response::_internal_set_trackedpoints(const std::string& value) {
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc1Response::set_trackedpoints(std::string&& value) {
  
  trackedpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
}
inline void estimate_grpc1Response::set_trackedpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
}
inline void estimate_grpc1Response::set_trackedpoints(const void* value,
    size_t size) {
  
  trackedpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
}
inline std::string* estimate_grpc1Response::_internal_mutable_trackedpoints() {
  
  return trackedpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc1Response::release_trackedpoints() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
  return trackedpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc1Response::set_allocated_trackedpoints(std::string* trackedpoints) {
  if (trackedpoints != nullptr) {
    
  } else {
    
  }
  trackedpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trackedpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Response.trackedPoints)
}

// bytes status = 2;
inline void estimate_grpc1Response::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
  return _internal_status();
}
inline void estimate_grpc1Response::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
}
inline std::string* estimate_grpc1Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
  return _internal_mutable_status();
}
inline const std::string& estimate_grpc1Response::_internal_status() const {
  return status_.Get();
}
inline void estimate_grpc1Response::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc1Response::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
}
inline void estimate_grpc1Response::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
}
inline void estimate_grpc1Response::set_status(const void* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
}
inline std::string* estimate_grpc1Response::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc1Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc1Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Response.status)
}

// bytes error = 3;
inline void estimate_grpc1Response::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Response::error() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
  return _internal_error();
}
inline void estimate_grpc1Response::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
}
inline std::string* estimate_grpc1Response::mutable_error() {
  // @@protoc_insertion_point(field_mutable:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
  return _internal_mutable_error();
}
inline const std::string& estimate_grpc1Response::_internal_error() const {
  return error_.Get();
}
inline void estimate_grpc1Response::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void estimate_grpc1Response::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
}
inline void estimate_grpc1Response::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
}
inline void estimate_grpc1Response::set_error(const void* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
}
inline std::string* estimate_grpc1Response::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* estimate_grpc1Response::release_error() {
  // @@protoc_insertion_point(field_release:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void estimate_grpc1Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIOpticalFlowEstimator.estimate_grpc1Response.error)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void estimate_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 estimate_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 estimate_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIOpticalFlowEstimator.estimate_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void estimate_grpc1Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void estimate_grpc1Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIOpticalFlowEstimator.estimate_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIOpticalFlowEstimator

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIOpticalFlowEstimatorService_2eproto
