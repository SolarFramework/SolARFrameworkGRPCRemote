// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIImageMatcherService.proto

#include "grpcIImageMatcherService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpcIImageMatcher {
constexpr matchRequest::matchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , descriptors1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , descriptors2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keypoints1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keypoints2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , matches_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct matchRequestDefaultTypeInternal {
  constexpr matchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~matchRequestDefaultTypeInternal() {}
  union {
    matchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT matchRequestDefaultTypeInternal _matchRequest_default_instance_;
constexpr matchResponse::matchResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keypoints1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keypoints2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , matches_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xpcfgrpcreturnvalue_(0){}
struct matchResponseDefaultTypeInternal {
  constexpr matchResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~matchResponseDefaultTypeInternal() {}
  union {
    matchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT matchResponseDefaultTypeInternal _matchResponse_default_instance_;
}  // namespace grpcIImageMatcher
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpcIImageMatcherService_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpcIImageMatcherService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpcIImageMatcherService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpcIImageMatcherService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, image1_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, image2_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, descriptors1_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, descriptors2_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, keypoints1_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, keypoints2_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, keypoints1_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, keypoints2_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, matches_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, xpcfgrpcreturnvalue_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpcIImageMatcher::matchRequest)},
  { 12, -1, sizeof(::grpcIImageMatcher::matchResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIImageMatcher::_matchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIImageMatcher::_matchResponse_default_instance_),
};

const char descriptor_table_protodef_grpcIImageMatcherService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036grpcIImageMatcherService.proto\022\021grpcII"
  "mageMatcher\032\033google/protobuf/empty.proto"
  "\"\223\001\n\014matchRequest\022\016\n\006image1\030\001 \001(\014\022\016\n\006ima"
  "ge2\030\002 \001(\014\022\024\n\014descriptors1\030\003 \001(\014\022\024\n\014descr"
  "iptors2\030\004 \001(\014\022\022\n\nkeypoints1\030\005 \001(\014\022\022\n\nkey"
  "points2\030\006 \001(\014\022\017\n\007matches\030\007 \001(\014\"e\n\rmatchR"
  "esponse\022\022\n\nkeypoints1\030\001 \001(\014\022\022\n\nkeypoints"
  "2\030\002 \001(\014\022\017\n\007matches\030\003 \001(\014\022\033\n\023xpcfGrpcRetu"
  "rnValue\030\004 \001(\0212h\n\030grpcIImageMatcherServic"
  "e\022L\n\005match\022\037.grpcIImageMatcher.matchRequ"
  "est\032 .grpcIImageMatcher.matchResponse\"\000b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpcIImageMatcherService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpcIImageMatcherService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIImageMatcherService_2eproto = {
  false, false, 447, descriptor_table_protodef_grpcIImageMatcherService_2eproto, "grpcIImageMatcherService.proto", 
  &descriptor_table_grpcIImageMatcherService_2eproto_once, descriptor_table_grpcIImageMatcherService_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_grpcIImageMatcherService_2eproto::offsets,
  file_level_metadata_grpcIImageMatcherService_2eproto, file_level_enum_descriptors_grpcIImageMatcherService_2eproto, file_level_service_descriptors_grpcIImageMatcherService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_grpcIImageMatcherService_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grpcIImageMatcherService_2eproto);
  return descriptor_table_grpcIImageMatcherService_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_grpcIImageMatcherService_2eproto(&descriptor_table_grpcIImageMatcherService_2eproto);
namespace grpcIImageMatcher {

// ===================================================================

class matchRequest::_Internal {
 public:
};

matchRequest::matchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIImageMatcher.matchRequest)
}
matchRequest::matchRequest(const matchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image1().empty()) {
    image1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image1(), 
      GetArena());
  }
  image2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image2().empty()) {
    image2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image2(), 
      GetArena());
  }
  descriptors1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_descriptors1().empty()) {
    descriptors1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_descriptors1(), 
      GetArena());
  }
  descriptors2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_descriptors2().empty()) {
    descriptors2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_descriptors2(), 
      GetArena());
  }
  keypoints1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keypoints1().empty()) {
    keypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keypoints1(), 
      GetArena());
  }
  keypoints2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keypoints2().empty()) {
    keypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keypoints2(), 
      GetArena());
  }
  matches_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matches().empty()) {
    matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_matches(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:grpcIImageMatcher.matchRequest)
}

void matchRequest::SharedCtor() {
image1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
descriptors1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
descriptors2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
keypoints1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
keypoints2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
matches_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

matchRequest::~matchRequest() {
  // @@protoc_insertion_point(destructor:grpcIImageMatcher.matchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void matchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descriptors1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  descriptors2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keypoints1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keypoints2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matches_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void matchRequest::ArenaDtor(void* object) {
  matchRequest* _this = reinterpret_cast< matchRequest* >(object);
  (void)_this;
}
void matchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void matchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void matchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageMatcher.matchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image1_.ClearToEmpty();
  image2_.ClearToEmpty();
  descriptors1_.ClearToEmpty();
  descriptors2_.ClearToEmpty();
  keypoints1_.ClearToEmpty();
  keypoints2_.ClearToEmpty();
  matches_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* matchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes image1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes descriptors1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_descriptors1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes descriptors2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_descriptors2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes keypoints1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_keypoints1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes keypoints2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_keypoints2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes matches = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_matches();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* matchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageMatcher.matchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image1 = 1;
  if (this->image1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image1(), target);
  }

  // bytes image2 = 2;
  if (this->image2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image2(), target);
  }

  // bytes descriptors1 = 3;
  if (this->descriptors1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_descriptors1(), target);
  }

  // bytes descriptors2 = 4;
  if (this->descriptors2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_descriptors2(), target);
  }

  // bytes keypoints1 = 5;
  if (this->keypoints1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_keypoints1(), target);
  }

  // bytes keypoints2 = 6;
  if (this->keypoints2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_keypoints2(), target);
  }

  // bytes matches = 7;
  if (this->matches().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_matches(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageMatcher.matchRequest)
  return target;
}

size_t matchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageMatcher.matchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image1 = 1;
  if (this->image1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image1());
  }

  // bytes image2 = 2;
  if (this->image2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image2());
  }

  // bytes descriptors1 = 3;
  if (this->descriptors1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_descriptors1());
  }

  // bytes descriptors2 = 4;
  if (this->descriptors2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_descriptors2());
  }

  // bytes keypoints1 = 5;
  if (this->keypoints1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints1());
  }

  // bytes keypoints2 = 6;
  if (this->keypoints2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints2());
  }

  // bytes matches = 7;
  if (this->matches().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIImageMatcher.matchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const matchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<matchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIImageMatcher.matchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIImageMatcher.matchRequest)
    MergeFrom(*source);
  }
}

void matchRequest::MergeFrom(const matchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageMatcher.matchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image1().size() > 0) {
    _internal_set_image1(from._internal_image1());
  }
  if (from.image2().size() > 0) {
    _internal_set_image2(from._internal_image2());
  }
  if (from.descriptors1().size() > 0) {
    _internal_set_descriptors1(from._internal_descriptors1());
  }
  if (from.descriptors2().size() > 0) {
    _internal_set_descriptors2(from._internal_descriptors2());
  }
  if (from.keypoints1().size() > 0) {
    _internal_set_keypoints1(from._internal_keypoints1());
  }
  if (from.keypoints2().size() > 0) {
    _internal_set_keypoints2(from._internal_keypoints2());
  }
  if (from.matches().size() > 0) {
    _internal_set_matches(from._internal_matches());
  }
}

void matchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIImageMatcher.matchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matchRequest::CopyFrom(const matchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageMatcher.matchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matchRequest::IsInitialized() const {
  return true;
}

void matchRequest::InternalSwap(matchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image1_.Swap(&other->image1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image2_.Swap(&other->image2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descriptors1_.Swap(&other->descriptors1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  descriptors2_.Swap(&other->descriptors2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  keypoints1_.Swap(&other->keypoints1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  keypoints2_.Swap(&other->keypoints2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  matches_.Swap(&other->matches_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata matchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class matchResponse::_Internal {
 public:
};

matchResponse::matchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:grpcIImageMatcher.matchResponse)
}
matchResponse::matchResponse(const matchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keypoints1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keypoints1().empty()) {
    keypoints1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keypoints1(), 
      GetArena());
  }
  keypoints2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keypoints2().empty()) {
    keypoints2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keypoints2(), 
      GetArena());
  }
  matches_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_matches().empty()) {
    matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_matches(), 
      GetArena());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageMatcher.matchResponse)
}

void matchResponse::SharedCtor() {
keypoints1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
keypoints2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
matches_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
xpcfgrpcreturnvalue_ = 0;
}

matchResponse::~matchResponse() {
  // @@protoc_insertion_point(destructor:grpcIImageMatcher.matchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void matchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  keypoints1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keypoints2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  matches_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void matchResponse::ArenaDtor(void* object) {
  matchResponse* _this = reinterpret_cast< matchResponse* >(object);
  (void)_this;
}
void matchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void matchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void matchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageMatcher.matchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoints1_.ClearToEmpty();
  keypoints2_.ClearToEmpty();
  matches_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* matchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes keypoints1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_keypoints1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes keypoints2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_keypoints2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes matches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_matches();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* matchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageMatcher.matchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes keypoints1 = 1;
  if (this->keypoints1().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_keypoints1(), target);
  }

  // bytes keypoints2 = 2;
  if (this->keypoints2().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_keypoints2(), target);
  }

  // bytes matches = 3;
  if (this->matches().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_matches(), target);
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageMatcher.matchResponse)
  return target;
}

size_t matchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageMatcher.matchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes keypoints1 = 1;
  if (this->keypoints1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints1());
  }

  // bytes keypoints2 = 2;
  if (this->keypoints2().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints2());
  }

  // bytes matches = 3;
  if (this->matches().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void matchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grpcIImageMatcher.matchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const matchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<matchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grpcIImageMatcher.matchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grpcIImageMatcher.matchResponse)
    MergeFrom(*source);
  }
}

void matchResponse::MergeFrom(const matchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageMatcher.matchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keypoints1().size() > 0) {
    _internal_set_keypoints1(from._internal_keypoints1());
  }
  if (from.keypoints2().size() > 0) {
    _internal_set_keypoints2(from._internal_keypoints2());
  }
  if (from.matches().size() > 0) {
    _internal_set_matches(from._internal_matches());
  }
  if (from.xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
}

void matchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grpcIImageMatcher.matchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matchResponse::CopyFrom(const matchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageMatcher.matchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matchResponse::IsInitialized() const {
  return true;
}

void matchResponse::InternalSwap(matchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keypoints1_.Swap(&other->keypoints1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  keypoints2_.Swap(&other->keypoints2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  matches_.Swap(&other->matches_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata matchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIImageMatcher
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIImageMatcher::matchRequest* Arena::CreateMaybeMessage< ::grpcIImageMatcher::matchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageMatcher::matchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageMatcher::matchResponse* Arena::CreateMaybeMessage< ::grpcIImageMatcher::matchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageMatcher::matchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
