// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIImageMatcherService.proto

#include "grpcIImageMatcherService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIImageMatcher {
PROTOBUF_CONSTEXPR matchRequest::matchRequest(
    ::_pbi::ConstantInitialized)
  : image1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , descriptors1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , descriptors2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , keypoints1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , keypoints2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , matches_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct matchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR matchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~matchRequestDefaultTypeInternal() {}
  union {
    matchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 matchRequestDefaultTypeInternal _matchRequest_default_instance_;
PROTOBUF_CONSTEXPR matchResponse::matchResponse(
    ::_pbi::ConstantInitialized)
  : keypoints1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , keypoints2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , matches_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct matchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR matchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~matchResponseDefaultTypeInternal() {}
  union {
    matchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 matchResponseDefaultTypeInternal _matchResponse_default_instance_;
}  // namespace grpcIImageMatcher
static ::_pb::Metadata file_level_metadata_grpcIImageMatcherService_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIImageMatcherService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIImageMatcherService_2eproto = nullptr;

const uint32_t TableStruct_grpcIImageMatcherService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, image1_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, image2_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, descriptors1_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, descriptors2_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, keypoints1_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, keypoints2_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchRequest, matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, keypoints1_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, keypoints2_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, matches_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageMatcher::matchResponse, xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIImageMatcher::matchRequest)},
  { 14, -1, -1, sizeof(::grpcIImageMatcher::matchResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIImageMatcher::_matchRequest_default_instance_._instance,
  &::grpcIImageMatcher::_matchResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIImageMatcherService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036grpcIImageMatcherService.proto\022\021grpcII"
  "mageMatcher\032\033google/protobuf/empty.proto"
  "\"\270\001\n\014matchRequest\022#\n\033grpcServerCompressi"
  "onFormat\030\001 \001(\005\022\016\n\006image1\030\002 \001(\014\022\016\n\006image2"
  "\030\003 \001(\014\022\024\n\014descriptors1\030\004 \001(\014\022\024\n\014descript"
  "ors2\030\005 \001(\014\022\022\n\nkeypoints1\030\006 \001(\014\022\022\n\nkeypoi"
  "nts2\030\007 \001(\014\022\017\n\007matches\030\010 \001(\014\"e\n\rmatchResp"
  "onse\022\022\n\nkeypoints1\030\001 \001(\014\022\022\n\nkeypoints2\030\002"
  " \001(\014\022\017\n\007matches\030\003 \001(\014\022\033\n\023xpcfGrpcReturnV"
  "alue\030\004 \001(\0212h\n\030grpcIImageMatcherService\022L"
  "\n\005match\022\037.grpcIImageMatcher.matchRequest"
  "\032 .grpcIImageMatcher.matchResponse\"\000b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIImageMatcherService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIImageMatcherService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIImageMatcherService_2eproto = {
    false, false, 484, descriptor_table_protodef_grpcIImageMatcherService_2eproto,
    "grpcIImageMatcherService.proto",
    &descriptor_table_grpcIImageMatcherService_2eproto_once, descriptor_table_grpcIImageMatcherService_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_grpcIImageMatcherService_2eproto::offsets,
    file_level_metadata_grpcIImageMatcherService_2eproto, file_level_enum_descriptors_grpcIImageMatcherService_2eproto,
    file_level_service_descriptors_grpcIImageMatcherService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIImageMatcherService_2eproto_getter() {
  return &descriptor_table_grpcIImageMatcherService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIImageMatcherService_2eproto(&descriptor_table_grpcIImageMatcherService_2eproto);
namespace grpcIImageMatcher {

// ===================================================================

class matchRequest::_Internal {
 public:
};

matchRequest::matchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageMatcher.matchRequest)
}
matchRequest::matchRequest(const matchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image1().empty()) {
    image1_.Set(from._internal_image1(), 
      GetArenaForAllocation());
  }
  image2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image2().empty()) {
    image2_.Set(from._internal_image2(), 
      GetArenaForAllocation());
  }
  descriptors1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    descriptors1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_descriptors1().empty()) {
    descriptors1_.Set(from._internal_descriptors1(), 
      GetArenaForAllocation());
  }
  descriptors2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    descriptors2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_descriptors2().empty()) {
    descriptors2_.Set(from._internal_descriptors2(), 
      GetArenaForAllocation());
  }
  keypoints1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keypoints1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keypoints1().empty()) {
    keypoints1_.Set(from._internal_keypoints1(), 
      GetArenaForAllocation());
  }
  keypoints2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keypoints2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keypoints2().empty()) {
    keypoints2_.Set(from._internal_keypoints2(), 
      GetArenaForAllocation());
  }
  matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    matches_.Set(from._internal_matches(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageMatcher.matchRequest)
}

inline void matchRequest::SharedCtor() {
image1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
descriptors1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  descriptors1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
descriptors2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  descriptors2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
keypoints1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keypoints1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
keypoints2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keypoints2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
matches_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  matches_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

matchRequest::~matchRequest() {
  // @@protoc_insertion_point(destructor:grpcIImageMatcher.matchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void matchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image1_.Destroy();
  image2_.Destroy();
  descriptors1_.Destroy();
  descriptors2_.Destroy();
  keypoints1_.Destroy();
  keypoints2_.Destroy();
  matches_.Destroy();
}

void matchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void matchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageMatcher.matchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image1_.ClearToEmpty();
  image2_.ClearToEmpty();
  descriptors1_.ClearToEmpty();
  descriptors2_.ClearToEmpty();
  keypoints1_.ClearToEmpty();
  keypoints2_.ClearToEmpty();
  matches_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* matchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_image2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes descriptors1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_descriptors1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes descriptors2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_descriptors2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keypoints1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_keypoints1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keypoints2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_keypoints2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes matches = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* matchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageMatcher.matchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes image1 = 2;
  if (!this->_internal_image1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image1(), target);
  }

  // bytes image2 = 3;
  if (!this->_internal_image2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_image2(), target);
  }

  // bytes descriptors1 = 4;
  if (!this->_internal_descriptors1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_descriptors1(), target);
  }

  // bytes descriptors2 = 5;
  if (!this->_internal_descriptors2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_descriptors2(), target);
  }

  // bytes keypoints1 = 6;
  if (!this->_internal_keypoints1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_keypoints1(), target);
  }

  // bytes keypoints2 = 7;
  if (!this->_internal_keypoints2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_keypoints2(), target);
  }

  // bytes matches = 8;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_matches(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageMatcher.matchRequest)
  return target;
}

size_t matchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageMatcher.matchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image1 = 2;
  if (!this->_internal_image1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image1());
  }

  // bytes image2 = 3;
  if (!this->_internal_image2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image2());
  }

  // bytes descriptors1 = 4;
  if (!this->_internal_descriptors1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_descriptors1());
  }

  // bytes descriptors2 = 5;
  if (!this->_internal_descriptors2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_descriptors2());
  }

  // bytes keypoints1 = 6;
  if (!this->_internal_keypoints1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints1());
  }

  // bytes keypoints2 = 7;
  if (!this->_internal_keypoints2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints2());
  }

  // bytes matches = 8;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData matchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    matchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*matchRequest::GetClassData() const { return &_class_data_; }

void matchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<matchRequest *>(to)->MergeFrom(
      static_cast<const matchRequest &>(from));
}


void matchRequest::MergeFrom(const matchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageMatcher.matchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image1().empty()) {
    _internal_set_image1(from._internal_image1());
  }
  if (!from._internal_image2().empty()) {
    _internal_set_image2(from._internal_image2());
  }
  if (!from._internal_descriptors1().empty()) {
    _internal_set_descriptors1(from._internal_descriptors1());
  }
  if (!from._internal_descriptors2().empty()) {
    _internal_set_descriptors2(from._internal_descriptors2());
  }
  if (!from._internal_keypoints1().empty()) {
    _internal_set_keypoints1(from._internal_keypoints1());
  }
  if (!from._internal_keypoints2().empty()) {
    _internal_set_keypoints2(from._internal_keypoints2());
  }
  if (!from._internal_matches().empty()) {
    _internal_set_matches(from._internal_matches());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void matchRequest::CopyFrom(const matchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageMatcher.matchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matchRequest::IsInitialized() const {
  return true;
}

void matchRequest::InternalSwap(matchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image1_, lhs_arena,
      &other->image1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image2_, lhs_arena,
      &other->image2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &descriptors1_, lhs_arena,
      &other->descriptors1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &descriptors2_, lhs_arena,
      &other->descriptors2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &keypoints1_, lhs_arena,
      &other->keypoints1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &keypoints2_, lhs_arena,
      &other->keypoints2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &matches_, lhs_arena,
      &other->matches_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata matchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageMatcherService_2eproto_getter, &descriptor_table_grpcIImageMatcherService_2eproto_once,
      file_level_metadata_grpcIImageMatcherService_2eproto[0]);
}

// ===================================================================

class matchResponse::_Internal {
 public:
};

matchResponse::matchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageMatcher.matchResponse)
}
matchResponse::matchResponse(const matchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keypoints1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keypoints1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keypoints1().empty()) {
    keypoints1_.Set(from._internal_keypoints1(), 
      GetArenaForAllocation());
  }
  keypoints2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keypoints2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keypoints2().empty()) {
    keypoints2_.Set(from._internal_keypoints2(), 
      GetArenaForAllocation());
  }
  matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    matches_.Set(from._internal_matches(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageMatcher.matchResponse)
}

inline void matchResponse::SharedCtor() {
keypoints1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keypoints1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
keypoints2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keypoints2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
matches_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  matches_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

matchResponse::~matchResponse() {
  // @@protoc_insertion_point(destructor:grpcIImageMatcher.matchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void matchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  keypoints1_.Destroy();
  keypoints2_.Destroy();
  matches_.Destroy();
}

void matchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void matchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageMatcher.matchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoints1_.ClearToEmpty();
  keypoints2_.ClearToEmpty();
  matches_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* matchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes keypoints1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_keypoints1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keypoints2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_keypoints2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes matches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* matchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageMatcher.matchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes keypoints1 = 1;
  if (!this->_internal_keypoints1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_keypoints1(), target);
  }

  // bytes keypoints2 = 2;
  if (!this->_internal_keypoints2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_keypoints2(), target);
  }

  // bytes matches = 3;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_matches(), target);
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageMatcher.matchResponse)
  return target;
}

size_t matchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageMatcher.matchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes keypoints1 = 1;
  if (!this->_internal_keypoints1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints1());
  }

  // bytes keypoints2 = 2;
  if (!this->_internal_keypoints2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints2());
  }

  // bytes matches = 3;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // sint32 xpcfGrpcReturnValue = 4;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData matchResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    matchResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*matchResponse::GetClassData() const { return &_class_data_; }

void matchResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<matchResponse *>(to)->MergeFrom(
      static_cast<const matchResponse &>(from));
}


void matchResponse::MergeFrom(const matchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageMatcher.matchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_keypoints1().empty()) {
    _internal_set_keypoints1(from._internal_keypoints1());
  }
  if (!from._internal_keypoints2().empty()) {
    _internal_set_keypoints2(from._internal_keypoints2());
  }
  if (!from._internal_matches().empty()) {
    _internal_set_matches(from._internal_matches());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void matchResponse::CopyFrom(const matchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageMatcher.matchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matchResponse::IsInitialized() const {
  return true;
}

void matchResponse::InternalSwap(matchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &keypoints1_, lhs_arena,
      &other->keypoints1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &keypoints2_, lhs_arena,
      &other->keypoints2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &matches_, lhs_arena,
      &other->matches_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata matchResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageMatcherService_2eproto_getter, &descriptor_table_grpcIImageMatcherService_2eproto_once,
      file_level_metadata_grpcIImageMatcherService_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIImageMatcher
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIImageMatcher::matchRequest*
Arena::CreateMaybeMessage< ::grpcIImageMatcher::matchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageMatcher::matchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageMatcher::matchResponse*
Arena::CreateMaybeMessage< ::grpcIImageMatcher::matchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageMatcher::matchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
