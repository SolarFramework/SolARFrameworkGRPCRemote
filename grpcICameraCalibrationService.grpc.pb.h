// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcICameraCalibrationService.proto
#ifndef GRPC_grpcICameraCalibrationService_2eproto__INCLUDED
#define GRPC_grpcICameraCalibrationService_2eproto__INCLUDED

#include "grpcICameraCalibrationService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcICameraCalibration {

class grpcICameraCalibrationService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcICameraCalibration.grpcICameraCalibrationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status calibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpcICameraCalibration::calibrate_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc0Response>> Asynccalibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc0Response>>(Asynccalibrate_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc0Response>> PrepareAsynccalibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc0Response>>(PrepareAsynccalibrate_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status calibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpcICameraCalibration::calibrate_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc1Response>> Asynccalibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc1Response>>(Asynccalibrate_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc1Response>> PrepareAsynccalibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc1Response>>(PrepareAsynccalibrate_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status setParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpcICameraCalibration::setParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::setParametersResponse>> AsyncsetParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::setParametersResponse>>(AsyncsetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::setParametersResponse>> PrepareAsyncsetParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::setParametersResponse>>(PrepareAsyncsetParametersRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void calibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request* request, ::grpcICameraCalibration::calibrate_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void calibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request* request, ::grpcICameraCalibration::calibrate_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void calibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request* request, ::grpcICameraCalibration::calibrate_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void calibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request* request, ::grpcICameraCalibration::calibrate_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest* request, ::grpcICameraCalibration::setParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest* request, ::grpcICameraCalibration::setParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc0Response>* Asynccalibrate_grpc0Raw(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc0Response>* PrepareAsynccalibrate_grpc0Raw(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc1Response>* Asynccalibrate_grpc1Raw(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::calibrate_grpc1Response>* PrepareAsynccalibrate_grpc1Raw(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::setParametersResponse>* AsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcICameraCalibration::setParametersResponse>* PrepareAsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status calibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpcICameraCalibration::calibrate_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc0Response>> Asynccalibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc0Response>>(Asynccalibrate_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc0Response>> PrepareAsynccalibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc0Response>>(PrepareAsynccalibrate_grpc0Raw(context, request, cq));
    }
    ::grpc::Status calibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpcICameraCalibration::calibrate_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc1Response>> Asynccalibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc1Response>>(Asynccalibrate_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc1Response>> PrepareAsynccalibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc1Response>>(PrepareAsynccalibrate_grpc1Raw(context, request, cq));
    }
    ::grpc::Status setParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpcICameraCalibration::setParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::setParametersResponse>> AsyncsetParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::setParametersResponse>>(AsyncsetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::setParametersResponse>> PrepareAsyncsetParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::setParametersResponse>>(PrepareAsyncsetParametersRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void calibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request* request, ::grpcICameraCalibration::calibrate_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void calibrate_grpc0(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request* request, ::grpcICameraCalibration::calibrate_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void calibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request* request, ::grpcICameraCalibration::calibrate_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void calibrate_grpc1(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request* request, ::grpcICameraCalibration::calibrate_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest* request, ::grpcICameraCalibration::setParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void setParameters(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest* request, ::grpcICameraCalibration::setParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc0Response>* Asynccalibrate_grpc0Raw(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc0Response>* PrepareAsynccalibrate_grpc0Raw(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc1Response>* Asynccalibrate_grpc1Raw(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::calibrate_grpc1Response>* PrepareAsynccalibrate_grpc1Raw(::grpc::ClientContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::setParametersResponse>* AsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcICameraCalibration::setParametersResponse>* PrepareAsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICameraCalibration::setParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_calibrate_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_calibrate_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_setParameters_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status calibrate_grpc0(::grpc::ServerContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request* request, ::grpcICameraCalibration::calibrate_grpc0Response* response);
    virtual ::grpc::Status calibrate_grpc1(::grpc::ServerContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request* request, ::grpcICameraCalibration::calibrate_grpc1Response* response);
    virtual ::grpc::Status setParameters(::grpc::ServerContext* context, const ::grpcICameraCalibration::setParametersRequest* request, ::grpcICameraCalibration::setParametersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_calibrate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_calibrate_grpc0() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_calibrate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc0Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcalibrate_grpc0(::grpc::ServerContext* context, ::grpcICameraCalibration::calibrate_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcICameraCalibration::calibrate_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_calibrate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_calibrate_grpc1() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_calibrate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc1Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcalibrate_grpc1(::grpc::ServerContext* context, ::grpcICameraCalibration::calibrate_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcICameraCalibration::calibrate_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setParameters() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::setParametersRequest* /*request*/, ::grpcICameraCalibration::setParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetParameters(::grpc::ServerContext* context, ::grpcICameraCalibration::setParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcICameraCalibration::setParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_calibrate_grpc0<WithAsyncMethod_calibrate_grpc1<WithAsyncMethod_setParameters<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_calibrate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_calibrate_grpc0() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICameraCalibration::calibrate_grpc0Request, ::grpcICameraCalibration::calibrate_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICameraCalibration::calibrate_grpc0Request* request, ::grpcICameraCalibration::calibrate_grpc0Response* response) { return this->calibrate_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_calibrate_grpc0(
        ::grpc::MessageAllocator< ::grpcICameraCalibration::calibrate_grpc0Request, ::grpcICameraCalibration::calibrate_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICameraCalibration::calibrate_grpc0Request, ::grpcICameraCalibration::calibrate_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_calibrate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc0Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* calibrate_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc0Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_calibrate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_calibrate_grpc1() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICameraCalibration::calibrate_grpc1Request, ::grpcICameraCalibration::calibrate_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICameraCalibration::calibrate_grpc1Request* request, ::grpcICameraCalibration::calibrate_grpc1Response* response) { return this->calibrate_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_calibrate_grpc1(
        ::grpc::MessageAllocator< ::grpcICameraCalibration::calibrate_grpc1Request, ::grpcICameraCalibration::calibrate_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICameraCalibration::calibrate_grpc1Request, ::grpcICameraCalibration::calibrate_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_calibrate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc1Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* calibrate_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc1Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setParameters() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcICameraCalibration::setParametersRequest, ::grpcICameraCalibration::setParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcICameraCalibration::setParametersRequest* request, ::grpcICameraCalibration::setParametersResponse* response) { return this->setParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setParameters(
        ::grpc::MessageAllocator< ::grpcICameraCalibration::setParametersRequest, ::grpcICameraCalibration::setParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcICameraCalibration::setParametersRequest, ::grpcICameraCalibration::setParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::setParametersRequest* /*request*/, ::grpcICameraCalibration::setParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcICameraCalibration::setParametersRequest* /*request*/, ::grpcICameraCalibration::setParametersResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_calibrate_grpc0<WithCallbackMethod_calibrate_grpc1<WithCallbackMethod_setParameters<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_calibrate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_calibrate_grpc0() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_calibrate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc0Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_calibrate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_calibrate_grpc1() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_calibrate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc1Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setParameters() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::setParametersRequest* /*request*/, ::grpcICameraCalibration::setParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_calibrate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_calibrate_grpc0() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_calibrate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc0Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcalibrate_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_calibrate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_calibrate_grpc1() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_calibrate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc1Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcalibrate_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setParameters() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::setParametersRequest* /*request*/, ::grpcICameraCalibration::setParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_calibrate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_calibrate_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->calibrate_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_calibrate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc0Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* calibrate_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_calibrate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_calibrate_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->calibrate_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_calibrate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status calibrate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc1Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* calibrate_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setParameters() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::setParametersRequest* /*request*/, ::grpcICameraCalibration::setParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_calibrate_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_calibrate_grpc0() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICameraCalibration::calibrate_grpc0Request, ::grpcICameraCalibration::calibrate_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICameraCalibration::calibrate_grpc0Request, ::grpcICameraCalibration::calibrate_grpc0Response>* streamer) {
                       return this->Streamedcalibrate_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_calibrate_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status calibrate_grpc0(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc0Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcalibrate_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICameraCalibration::calibrate_grpc0Request,::grpcICameraCalibration::calibrate_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_calibrate_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_calibrate_grpc1() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICameraCalibration::calibrate_grpc1Request, ::grpcICameraCalibration::calibrate_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICameraCalibration::calibrate_grpc1Request, ::grpcICameraCalibration::calibrate_grpc1Response>* streamer) {
                       return this->Streamedcalibrate_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_calibrate_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status calibrate_grpc1(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::calibrate_grpc1Request* /*request*/, ::grpcICameraCalibration::calibrate_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcalibrate_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICameraCalibration::calibrate_grpc1Request,::grpcICameraCalibration::calibrate_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setParameters() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcICameraCalibration::setParametersRequest, ::grpcICameraCalibration::setParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcICameraCalibration::setParametersRequest, ::grpcICameraCalibration::setParametersResponse>* streamer) {
                       return this->StreamedsetParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcICameraCalibration::setParametersRequest* /*request*/, ::grpcICameraCalibration::setParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcICameraCalibration::setParametersRequest,::grpcICameraCalibration::setParametersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_calibrate_grpc0<WithStreamedUnaryMethod_calibrate_grpc1<WithStreamedUnaryMethod_setParameters<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_calibrate_grpc0<WithStreamedUnaryMethod_calibrate_grpc1<WithStreamedUnaryMethod_setParameters<Service > > > StreamedService;
};

}  // namespace grpcICameraCalibration


#endif  // GRPC_grpcICameraCalibrationService_2eproto__INCLUDED
