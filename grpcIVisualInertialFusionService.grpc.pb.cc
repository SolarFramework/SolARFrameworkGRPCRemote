// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIVisualInertialFusionService.proto

#include "grpcIVisualInertialFusionService.pb.h"
#include "grpcIVisualInertialFusionService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIVisualInertialFusion {

static const char* grpcIVisualInertialFusionService_method_names[] = {
  "/grpcIVisualInertialFusion.grpcIVisualInertialFusionService/init",
  "/grpcIVisualInertialFusion.grpcIVisualInertialFusionService/addInertialData",
  "/grpcIVisualInertialFusion.grpcIVisualInertialFusionService/addVisionData",
  "/grpcIVisualInertialFusion.grpcIVisualInertialFusionService/process",
};

std::unique_ptr< grpcIVisualInertialFusionService::Stub> grpcIVisualInertialFusionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIVisualInertialFusionService::Stub> stub(new grpcIVisualInertialFusionService::Stub(channel, options));
  return stub;
}

grpcIVisualInertialFusionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_init_(grpcIVisualInertialFusionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addInertialData_(grpcIVisualInertialFusionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addVisionData_(grpcIVisualInertialFusionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_process_(grpcIVisualInertialFusionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIVisualInertialFusionService::Stub::init(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::initRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIVisualInertialFusion::initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_, context, request, response);
}

void grpcIVisualInertialFusionService::Stub::async::init(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::initRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIVisualInertialFusion::initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, std::move(f));
}

void grpcIVisualInertialFusionService::Stub::async::init(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::initRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIVisualInertialFusionService::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::initRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIVisualInertialFusion::initRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIVisualInertialFusionService::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::initRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIVisualInertialFusionService::Stub::addInertialData(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addInertialDataRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIVisualInertialFusion::addInertialDataRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addInertialData_, context, request, response);
}

void grpcIVisualInertialFusionService::Stub::async::addInertialData(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addInertialDataRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIVisualInertialFusion::addInertialDataRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addInertialData_, context, request, response, std::move(f));
}

void grpcIVisualInertialFusionService::Stub::async::addInertialData(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addInertialDataRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addInertialData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIVisualInertialFusionService::Stub::PrepareAsyncaddInertialDataRaw(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addInertialDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIVisualInertialFusion::addInertialDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addInertialData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIVisualInertialFusionService::Stub::AsyncaddInertialDataRaw(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addInertialDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddInertialDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIVisualInertialFusionService::Stub::addVisionData(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addVisionDataRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIVisualInertialFusion::addVisionDataRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addVisionData_, context, request, response);
}

void grpcIVisualInertialFusionService::Stub::async::addVisionData(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addVisionDataRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIVisualInertialFusion::addVisionDataRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addVisionData_, context, request, response, std::move(f));
}

void grpcIVisualInertialFusionService::Stub::async::addVisionData(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addVisionDataRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addVisionData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIVisualInertialFusionService::Stub::PrepareAsyncaddVisionDataRaw(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addVisionDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIVisualInertialFusion::addVisionDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addVisionData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIVisualInertialFusionService::Stub::AsyncaddVisionDataRaw(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::addVisionDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddVisionDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIVisualInertialFusionService::Stub::process(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::processRequest& request, ::grpcIVisualInertialFusion::processResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIVisualInertialFusion::processRequest, ::grpcIVisualInertialFusion::processResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_process_, context, request, response);
}

void grpcIVisualInertialFusionService::Stub::async::process(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::processRequest* request, ::grpcIVisualInertialFusion::processResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIVisualInertialFusion::processRequest, ::grpcIVisualInertialFusion::processResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_process_, context, request, response, std::move(f));
}

void grpcIVisualInertialFusionService::Stub::async::process(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::processRequest* request, ::grpcIVisualInertialFusion::processResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_process_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIVisualInertialFusion::processResponse>* grpcIVisualInertialFusionService::Stub::PrepareAsyncprocessRaw(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::processRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIVisualInertialFusion::processResponse, ::grpcIVisualInertialFusion::processRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_process_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIVisualInertialFusion::processResponse>* grpcIVisualInertialFusionService::Stub::AsyncprocessRaw(::grpc::ClientContext* context, const ::grpcIVisualInertialFusion::processRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncprocessRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIVisualInertialFusionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIVisualInertialFusionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIVisualInertialFusionService::Service, ::grpcIVisualInertialFusion::initRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIVisualInertialFusionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIVisualInertialFusion::initRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIVisualInertialFusionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIVisualInertialFusionService::Service, ::grpcIVisualInertialFusion::addInertialDataRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIVisualInertialFusionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIVisualInertialFusion::addInertialDataRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->addInertialData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIVisualInertialFusionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIVisualInertialFusionService::Service, ::grpcIVisualInertialFusion::addVisionDataRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIVisualInertialFusionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIVisualInertialFusion::addVisionDataRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->addVisionData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIVisualInertialFusionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIVisualInertialFusionService::Service, ::grpcIVisualInertialFusion::processRequest, ::grpcIVisualInertialFusion::processResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIVisualInertialFusionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIVisualInertialFusion::processRequest* req,
             ::grpcIVisualInertialFusion::processResponse* resp) {
               return service->process(ctx, req, resp);
             }, this)));
}

grpcIVisualInertialFusionService::Service::~Service() {
}

::grpc::Status grpcIVisualInertialFusionService::Service::init(::grpc::ServerContext* context, const ::grpcIVisualInertialFusion::initRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIVisualInertialFusionService::Service::addInertialData(::grpc::ServerContext* context, const ::grpcIVisualInertialFusion::addInertialDataRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIVisualInertialFusionService::Service::addVisionData(::grpc::ServerContext* context, const ::grpcIVisualInertialFusion::addVisionDataRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIVisualInertialFusionService::Service::process(::grpc::ServerContext* context, const ::grpcIVisualInertialFusion::processRequest* request, ::grpcIVisualInertialFusion::processResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIVisualInertialFusion

