// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIPointCloudLoaderService.proto

#include "grpcIPointCloudLoaderService.pb.h"
#include "grpcIPointCloudLoaderService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIPointCloudLoader {

static const char* grpcIPointCloudLoaderService_method_names[] = {
  "/grpcIPointCloudLoader.grpcIPointCloudLoaderService/load",
};

std::unique_ptr< grpcIPointCloudLoaderService::Stub> grpcIPointCloudLoaderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIPointCloudLoaderService::Stub> stub(new grpcIPointCloudLoaderService::Stub(channel, options));
  return stub;
}

grpcIPointCloudLoaderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_load_(grpcIPointCloudLoaderService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIPointCloudLoaderService::Stub::load(::grpc::ClientContext* context, const ::grpcIPointCloudLoader::loadRequest& request, ::grpcIPointCloudLoader::loadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudLoader::loadRequest, ::grpcIPointCloudLoader::loadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_load_, context, request, response);
}

void grpcIPointCloudLoaderService::Stub::async::load(::grpc::ClientContext* context, const ::grpcIPointCloudLoader::loadRequest* request, ::grpcIPointCloudLoader::loadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudLoader::loadRequest, ::grpcIPointCloudLoader::loadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_load_, context, request, response, std::move(f));
}

void grpcIPointCloudLoaderService::Stub::async::load(::grpc::ClientContext* context, const ::grpcIPointCloudLoader::loadRequest* request, ::grpcIPointCloudLoader::loadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_load_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudLoader::loadResponse>* grpcIPointCloudLoaderService::Stub::PrepareAsyncloadRaw(::grpc::ClientContext* context, const ::grpcIPointCloudLoader::loadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudLoader::loadResponse, ::grpcIPointCloudLoader::loadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_load_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudLoader::loadResponse>* grpcIPointCloudLoaderService::Stub::AsyncloadRaw(::grpc::ClientContext* context, const ::grpcIPointCloudLoader::loadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIPointCloudLoaderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudLoaderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudLoaderService::Service, ::grpcIPointCloudLoader::loadRequest, ::grpcIPointCloudLoader::loadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudLoaderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudLoader::loadRequest* req,
             ::grpcIPointCloudLoader::loadResponse* resp) {
               return service->load(ctx, req, resp);
             }, this)));
}

grpcIPointCloudLoaderService::Service::~Service() {
}

::grpc::Status grpcIPointCloudLoaderService::Service::load(::grpc::ServerContext* context, const ::grpcIPointCloudLoader::loadRequest* request, ::grpcIPointCloudLoader::loadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIPointCloudLoader

