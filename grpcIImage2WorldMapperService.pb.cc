// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIImage2WorldMapperService.proto

#include "grpcIImage2WorldMapperService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIImage2WorldMapper {
PROTOBUF_CONSTEXPR mapRequest::mapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.digitalpoints_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.worldpoints_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mapRequestDefaultTypeInternal() {}
  union {
    mapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mapRequestDefaultTypeInternal _mapRequest_default_instance_;
PROTOBUF_CONSTEXPR mapResponse::mapResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worldpoints_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mapResponseDefaultTypeInternal() {}
  union {
    mapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mapResponseDefaultTypeInternal _mapResponse_default_instance_;
}  // namespace grpcIImage2WorldMapper
static ::_pb::Metadata file_level_metadata_grpcIImage2WorldMapperService_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIImage2WorldMapperService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIImage2WorldMapperService_2eproto = nullptr;

const uint32_t TableStruct_grpcIImage2WorldMapperService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImage2WorldMapper::mapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImage2WorldMapper::mapRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIImage2WorldMapper::mapRequest, _impl_.digitalpoints_),
  PROTOBUF_FIELD_OFFSET(::grpcIImage2WorldMapper::mapRequest, _impl_.worldpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImage2WorldMapper::mapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImage2WorldMapper::mapResponse, _impl_.worldpoints_),
  PROTOBUF_FIELD_OFFSET(::grpcIImage2WorldMapper::mapResponse, _impl_.xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIImage2WorldMapper::mapRequest)},
  { 9, -1, -1, sizeof(::grpcIImage2WorldMapper::mapResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIImage2WorldMapper::_mapRequest_default_instance_._instance,
  &::grpcIImage2WorldMapper::_mapResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIImage2WorldMapperService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#grpcIImage2WorldMapperService.proto\022\026g"
  "rpcIImage2WorldMapper\032\033google/protobuf/e"
  "mpty.proto\"]\n\nmapRequest\022#\n\033grpcServerCo"
  "mpressionFormat\030\001 \001(\005\022\025\n\rdigitalPoints\030\002"
  " \001(\014\022\023\n\013worldPoints\030\003 \001(\014\"\?\n\013mapResponse"
  "\022\023\n\013worldPoints\030\001 \001(\014\022\033\n\023xpcfGrpcReturnV"
  "alue\030\002 \001(\0212q\n\035grpcIImage2WorldMapperServ"
  "ice\022P\n\003map\022\".grpcIImage2WorldMapper.mapR"
  "equest\032#.grpcIImage2WorldMapper.mapRespo"
  "nse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIImage2WorldMapperService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIImage2WorldMapperService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIImage2WorldMapperService_2eproto = {
    false, false, 373, descriptor_table_protodef_grpcIImage2WorldMapperService_2eproto,
    "grpcIImage2WorldMapperService.proto",
    &descriptor_table_grpcIImage2WorldMapperService_2eproto_once, descriptor_table_grpcIImage2WorldMapperService_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_grpcIImage2WorldMapperService_2eproto::offsets,
    file_level_metadata_grpcIImage2WorldMapperService_2eproto, file_level_enum_descriptors_grpcIImage2WorldMapperService_2eproto,
    file_level_service_descriptors_grpcIImage2WorldMapperService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIImage2WorldMapperService_2eproto_getter() {
  return &descriptor_table_grpcIImage2WorldMapperService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIImage2WorldMapperService_2eproto(&descriptor_table_grpcIImage2WorldMapperService_2eproto);
namespace grpcIImage2WorldMapper {

// ===================================================================

class mapRequest::_Internal {
 public:
};

mapRequest::mapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIImage2WorldMapper.mapRequest)
}
mapRequest::mapRequest(const mapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.digitalpoints_){}
    , decltype(_impl_.worldpoints_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.digitalpoints_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digitalpoints_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_digitalpoints().empty()) {
    _this->_impl_.digitalpoints_.Set(from._internal_digitalpoints(), 
      _this->GetArenaForAllocation());
  }
  _impl_.worldpoints_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldpoints_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldpoints().empty()) {
    _this->_impl_.worldpoints_.Set(from._internal_worldpoints(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIImage2WorldMapper.mapRequest)
}

inline void mapRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.digitalpoints_){}
    , decltype(_impl_.worldpoints_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.digitalpoints_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digitalpoints_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.worldpoints_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldpoints_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mapRequest::~mapRequest() {
  // @@protoc_insertion_point(destructor:grpcIImage2WorldMapper.mapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.digitalpoints_.Destroy();
  _impl_.worldpoints_.Destroy();
}

void mapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImage2WorldMapper.mapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.digitalpoints_.ClearToEmpty();
  _impl_.worldpoints_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes digitalPoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_digitalpoints();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes worldPoints = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_worldpoints();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImage2WorldMapper.mapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes digitalPoints = 2;
  if (!this->_internal_digitalpoints().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digitalpoints(), target);
  }

  // bytes worldPoints = 3;
  if (!this->_internal_worldpoints().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_worldpoints(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImage2WorldMapper.mapRequest)
  return target;
}

size_t mapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImage2WorldMapper.mapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes digitalPoints = 2;
  if (!this->_internal_digitalpoints().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digitalpoints());
  }

  // bytes worldPoints = 3;
  if (!this->_internal_worldpoints().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_worldpoints());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mapRequest::GetClassData() const { return &_class_data_; }


void mapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mapRequest*>(&to_msg);
  auto& from = static_cast<const mapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIImage2WorldMapper.mapRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_digitalpoints().empty()) {
    _this->_internal_set_digitalpoints(from._internal_digitalpoints());
  }
  if (!from._internal_worldpoints().empty()) {
    _this->_internal_set_worldpoints(from._internal_worldpoints());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mapRequest::CopyFrom(const mapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImage2WorldMapper.mapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapRequest::IsInitialized() const {
  return true;
}

void mapRequest::InternalSwap(mapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digitalpoints_, lhs_arena,
      &other->_impl_.digitalpoints_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worldpoints_, lhs_arena,
      &other->_impl_.worldpoints_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImage2WorldMapperService_2eproto_getter, &descriptor_table_grpcIImage2WorldMapperService_2eproto_once,
      file_level_metadata_grpcIImage2WorldMapperService_2eproto[0]);
}

// ===================================================================

class mapResponse::_Internal {
 public:
};

mapResponse::mapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIImage2WorldMapper.mapResponse)
}
mapResponse::mapResponse(const mapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mapResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worldpoints_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.worldpoints_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldpoints_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldpoints().empty()) {
    _this->_impl_.worldpoints_.Set(from._internal_worldpoints(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIImage2WorldMapper.mapResponse)
}

inline void mapResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worldpoints_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.worldpoints_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldpoints_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

mapResponse::~mapResponse() {
  // @@protoc_insertion_point(destructor:grpcIImage2WorldMapper.mapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worldpoints_.Destroy();
}

void mapResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImage2WorldMapper.mapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worldpoints_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes worldPoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worldpoints();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImage2WorldMapper.mapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes worldPoints = 1;
  if (!this->_internal_worldpoints().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_worldpoints(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImage2WorldMapper.mapResponse)
  return target;
}

size_t mapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImage2WorldMapper.mapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes worldPoints = 1;
  if (!this->_internal_worldpoints().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_worldpoints());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mapResponse::GetClassData() const { return &_class_data_; }


void mapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mapResponse*>(&to_msg);
  auto& from = static_cast<const mapResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIImage2WorldMapper.mapResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_worldpoints().empty()) {
    _this->_internal_set_worldpoints(from._internal_worldpoints());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mapResponse::CopyFrom(const mapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImage2WorldMapper.mapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mapResponse::IsInitialized() const {
  return true;
}

void mapResponse::InternalSwap(mapResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worldpoints_, lhs_arena,
      &other->_impl_.worldpoints_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImage2WorldMapperService_2eproto_getter, &descriptor_table_grpcIImage2WorldMapperService_2eproto_once,
      file_level_metadata_grpcIImage2WorldMapperService_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIImage2WorldMapper
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIImage2WorldMapper::mapRequest*
Arena::CreateMaybeMessage< ::grpcIImage2WorldMapper::mapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImage2WorldMapper::mapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImage2WorldMapper::mapResponse*
Arena::CreateMaybeMessage< ::grpcIImage2WorldMapper::mapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImage2WorldMapper::mapResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
