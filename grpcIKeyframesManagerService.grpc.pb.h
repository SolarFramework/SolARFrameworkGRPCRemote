// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIKeyframesManagerService.proto
#ifndef GRPC_grpcIKeyframesManagerService_2eproto__INCLUDED
#define GRPC_grpcIKeyframesManagerService_2eproto__INCLUDED

#include "grpcIKeyframesManagerService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIKeyframesManager {

class grpcIKeyframesManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIKeyframesManager.grpcIKeyframesManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc0Response>> AsyncaddKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc0Response>>(AsyncaddKeyframe_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc0Response>> PrepareAsyncaddKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc0Response>>(PrepareAsyncaddKeyframe_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc1Response>> AsyncaddKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc1Response>>(AsyncaddKeyframe_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc1Response>> PrepareAsyncaddKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc1Response>>(PrepareAsyncaddKeyframe_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpcIKeyframesManager::getKeyframeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeResponse>> AsyncgetKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeResponse>>(AsyncgetKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeResponse>> PrepareAsyncgetKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeResponse>>(PrepareAsyncgetKeyframeRaw(context, request, cq));
    }
    virtual ::grpc::Status getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpcIKeyframesManager::getKeyframesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframesResponse>> AsyncgetKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframesResponse>>(AsyncgetKeyframesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframesResponse>> PrepareAsyncgetKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframesResponse>>(PrepareAsyncgetKeyframesRaw(context, request, cq));
    }
    virtual ::grpc::Status getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpcIKeyframesManager::getAllKeyframesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getAllKeyframesResponse>> AsyncgetAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getAllKeyframesResponse>>(AsyncgetAllKeyframesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getAllKeyframesResponse>> PrepareAsyncgetAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getAllKeyframesResponse>>(PrepareAsyncgetAllKeyframesRaw(context, request, cq));
    }
    virtual ::grpc::Status suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpcIKeyframesManager::suppressKeyframeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::suppressKeyframeResponse>> AsyncsuppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::suppressKeyframeResponse>>(AsyncsuppressKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::suppressKeyframeResponse>> PrepareAsyncsuppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::suppressKeyframeResponse>>(PrepareAsyncsuppressKeyframeRaw(context, request, cq));
    }
    virtual ::grpc::Status getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getDescriptorTypeResponse>> AsyncgetDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getDescriptorTypeResponse>>(AsyncgetDescriptorTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getDescriptorTypeResponse>> PrepareAsyncgetDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getDescriptorTypeResponse>>(PrepareAsyncgetDescriptorTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::setDescriptorTypeResponse>> AsyncsetDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::setDescriptorTypeResponse>>(AsyncsetDescriptorTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::setDescriptorTypeResponse>> PrepareAsyncsetDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::setDescriptorTypeResponse>>(PrepareAsyncsetDescriptorTypeRaw(context, request, cq));
    }
    virtual ::grpc::Status isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpcIKeyframesManager::isExistKeyframeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::isExistKeyframeResponse>> AsyncisExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::isExistKeyframeResponse>>(AsyncisExistKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::isExistKeyframeResponse>> PrepareAsyncisExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::isExistKeyframeResponse>>(PrepareAsyncisExistKeyframeRaw(context, request, cq));
    }
    virtual ::grpc::Status getNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIKeyframesManager::getNbKeyframesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getNbKeyframesResponse>> AsyncgetNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getNbKeyframesResponse>>(AsyncgetNbKeyframesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getNbKeyframesResponse>> PrepareAsyncgetNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getNbKeyframesResponse>>(PrepareAsyncgetNbKeyframesRaw(context, request, cq));
    }
    virtual ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpcIKeyframesManager::saveToFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    virtual ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpcIKeyframesManager::loadFromFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    virtual ::grpc::Status getConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>> AsyncgetConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>>(AsyncgetConstKeyframeCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>> PrepareAsyncgetConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>>(PrepareAsyncgetConstKeyframeCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeCollectionResponse>> AsyncgetKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeCollectionResponse>>(AsyncgetKeyframeCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeCollectionResponse>> PrepareAsyncgetKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeCollectionResponse>>(PrepareAsyncgetKeyframeCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetKeyframeCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetKeyframeCollectionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc0Response>* AsyncaddKeyframe_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc0Response>* PrepareAsyncaddKeyframe_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc1Response>* AsyncaddKeyframe_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::addKeyframe_grpc1Response>* PrepareAsyncaddKeyframe_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeResponse>* AsyncgetKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeResponse>* PrepareAsyncgetKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframesResponse>* AsyncgetKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframesResponse>* PrepareAsyncgetKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getAllKeyframesResponse>* AsyncgetAllKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getAllKeyframesResponse>* PrepareAsyncgetAllKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::suppressKeyframeResponse>* AsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::suppressKeyframeResponse>* PrepareAsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getDescriptorTypeResponse>* AsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getDescriptorTypeResponse>* PrepareAsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::setDescriptorTypeResponse>* AsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::setDescriptorTypeResponse>* PrepareAsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::isExistKeyframeResponse>* AsyncisExistKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::isExistKeyframeResponse>* PrepareAsyncisExistKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getNbKeyframesResponse>* AsyncgetNbKeyframesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getNbKeyframesResponse>* PrepareAsyncgetNbKeyframesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* AsyncgetConstKeyframeCollectionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* PrepareAsyncgetConstKeyframeCollectionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeCollectionResponse>* AsyncgetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIKeyframesManager::getKeyframeCollectionResponse>* PrepareAsyncgetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc0Response>> AsyncaddKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc0Response>>(AsyncaddKeyframe_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc0Response>> PrepareAsyncaddKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc0Response>>(PrepareAsyncaddKeyframe_grpc0Raw(context, request, cq));
    }
    ::grpc::Status addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc1Response>> AsyncaddKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc1Response>>(AsyncaddKeyframe_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc1Response>> PrepareAsyncaddKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc1Response>>(PrepareAsyncaddKeyframe_grpc1Raw(context, request, cq));
    }
    ::grpc::Status getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpcIKeyframesManager::getKeyframeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeResponse>> AsyncgetKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeResponse>>(AsyncgetKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeResponse>> PrepareAsyncgetKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeResponse>>(PrepareAsyncgetKeyframeRaw(context, request, cq));
    }
    ::grpc::Status getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpcIKeyframesManager::getKeyframesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframesResponse>> AsyncgetKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframesResponse>>(AsyncgetKeyframesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframesResponse>> PrepareAsyncgetKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframesResponse>>(PrepareAsyncgetKeyframesRaw(context, request, cq));
    }
    ::grpc::Status getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpcIKeyframesManager::getAllKeyframesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getAllKeyframesResponse>> AsyncgetAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getAllKeyframesResponse>>(AsyncgetAllKeyframesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getAllKeyframesResponse>> PrepareAsyncgetAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getAllKeyframesResponse>>(PrepareAsyncgetAllKeyframesRaw(context, request, cq));
    }
    ::grpc::Status suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpcIKeyframesManager::suppressKeyframeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::suppressKeyframeResponse>> AsyncsuppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::suppressKeyframeResponse>>(AsyncsuppressKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::suppressKeyframeResponse>> PrepareAsyncsuppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::suppressKeyframeResponse>>(PrepareAsyncsuppressKeyframeRaw(context, request, cq));
    }
    ::grpc::Status getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getDescriptorTypeResponse>> AsyncgetDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getDescriptorTypeResponse>>(AsyncgetDescriptorTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getDescriptorTypeResponse>> PrepareAsyncgetDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getDescriptorTypeResponse>>(PrepareAsyncgetDescriptorTypeRaw(context, request, cq));
    }
    ::grpc::Status setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::setDescriptorTypeResponse>> AsyncsetDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::setDescriptorTypeResponse>>(AsyncsetDescriptorTypeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::setDescriptorTypeResponse>> PrepareAsyncsetDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::setDescriptorTypeResponse>>(PrepareAsyncsetDescriptorTypeRaw(context, request, cq));
    }
    ::grpc::Status isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpcIKeyframesManager::isExistKeyframeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::isExistKeyframeResponse>> AsyncisExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::isExistKeyframeResponse>>(AsyncisExistKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::isExistKeyframeResponse>> PrepareAsyncisExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::isExistKeyframeResponse>>(PrepareAsyncisExistKeyframeRaw(context, request, cq));
    }
    ::grpc::Status getNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIKeyframesManager::getNbKeyframesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getNbKeyframesResponse>> AsyncgetNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getNbKeyframesResponse>>(AsyncgetNbKeyframesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getNbKeyframesResponse>> PrepareAsyncgetNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getNbKeyframesResponse>>(PrepareAsyncgetNbKeyframesRaw(context, request, cq));
    }
    ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpcIKeyframesManager::saveToFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpcIKeyframesManager::loadFromFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    ::grpc::Status getConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>> AsyncgetConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>>(AsyncgetConstKeyframeCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>> PrepareAsyncgetConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>>(PrepareAsyncgetConstKeyframeCollectionRaw(context, request, cq));
    }
    ::grpc::Status getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeCollectionResponse>> AsyncgetKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeCollectionResponse>>(AsyncgetKeyframeCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeCollectionResponse>> PrepareAsyncgetKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeCollectionResponse>>(PrepareAsyncgetKeyframeCollectionRaw(context, request, cq));
    }
    ::grpc::Status setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetKeyframeCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetKeyframeCollectionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void addKeyframe_grpc0(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void addKeyframe_grpc1(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getAllKeyframes(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void suppressKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDescriptorType(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void isExistKeyframe(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getNbKeyframes(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void saveToFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getConstKeyframeCollection(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setKeyframeCollection(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc0Response>* AsyncaddKeyframe_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc0Response>* PrepareAsyncaddKeyframe_grpc0Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc1Response>* AsyncaddKeyframe_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::addKeyframe_grpc1Response>* PrepareAsyncaddKeyframe_grpc1Raw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeResponse>* AsyncgetKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeResponse>* PrepareAsyncgetKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframesResponse>* AsyncgetKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframesResponse>* PrepareAsyncgetKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getAllKeyframesResponse>* AsyncgetAllKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getAllKeyframesResponse>* PrepareAsyncgetAllKeyframesRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::suppressKeyframeResponse>* AsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::suppressKeyframeResponse>* PrepareAsyncsuppressKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getDescriptorTypeResponse>* AsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getDescriptorTypeResponse>* PrepareAsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::setDescriptorTypeResponse>* AsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::setDescriptorTypeResponse>* PrepareAsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::isExistKeyframeResponse>* AsyncisExistKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::isExistKeyframeResponse>* PrepareAsyncisExistKeyframeRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getNbKeyframesResponse>* AsyncgetNbKeyframesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getNbKeyframesResponse>* PrepareAsyncgetNbKeyframesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* AsyncgetConstKeyframeCollectionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* PrepareAsyncgetConstKeyframeCollectionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeCollectionResponse>* AsyncgetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIKeyframesManager::getKeyframeCollectionResponse>* PrepareAsyncgetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetKeyframeCollectionRaw(::grpc::ClientContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_addKeyframe_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_addKeyframe_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_getKeyframe_;
    const ::grpc::internal::RpcMethod rpcmethod_getKeyframes_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllKeyframes_;
    const ::grpc::internal::RpcMethod rpcmethod_suppressKeyframe_;
    const ::grpc::internal::RpcMethod rpcmethod_getDescriptorType_;
    const ::grpc::internal::RpcMethod rpcmethod_setDescriptorType_;
    const ::grpc::internal::RpcMethod rpcmethod_isExistKeyframe_;
    const ::grpc::internal::RpcMethod rpcmethod_getNbKeyframes_;
    const ::grpc::internal::RpcMethod rpcmethod_saveToFile_;
    const ::grpc::internal::RpcMethod rpcmethod_loadFromFile_;
    const ::grpc::internal::RpcMethod rpcmethod_getConstKeyframeCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_getKeyframeCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_setKeyframeCollection_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status addKeyframe_grpc0(::grpc::ServerContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response);
    virtual ::grpc::Status addKeyframe_grpc1(::grpc::ServerContext* context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response);
    virtual ::grpc::Status getKeyframe(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response);
    virtual ::grpc::Status getKeyframes(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response);
    virtual ::grpc::Status getAllKeyframes(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response);
    virtual ::grpc::Status suppressKeyframe(::grpc::ServerContext* context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response);
    virtual ::grpc::Status getDescriptorType(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response);
    virtual ::grpc::Status setDescriptorType(::grpc::ServerContext* context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response);
    virtual ::grpc::Status isExistKeyframe(::grpc::ServerContext* context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response);
    virtual ::grpc::Status getNbKeyframes(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response);
    virtual ::grpc::Status saveToFile(::grpc::ServerContext* context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response);
    virtual ::grpc::Status loadFromFile(::grpc::ServerContext* context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response);
    virtual ::grpc::Status getConstKeyframeCollection(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response);
    virtual ::grpc::Status getKeyframeCollection(::grpc::ServerContext* context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response);
    virtual ::grpc::Status setKeyframeCollection(::grpc::ServerContext* context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_addKeyframe_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addKeyframe_grpc0() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_addKeyframe_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddKeyframe_grpc0(::grpc::ServerContext* context, ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::addKeyframe_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addKeyframe_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addKeyframe_grpc1() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_addKeyframe_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddKeyframe_grpc1(::grpc::ServerContext* context, ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::addKeyframe_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getKeyframe() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKeyframe(::grpc::ServerContext* context, ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::getKeyframeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getKeyframes() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKeyframes(::grpc::ServerContext* context, ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::getKeyframesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllKeyframes() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getAllKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getAllKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getAllKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllKeyframes(::grpc::ServerContext* context, ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::getAllKeyframesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_suppressKeyframe() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::suppressKeyframeRequest* /*request*/, ::grpcIKeyframesManager::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsuppressKeyframe(::grpc::ServerContext* context, ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::suppressKeyframeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDescriptorType() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDescriptorType(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::getDescriptorTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDescriptorType() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setDescriptorTypeRequest* /*request*/, ::grpcIKeyframesManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDescriptorType(::grpc::ServerContext* context, ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::setDescriptorTypeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isExistKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isExistKeyframe() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_isExistKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::isExistKeyframeRequest* /*request*/, ::grpcIKeyframesManager::isExistKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisExistKeyframe(::grpc::ServerContext* context, ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::isExistKeyframeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNbKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNbKeyframes() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getNbKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbKeyframes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getNbKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNbKeyframes(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::getNbKeyframesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveToFile() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::saveToFileRequest* /*request*/, ::grpcIKeyframesManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::grpcIKeyframesManager::saveToFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::saveToFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadFromFile() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::loadFromFileRequest* /*request*/, ::grpcIKeyframesManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::loadFromFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getConstKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getConstKeyframeCollection() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getConstKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeCollection(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConstKeyframeCollection(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getKeyframeCollection() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_getKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKeyframeCollection(::grpc::ServerContext* context, ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIKeyframesManager::getKeyframeCollectionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setKeyframeCollection() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_setKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetKeyframeCollection(::grpc::ServerContext* context, ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_addKeyframe_grpc0<WithAsyncMethod_addKeyframe_grpc1<WithAsyncMethod_getKeyframe<WithAsyncMethod_getKeyframes<WithAsyncMethod_getAllKeyframes<WithAsyncMethod_suppressKeyframe<WithAsyncMethod_getDescriptorType<WithAsyncMethod_setDescriptorType<WithAsyncMethod_isExistKeyframe<WithAsyncMethod_getNbKeyframes<WithAsyncMethod_saveToFile<WithAsyncMethod_loadFromFile<WithAsyncMethod_getConstKeyframeCollection<WithAsyncMethod_getKeyframeCollection<WithAsyncMethod_setKeyframeCollection<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addKeyframe_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addKeyframe_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::addKeyframe_grpc0Request, ::grpcIKeyframesManager::addKeyframe_grpc0Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* request, ::grpcIKeyframesManager::addKeyframe_grpc0Response* response) { return this->addKeyframe_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_addKeyframe_grpc0(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::addKeyframe_grpc0Request, ::grpcIKeyframesManager::addKeyframe_grpc0Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::addKeyframe_grpc0Request, ::grpcIKeyframesManager::addKeyframe_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_addKeyframe_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addKeyframe_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc0Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addKeyframe_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc0Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addKeyframe_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addKeyframe_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::addKeyframe_grpc1Request, ::grpcIKeyframesManager::addKeyframe_grpc1Response>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* request, ::grpcIKeyframesManager::addKeyframe_grpc1Response* response) { return this->addKeyframe_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_addKeyframe_grpc1(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::addKeyframe_grpc1Request, ::grpcIKeyframesManager::addKeyframe_grpc1Response>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::addKeyframe_grpc1Request, ::grpcIKeyframesManager::addKeyframe_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_addKeyframe_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addKeyframe_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc1Response* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addKeyframe_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc1Response* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::getKeyframeRequest, ::grpcIKeyframesManager::getKeyframeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::getKeyframeRequest* request, ::grpcIKeyframesManager::getKeyframeResponse* response) { return this->getKeyframe(context, request, response); }));}
    void SetMessageAllocatorFor_getKeyframe(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::getKeyframeRequest, ::grpcIKeyframesManager::getKeyframeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::getKeyframeRequest, ::grpcIKeyframesManager::getKeyframeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getKeyframes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::getKeyframesRequest, ::grpcIKeyframesManager::getKeyframesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::getKeyframesRequest* request, ::grpcIKeyframesManager::getKeyframesResponse* response) { return this->getKeyframes(context, request, response); }));}
    void SetMessageAllocatorFor_getKeyframes(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::getKeyframesRequest, ::grpcIKeyframesManager::getKeyframesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::getKeyframesRequest, ::grpcIKeyframesManager::getKeyframesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKeyframes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getKeyframesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKeyframes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getKeyframesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getAllKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getAllKeyframes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::getAllKeyframesRequest, ::grpcIKeyframesManager::getAllKeyframesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::getAllKeyframesRequest* request, ::grpcIKeyframesManager::getAllKeyframesResponse* response) { return this->getAllKeyframes(context, request, response); }));}
    void SetMessageAllocatorFor_getAllKeyframes(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::getAllKeyframesRequest, ::grpcIKeyframesManager::getAllKeyframesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::getAllKeyframesRequest, ::grpcIKeyframesManager::getAllKeyframesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getAllKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getAllKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getAllKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAllKeyframes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::getAllKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getAllKeyframesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAllKeyframes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::getAllKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getAllKeyframesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_suppressKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::suppressKeyframeRequest, ::grpcIKeyframesManager::suppressKeyframeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::suppressKeyframeRequest* request, ::grpcIKeyframesManager::suppressKeyframeResponse* response) { return this->suppressKeyframe(context, request, response); }));}
    void SetMessageAllocatorFor_suppressKeyframe(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::suppressKeyframeRequest, ::grpcIKeyframesManager::suppressKeyframeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::suppressKeyframeRequest, ::grpcIKeyframesManager::suppressKeyframeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::suppressKeyframeRequest* /*request*/, ::grpcIKeyframesManager::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* suppressKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::suppressKeyframeRequest* /*request*/, ::grpcIKeyframesManager::suppressKeyframeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* suppressKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::suppressKeyframeRequest* /*request*/, ::grpcIKeyframesManager::suppressKeyframeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDescriptorType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIKeyframesManager::getDescriptorTypeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getDescriptorTypeResponse* response) { return this->getDescriptorType(context, request, response); }));}
    void SetMessageAllocatorFor_getDescriptorType(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIKeyframesManager::getDescriptorTypeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIKeyframesManager::getDescriptorTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDescriptorType(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getDescriptorTypeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDescriptorType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getDescriptorTypeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setDescriptorType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::setDescriptorTypeRequest, ::grpcIKeyframesManager::setDescriptorTypeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::setDescriptorTypeRequest* request, ::grpcIKeyframesManager::setDescriptorTypeResponse* response) { return this->setDescriptorType(context, request, response); }));}
    void SetMessageAllocatorFor_setDescriptorType(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::setDescriptorTypeRequest, ::grpcIKeyframesManager::setDescriptorTypeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::setDescriptorTypeRequest, ::grpcIKeyframesManager::setDescriptorTypeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setDescriptorTypeRequest* /*request*/, ::grpcIKeyframesManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDescriptorType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::setDescriptorTypeRequest* /*request*/, ::grpcIKeyframesManager::setDescriptorTypeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDescriptorType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::setDescriptorTypeRequest* /*request*/, ::grpcIKeyframesManager::setDescriptorTypeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_isExistKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_isExistKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::isExistKeyframeRequest, ::grpcIKeyframesManager::isExistKeyframeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::isExistKeyframeRequest* request, ::grpcIKeyframesManager::isExistKeyframeResponse* response) { return this->isExistKeyframe(context, request, response); }));}
    void SetMessageAllocatorFor_isExistKeyframe(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::isExistKeyframeRequest, ::grpcIKeyframesManager::isExistKeyframeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::isExistKeyframeRequest, ::grpcIKeyframesManager::isExistKeyframeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_isExistKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::isExistKeyframeRequest* /*request*/, ::grpcIKeyframesManager::isExistKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isExistKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::isExistKeyframeRequest* /*request*/, ::grpcIKeyframesManager::isExistKeyframeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isExistKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::isExistKeyframeRequest* /*request*/, ::grpcIKeyframesManager::isExistKeyframeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getNbKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getNbKeyframes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIKeyframesManager::getNbKeyframesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getNbKeyframesResponse* response) { return this->getNbKeyframes(context, request, response); }));}
    void SetMessageAllocatorFor_getNbKeyframes(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIKeyframesManager::getNbKeyframesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIKeyframesManager::getNbKeyframesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getNbKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbKeyframes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getNbKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNbKeyframes(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getNbKeyframesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNbKeyframes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getNbKeyframesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_saveToFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::saveToFileRequest, ::grpcIKeyframesManager::saveToFileResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::saveToFileRequest* request, ::grpcIKeyframesManager::saveToFileResponse* response) { return this->saveToFile(context, request, response); }));}
    void SetMessageAllocatorFor_saveToFile(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::saveToFileRequest, ::grpcIKeyframesManager::saveToFileResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::saveToFileRequest, ::grpcIKeyframesManager::saveToFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::saveToFileRequest* /*request*/, ::grpcIKeyframesManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::saveToFileRequest* /*request*/, ::grpcIKeyframesManager::saveToFileResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* saveToFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::saveToFileRequest* /*request*/, ::grpcIKeyframesManager::saveToFileResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_loadFromFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::loadFromFileRequest, ::grpcIKeyframesManager::loadFromFileResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::loadFromFileRequest* request, ::grpcIKeyframesManager::loadFromFileResponse* response) { return this->loadFromFile(context, request, response); }));}
    void SetMessageAllocatorFor_loadFromFile(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::loadFromFileRequest, ::grpcIKeyframesManager::loadFromFileResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::loadFromFileRequest, ::grpcIKeyframesManager::loadFromFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::loadFromFileRequest* /*request*/, ::grpcIKeyframesManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::loadFromFileRequest* /*request*/, ::grpcIKeyframesManager::loadFromFileResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* loadFromFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::loadFromFileRequest* /*request*/, ::grpcIKeyframesManager::loadFromFileResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getConstKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getConstKeyframeCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* response) { return this->getConstKeyframeCollection(context, request, response); }));}
    void SetMessageAllocatorFor_getConstKeyframeCollection(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getConstKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeCollection(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getConstKeyframeCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getConstKeyframeCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getKeyframeCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::getKeyframeCollectionRequest, ::grpcIKeyframesManager::getKeyframeCollectionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* request, ::grpcIKeyframesManager::getKeyframeCollectionResponse* response) { return this->getKeyframeCollection(context, request, response); }));}
    void SetMessageAllocatorFor_getKeyframeCollection(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::getKeyframeCollectionRequest, ::grpcIKeyframesManager::getKeyframeCollectionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::getKeyframeCollectionRequest, ::grpcIKeyframesManager::getKeyframeCollectionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKeyframeCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeCollectionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKeyframeCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeCollectionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setKeyframeCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::setKeyframeCollectionRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* request, ::google::protobuf::Empty* response) { return this->setKeyframeCollection(context, request, response); }));}
    void SetMessageAllocatorFor_setKeyframeCollection(
        ::grpc::experimental::MessageAllocator< ::grpcIKeyframesManager::setKeyframeCollectionRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIKeyframesManager::setKeyframeCollectionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setKeyframeCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setKeyframeCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_addKeyframe_grpc0<ExperimentalWithCallbackMethod_addKeyframe_grpc1<ExperimentalWithCallbackMethod_getKeyframe<ExperimentalWithCallbackMethod_getKeyframes<ExperimentalWithCallbackMethod_getAllKeyframes<ExperimentalWithCallbackMethod_suppressKeyframe<ExperimentalWithCallbackMethod_getDescriptorType<ExperimentalWithCallbackMethod_setDescriptorType<ExperimentalWithCallbackMethod_isExistKeyframe<ExperimentalWithCallbackMethod_getNbKeyframes<ExperimentalWithCallbackMethod_saveToFile<ExperimentalWithCallbackMethod_loadFromFile<ExperimentalWithCallbackMethod_getConstKeyframeCollection<ExperimentalWithCallbackMethod_getKeyframeCollection<ExperimentalWithCallbackMethod_setKeyframeCollection<Service > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_addKeyframe_grpc0<ExperimentalWithCallbackMethod_addKeyframe_grpc1<ExperimentalWithCallbackMethod_getKeyframe<ExperimentalWithCallbackMethod_getKeyframes<ExperimentalWithCallbackMethod_getAllKeyframes<ExperimentalWithCallbackMethod_suppressKeyframe<ExperimentalWithCallbackMethod_getDescriptorType<ExperimentalWithCallbackMethod_setDescriptorType<ExperimentalWithCallbackMethod_isExistKeyframe<ExperimentalWithCallbackMethod_getNbKeyframes<ExperimentalWithCallbackMethod_saveToFile<ExperimentalWithCallbackMethod_loadFromFile<ExperimentalWithCallbackMethod_getConstKeyframeCollection<ExperimentalWithCallbackMethod_getKeyframeCollection<ExperimentalWithCallbackMethod_setKeyframeCollection<Service > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_addKeyframe_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addKeyframe_grpc0() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_addKeyframe_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addKeyframe_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addKeyframe_grpc1() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_addKeyframe_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getKeyframe() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getKeyframes() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllKeyframes() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getAllKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getAllKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getAllKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_suppressKeyframe() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::suppressKeyframeRequest* /*request*/, ::grpcIKeyframesManager::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDescriptorType() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDescriptorType() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setDescriptorTypeRequest* /*request*/, ::grpcIKeyframesManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isExistKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isExistKeyframe() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_isExistKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::isExistKeyframeRequest* /*request*/, ::grpcIKeyframesManager::isExistKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNbKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNbKeyframes() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getNbKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbKeyframes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getNbKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveToFile() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::saveToFileRequest* /*request*/, ::grpcIKeyframesManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadFromFile() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::loadFromFileRequest* /*request*/, ::grpcIKeyframesManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getConstKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getConstKeyframeCollection() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getConstKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeCollection(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getKeyframeCollection() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_getKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setKeyframeCollection() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_setKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_addKeyframe_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addKeyframe_grpc0() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_addKeyframe_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddKeyframe_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addKeyframe_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addKeyframe_grpc1() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_addKeyframe_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddKeyframe_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getKeyframe() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKeyframe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getKeyframes() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKeyframes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllKeyframes() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getAllKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getAllKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getAllKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllKeyframes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_suppressKeyframe() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::suppressKeyframeRequest* /*request*/, ::grpcIKeyframesManager::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsuppressKeyframe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDescriptorType() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDescriptorType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDescriptorType() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setDescriptorTypeRequest* /*request*/, ::grpcIKeyframesManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDescriptorType(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isExistKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isExistKeyframe() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_isExistKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::isExistKeyframeRequest* /*request*/, ::grpcIKeyframesManager::isExistKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisExistKeyframe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNbKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNbKeyframes() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getNbKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbKeyframes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getNbKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNbKeyframes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveToFile() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::saveToFileRequest* /*request*/, ::grpcIKeyframesManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadFromFile() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::loadFromFileRequest* /*request*/, ::grpcIKeyframesManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getConstKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getConstKeyframeCollection() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getConstKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeCollection(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetConstKeyframeCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getKeyframeCollection() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_getKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetKeyframeCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setKeyframeCollection() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_setKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetKeyframeCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addKeyframe_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addKeyframe_grpc0() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addKeyframe_grpc0(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addKeyframe_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addKeyframe_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addKeyframe_grpc0(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addKeyframe_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addKeyframe_grpc1() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addKeyframe_grpc1(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addKeyframe_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addKeyframe_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addKeyframe_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addKeyframe_grpc1(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getKeyframe(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getKeyframes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getKeyframes(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKeyframes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKeyframes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getAllKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getAllKeyframes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllKeyframes(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getAllKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getAllKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getAllKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAllKeyframes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAllKeyframes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_suppressKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->suppressKeyframe(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::suppressKeyframeRequest* /*request*/, ::grpcIKeyframesManager::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* suppressKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* suppressKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDescriptorType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDescriptorType(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDescriptorType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDescriptorType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setDescriptorType() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDescriptorType(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setDescriptorTypeRequest* /*request*/, ::grpcIKeyframesManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDescriptorType(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDescriptorType(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_isExistKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_isExistKeyframe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isExistKeyframe(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_isExistKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isExistKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::isExistKeyframeRequest* /*request*/, ::grpcIKeyframesManager::isExistKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isExistKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isExistKeyframe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getNbKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getNbKeyframes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNbKeyframes(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getNbKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNbKeyframes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getNbKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNbKeyframes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNbKeyframes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_saveToFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveToFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::saveToFileRequest* /*request*/, ::grpcIKeyframesManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* saveToFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_loadFromFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadFromFile(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::loadFromFileRequest* /*request*/, ::grpcIKeyframesManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* loadFromFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getConstKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getConstKeyframeCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getConstKeyframeCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getConstKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getConstKeyframeCollection(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getConstKeyframeCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getConstKeyframeCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getKeyframeCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getKeyframeCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getKeyframeCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getKeyframeCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setKeyframeCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setKeyframeCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setKeyframeCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setKeyframeCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addKeyframe_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addKeyframe_grpc0() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::addKeyframe_grpc0Request, ::grpcIKeyframesManager::addKeyframe_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::addKeyframe_grpc0Request, ::grpcIKeyframesManager::addKeyframe_grpc0Response>* streamer) {
                       return this->StreamedaddKeyframe_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addKeyframe_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addKeyframe_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc0Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddKeyframe_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::addKeyframe_grpc0Request,::grpcIKeyframesManager::addKeyframe_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addKeyframe_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addKeyframe_grpc1() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::addKeyframe_grpc1Request, ::grpcIKeyframesManager::addKeyframe_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::addKeyframe_grpc1Request, ::grpcIKeyframesManager::addKeyframe_grpc1Response>* streamer) {
                       return this->StreamedaddKeyframe_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addKeyframe_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addKeyframe_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::addKeyframe_grpc1Request* /*request*/, ::grpcIKeyframesManager::addKeyframe_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddKeyframe_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::addKeyframe_grpc1Request,::grpcIKeyframesManager::addKeyframe_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getKeyframe() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::getKeyframeRequest, ::grpcIKeyframesManager::getKeyframeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::getKeyframeRequest, ::grpcIKeyframesManager::getKeyframeResponse>* streamer) {
                       return this->StreamedgetKeyframe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetKeyframe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::getKeyframeRequest,::grpcIKeyframesManager::getKeyframeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getKeyframes() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::getKeyframesRequest, ::grpcIKeyframesManager::getKeyframesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::getKeyframesRequest, ::grpcIKeyframesManager::getKeyframesResponse>* streamer) {
                       return this->StreamedgetKeyframes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetKeyframes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::getKeyframesRequest,::grpcIKeyframesManager::getKeyframesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllKeyframes() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::getAllKeyframesRequest, ::grpcIKeyframesManager::getAllKeyframesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::getAllKeyframesRequest, ::grpcIKeyframesManager::getAllKeyframesResponse>* streamer) {
                       return this->StreamedgetAllKeyframes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllKeyframes(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getAllKeyframesRequest* /*request*/, ::grpcIKeyframesManager::getAllKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllKeyframes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::getAllKeyframesRequest,::grpcIKeyframesManager::getAllKeyframesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_suppressKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_suppressKeyframe() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::suppressKeyframeRequest, ::grpcIKeyframesManager::suppressKeyframeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::suppressKeyframeRequest, ::grpcIKeyframesManager::suppressKeyframeResponse>* streamer) {
                       return this->StreamedsuppressKeyframe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_suppressKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status suppressKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::suppressKeyframeRequest* /*request*/, ::grpcIKeyframesManager::suppressKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsuppressKeyframe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::suppressKeyframeRequest,::grpcIKeyframesManager::suppressKeyframeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDescriptorType() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIKeyframesManager::getDescriptorTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIKeyframesManager::getDescriptorTypeResponse>* streamer) {
                       return this->StreamedgetDescriptorType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDescriptorType(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDescriptorType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIKeyframesManager::getDescriptorTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDescriptorType : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDescriptorType() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::setDescriptorTypeRequest, ::grpcIKeyframesManager::setDescriptorTypeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::setDescriptorTypeRequest, ::grpcIKeyframesManager::setDescriptorTypeResponse>* streamer) {
                       return this->StreamedsetDescriptorType(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDescriptorType() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDescriptorType(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setDescriptorTypeRequest* /*request*/, ::grpcIKeyframesManager::setDescriptorTypeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDescriptorType(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::setDescriptorTypeRequest,::grpcIKeyframesManager::setDescriptorTypeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isExistKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isExistKeyframe() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::isExistKeyframeRequest, ::grpcIKeyframesManager::isExistKeyframeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::isExistKeyframeRequest, ::grpcIKeyframesManager::isExistKeyframeResponse>* streamer) {
                       return this->StreamedisExistKeyframe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isExistKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isExistKeyframe(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::isExistKeyframeRequest* /*request*/, ::grpcIKeyframesManager::isExistKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisExistKeyframe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::isExistKeyframeRequest,::grpcIKeyframesManager::isExistKeyframeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNbKeyframes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNbKeyframes() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIKeyframesManager::getNbKeyframesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIKeyframesManager::getNbKeyframesResponse>* streamer) {
                       return this->StreamedgetNbKeyframes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNbKeyframes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNbKeyframes(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getNbKeyframesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNbKeyframes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIKeyframesManager::getNbKeyframesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveToFile() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::saveToFileRequest, ::grpcIKeyframesManager::saveToFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::saveToFileRequest, ::grpcIKeyframesManager::saveToFileResponse>* streamer) {
                       return this->StreamedsaveToFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::saveToFileRequest* /*request*/, ::grpcIKeyframesManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveToFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::saveToFileRequest,::grpcIKeyframesManager::saveToFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadFromFile() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::loadFromFileRequest, ::grpcIKeyframesManager::loadFromFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::loadFromFileRequest, ::grpcIKeyframesManager::loadFromFileResponse>* streamer) {
                       return this->StreamedloadFromFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::loadFromFileRequest* /*request*/, ::grpcIKeyframesManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadFromFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::loadFromFileRequest,::grpcIKeyframesManager::loadFromFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getConstKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getConstKeyframeCollection() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* streamer) {
                       return this->StreamedgetConstKeyframeCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getConstKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getConstKeyframeCollection(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetConstKeyframeCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::grpcIKeyframesManager::getConstKeyframeCollectionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getKeyframeCollection() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::getKeyframeCollectionRequest, ::grpcIKeyframesManager::getKeyframeCollectionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::getKeyframeCollectionRequest, ::grpcIKeyframesManager::getKeyframeCollectionResponse>* streamer) {
                       return this->StreamedgetKeyframeCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::getKeyframeCollectionRequest* /*request*/, ::grpcIKeyframesManager::getKeyframeCollectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetKeyframeCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::getKeyframeCollectionRequest,::grpcIKeyframesManager::getKeyframeCollectionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setKeyframeCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setKeyframeCollection() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIKeyframesManager::setKeyframeCollectionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIKeyframesManager::setKeyframeCollectionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetKeyframeCollection(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setKeyframeCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setKeyframeCollection(::grpc::ServerContext* /*context*/, const ::grpcIKeyframesManager::setKeyframeCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetKeyframeCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIKeyframesManager::setKeyframeCollectionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addKeyframe_grpc0<WithStreamedUnaryMethod_addKeyframe_grpc1<WithStreamedUnaryMethod_getKeyframe<WithStreamedUnaryMethod_getKeyframes<WithStreamedUnaryMethod_getAllKeyframes<WithStreamedUnaryMethod_suppressKeyframe<WithStreamedUnaryMethod_getDescriptorType<WithStreamedUnaryMethod_setDescriptorType<WithStreamedUnaryMethod_isExistKeyframe<WithStreamedUnaryMethod_getNbKeyframes<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_getConstKeyframeCollection<WithStreamedUnaryMethod_getKeyframeCollection<WithStreamedUnaryMethod_setKeyframeCollection<Service > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_addKeyframe_grpc0<WithStreamedUnaryMethod_addKeyframe_grpc1<WithStreamedUnaryMethod_getKeyframe<WithStreamedUnaryMethod_getKeyframes<WithStreamedUnaryMethod_getAllKeyframes<WithStreamedUnaryMethod_suppressKeyframe<WithStreamedUnaryMethod_getDescriptorType<WithStreamedUnaryMethod_setDescriptorType<WithStreamedUnaryMethod_isExistKeyframe<WithStreamedUnaryMethod_getNbKeyframes<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_getConstKeyframeCollection<WithStreamedUnaryMethod_getKeyframeCollection<WithStreamedUnaryMethod_setKeyframeCollection<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace grpcIKeyframesManager


#endif  // GRPC_grpcIKeyframesManagerService_2eproto__INCLUDED
