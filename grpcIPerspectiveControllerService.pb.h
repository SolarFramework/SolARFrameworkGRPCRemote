// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIPerspectiveControllerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIPerspectiveControllerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIPerspectiveControllerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIPerspectiveControllerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIPerspectiveControllerService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIPerspectiveControllerService_2eproto;
namespace grpcIPerspectiveController {
class correct_grpc0Request;
struct correct_grpc0RequestDefaultTypeInternal;
extern correct_grpc0RequestDefaultTypeInternal _correct_grpc0Request_default_instance_;
class correct_grpc0Response;
struct correct_grpc0ResponseDefaultTypeInternal;
extern correct_grpc0ResponseDefaultTypeInternal _correct_grpc0Response_default_instance_;
class correct_grpc1Request;
struct correct_grpc1RequestDefaultTypeInternal;
extern correct_grpc1RequestDefaultTypeInternal _correct_grpc1Request_default_instance_;
class correct_grpc1Response;
struct correct_grpc1ResponseDefaultTypeInternal;
extern correct_grpc1ResponseDefaultTypeInternal _correct_grpc1Response_default_instance_;
}  // namespace grpcIPerspectiveController
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIPerspectiveController::correct_grpc0Request* Arena::CreateMaybeMessage<::grpcIPerspectiveController::correct_grpc0Request>(Arena*);
template<> ::grpcIPerspectiveController::correct_grpc0Response* Arena::CreateMaybeMessage<::grpcIPerspectiveController::correct_grpc0Response>(Arena*);
template<> ::grpcIPerspectiveController::correct_grpc1Request* Arena::CreateMaybeMessage<::grpcIPerspectiveController::correct_grpc1Request>(Arena*);
template<> ::grpcIPerspectiveController::correct_grpc1Response* Arena::CreateMaybeMessage<::grpcIPerspectiveController::correct_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIPerspectiveController {

// ===================================================================

class correct_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPerspectiveController.correct_grpc0Request) */ {
 public:
  inline correct_grpc0Request() : correct_grpc0Request(nullptr) {}
  ~correct_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR correct_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  correct_grpc0Request(const correct_grpc0Request& from);
  correct_grpc0Request(correct_grpc0Request&& from) noexcept
    : correct_grpc0Request() {
    *this = ::std::move(from);
  }

  inline correct_grpc0Request& operator=(const correct_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline correct_grpc0Request& operator=(correct_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const correct_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const correct_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const correct_grpc0Request*>(
               &_correct_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(correct_grpc0Request& a, correct_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(correct_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(correct_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  correct_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<correct_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const correct_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const correct_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(correct_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPerspectiveController.correct_grpc0Request";
  }
  protected:
  explicit correct_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputImgFieldNumber = 2,
    kContoursFieldNumber = 3,
    kPatchesFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes inputImg = 2;
  void clear_inputimg();
  const std::string& inputimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inputimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inputimg();
  PROTOBUF_NODISCARD std::string* release_inputimg();
  void set_allocated_inputimg(std::string* inputimg);
  private:
  const std::string& _internal_inputimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputimg(const std::string& value);
  std::string* _internal_mutable_inputimg();
  public:

  // bytes contours = 3;
  void clear_contours();
  const std::string& contours() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contours(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contours();
  PROTOBUF_NODISCARD std::string* release_contours();
  void set_allocated_contours(std::string* contours);
  private:
  const std::string& _internal_contours() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contours(const std::string& value);
  std::string* _internal_mutable_contours();
  public:

  // bytes patches = 4;
  void clear_patches();
  const std::string& patches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_patches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_patches();
  PROTOBUF_NODISCARD std::string* release_patches();
  void set_allocated_patches(std::string* patches);
  private:
  const std::string& _internal_patches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patches(const std::string& value);
  std::string* _internal_mutable_patches();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPerspectiveController.correct_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputimg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patches_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPerspectiveControllerService_2eproto;
};
// -------------------------------------------------------------------

class correct_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPerspectiveController.correct_grpc0Response) */ {
 public:
  inline correct_grpc0Response() : correct_grpc0Response(nullptr) {}
  ~correct_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR correct_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  correct_grpc0Response(const correct_grpc0Response& from);
  correct_grpc0Response(correct_grpc0Response&& from) noexcept
    : correct_grpc0Response() {
    *this = ::std::move(from);
  }

  inline correct_grpc0Response& operator=(const correct_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline correct_grpc0Response& operator=(correct_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const correct_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const correct_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const correct_grpc0Response*>(
               &_correct_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(correct_grpc0Response& a, correct_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(correct_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(correct_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  correct_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<correct_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const correct_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const correct_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(correct_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPerspectiveController.correct_grpc0Response";
  }
  protected:
  explicit correct_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatchesFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes patches = 1;
  void clear_patches();
  const std::string& patches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_patches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_patches();
  PROTOBUF_NODISCARD std::string* release_patches();
  void set_allocated_patches(std::string* patches);
  private:
  const std::string& _internal_patches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patches(const std::string& value);
  std::string* _internal_mutable_patches();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPerspectiveController.correct_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patches_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPerspectiveControllerService_2eproto;
};
// -------------------------------------------------------------------

class correct_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPerspectiveController.correct_grpc1Request) */ {
 public:
  inline correct_grpc1Request() : correct_grpc1Request(nullptr) {}
  ~correct_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR correct_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  correct_grpc1Request(const correct_grpc1Request& from);
  correct_grpc1Request(correct_grpc1Request&& from) noexcept
    : correct_grpc1Request() {
    *this = ::std::move(from);
  }

  inline correct_grpc1Request& operator=(const correct_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline correct_grpc1Request& operator=(correct_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const correct_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const correct_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const correct_grpc1Request*>(
               &_correct_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(correct_grpc1Request& a, correct_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(correct_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(correct_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  correct_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<correct_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const correct_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const correct_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(correct_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPerspectiveController.correct_grpc1Request";
  }
  protected:
  explicit correct_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputImgFieldNumber = 2,
    kContourFieldNumber = 3,
    kPatchFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes inputImg = 2;
  void clear_inputimg();
  const std::string& inputimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inputimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inputimg();
  PROTOBUF_NODISCARD std::string* release_inputimg();
  void set_allocated_inputimg(std::string* inputimg);
  private:
  const std::string& _internal_inputimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inputimg(const std::string& value);
  std::string* _internal_mutable_inputimg();
  public:

  // bytes contour = 3;
  void clear_contour();
  const std::string& contour() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contour(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contour();
  PROTOBUF_NODISCARD std::string* release_contour();
  void set_allocated_contour(std::string* contour);
  private:
  const std::string& _internal_contour() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contour(const std::string& value);
  std::string* _internal_mutable_contour();
  public:

  // bytes patch = 4;
  void clear_patch();
  const std::string& patch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_patch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_patch();
  PROTOBUF_NODISCARD std::string* release_patch();
  void set_allocated_patch(std::string* patch);
  private:
  const std::string& _internal_patch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patch(const std::string& value);
  std::string* _internal_mutable_patch();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPerspectiveController.correct_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputimg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contour_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patch_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPerspectiveControllerService_2eproto;
};
// -------------------------------------------------------------------

class correct_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIPerspectiveController.correct_grpc1Response) */ {
 public:
  inline correct_grpc1Response() : correct_grpc1Response(nullptr) {}
  ~correct_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR correct_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  correct_grpc1Response(const correct_grpc1Response& from);
  correct_grpc1Response(correct_grpc1Response&& from) noexcept
    : correct_grpc1Response() {
    *this = ::std::move(from);
  }

  inline correct_grpc1Response& operator=(const correct_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline correct_grpc1Response& operator=(correct_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const correct_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const correct_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const correct_grpc1Response*>(
               &_correct_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(correct_grpc1Response& a, correct_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(correct_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(correct_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  correct_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<correct_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const correct_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const correct_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(correct_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIPerspectiveController.correct_grpc1Response";
  }
  protected:
  explicit correct_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatchFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes patch = 1;
  void clear_patch();
  const std::string& patch() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_patch(ArgT0&& arg0, ArgT... args);
  std::string* mutable_patch();
  PROTOBUF_NODISCARD std::string* release_patch();
  void set_allocated_patch(std::string* patch);
  private:
  const std::string& _internal_patch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patch(const std::string& value);
  std::string* _internal_mutable_patch();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIPerspectiveController.correct_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patch_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIPerspectiveControllerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// correct_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void correct_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t correct_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t correct_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void correct_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void correct_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc0Request.grpcServerCompressionFormat)
}

// bytes inputImg = 2;
inline void correct_grpc0Request::clear_inputimg() {
  inputimg_.ClearToEmpty();
}
inline const std::string& correct_grpc0Request::inputimg() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc0Request.inputImg)
  return _internal_inputimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc0Request::set_inputimg(ArgT0&& arg0, ArgT... args) {
 
 inputimg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc0Request.inputImg)
}
inline std::string* correct_grpc0Request::mutable_inputimg() {
  std::string* _s = _internal_mutable_inputimg();
  // @@protoc_insertion_point(field_mutable:grpcIPerspectiveController.correct_grpc0Request.inputImg)
  return _s;
}
inline const std::string& correct_grpc0Request::_internal_inputimg() const {
  return inputimg_.Get();
}
inline void correct_grpc0Request::_internal_set_inputimg(const std::string& value) {
  
  inputimg_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::_internal_mutable_inputimg() {
  
  return inputimg_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::release_inputimg() {
  // @@protoc_insertion_point(field_release:grpcIPerspectiveController.correct_grpc0Request.inputImg)
  return inputimg_.Release();
}
inline void correct_grpc0Request::set_allocated_inputimg(std::string* inputimg) {
  if (inputimg != nullptr) {
    
  } else {
    
  }
  inputimg_.SetAllocated(inputimg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inputimg_.IsDefault()) {
    inputimg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIPerspectiveController.correct_grpc0Request.inputImg)
}

// bytes contours = 3;
inline void correct_grpc0Request::clear_contours() {
  contours_.ClearToEmpty();
}
inline const std::string& correct_grpc0Request::contours() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc0Request.contours)
  return _internal_contours();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc0Request::set_contours(ArgT0&& arg0, ArgT... args) {
 
 contours_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc0Request.contours)
}
inline std::string* correct_grpc0Request::mutable_contours() {
  std::string* _s = _internal_mutable_contours();
  // @@protoc_insertion_point(field_mutable:grpcIPerspectiveController.correct_grpc0Request.contours)
  return _s;
}
inline const std::string& correct_grpc0Request::_internal_contours() const {
  return contours_.Get();
}
inline void correct_grpc0Request::_internal_set_contours(const std::string& value) {
  
  contours_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::_internal_mutable_contours() {
  
  return contours_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::release_contours() {
  // @@protoc_insertion_point(field_release:grpcIPerspectiveController.correct_grpc0Request.contours)
  return contours_.Release();
}
inline void correct_grpc0Request::set_allocated_contours(std::string* contours) {
  if (contours != nullptr) {
    
  } else {
    
  }
  contours_.SetAllocated(contours, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contours_.IsDefault()) {
    contours_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIPerspectiveController.correct_grpc0Request.contours)
}

// bytes patches = 4;
inline void correct_grpc0Request::clear_patches() {
  patches_.ClearToEmpty();
}
inline const std::string& correct_grpc0Request::patches() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc0Request.patches)
  return _internal_patches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc0Request::set_patches(ArgT0&& arg0, ArgT... args) {
 
 patches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc0Request.patches)
}
inline std::string* correct_grpc0Request::mutable_patches() {
  std::string* _s = _internal_mutable_patches();
  // @@protoc_insertion_point(field_mutable:grpcIPerspectiveController.correct_grpc0Request.patches)
  return _s;
}
inline const std::string& correct_grpc0Request::_internal_patches() const {
  return patches_.Get();
}
inline void correct_grpc0Request::_internal_set_patches(const std::string& value) {
  
  patches_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::_internal_mutable_patches() {
  
  return patches_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc0Request::release_patches() {
  // @@protoc_insertion_point(field_release:grpcIPerspectiveController.correct_grpc0Request.patches)
  return patches_.Release();
}
inline void correct_grpc0Request::set_allocated_patches(std::string* patches) {
  if (patches != nullptr) {
    
  } else {
    
  }
  patches_.SetAllocated(patches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (patches_.IsDefault()) {
    patches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIPerspectiveController.correct_grpc0Request.patches)
}

// -------------------------------------------------------------------

// correct_grpc0Response

// bytes patches = 1;
inline void correct_grpc0Response::clear_patches() {
  patches_.ClearToEmpty();
}
inline const std::string& correct_grpc0Response::patches() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc0Response.patches)
  return _internal_patches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc0Response::set_patches(ArgT0&& arg0, ArgT... args) {
 
 patches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc0Response.patches)
}
inline std::string* correct_grpc0Response::mutable_patches() {
  std::string* _s = _internal_mutable_patches();
  // @@protoc_insertion_point(field_mutable:grpcIPerspectiveController.correct_grpc0Response.patches)
  return _s;
}
inline const std::string& correct_grpc0Response::_internal_patches() const {
  return patches_.Get();
}
inline void correct_grpc0Response::_internal_set_patches(const std::string& value) {
  
  patches_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc0Response::_internal_mutable_patches() {
  
  return patches_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc0Response::release_patches() {
  // @@protoc_insertion_point(field_release:grpcIPerspectiveController.correct_grpc0Response.patches)
  return patches_.Release();
}
inline void correct_grpc0Response::set_allocated_patches(std::string* patches) {
  if (patches != nullptr) {
    
  } else {
    
  }
  patches_.SetAllocated(patches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (patches_.IsDefault()) {
    patches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIPerspectiveController.correct_grpc0Response.patches)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void correct_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t correct_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t correct_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void correct_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void correct_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// correct_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void correct_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t correct_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t correct_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void correct_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void correct_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc1Request.grpcServerCompressionFormat)
}

// bytes inputImg = 2;
inline void correct_grpc1Request::clear_inputimg() {
  inputimg_.ClearToEmpty();
}
inline const std::string& correct_grpc1Request::inputimg() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc1Request.inputImg)
  return _internal_inputimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Request::set_inputimg(ArgT0&& arg0, ArgT... args) {
 
 inputimg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc1Request.inputImg)
}
inline std::string* correct_grpc1Request::mutable_inputimg() {
  std::string* _s = _internal_mutable_inputimg();
  // @@protoc_insertion_point(field_mutable:grpcIPerspectiveController.correct_grpc1Request.inputImg)
  return _s;
}
inline const std::string& correct_grpc1Request::_internal_inputimg() const {
  return inputimg_.Get();
}
inline void correct_grpc1Request::_internal_set_inputimg(const std::string& value) {
  
  inputimg_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::_internal_mutable_inputimg() {
  
  return inputimg_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::release_inputimg() {
  // @@protoc_insertion_point(field_release:grpcIPerspectiveController.correct_grpc1Request.inputImg)
  return inputimg_.Release();
}
inline void correct_grpc1Request::set_allocated_inputimg(std::string* inputimg) {
  if (inputimg != nullptr) {
    
  } else {
    
  }
  inputimg_.SetAllocated(inputimg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inputimg_.IsDefault()) {
    inputimg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIPerspectiveController.correct_grpc1Request.inputImg)
}

// bytes contour = 3;
inline void correct_grpc1Request::clear_contour() {
  contour_.ClearToEmpty();
}
inline const std::string& correct_grpc1Request::contour() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc1Request.contour)
  return _internal_contour();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Request::set_contour(ArgT0&& arg0, ArgT... args) {
 
 contour_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc1Request.contour)
}
inline std::string* correct_grpc1Request::mutable_contour() {
  std::string* _s = _internal_mutable_contour();
  // @@protoc_insertion_point(field_mutable:grpcIPerspectiveController.correct_grpc1Request.contour)
  return _s;
}
inline const std::string& correct_grpc1Request::_internal_contour() const {
  return contour_.Get();
}
inline void correct_grpc1Request::_internal_set_contour(const std::string& value) {
  
  contour_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::_internal_mutable_contour() {
  
  return contour_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::release_contour() {
  // @@protoc_insertion_point(field_release:grpcIPerspectiveController.correct_grpc1Request.contour)
  return contour_.Release();
}
inline void correct_grpc1Request::set_allocated_contour(std::string* contour) {
  if (contour != nullptr) {
    
  } else {
    
  }
  contour_.SetAllocated(contour, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (contour_.IsDefault()) {
    contour_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIPerspectiveController.correct_grpc1Request.contour)
}

// bytes patch = 4;
inline void correct_grpc1Request::clear_patch() {
  patch_.ClearToEmpty();
}
inline const std::string& correct_grpc1Request::patch() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc1Request.patch)
  return _internal_patch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Request::set_patch(ArgT0&& arg0, ArgT... args) {
 
 patch_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc1Request.patch)
}
inline std::string* correct_grpc1Request::mutable_patch() {
  std::string* _s = _internal_mutable_patch();
  // @@protoc_insertion_point(field_mutable:grpcIPerspectiveController.correct_grpc1Request.patch)
  return _s;
}
inline const std::string& correct_grpc1Request::_internal_patch() const {
  return patch_.Get();
}
inline void correct_grpc1Request::_internal_set_patch(const std::string& value) {
  
  patch_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::_internal_mutable_patch() {
  
  return patch_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Request::release_patch() {
  // @@protoc_insertion_point(field_release:grpcIPerspectiveController.correct_grpc1Request.patch)
  return patch_.Release();
}
inline void correct_grpc1Request::set_allocated_patch(std::string* patch) {
  if (patch != nullptr) {
    
  } else {
    
  }
  patch_.SetAllocated(patch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (patch_.IsDefault()) {
    patch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIPerspectiveController.correct_grpc1Request.patch)
}

// -------------------------------------------------------------------

// correct_grpc1Response

// bytes patch = 1;
inline void correct_grpc1Response::clear_patch() {
  patch_.ClearToEmpty();
}
inline const std::string& correct_grpc1Response::patch() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc1Response.patch)
  return _internal_patch();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void correct_grpc1Response::set_patch(ArgT0&& arg0, ArgT... args) {
 
 patch_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc1Response.patch)
}
inline std::string* correct_grpc1Response::mutable_patch() {
  std::string* _s = _internal_mutable_patch();
  // @@protoc_insertion_point(field_mutable:grpcIPerspectiveController.correct_grpc1Response.patch)
  return _s;
}
inline const std::string& correct_grpc1Response::_internal_patch() const {
  return patch_.Get();
}
inline void correct_grpc1Response::_internal_set_patch(const std::string& value) {
  
  patch_.Set(value, GetArenaForAllocation());
}
inline std::string* correct_grpc1Response::_internal_mutable_patch() {
  
  return patch_.Mutable(GetArenaForAllocation());
}
inline std::string* correct_grpc1Response::release_patch() {
  // @@protoc_insertion_point(field_release:grpcIPerspectiveController.correct_grpc1Response.patch)
  return patch_.Release();
}
inline void correct_grpc1Response::set_allocated_patch(std::string* patch) {
  if (patch != nullptr) {
    
  } else {
    
  }
  patch_.SetAllocated(patch, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (patch_.IsDefault()) {
    patch_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIPerspectiveController.correct_grpc1Response.patch)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void correct_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t correct_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t correct_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIPerspectiveController.correct_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void correct_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void correct_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIPerspectiveController.correct_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIPerspectiveController

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIPerspectiveControllerService_2eproto
