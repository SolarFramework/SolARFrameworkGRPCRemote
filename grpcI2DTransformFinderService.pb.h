// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcI2DTransformFinderService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcI2DTransformFinderService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcI2DTransformFinderService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcI2DTransformFinderService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcI2DTransformFinderService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcI2DTransformFinderService_2eproto;
namespace grpcI2DTransformFinder {
class findTransform2DRequest;
struct findTransform2DRequestDefaultTypeInternal;
extern findTransform2DRequestDefaultTypeInternal _findTransform2DRequest_default_instance_;
class findTransform2DResponse;
struct findTransform2DResponseDefaultTypeInternal;
extern findTransform2DResponseDefaultTypeInternal _findTransform2DResponse_default_instance_;
}  // namespace grpcI2DTransformFinder
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcI2DTransformFinder::findTransform2DRequest* Arena::CreateMaybeMessage<::grpcI2DTransformFinder::findTransform2DRequest>(Arena*);
template<> ::grpcI2DTransformFinder::findTransform2DResponse* Arena::CreateMaybeMessage<::grpcI2DTransformFinder::findTransform2DResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcI2DTransformFinder {

// ===================================================================

class findTransform2DRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DTransformFinder.findTransform2DRequest) */ {
 public:
  inline findTransform2DRequest() : findTransform2DRequest(nullptr) {}
  ~findTransform2DRequest() override;
  explicit PROTOBUF_CONSTEXPR findTransform2DRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  findTransform2DRequest(const findTransform2DRequest& from);
  findTransform2DRequest(findTransform2DRequest&& from) noexcept
    : findTransform2DRequest() {
    *this = ::std::move(from);
  }

  inline findTransform2DRequest& operator=(const findTransform2DRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline findTransform2DRequest& operator=(findTransform2DRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const findTransform2DRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const findTransform2DRequest* internal_default_instance() {
    return reinterpret_cast<const findTransform2DRequest*>(
               &_findTransform2DRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(findTransform2DRequest& a, findTransform2DRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(findTransform2DRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(findTransform2DRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  findTransform2DRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<findTransform2DRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const findTransform2DRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const findTransform2DRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(findTransform2DRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DTransformFinder.findTransform2DRequest";
  }
  protected:
  explicit findTransform2DRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcPointsFieldNumber = 2,
    kDstPointsFieldNumber = 3,
    kFundamentalFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes srcPoints = 2;
  void clear_srcpoints();
  const std::string& srcpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_srcpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_srcpoints();
  PROTOBUF_NODISCARD std::string* release_srcpoints();
  void set_allocated_srcpoints(std::string* srcpoints);
  private:
  const std::string& _internal_srcpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_srcpoints(const std::string& value);
  std::string* _internal_mutable_srcpoints();
  public:

  // bytes dstPoints = 3;
  void clear_dstpoints();
  const std::string& dstpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dstpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dstpoints();
  PROTOBUF_NODISCARD std::string* release_dstpoints();
  void set_allocated_dstpoints(std::string* dstpoints);
  private:
  const std::string& _internal_dstpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dstpoints(const std::string& value);
  std::string* _internal_mutable_dstpoints();
  public:

  // bytes fundamental = 4;
  void clear_fundamental();
  const std::string& fundamental() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fundamental(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fundamental();
  PROTOBUF_NODISCARD std::string* release_fundamental();
  void set_allocated_fundamental(std::string* fundamental);
  private:
  const std::string& _internal_fundamental() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fundamental(const std::string& value);
  std::string* _internal_mutable_fundamental();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DTransformFinder.findTransform2DRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr srcpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dstpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundamental_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DTransformFinderService_2eproto;
};
// -------------------------------------------------------------------

class findTransform2DResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DTransformFinder.findTransform2DResponse) */ {
 public:
  inline findTransform2DResponse() : findTransform2DResponse(nullptr) {}
  ~findTransform2DResponse() override;
  explicit PROTOBUF_CONSTEXPR findTransform2DResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  findTransform2DResponse(const findTransform2DResponse& from);
  findTransform2DResponse(findTransform2DResponse&& from) noexcept
    : findTransform2DResponse() {
    *this = ::std::move(from);
  }

  inline findTransform2DResponse& operator=(const findTransform2DResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline findTransform2DResponse& operator=(findTransform2DResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const findTransform2DResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const findTransform2DResponse* internal_default_instance() {
    return reinterpret_cast<const findTransform2DResponse*>(
               &_findTransform2DResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(findTransform2DResponse& a, findTransform2DResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(findTransform2DResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(findTransform2DResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  findTransform2DResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<findTransform2DResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const findTransform2DResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const findTransform2DResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(findTransform2DResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DTransformFinder.findTransform2DResponse";
  }
  protected:
  explicit findTransform2DResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFundamentalFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes fundamental = 1;
  void clear_fundamental();
  const std::string& fundamental() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fundamental(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fundamental();
  PROTOBUF_NODISCARD std::string* release_fundamental();
  void set_allocated_fundamental(std::string* fundamental);
  private:
  const std::string& _internal_fundamental() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fundamental(const std::string& value);
  std::string* _internal_mutable_fundamental();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DTransformFinder.findTransform2DResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundamental_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DTransformFinderService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// findTransform2DRequest

// int32 grpcServerCompressionFormat = 1;
inline void findTransform2DRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t findTransform2DRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t findTransform2DRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI2DTransformFinder.findTransform2DRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void findTransform2DRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void findTransform2DRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI2DTransformFinder.findTransform2DRequest.grpcServerCompressionFormat)
}

// bytes srcPoints = 2;
inline void findTransform2DRequest::clear_srcpoints() {
  srcpoints_.ClearToEmpty();
}
inline const std::string& findTransform2DRequest::srcpoints() const {
  // @@protoc_insertion_point(field_get:grpcI2DTransformFinder.findTransform2DRequest.srcPoints)
  return _internal_srcpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findTransform2DRequest::set_srcpoints(ArgT0&& arg0, ArgT... args) {
 
 srcpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2DTransformFinder.findTransform2DRequest.srcPoints)
}
inline std::string* findTransform2DRequest::mutable_srcpoints() {
  std::string* _s = _internal_mutable_srcpoints();
  // @@protoc_insertion_point(field_mutable:grpcI2DTransformFinder.findTransform2DRequest.srcPoints)
  return _s;
}
inline const std::string& findTransform2DRequest::_internal_srcpoints() const {
  return srcpoints_.Get();
}
inline void findTransform2DRequest::_internal_set_srcpoints(const std::string& value) {
  
  srcpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* findTransform2DRequest::_internal_mutable_srcpoints() {
  
  return srcpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* findTransform2DRequest::release_srcpoints() {
  // @@protoc_insertion_point(field_release:grpcI2DTransformFinder.findTransform2DRequest.srcPoints)
  return srcpoints_.Release();
}
inline void findTransform2DRequest::set_allocated_srcpoints(std::string* srcpoints) {
  if (srcpoints != nullptr) {
    
  } else {
    
  }
  srcpoints_.SetAllocated(srcpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (srcpoints_.IsDefault()) {
    srcpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI2DTransformFinder.findTransform2DRequest.srcPoints)
}

// bytes dstPoints = 3;
inline void findTransform2DRequest::clear_dstpoints() {
  dstpoints_.ClearToEmpty();
}
inline const std::string& findTransform2DRequest::dstpoints() const {
  // @@protoc_insertion_point(field_get:grpcI2DTransformFinder.findTransform2DRequest.dstPoints)
  return _internal_dstpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findTransform2DRequest::set_dstpoints(ArgT0&& arg0, ArgT... args) {
 
 dstpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2DTransformFinder.findTransform2DRequest.dstPoints)
}
inline std::string* findTransform2DRequest::mutable_dstpoints() {
  std::string* _s = _internal_mutable_dstpoints();
  // @@protoc_insertion_point(field_mutable:grpcI2DTransformFinder.findTransform2DRequest.dstPoints)
  return _s;
}
inline const std::string& findTransform2DRequest::_internal_dstpoints() const {
  return dstpoints_.Get();
}
inline void findTransform2DRequest::_internal_set_dstpoints(const std::string& value) {
  
  dstpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* findTransform2DRequest::_internal_mutable_dstpoints() {
  
  return dstpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* findTransform2DRequest::release_dstpoints() {
  // @@protoc_insertion_point(field_release:grpcI2DTransformFinder.findTransform2DRequest.dstPoints)
  return dstpoints_.Release();
}
inline void findTransform2DRequest::set_allocated_dstpoints(std::string* dstpoints) {
  if (dstpoints != nullptr) {
    
  } else {
    
  }
  dstpoints_.SetAllocated(dstpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dstpoints_.IsDefault()) {
    dstpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI2DTransformFinder.findTransform2DRequest.dstPoints)
}

// bytes fundamental = 4;
inline void findTransform2DRequest::clear_fundamental() {
  fundamental_.ClearToEmpty();
}
inline const std::string& findTransform2DRequest::fundamental() const {
  // @@protoc_insertion_point(field_get:grpcI2DTransformFinder.findTransform2DRequest.fundamental)
  return _internal_fundamental();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findTransform2DRequest::set_fundamental(ArgT0&& arg0, ArgT... args) {
 
 fundamental_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2DTransformFinder.findTransform2DRequest.fundamental)
}
inline std::string* findTransform2DRequest::mutable_fundamental() {
  std::string* _s = _internal_mutable_fundamental();
  // @@protoc_insertion_point(field_mutable:grpcI2DTransformFinder.findTransform2DRequest.fundamental)
  return _s;
}
inline const std::string& findTransform2DRequest::_internal_fundamental() const {
  return fundamental_.Get();
}
inline void findTransform2DRequest::_internal_set_fundamental(const std::string& value) {
  
  fundamental_.Set(value, GetArenaForAllocation());
}
inline std::string* findTransform2DRequest::_internal_mutable_fundamental() {
  
  return fundamental_.Mutable(GetArenaForAllocation());
}
inline std::string* findTransform2DRequest::release_fundamental() {
  // @@protoc_insertion_point(field_release:grpcI2DTransformFinder.findTransform2DRequest.fundamental)
  return fundamental_.Release();
}
inline void findTransform2DRequest::set_allocated_fundamental(std::string* fundamental) {
  if (fundamental != nullptr) {
    
  } else {
    
  }
  fundamental_.SetAllocated(fundamental, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fundamental_.IsDefault()) {
    fundamental_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI2DTransformFinder.findTransform2DRequest.fundamental)
}

// -------------------------------------------------------------------

// findTransform2DResponse

// bytes fundamental = 1;
inline void findTransform2DResponse::clear_fundamental() {
  fundamental_.ClearToEmpty();
}
inline const std::string& findTransform2DResponse::fundamental() const {
  // @@protoc_insertion_point(field_get:grpcI2DTransformFinder.findTransform2DResponse.fundamental)
  return _internal_fundamental();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void findTransform2DResponse::set_fundamental(ArgT0&& arg0, ArgT... args) {
 
 fundamental_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI2DTransformFinder.findTransform2DResponse.fundamental)
}
inline std::string* findTransform2DResponse::mutable_fundamental() {
  std::string* _s = _internal_mutable_fundamental();
  // @@protoc_insertion_point(field_mutable:grpcI2DTransformFinder.findTransform2DResponse.fundamental)
  return _s;
}
inline const std::string& findTransform2DResponse::_internal_fundamental() const {
  return fundamental_.Get();
}
inline void findTransform2DResponse::_internal_set_fundamental(const std::string& value) {
  
  fundamental_.Set(value, GetArenaForAllocation());
}
inline std::string* findTransform2DResponse::_internal_mutable_fundamental() {
  
  return fundamental_.Mutable(GetArenaForAllocation());
}
inline std::string* findTransform2DResponse::release_fundamental() {
  // @@protoc_insertion_point(field_release:grpcI2DTransformFinder.findTransform2DResponse.fundamental)
  return fundamental_.Release();
}
inline void findTransform2DResponse::set_allocated_fundamental(std::string* fundamental) {
  if (fundamental != nullptr) {
    
  } else {
    
  }
  fundamental_.SetAllocated(fundamental, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fundamental_.IsDefault()) {
    fundamental_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI2DTransformFinder.findTransform2DResponse.fundamental)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void findTransform2DResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t findTransform2DResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t findTransform2DResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI2DTransformFinder.findTransform2DResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void findTransform2DResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void findTransform2DResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI2DTransformFinder.findTransform2DResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcI2DTransformFinder

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcI2DTransformFinderService_2eproto
