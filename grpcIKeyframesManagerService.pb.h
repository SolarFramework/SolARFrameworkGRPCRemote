// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIKeyframesManagerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIKeyframesManagerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIKeyframesManagerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIKeyframesManagerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIKeyframesManagerService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIKeyframesManagerService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(int index);
namespace grpcIKeyframesManager {
class addKeyframe_grpc0Request;
struct addKeyframe_grpc0RequestDefaultTypeInternal;
extern addKeyframe_grpc0RequestDefaultTypeInternal _addKeyframe_grpc0Request_default_instance_;
class addKeyframe_grpc0Response;
struct addKeyframe_grpc0ResponseDefaultTypeInternal;
extern addKeyframe_grpc0ResponseDefaultTypeInternal _addKeyframe_grpc0Response_default_instance_;
class addKeyframe_grpc1Request;
struct addKeyframe_grpc1RequestDefaultTypeInternal;
extern addKeyframe_grpc1RequestDefaultTypeInternal _addKeyframe_grpc1Request_default_instance_;
class addKeyframe_grpc1Response;
struct addKeyframe_grpc1ResponseDefaultTypeInternal;
extern addKeyframe_grpc1ResponseDefaultTypeInternal _addKeyframe_grpc1Response_default_instance_;
class getAllKeyframesRequest;
struct getAllKeyframesRequestDefaultTypeInternal;
extern getAllKeyframesRequestDefaultTypeInternal _getAllKeyframesRequest_default_instance_;
class getAllKeyframesResponse;
struct getAllKeyframesResponseDefaultTypeInternal;
extern getAllKeyframesResponseDefaultTypeInternal _getAllKeyframesResponse_default_instance_;
class getConstKeyframeCollectionResponse;
struct getConstKeyframeCollectionResponseDefaultTypeInternal;
extern getConstKeyframeCollectionResponseDefaultTypeInternal _getConstKeyframeCollectionResponse_default_instance_;
class getDescriptorTypeResponse;
struct getDescriptorTypeResponseDefaultTypeInternal;
extern getDescriptorTypeResponseDefaultTypeInternal _getDescriptorTypeResponse_default_instance_;
class getKeyframeCollectionRequest;
struct getKeyframeCollectionRequestDefaultTypeInternal;
extern getKeyframeCollectionRequestDefaultTypeInternal _getKeyframeCollectionRequest_default_instance_;
class getKeyframeCollectionResponse;
struct getKeyframeCollectionResponseDefaultTypeInternal;
extern getKeyframeCollectionResponseDefaultTypeInternal _getKeyframeCollectionResponse_default_instance_;
class getKeyframeRequest;
struct getKeyframeRequestDefaultTypeInternal;
extern getKeyframeRequestDefaultTypeInternal _getKeyframeRequest_default_instance_;
class getKeyframeResponse;
struct getKeyframeResponseDefaultTypeInternal;
extern getKeyframeResponseDefaultTypeInternal _getKeyframeResponse_default_instance_;
class getKeyframesRequest;
struct getKeyframesRequestDefaultTypeInternal;
extern getKeyframesRequestDefaultTypeInternal _getKeyframesRequest_default_instance_;
class getKeyframesResponse;
struct getKeyframesResponseDefaultTypeInternal;
extern getKeyframesResponseDefaultTypeInternal _getKeyframesResponse_default_instance_;
class getNbKeyframesResponse;
struct getNbKeyframesResponseDefaultTypeInternal;
extern getNbKeyframesResponseDefaultTypeInternal _getNbKeyframesResponse_default_instance_;
class isExistKeyframeRequest;
struct isExistKeyframeRequestDefaultTypeInternal;
extern isExistKeyframeRequestDefaultTypeInternal _isExistKeyframeRequest_default_instance_;
class isExistKeyframeResponse;
struct isExistKeyframeResponseDefaultTypeInternal;
extern isExistKeyframeResponseDefaultTypeInternal _isExistKeyframeResponse_default_instance_;
class loadFromFileRequest;
struct loadFromFileRequestDefaultTypeInternal;
extern loadFromFileRequestDefaultTypeInternal _loadFromFileRequest_default_instance_;
class loadFromFileResponse;
struct loadFromFileResponseDefaultTypeInternal;
extern loadFromFileResponseDefaultTypeInternal _loadFromFileResponse_default_instance_;
class saveToFileRequest;
struct saveToFileRequestDefaultTypeInternal;
extern saveToFileRequestDefaultTypeInternal _saveToFileRequest_default_instance_;
class saveToFileResponse;
struct saveToFileResponseDefaultTypeInternal;
extern saveToFileResponseDefaultTypeInternal _saveToFileResponse_default_instance_;
class setDescriptorTypeRequest;
struct setDescriptorTypeRequestDefaultTypeInternal;
extern setDescriptorTypeRequestDefaultTypeInternal _setDescriptorTypeRequest_default_instance_;
class setDescriptorTypeResponse;
struct setDescriptorTypeResponseDefaultTypeInternal;
extern setDescriptorTypeResponseDefaultTypeInternal _setDescriptorTypeResponse_default_instance_;
class setKeyframeCollectionRequest;
struct setKeyframeCollectionRequestDefaultTypeInternal;
extern setKeyframeCollectionRequestDefaultTypeInternal _setKeyframeCollectionRequest_default_instance_;
class suppressKeyframeRequest;
struct suppressKeyframeRequestDefaultTypeInternal;
extern suppressKeyframeRequestDefaultTypeInternal _suppressKeyframeRequest_default_instance_;
class suppressKeyframeResponse;
struct suppressKeyframeResponseDefaultTypeInternal;
extern suppressKeyframeResponseDefaultTypeInternal _suppressKeyframeResponse_default_instance_;
}  // namespace grpcIKeyframesManager
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIKeyframesManager::addKeyframe_grpc0Request* Arena::CreateMaybeMessage<::grpcIKeyframesManager::addKeyframe_grpc0Request>(Arena*);
template<> ::grpcIKeyframesManager::addKeyframe_grpc0Response* Arena::CreateMaybeMessage<::grpcIKeyframesManager::addKeyframe_grpc0Response>(Arena*);
template<> ::grpcIKeyframesManager::addKeyframe_grpc1Request* Arena::CreateMaybeMessage<::grpcIKeyframesManager::addKeyframe_grpc1Request>(Arena*);
template<> ::grpcIKeyframesManager::addKeyframe_grpc1Response* Arena::CreateMaybeMessage<::grpcIKeyframesManager::addKeyframe_grpc1Response>(Arena*);
template<> ::grpcIKeyframesManager::getAllKeyframesRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getAllKeyframesRequest>(Arena*);
template<> ::grpcIKeyframesManager::getAllKeyframesResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getAllKeyframesResponse>(Arena*);
template<> ::grpcIKeyframesManager::getConstKeyframeCollectionResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getConstKeyframeCollectionResponse>(Arena*);
template<> ::grpcIKeyframesManager::getDescriptorTypeResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getDescriptorTypeResponse>(Arena*);
template<> ::grpcIKeyframesManager::getKeyframeCollectionRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getKeyframeCollectionRequest>(Arena*);
template<> ::grpcIKeyframesManager::getKeyframeCollectionResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getKeyframeCollectionResponse>(Arena*);
template<> ::grpcIKeyframesManager::getKeyframeRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getKeyframeRequest>(Arena*);
template<> ::grpcIKeyframesManager::getKeyframeResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getKeyframeResponse>(Arena*);
template<> ::grpcIKeyframesManager::getKeyframesRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getKeyframesRequest>(Arena*);
template<> ::grpcIKeyframesManager::getKeyframesResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getKeyframesResponse>(Arena*);
template<> ::grpcIKeyframesManager::getNbKeyframesResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::getNbKeyframesResponse>(Arena*);
template<> ::grpcIKeyframesManager::isExistKeyframeRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::isExistKeyframeRequest>(Arena*);
template<> ::grpcIKeyframesManager::isExistKeyframeResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::isExistKeyframeResponse>(Arena*);
template<> ::grpcIKeyframesManager::loadFromFileRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::loadFromFileRequest>(Arena*);
template<> ::grpcIKeyframesManager::loadFromFileResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::loadFromFileResponse>(Arena*);
template<> ::grpcIKeyframesManager::saveToFileRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::saveToFileRequest>(Arena*);
template<> ::grpcIKeyframesManager::saveToFileResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::saveToFileResponse>(Arena*);
template<> ::grpcIKeyframesManager::setDescriptorTypeRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::setDescriptorTypeRequest>(Arena*);
template<> ::grpcIKeyframesManager::setDescriptorTypeResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::setDescriptorTypeResponse>(Arena*);
template<> ::grpcIKeyframesManager::setKeyframeCollectionRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::setKeyframeCollectionRequest>(Arena*);
template<> ::grpcIKeyframesManager::suppressKeyframeRequest* Arena::CreateMaybeMessage<::grpcIKeyframesManager::suppressKeyframeRequest>(Arena*);
template<> ::grpcIKeyframesManager::suppressKeyframeResponse* Arena::CreateMaybeMessage<::grpcIKeyframesManager::suppressKeyframeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIKeyframesManager {

// ===================================================================

class addKeyframe_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.addKeyframe_grpc0Request) */ {
 public:
  inline addKeyframe_grpc0Request() : addKeyframe_grpc0Request(nullptr) {}
  virtual ~addKeyframe_grpc0Request();
  explicit constexpr addKeyframe_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframe_grpc0Request(const addKeyframe_grpc0Request& from);
  addKeyframe_grpc0Request(addKeyframe_grpc0Request&& from) noexcept
    : addKeyframe_grpc0Request() {
    *this = ::std::move(from);
  }

  inline addKeyframe_grpc0Request& operator=(const addKeyframe_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframe_grpc0Request& operator=(addKeyframe_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addKeyframe_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframe_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const addKeyframe_grpc0Request*>(
               &_addKeyframe_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(addKeyframe_grpc0Request& a, addKeyframe_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframe_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframe_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addKeyframe_grpc0Request* New() const final {
    return CreateMaybeMessage<addKeyframe_grpc0Request>(nullptr);
  }

  addKeyframe_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addKeyframe_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addKeyframe_grpc0Request& from);
  void MergeFrom(const addKeyframe_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframe_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.addKeyframe_grpc0Request";
  }
  protected:
  explicit addKeyframe_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
  };
  // bytes keyframe = 1;
  void clear_keyframe();
  const std::string& keyframe() const;
  void set_keyframe(const std::string& value);
  void set_keyframe(std::string&& value);
  void set_keyframe(const char* value);
  void set_keyframe(const void* value, size_t size);
  std::string* mutable_keyframe();
  std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.addKeyframe_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class addKeyframe_grpc0Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.addKeyframe_grpc0Response) */ {
 public:
  inline addKeyframe_grpc0Response() : addKeyframe_grpc0Response(nullptr) {}
  virtual ~addKeyframe_grpc0Response();
  explicit constexpr addKeyframe_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframe_grpc0Response(const addKeyframe_grpc0Response& from);
  addKeyframe_grpc0Response(addKeyframe_grpc0Response&& from) noexcept
    : addKeyframe_grpc0Response() {
    *this = ::std::move(from);
  }

  inline addKeyframe_grpc0Response& operator=(const addKeyframe_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframe_grpc0Response& operator=(addKeyframe_grpc0Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addKeyframe_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframe_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const addKeyframe_grpc0Response*>(
               &_addKeyframe_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(addKeyframe_grpc0Response& a, addKeyframe_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframe_grpc0Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframe_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addKeyframe_grpc0Response* New() const final {
    return CreateMaybeMessage<addKeyframe_grpc0Response>(nullptr);
  }

  addKeyframe_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addKeyframe_grpc0Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addKeyframe_grpc0Response& from);
  void MergeFrom(const addKeyframe_grpc0Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframe_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.addKeyframe_grpc0Response";
  }
  protected:
  explicit addKeyframe_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.addKeyframe_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class addKeyframe_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.addKeyframe_grpc1Request) */ {
 public:
  inline addKeyframe_grpc1Request() : addKeyframe_grpc1Request(nullptr) {}
  virtual ~addKeyframe_grpc1Request();
  explicit constexpr addKeyframe_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframe_grpc1Request(const addKeyframe_grpc1Request& from);
  addKeyframe_grpc1Request(addKeyframe_grpc1Request&& from) noexcept
    : addKeyframe_grpc1Request() {
    *this = ::std::move(from);
  }

  inline addKeyframe_grpc1Request& operator=(const addKeyframe_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframe_grpc1Request& operator=(addKeyframe_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addKeyframe_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframe_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const addKeyframe_grpc1Request*>(
               &_addKeyframe_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(addKeyframe_grpc1Request& a, addKeyframe_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframe_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframe_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addKeyframe_grpc1Request* New() const final {
    return CreateMaybeMessage<addKeyframe_grpc1Request>(nullptr);
  }

  addKeyframe_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addKeyframe_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addKeyframe_grpc1Request& from);
  void MergeFrom(const addKeyframe_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframe_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.addKeyframe_grpc1Request";
  }
  protected:
  explicit addKeyframe_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
  };
  // bytes keyframe = 1;
  void clear_keyframe();
  const std::string& keyframe() const;
  void set_keyframe(const std::string& value);
  void set_keyframe(std::string&& value);
  void set_keyframe(const char* value);
  void set_keyframe(const void* value, size_t size);
  std::string* mutable_keyframe();
  std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.addKeyframe_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class addKeyframe_grpc1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.addKeyframe_grpc1Response) */ {
 public:
  inline addKeyframe_grpc1Response() : addKeyframe_grpc1Response(nullptr) {}
  virtual ~addKeyframe_grpc1Response();
  explicit constexpr addKeyframe_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframe_grpc1Response(const addKeyframe_grpc1Response& from);
  addKeyframe_grpc1Response(addKeyframe_grpc1Response&& from) noexcept
    : addKeyframe_grpc1Response() {
    *this = ::std::move(from);
  }

  inline addKeyframe_grpc1Response& operator=(const addKeyframe_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframe_grpc1Response& operator=(addKeyframe_grpc1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const addKeyframe_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframe_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const addKeyframe_grpc1Response*>(
               &_addKeyframe_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(addKeyframe_grpc1Response& a, addKeyframe_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframe_grpc1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframe_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addKeyframe_grpc1Response* New() const final {
    return CreateMaybeMessage<addKeyframe_grpc1Response>(nullptr);
  }

  addKeyframe_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addKeyframe_grpc1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const addKeyframe_grpc1Response& from);
  void MergeFrom(const addKeyframe_grpc1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframe_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.addKeyframe_grpc1Response";
  }
  protected:
  explicit addKeyframe_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.addKeyframe_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getKeyframeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getKeyframeRequest) */ {
 public:
  inline getKeyframeRequest() : getKeyframeRequest(nullptr) {}
  virtual ~getKeyframeRequest();
  explicit constexpr getKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getKeyframeRequest(const getKeyframeRequest& from);
  getKeyframeRequest(getKeyframeRequest&& from) noexcept
    : getKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline getKeyframeRequest& operator=(const getKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getKeyframeRequest& operator=(getKeyframeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const getKeyframeRequest*>(
               &_getKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getKeyframeRequest& a, getKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getKeyframeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getKeyframeRequest* New() const final {
    return CreateMaybeMessage<getKeyframeRequest>(nullptr);
  }

  getKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getKeyframeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getKeyframeRequest& from);
  void MergeFrom(const getKeyframeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getKeyframeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getKeyframeRequest";
  }
  protected:
  explicit getKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes keyframe = 2;
  void clear_keyframe();
  const std::string& keyframe() const;
  void set_keyframe(const std::string& value);
  void set_keyframe(std::string&& value);
  void set_keyframe(const char* value);
  void set_keyframe(const void* value, size_t size);
  std::string* mutable_keyframe();
  std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getKeyframeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getKeyframeResponse) */ {
 public:
  inline getKeyframeResponse() : getKeyframeResponse(nullptr) {}
  virtual ~getKeyframeResponse();
  explicit constexpr getKeyframeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getKeyframeResponse(const getKeyframeResponse& from);
  getKeyframeResponse(getKeyframeResponse&& from) noexcept
    : getKeyframeResponse() {
    *this = ::std::move(from);
  }

  inline getKeyframeResponse& operator=(const getKeyframeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getKeyframeResponse& operator=(getKeyframeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getKeyframeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getKeyframeResponse* internal_default_instance() {
    return reinterpret_cast<const getKeyframeResponse*>(
               &_getKeyframeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getKeyframeResponse& a, getKeyframeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getKeyframeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getKeyframeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getKeyframeResponse* New() const final {
    return CreateMaybeMessage<getKeyframeResponse>(nullptr);
  }

  getKeyframeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getKeyframeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getKeyframeResponse& from);
  void MergeFrom(const getKeyframeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getKeyframeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getKeyframeResponse";
  }
  protected:
  explicit getKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes keyframe = 1;
  void clear_keyframe();
  const std::string& keyframe() const;
  void set_keyframe(const std::string& value);
  void set_keyframe(std::string&& value);
  void set_keyframe(const char* value);
  void set_keyframe(const void* value, size_t size);
  std::string* mutable_keyframe();
  std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getKeyframeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getKeyframesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getKeyframesRequest) */ {
 public:
  inline getKeyframesRequest() : getKeyframesRequest(nullptr) {}
  virtual ~getKeyframesRequest();
  explicit constexpr getKeyframesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getKeyframesRequest(const getKeyframesRequest& from);
  getKeyframesRequest(getKeyframesRequest&& from) noexcept
    : getKeyframesRequest() {
    *this = ::std::move(from);
  }

  inline getKeyframesRequest& operator=(const getKeyframesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getKeyframesRequest& operator=(getKeyframesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getKeyframesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getKeyframesRequest* internal_default_instance() {
    return reinterpret_cast<const getKeyframesRequest*>(
               &_getKeyframesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(getKeyframesRequest& a, getKeyframesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getKeyframesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getKeyframesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getKeyframesRequest* New() const final {
    return CreateMaybeMessage<getKeyframesRequest>(nullptr);
  }

  getKeyframesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getKeyframesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getKeyframesRequest& from);
  void MergeFrom(const getKeyframesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getKeyframesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getKeyframesRequest";
  }
  protected:
  explicit getKeyframesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kKeyframesFieldNumber = 2,
  };
  // bytes ids = 1;
  void clear_ids();
  const std::string& ids() const;
  void set_ids(const std::string& value);
  void set_ids(std::string&& value);
  void set_ids(const char* value);
  void set_ids(const void* value, size_t size);
  std::string* mutable_ids();
  std::string* release_ids();
  void set_allocated_ids(std::string* ids);
  private:
  const std::string& _internal_ids() const;
  void _internal_set_ids(const std::string& value);
  std::string* _internal_mutable_ids();
  public:

  // bytes keyframes = 2;
  void clear_keyframes();
  const std::string& keyframes() const;
  void set_keyframes(const std::string& value);
  void set_keyframes(std::string&& value);
  void set_keyframes(const char* value);
  void set_keyframes(const void* value, size_t size);
  std::string* mutable_keyframes();
  std::string* release_keyframes();
  void set_allocated_keyframes(std::string* keyframes);
  private:
  const std::string& _internal_keyframes() const;
  void _internal_set_keyframes(const std::string& value);
  std::string* _internal_mutable_keyframes();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getKeyframesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getKeyframesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getKeyframesResponse) */ {
 public:
  inline getKeyframesResponse() : getKeyframesResponse(nullptr) {}
  virtual ~getKeyframesResponse();
  explicit constexpr getKeyframesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getKeyframesResponse(const getKeyframesResponse& from);
  getKeyframesResponse(getKeyframesResponse&& from) noexcept
    : getKeyframesResponse() {
    *this = ::std::move(from);
  }

  inline getKeyframesResponse& operator=(const getKeyframesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getKeyframesResponse& operator=(getKeyframesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getKeyframesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getKeyframesResponse* internal_default_instance() {
    return reinterpret_cast<const getKeyframesResponse*>(
               &_getKeyframesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(getKeyframesResponse& a, getKeyframesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getKeyframesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getKeyframesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getKeyframesResponse* New() const final {
    return CreateMaybeMessage<getKeyframesResponse>(nullptr);
  }

  getKeyframesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getKeyframesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getKeyframesResponse& from);
  void MergeFrom(const getKeyframesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getKeyframesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getKeyframesResponse";
  }
  protected:
  explicit getKeyframesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes keyframes = 1;
  void clear_keyframes();
  const std::string& keyframes() const;
  void set_keyframes(const std::string& value);
  void set_keyframes(std::string&& value);
  void set_keyframes(const char* value);
  void set_keyframes(const void* value, size_t size);
  std::string* mutable_keyframes();
  std::string* release_keyframes();
  void set_allocated_keyframes(std::string* keyframes);
  private:
  const std::string& _internal_keyframes() const;
  void _internal_set_keyframes(const std::string& value);
  std::string* _internal_mutable_keyframes();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getKeyframesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframes_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getAllKeyframesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getAllKeyframesRequest) */ {
 public:
  inline getAllKeyframesRequest() : getAllKeyframesRequest(nullptr) {}
  virtual ~getAllKeyframesRequest();
  explicit constexpr getAllKeyframesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllKeyframesRequest(const getAllKeyframesRequest& from);
  getAllKeyframesRequest(getAllKeyframesRequest&& from) noexcept
    : getAllKeyframesRequest() {
    *this = ::std::move(from);
  }

  inline getAllKeyframesRequest& operator=(const getAllKeyframesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllKeyframesRequest& operator=(getAllKeyframesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getAllKeyframesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllKeyframesRequest* internal_default_instance() {
    return reinterpret_cast<const getAllKeyframesRequest*>(
               &_getAllKeyframesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(getAllKeyframesRequest& a, getAllKeyframesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllKeyframesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllKeyframesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAllKeyframesRequest* New() const final {
    return CreateMaybeMessage<getAllKeyframesRequest>(nullptr);
  }

  getAllKeyframesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAllKeyframesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getAllKeyframesRequest& from);
  void MergeFrom(const getAllKeyframesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllKeyframesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getAllKeyframesRequest";
  }
  protected:
  explicit getAllKeyframesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 1,
  };
  // bytes keyframes = 1;
  void clear_keyframes();
  const std::string& keyframes() const;
  void set_keyframes(const std::string& value);
  void set_keyframes(std::string&& value);
  void set_keyframes(const char* value);
  void set_keyframes(const void* value, size_t size);
  std::string* mutable_keyframes();
  std::string* release_keyframes();
  void set_allocated_keyframes(std::string* keyframes);
  private:
  const std::string& _internal_keyframes() const;
  void _internal_set_keyframes(const std::string& value);
  std::string* _internal_mutable_keyframes();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getAllKeyframesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getAllKeyframesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getAllKeyframesResponse) */ {
 public:
  inline getAllKeyframesResponse() : getAllKeyframesResponse(nullptr) {}
  virtual ~getAllKeyframesResponse();
  explicit constexpr getAllKeyframesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllKeyframesResponse(const getAllKeyframesResponse& from);
  getAllKeyframesResponse(getAllKeyframesResponse&& from) noexcept
    : getAllKeyframesResponse() {
    *this = ::std::move(from);
  }

  inline getAllKeyframesResponse& operator=(const getAllKeyframesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllKeyframesResponse& operator=(getAllKeyframesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getAllKeyframesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllKeyframesResponse* internal_default_instance() {
    return reinterpret_cast<const getAllKeyframesResponse*>(
               &_getAllKeyframesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(getAllKeyframesResponse& a, getAllKeyframesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllKeyframesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllKeyframesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getAllKeyframesResponse* New() const final {
    return CreateMaybeMessage<getAllKeyframesResponse>(nullptr);
  }

  getAllKeyframesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getAllKeyframesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getAllKeyframesResponse& from);
  void MergeFrom(const getAllKeyframesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllKeyframesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getAllKeyframesResponse";
  }
  protected:
  explicit getAllKeyframesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes keyframes = 1;
  void clear_keyframes();
  const std::string& keyframes() const;
  void set_keyframes(const std::string& value);
  void set_keyframes(std::string&& value);
  void set_keyframes(const char* value);
  void set_keyframes(const void* value, size_t size);
  std::string* mutable_keyframes();
  std::string* release_keyframes();
  void set_allocated_keyframes(std::string* keyframes);
  private:
  const std::string& _internal_keyframes() const;
  void _internal_set_keyframes(const std::string& value);
  std::string* _internal_mutable_keyframes();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getAllKeyframesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframes_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class suppressKeyframeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.suppressKeyframeRequest) */ {
 public:
  inline suppressKeyframeRequest() : suppressKeyframeRequest(nullptr) {}
  virtual ~suppressKeyframeRequest();
  explicit constexpr suppressKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  suppressKeyframeRequest(const suppressKeyframeRequest& from);
  suppressKeyframeRequest(suppressKeyframeRequest&& from) noexcept
    : suppressKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline suppressKeyframeRequest& operator=(const suppressKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline suppressKeyframeRequest& operator=(suppressKeyframeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const suppressKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const suppressKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const suppressKeyframeRequest*>(
               &_suppressKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(suppressKeyframeRequest& a, suppressKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(suppressKeyframeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(suppressKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline suppressKeyframeRequest* New() const final {
    return CreateMaybeMessage<suppressKeyframeRequest>(nullptr);
  }

  suppressKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<suppressKeyframeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const suppressKeyframeRequest& from);
  void MergeFrom(const suppressKeyframeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(suppressKeyframeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.suppressKeyframeRequest";
  }
  protected:
  explicit suppressKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.suppressKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class suppressKeyframeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.suppressKeyframeResponse) */ {
 public:
  inline suppressKeyframeResponse() : suppressKeyframeResponse(nullptr) {}
  virtual ~suppressKeyframeResponse();
  explicit constexpr suppressKeyframeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  suppressKeyframeResponse(const suppressKeyframeResponse& from);
  suppressKeyframeResponse(suppressKeyframeResponse&& from) noexcept
    : suppressKeyframeResponse() {
    *this = ::std::move(from);
  }

  inline suppressKeyframeResponse& operator=(const suppressKeyframeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline suppressKeyframeResponse& operator=(suppressKeyframeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const suppressKeyframeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const suppressKeyframeResponse* internal_default_instance() {
    return reinterpret_cast<const suppressKeyframeResponse*>(
               &_suppressKeyframeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(suppressKeyframeResponse& a, suppressKeyframeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(suppressKeyframeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(suppressKeyframeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline suppressKeyframeResponse* New() const final {
    return CreateMaybeMessage<suppressKeyframeResponse>(nullptr);
  }

  suppressKeyframeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<suppressKeyframeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const suppressKeyframeResponse& from);
  void MergeFrom(const suppressKeyframeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(suppressKeyframeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.suppressKeyframeResponse";
  }
  protected:
  explicit suppressKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.suppressKeyframeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getDescriptorTypeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getDescriptorTypeResponse) */ {
 public:
  inline getDescriptorTypeResponse() : getDescriptorTypeResponse(nullptr) {}
  virtual ~getDescriptorTypeResponse();
  explicit constexpr getDescriptorTypeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDescriptorTypeResponse(const getDescriptorTypeResponse& from);
  getDescriptorTypeResponse(getDescriptorTypeResponse&& from) noexcept
    : getDescriptorTypeResponse() {
    *this = ::std::move(from);
  }

  inline getDescriptorTypeResponse& operator=(const getDescriptorTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDescriptorTypeResponse& operator=(getDescriptorTypeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getDescriptorTypeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDescriptorTypeResponse* internal_default_instance() {
    return reinterpret_cast<const getDescriptorTypeResponse*>(
               &_getDescriptorTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(getDescriptorTypeResponse& a, getDescriptorTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDescriptorTypeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDescriptorTypeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDescriptorTypeResponse* New() const final {
    return CreateMaybeMessage<getDescriptorTypeResponse>(nullptr);
  }

  getDescriptorTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDescriptorTypeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getDescriptorTypeResponse& from);
  void MergeFrom(const getDescriptorTypeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDescriptorTypeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getDescriptorTypeResponse";
  }
  protected:
  explicit getDescriptorTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getDescriptorTypeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class setDescriptorTypeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.setDescriptorTypeRequest) */ {
 public:
  inline setDescriptorTypeRequest() : setDescriptorTypeRequest(nullptr) {}
  virtual ~setDescriptorTypeRequest();
  explicit constexpr setDescriptorTypeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDescriptorTypeRequest(const setDescriptorTypeRequest& from);
  setDescriptorTypeRequest(setDescriptorTypeRequest&& from) noexcept
    : setDescriptorTypeRequest() {
    *this = ::std::move(from);
  }

  inline setDescriptorTypeRequest& operator=(const setDescriptorTypeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDescriptorTypeRequest& operator=(setDescriptorTypeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setDescriptorTypeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDescriptorTypeRequest* internal_default_instance() {
    return reinterpret_cast<const setDescriptorTypeRequest*>(
               &_setDescriptorTypeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(setDescriptorTypeRequest& a, setDescriptorTypeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setDescriptorTypeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDescriptorTypeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDescriptorTypeRequest* New() const final {
    return CreateMaybeMessage<setDescriptorTypeRequest>(nullptr);
  }

  setDescriptorTypeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDescriptorTypeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setDescriptorTypeRequest& from);
  void MergeFrom(const setDescriptorTypeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDescriptorTypeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.setDescriptorTypeRequest";
  }
  protected:
  explicit setDescriptorTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // sint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.setDescriptorTypeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class setDescriptorTypeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.setDescriptorTypeResponse) */ {
 public:
  inline setDescriptorTypeResponse() : setDescriptorTypeResponse(nullptr) {}
  virtual ~setDescriptorTypeResponse();
  explicit constexpr setDescriptorTypeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDescriptorTypeResponse(const setDescriptorTypeResponse& from);
  setDescriptorTypeResponse(setDescriptorTypeResponse&& from) noexcept
    : setDescriptorTypeResponse() {
    *this = ::std::move(from);
  }

  inline setDescriptorTypeResponse& operator=(const setDescriptorTypeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDescriptorTypeResponse& operator=(setDescriptorTypeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setDescriptorTypeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDescriptorTypeResponse* internal_default_instance() {
    return reinterpret_cast<const setDescriptorTypeResponse*>(
               &_setDescriptorTypeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(setDescriptorTypeResponse& a, setDescriptorTypeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setDescriptorTypeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDescriptorTypeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDescriptorTypeResponse* New() const final {
    return CreateMaybeMessage<setDescriptorTypeResponse>(nullptr);
  }

  setDescriptorTypeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDescriptorTypeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setDescriptorTypeResponse& from);
  void MergeFrom(const setDescriptorTypeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDescriptorTypeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.setDescriptorTypeResponse";
  }
  protected:
  explicit setDescriptorTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.setDescriptorTypeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class isExistKeyframeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.isExistKeyframeRequest) */ {
 public:
  inline isExistKeyframeRequest() : isExistKeyframeRequest(nullptr) {}
  virtual ~isExistKeyframeRequest();
  explicit constexpr isExistKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isExistKeyframeRequest(const isExistKeyframeRequest& from);
  isExistKeyframeRequest(isExistKeyframeRequest&& from) noexcept
    : isExistKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline isExistKeyframeRequest& operator=(const isExistKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline isExistKeyframeRequest& operator=(isExistKeyframeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const isExistKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const isExistKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const isExistKeyframeRequest*>(
               &_isExistKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(isExistKeyframeRequest& a, isExistKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(isExistKeyframeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isExistKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isExistKeyframeRequest* New() const final {
    return CreateMaybeMessage<isExistKeyframeRequest>(nullptr);
  }

  isExistKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isExistKeyframeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const isExistKeyframeRequest& from);
  void MergeFrom(const isExistKeyframeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isExistKeyframeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.isExistKeyframeRequest";
  }
  protected:
  explicit isExistKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.isExistKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class isExistKeyframeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.isExistKeyframeResponse) */ {
 public:
  inline isExistKeyframeResponse() : isExistKeyframeResponse(nullptr) {}
  virtual ~isExistKeyframeResponse();
  explicit constexpr isExistKeyframeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  isExistKeyframeResponse(const isExistKeyframeResponse& from);
  isExistKeyframeResponse(isExistKeyframeResponse&& from) noexcept
    : isExistKeyframeResponse() {
    *this = ::std::move(from);
  }

  inline isExistKeyframeResponse& operator=(const isExistKeyframeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline isExistKeyframeResponse& operator=(isExistKeyframeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const isExistKeyframeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const isExistKeyframeResponse* internal_default_instance() {
    return reinterpret_cast<const isExistKeyframeResponse*>(
               &_isExistKeyframeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(isExistKeyframeResponse& a, isExistKeyframeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(isExistKeyframeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(isExistKeyframeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline isExistKeyframeResponse* New() const final {
    return CreateMaybeMessage<isExistKeyframeResponse>(nullptr);
  }

  isExistKeyframeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<isExistKeyframeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const isExistKeyframeResponse& from);
  void MergeFrom(const isExistKeyframeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(isExistKeyframeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.isExistKeyframeResponse";
  }
  protected:
  explicit isExistKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.isExistKeyframeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getNbKeyframesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getNbKeyframesResponse) */ {
 public:
  inline getNbKeyframesResponse() : getNbKeyframesResponse(nullptr) {}
  virtual ~getNbKeyframesResponse();
  explicit constexpr getNbKeyframesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNbKeyframesResponse(const getNbKeyframesResponse& from);
  getNbKeyframesResponse(getNbKeyframesResponse&& from) noexcept
    : getNbKeyframesResponse() {
    *this = ::std::move(from);
  }

  inline getNbKeyframesResponse& operator=(const getNbKeyframesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNbKeyframesResponse& operator=(getNbKeyframesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getNbKeyframesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNbKeyframesResponse* internal_default_instance() {
    return reinterpret_cast<const getNbKeyframesResponse*>(
               &_getNbKeyframesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(getNbKeyframesResponse& a, getNbKeyframesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNbKeyframesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNbKeyframesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNbKeyframesResponse* New() const final {
    return CreateMaybeMessage<getNbKeyframesResponse>(nullptr);
  }

  getNbKeyframesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNbKeyframesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getNbKeyframesResponse& from);
  void MergeFrom(const getNbKeyframesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNbKeyframesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getNbKeyframesResponse";
  }
  protected:
  explicit getNbKeyframesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getNbKeyframesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.saveToFileRequest) */ {
 public:
  inline saveToFileRequest() : saveToFileRequest(nullptr) {}
  virtual ~saveToFileRequest();
  explicit constexpr saveToFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileRequest(const saveToFileRequest& from);
  saveToFileRequest(saveToFileRequest&& from) noexcept
    : saveToFileRequest() {
    *this = ::std::move(from);
  }

  inline saveToFileRequest& operator=(const saveToFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileRequest& operator=(saveToFileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const saveToFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileRequest* internal_default_instance() {
    return reinterpret_cast<const saveToFileRequest*>(
               &_saveToFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(saveToFileRequest& a, saveToFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline saveToFileRequest* New() const final {
    return CreateMaybeMessage<saveToFileRequest>(nullptr);
  }

  saveToFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<saveToFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const saveToFileRequest& from);
  void MergeFrom(const saveToFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.saveToFileRequest";
  }
  protected:
  explicit saveToFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.saveToFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.saveToFileResponse) */ {
 public:
  inline saveToFileResponse() : saveToFileResponse(nullptr) {}
  virtual ~saveToFileResponse();
  explicit constexpr saveToFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileResponse(const saveToFileResponse& from);
  saveToFileResponse(saveToFileResponse&& from) noexcept
    : saveToFileResponse() {
    *this = ::std::move(from);
  }

  inline saveToFileResponse& operator=(const saveToFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileResponse& operator=(saveToFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const saveToFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileResponse* internal_default_instance() {
    return reinterpret_cast<const saveToFileResponse*>(
               &_saveToFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(saveToFileResponse& a, saveToFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline saveToFileResponse* New() const final {
    return CreateMaybeMessage<saveToFileResponse>(nullptr);
  }

  saveToFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<saveToFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const saveToFileResponse& from);
  void MergeFrom(const saveToFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.saveToFileResponse";
  }
  protected:
  explicit saveToFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.saveToFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.loadFromFileRequest) */ {
 public:
  inline loadFromFileRequest() : loadFromFileRequest(nullptr) {}
  virtual ~loadFromFileRequest();
  explicit constexpr loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileRequest(const loadFromFileRequest& from);
  loadFromFileRequest(loadFromFileRequest&& from) noexcept
    : loadFromFileRequest() {
    *this = ::std::move(from);
  }

  inline loadFromFileRequest& operator=(const loadFromFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileRequest& operator=(loadFromFileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loadFromFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileRequest* internal_default_instance() {
    return reinterpret_cast<const loadFromFileRequest*>(
               &_loadFromFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(loadFromFileRequest& a, loadFromFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadFromFileRequest* New() const final {
    return CreateMaybeMessage<loadFromFileRequest>(nullptr);
  }

  loadFromFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadFromFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loadFromFileRequest& from);
  void MergeFrom(const loadFromFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.loadFromFileRequest";
  }
  protected:
  explicit loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
  };
  // string file = 1;
  void clear_file();
  const std::string& file() const;
  void set_file(const std::string& value);
  void set_file(std::string&& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  std::string* mutable_file();
  std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.loadFromFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.loadFromFileResponse) */ {
 public:
  inline loadFromFileResponse() : loadFromFileResponse(nullptr) {}
  virtual ~loadFromFileResponse();
  explicit constexpr loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileResponse(const loadFromFileResponse& from);
  loadFromFileResponse(loadFromFileResponse&& from) noexcept
    : loadFromFileResponse() {
    *this = ::std::move(from);
  }

  inline loadFromFileResponse& operator=(const loadFromFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileResponse& operator=(loadFromFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loadFromFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileResponse* internal_default_instance() {
    return reinterpret_cast<const loadFromFileResponse*>(
               &_loadFromFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(loadFromFileResponse& a, loadFromFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadFromFileResponse* New() const final {
    return CreateMaybeMessage<loadFromFileResponse>(nullptr);
  }

  loadFromFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadFromFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loadFromFileResponse& from);
  void MergeFrom(const loadFromFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.loadFromFileResponse";
  }
  protected:
  explicit loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.loadFromFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getConstKeyframeCollectionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getConstKeyframeCollectionResponse) */ {
 public:
  inline getConstKeyframeCollectionResponse() : getConstKeyframeCollectionResponse(nullptr) {}
  virtual ~getConstKeyframeCollectionResponse();
  explicit constexpr getConstKeyframeCollectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getConstKeyframeCollectionResponse(const getConstKeyframeCollectionResponse& from);
  getConstKeyframeCollectionResponse(getConstKeyframeCollectionResponse&& from) noexcept
    : getConstKeyframeCollectionResponse() {
    *this = ::std::move(from);
  }

  inline getConstKeyframeCollectionResponse& operator=(const getConstKeyframeCollectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getConstKeyframeCollectionResponse& operator=(getConstKeyframeCollectionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getConstKeyframeCollectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getConstKeyframeCollectionResponse* internal_default_instance() {
    return reinterpret_cast<const getConstKeyframeCollectionResponse*>(
               &_getConstKeyframeCollectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(getConstKeyframeCollectionResponse& a, getConstKeyframeCollectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getConstKeyframeCollectionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getConstKeyframeCollectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getConstKeyframeCollectionResponse* New() const final {
    return CreateMaybeMessage<getConstKeyframeCollectionResponse>(nullptr);
  }

  getConstKeyframeCollectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getConstKeyframeCollectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getConstKeyframeCollectionResponse& from);
  void MergeFrom(const getConstKeyframeCollectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getConstKeyframeCollectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getConstKeyframeCollectionResponse";
  }
  protected:
  explicit getConstKeyframeCollectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const void* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getConstKeyframeCollectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getKeyframeCollectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getKeyframeCollectionRequest) */ {
 public:
  inline getKeyframeCollectionRequest() : getKeyframeCollectionRequest(nullptr) {}
  virtual ~getKeyframeCollectionRequest();
  explicit constexpr getKeyframeCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getKeyframeCollectionRequest(const getKeyframeCollectionRequest& from);
  getKeyframeCollectionRequest(getKeyframeCollectionRequest&& from) noexcept
    : getKeyframeCollectionRequest() {
    *this = ::std::move(from);
  }

  inline getKeyframeCollectionRequest& operator=(const getKeyframeCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getKeyframeCollectionRequest& operator=(getKeyframeCollectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getKeyframeCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getKeyframeCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const getKeyframeCollectionRequest*>(
               &_getKeyframeCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(getKeyframeCollectionRequest& a, getKeyframeCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getKeyframeCollectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getKeyframeCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getKeyframeCollectionRequest* New() const final {
    return CreateMaybeMessage<getKeyframeCollectionRequest>(nullptr);
  }

  getKeyframeCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getKeyframeCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getKeyframeCollectionRequest& from);
  void MergeFrom(const getKeyframeCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getKeyframeCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getKeyframeCollectionRequest";
  }
  protected:
  explicit getKeyframeCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeCollectionFieldNumber = 1,
  };
  // bytes keyframeCollection = 1;
  void clear_keyframecollection();
  const std::string& keyframecollection() const;
  void set_keyframecollection(const std::string& value);
  void set_keyframecollection(std::string&& value);
  void set_keyframecollection(const char* value);
  void set_keyframecollection(const void* value, size_t size);
  std::string* mutable_keyframecollection();
  std::string* release_keyframecollection();
  void set_allocated_keyframecollection(std::string* keyframecollection);
  private:
  const std::string& _internal_keyframecollection() const;
  void _internal_set_keyframecollection(const std::string& value);
  std::string* _internal_mutable_keyframecollection();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getKeyframeCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframecollection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class getKeyframeCollectionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.getKeyframeCollectionResponse) */ {
 public:
  inline getKeyframeCollectionResponse() : getKeyframeCollectionResponse(nullptr) {}
  virtual ~getKeyframeCollectionResponse();
  explicit constexpr getKeyframeCollectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getKeyframeCollectionResponse(const getKeyframeCollectionResponse& from);
  getKeyframeCollectionResponse(getKeyframeCollectionResponse&& from) noexcept
    : getKeyframeCollectionResponse() {
    *this = ::std::move(from);
  }

  inline getKeyframeCollectionResponse& operator=(const getKeyframeCollectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getKeyframeCollectionResponse& operator=(getKeyframeCollectionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getKeyframeCollectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getKeyframeCollectionResponse* internal_default_instance() {
    return reinterpret_cast<const getKeyframeCollectionResponse*>(
               &_getKeyframeCollectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(getKeyframeCollectionResponse& a, getKeyframeCollectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getKeyframeCollectionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getKeyframeCollectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getKeyframeCollectionResponse* New() const final {
    return CreateMaybeMessage<getKeyframeCollectionResponse>(nullptr);
  }

  getKeyframeCollectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getKeyframeCollectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getKeyframeCollectionResponse& from);
  void MergeFrom(const getKeyframeCollectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getKeyframeCollectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.getKeyframeCollectionResponse";
  }
  protected:
  explicit getKeyframeCollectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeCollectionFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes keyframeCollection = 1;
  void clear_keyframecollection();
  const std::string& keyframecollection() const;
  void set_keyframecollection(const std::string& value);
  void set_keyframecollection(std::string&& value);
  void set_keyframecollection(const char* value);
  void set_keyframecollection(const void* value, size_t size);
  std::string* mutable_keyframecollection();
  std::string* release_keyframecollection();
  void set_allocated_keyframecollection(std::string* keyframecollection);
  private:
  const std::string& _internal_keyframecollection() const;
  void _internal_set_keyframecollection(const std::string& value);
  std::string* _internal_mutable_keyframecollection();
  public:

  // bytes xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const void* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.getKeyframeCollectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframecollection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// -------------------------------------------------------------------

class setKeyframeCollectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIKeyframesManager.setKeyframeCollectionRequest) */ {
 public:
  inline setKeyframeCollectionRequest() : setKeyframeCollectionRequest(nullptr) {}
  virtual ~setKeyframeCollectionRequest();
  explicit constexpr setKeyframeCollectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setKeyframeCollectionRequest(const setKeyframeCollectionRequest& from);
  setKeyframeCollectionRequest(setKeyframeCollectionRequest&& from) noexcept
    : setKeyframeCollectionRequest() {
    *this = ::std::move(from);
  }

  inline setKeyframeCollectionRequest& operator=(const setKeyframeCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setKeyframeCollectionRequest& operator=(setKeyframeCollectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setKeyframeCollectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setKeyframeCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const setKeyframeCollectionRequest*>(
               &_setKeyframeCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(setKeyframeCollectionRequest& a, setKeyframeCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setKeyframeCollectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setKeyframeCollectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setKeyframeCollectionRequest* New() const final {
    return CreateMaybeMessage<setKeyframeCollectionRequest>(nullptr);
  }

  setKeyframeCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setKeyframeCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setKeyframeCollectionRequest& from);
  void MergeFrom(const setKeyframeCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setKeyframeCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIKeyframesManager.setKeyframeCollectionRequest";
  }
  protected:
  explicit setKeyframeCollectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIKeyframesManagerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeCollectionFieldNumber = 1,
  };
  // bytes keyframeCollection = 1;
  void clear_keyframecollection();
  const std::string& keyframecollection() const;
  void set_keyframecollection(const std::string& value);
  void set_keyframecollection(std::string&& value);
  void set_keyframecollection(const char* value);
  void set_keyframecollection(const void* value, size_t size);
  std::string* mutable_keyframecollection();
  std::string* release_keyframecollection();
  void set_allocated_keyframecollection(std::string* keyframecollection);
  private:
  const std::string& _internal_keyframecollection() const;
  void _internal_set_keyframecollection(const std::string& value);
  std::string* _internal_mutable_keyframecollection();
  public:

  // @@protoc_insertion_point(class_scope:grpcIKeyframesManager.setKeyframeCollectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframecollection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIKeyframesManagerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// addKeyframe_grpc0Request

// bytes keyframe = 1;
inline void addKeyframe_grpc0Request::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& addKeyframe_grpc0Request::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.addKeyframe_grpc0Request.keyframe)
  return _internal_keyframe();
}
inline void addKeyframe_grpc0Request::set_keyframe(const std::string& value) {
  _internal_set_keyframe(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.addKeyframe_grpc0Request.keyframe)
}
inline std::string* addKeyframe_grpc0Request::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.addKeyframe_grpc0Request.keyframe)
  return _internal_mutable_keyframe();
}
inline const std::string& addKeyframe_grpc0Request::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void addKeyframe_grpc0Request::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addKeyframe_grpc0Request::set_keyframe(std::string&& value) {
  
  keyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.addKeyframe_grpc0Request.keyframe)
}
inline void addKeyframe_grpc0Request::set_keyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.addKeyframe_grpc0Request.keyframe)
}
inline void addKeyframe_grpc0Request::set_keyframe(const void* value,
    size_t size) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.addKeyframe_grpc0Request.keyframe)
}
inline std::string* addKeyframe_grpc0Request::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addKeyframe_grpc0Request::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.addKeyframe_grpc0Request.keyframe)
  return keyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addKeyframe_grpc0Request::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.addKeyframe_grpc0Request.keyframe)
}

// -------------------------------------------------------------------

// addKeyframe_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void addKeyframe_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addKeyframe_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addKeyframe_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.addKeyframe_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addKeyframe_grpc0Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addKeyframe_grpc0Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.addKeyframe_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addKeyframe_grpc1Request

// bytes keyframe = 1;
inline void addKeyframe_grpc1Request::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& addKeyframe_grpc1Request::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.addKeyframe_grpc1Request.keyframe)
  return _internal_keyframe();
}
inline void addKeyframe_grpc1Request::set_keyframe(const std::string& value) {
  _internal_set_keyframe(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.addKeyframe_grpc1Request.keyframe)
}
inline std::string* addKeyframe_grpc1Request::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.addKeyframe_grpc1Request.keyframe)
  return _internal_mutable_keyframe();
}
inline const std::string& addKeyframe_grpc1Request::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void addKeyframe_grpc1Request::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void addKeyframe_grpc1Request::set_keyframe(std::string&& value) {
  
  keyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.addKeyframe_grpc1Request.keyframe)
}
inline void addKeyframe_grpc1Request::set_keyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.addKeyframe_grpc1Request.keyframe)
}
inline void addKeyframe_grpc1Request::set_keyframe(const void* value,
    size_t size) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.addKeyframe_grpc1Request.keyframe)
}
inline std::string* addKeyframe_grpc1Request::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* addKeyframe_grpc1Request::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.addKeyframe_grpc1Request.keyframe)
  return keyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void addKeyframe_grpc1Request::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.addKeyframe_grpc1Request.keyframe)
}

// -------------------------------------------------------------------

// addKeyframe_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void addKeyframe_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addKeyframe_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addKeyframe_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.addKeyframe_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addKeyframe_grpc1Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addKeyframe_grpc1Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.addKeyframe_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getKeyframeRequest

// uint32 id = 1;
inline void getKeyframeRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getKeyframeRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 getKeyframeRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframeRequest.id)
  return _internal_id();
}
inline void getKeyframeRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void getKeyframeRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframeRequest.id)
}

// bytes keyframe = 2;
inline void getKeyframeRequest::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& getKeyframeRequest::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframeRequest.keyframe)
  return _internal_keyframe();
}
inline void getKeyframeRequest::set_keyframe(const std::string& value) {
  _internal_set_keyframe(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframeRequest.keyframe)
}
inline std::string* getKeyframeRequest::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getKeyframeRequest.keyframe)
  return _internal_mutable_keyframe();
}
inline const std::string& getKeyframeRequest::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void getKeyframeRequest::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getKeyframeRequest::set_keyframe(std::string&& value) {
  
  keyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getKeyframeRequest.keyframe)
}
inline void getKeyframeRequest::set_keyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getKeyframeRequest.keyframe)
}
inline void getKeyframeRequest::set_keyframe(const void* value,
    size_t size) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getKeyframeRequest.keyframe)
}
inline std::string* getKeyframeRequest::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getKeyframeRequest::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getKeyframeRequest.keyframe)
  return keyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getKeyframeRequest::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getKeyframeRequest.keyframe)
}

// -------------------------------------------------------------------

// getKeyframeResponse

// bytes keyframe = 1;
inline void getKeyframeResponse::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& getKeyframeResponse::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframeResponse.keyframe)
  return _internal_keyframe();
}
inline void getKeyframeResponse::set_keyframe(const std::string& value) {
  _internal_set_keyframe(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframeResponse.keyframe)
}
inline std::string* getKeyframeResponse::mutable_keyframe() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getKeyframeResponse.keyframe)
  return _internal_mutable_keyframe();
}
inline const std::string& getKeyframeResponse::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void getKeyframeResponse::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getKeyframeResponse::set_keyframe(std::string&& value) {
  
  keyframe_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getKeyframeResponse.keyframe)
}
inline void getKeyframeResponse::set_keyframe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getKeyframeResponse.keyframe)
}
inline void getKeyframeResponse::set_keyframe(const void* value,
    size_t size) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getKeyframeResponse.keyframe)
}
inline std::string* getKeyframeResponse::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getKeyframeResponse::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getKeyframeResponse.keyframe)
  return keyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getKeyframeResponse::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframe,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getKeyframeResponse.keyframe)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getKeyframeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getKeyframeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getKeyframeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getKeyframeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getKeyframeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getKeyframesRequest

// bytes ids = 1;
inline void getKeyframesRequest::clear_ids() {
  ids_.ClearToEmpty();
}
inline const std::string& getKeyframesRequest::ids() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframesRequest.ids)
  return _internal_ids();
}
inline void getKeyframesRequest::set_ids(const std::string& value) {
  _internal_set_ids(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframesRequest.ids)
}
inline std::string* getKeyframesRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getKeyframesRequest.ids)
  return _internal_mutable_ids();
}
inline const std::string& getKeyframesRequest::_internal_ids() const {
  return ids_.Get();
}
inline void getKeyframesRequest::_internal_set_ids(const std::string& value) {
  
  ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getKeyframesRequest::set_ids(std::string&& value) {
  
  ids_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getKeyframesRequest.ids)
}
inline void getKeyframesRequest::set_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getKeyframesRequest.ids)
}
inline void getKeyframesRequest::set_ids(const void* value,
    size_t size) {
  
  ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getKeyframesRequest.ids)
}
inline std::string* getKeyframesRequest::_internal_mutable_ids() {
  
  return ids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getKeyframesRequest::release_ids() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getKeyframesRequest.ids)
  return ids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getKeyframesRequest::set_allocated_ids(std::string* ids) {
  if (ids != nullptr) {
    
  } else {
    
  }
  ids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getKeyframesRequest.ids)
}

// bytes keyframes = 2;
inline void getKeyframesRequest::clear_keyframes() {
  keyframes_.ClearToEmpty();
}
inline const std::string& getKeyframesRequest::keyframes() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframesRequest.keyframes)
  return _internal_keyframes();
}
inline void getKeyframesRequest::set_keyframes(const std::string& value) {
  _internal_set_keyframes(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframesRequest.keyframes)
}
inline std::string* getKeyframesRequest::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getKeyframesRequest.keyframes)
  return _internal_mutable_keyframes();
}
inline const std::string& getKeyframesRequest::_internal_keyframes() const {
  return keyframes_.Get();
}
inline void getKeyframesRequest::_internal_set_keyframes(const std::string& value) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getKeyframesRequest::set_keyframes(std::string&& value) {
  
  keyframes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getKeyframesRequest.keyframes)
}
inline void getKeyframesRequest::set_keyframes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getKeyframesRequest.keyframes)
}
inline void getKeyframesRequest::set_keyframes(const void* value,
    size_t size) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getKeyframesRequest.keyframes)
}
inline std::string* getKeyframesRequest::_internal_mutable_keyframes() {
  
  return keyframes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getKeyframesRequest::release_keyframes() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getKeyframesRequest.keyframes)
  return keyframes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getKeyframesRequest::set_allocated_keyframes(std::string* keyframes) {
  if (keyframes != nullptr) {
    
  } else {
    
  }
  keyframes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getKeyframesRequest.keyframes)
}

// -------------------------------------------------------------------

// getKeyframesResponse

// bytes keyframes = 1;
inline void getKeyframesResponse::clear_keyframes() {
  keyframes_.ClearToEmpty();
}
inline const std::string& getKeyframesResponse::keyframes() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframesResponse.keyframes)
  return _internal_keyframes();
}
inline void getKeyframesResponse::set_keyframes(const std::string& value) {
  _internal_set_keyframes(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframesResponse.keyframes)
}
inline std::string* getKeyframesResponse::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getKeyframesResponse.keyframes)
  return _internal_mutable_keyframes();
}
inline const std::string& getKeyframesResponse::_internal_keyframes() const {
  return keyframes_.Get();
}
inline void getKeyframesResponse::_internal_set_keyframes(const std::string& value) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getKeyframesResponse::set_keyframes(std::string&& value) {
  
  keyframes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getKeyframesResponse.keyframes)
}
inline void getKeyframesResponse::set_keyframes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getKeyframesResponse.keyframes)
}
inline void getKeyframesResponse::set_keyframes(const void* value,
    size_t size) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getKeyframesResponse.keyframes)
}
inline std::string* getKeyframesResponse::_internal_mutable_keyframes() {
  
  return keyframes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getKeyframesResponse::release_keyframes() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getKeyframesResponse.keyframes)
  return keyframes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getKeyframesResponse::set_allocated_keyframes(std::string* keyframes) {
  if (keyframes != nullptr) {
    
  } else {
    
  }
  keyframes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getKeyframesResponse.keyframes)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getKeyframesResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getKeyframesResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getKeyframesResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframesResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getKeyframesResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getKeyframesResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframesResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getAllKeyframesRequest

// bytes keyframes = 1;
inline void getAllKeyframesRequest::clear_keyframes() {
  keyframes_.ClearToEmpty();
}
inline const std::string& getAllKeyframesRequest::keyframes() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getAllKeyframesRequest.keyframes)
  return _internal_keyframes();
}
inline void getAllKeyframesRequest::set_keyframes(const std::string& value) {
  _internal_set_keyframes(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getAllKeyframesRequest.keyframes)
}
inline std::string* getAllKeyframesRequest::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getAllKeyframesRequest.keyframes)
  return _internal_mutable_keyframes();
}
inline const std::string& getAllKeyframesRequest::_internal_keyframes() const {
  return keyframes_.Get();
}
inline void getAllKeyframesRequest::_internal_set_keyframes(const std::string& value) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getAllKeyframesRequest::set_keyframes(std::string&& value) {
  
  keyframes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getAllKeyframesRequest.keyframes)
}
inline void getAllKeyframesRequest::set_keyframes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getAllKeyframesRequest.keyframes)
}
inline void getAllKeyframesRequest::set_keyframes(const void* value,
    size_t size) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getAllKeyframesRequest.keyframes)
}
inline std::string* getAllKeyframesRequest::_internal_mutable_keyframes() {
  
  return keyframes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getAllKeyframesRequest::release_keyframes() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getAllKeyframesRequest.keyframes)
  return keyframes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getAllKeyframesRequest::set_allocated_keyframes(std::string* keyframes) {
  if (keyframes != nullptr) {
    
  } else {
    
  }
  keyframes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getAllKeyframesRequest.keyframes)
}

// -------------------------------------------------------------------

// getAllKeyframesResponse

// bytes keyframes = 1;
inline void getAllKeyframesResponse::clear_keyframes() {
  keyframes_.ClearToEmpty();
}
inline const std::string& getAllKeyframesResponse::keyframes() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getAllKeyframesResponse.keyframes)
  return _internal_keyframes();
}
inline void getAllKeyframesResponse::set_keyframes(const std::string& value) {
  _internal_set_keyframes(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getAllKeyframesResponse.keyframes)
}
inline std::string* getAllKeyframesResponse::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getAllKeyframesResponse.keyframes)
  return _internal_mutable_keyframes();
}
inline const std::string& getAllKeyframesResponse::_internal_keyframes() const {
  return keyframes_.Get();
}
inline void getAllKeyframesResponse::_internal_set_keyframes(const std::string& value) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getAllKeyframesResponse::set_keyframes(std::string&& value) {
  
  keyframes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getAllKeyframesResponse.keyframes)
}
inline void getAllKeyframesResponse::set_keyframes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getAllKeyframesResponse.keyframes)
}
inline void getAllKeyframesResponse::set_keyframes(const void* value,
    size_t size) {
  
  keyframes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getAllKeyframesResponse.keyframes)
}
inline std::string* getAllKeyframesResponse::_internal_mutable_keyframes() {
  
  return keyframes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getAllKeyframesResponse::release_keyframes() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getAllKeyframesResponse.keyframes)
  return keyframes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getAllKeyframesResponse::set_allocated_keyframes(std::string* keyframes) {
  if (keyframes != nullptr) {
    
  } else {
    
  }
  keyframes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getAllKeyframesResponse.keyframes)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getAllKeyframesResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAllKeyframesResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getAllKeyframesResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getAllKeyframesResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getAllKeyframesResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getAllKeyframesResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getAllKeyframesResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// suppressKeyframeRequest

// uint32 id = 1;
inline void suppressKeyframeRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 suppressKeyframeRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 suppressKeyframeRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.suppressKeyframeRequest.id)
  return _internal_id();
}
inline void suppressKeyframeRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void suppressKeyframeRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.suppressKeyframeRequest.id)
}

// -------------------------------------------------------------------

// suppressKeyframeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void suppressKeyframeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 suppressKeyframeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 suppressKeyframeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.suppressKeyframeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void suppressKeyframeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void suppressKeyframeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.suppressKeyframeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDescriptorTypeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void getDescriptorTypeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDescriptorTypeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDescriptorTypeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getDescriptorTypeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDescriptorTypeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getDescriptorTypeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getDescriptorTypeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setDescriptorTypeRequest

// sint32 type = 1;
inline void setDescriptorTypeRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDescriptorTypeRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDescriptorTypeRequest::type() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.setDescriptorTypeRequest.type)
  return _internal_type();
}
inline void setDescriptorTypeRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void setDescriptorTypeRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.setDescriptorTypeRequest.type)
}

// -------------------------------------------------------------------

// setDescriptorTypeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setDescriptorTypeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDescriptorTypeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDescriptorTypeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.setDescriptorTypeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setDescriptorTypeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setDescriptorTypeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.setDescriptorTypeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// isExistKeyframeRequest

// uint32 id = 1;
inline void isExistKeyframeRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 isExistKeyframeRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 isExistKeyframeRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.isExistKeyframeRequest.id)
  return _internal_id();
}
inline void isExistKeyframeRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void isExistKeyframeRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.isExistKeyframeRequest.id)
}

// -------------------------------------------------------------------

// isExistKeyframeResponse

// bool xpcfGrpcReturnValue = 1;
inline void isExistKeyframeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool isExistKeyframeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool isExistKeyframeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.isExistKeyframeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void isExistKeyframeResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void isExistKeyframeResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.isExistKeyframeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNbKeyframesResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void getNbKeyframesResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNbKeyframesResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNbKeyframesResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getNbKeyframesResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNbKeyframesResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNbKeyframesResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getNbKeyframesResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// saveToFileRequest

// string file = 1;
inline void saveToFileRequest::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& saveToFileRequest::file() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.saveToFileRequest.file)
  return _internal_file();
}
inline void saveToFileRequest::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.saveToFileRequest.file)
}
inline std::string* saveToFileRequest::mutable_file() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.saveToFileRequest.file)
  return _internal_mutable_file();
}
inline const std::string& saveToFileRequest::_internal_file() const {
  return file_.Get();
}
inline void saveToFileRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void saveToFileRequest::set_file(std::string&& value) {
  
  file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.saveToFileRequest.file)
}
inline void saveToFileRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.saveToFileRequest.file)
}
inline void saveToFileRequest::set_file(const char* value,
    size_t size) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.saveToFileRequest.file)
}
inline std::string* saveToFileRequest::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* saveToFileRequest::release_file() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.saveToFileRequest.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void saveToFileRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.saveToFileRequest.file)
}

// -------------------------------------------------------------------

// saveToFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void saveToFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 saveToFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 saveToFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.saveToFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void saveToFileResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void saveToFileResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.saveToFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// loadFromFileRequest

// string file = 1;
inline void loadFromFileRequest::clear_file() {
  file_.ClearToEmpty();
}
inline const std::string& loadFromFileRequest::file() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.loadFromFileRequest.file)
  return _internal_file();
}
inline void loadFromFileRequest::set_file(const std::string& value) {
  _internal_set_file(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.loadFromFileRequest.file)
}
inline std::string* loadFromFileRequest::mutable_file() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.loadFromFileRequest.file)
  return _internal_mutable_file();
}
inline const std::string& loadFromFileRequest::_internal_file() const {
  return file_.Get();
}
inline void loadFromFileRequest::_internal_set_file(const std::string& value) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void loadFromFileRequest::set_file(std::string&& value) {
  
  file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.loadFromFileRequest.file)
}
inline void loadFromFileRequest::set_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.loadFromFileRequest.file)
}
inline void loadFromFileRequest::set_file(const char* value,
    size_t size) {
  
  file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.loadFromFileRequest.file)
}
inline std::string* loadFromFileRequest::_internal_mutable_file() {
  
  return file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* loadFromFileRequest::release_file() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.loadFromFileRequest.file)
  return file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void loadFromFileRequest::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    
  } else {
    
  }
  file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.loadFromFileRequest.file)
}

// -------------------------------------------------------------------

// loadFromFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void loadFromFileResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadFromFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 loadFromFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.loadFromFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void loadFromFileResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void loadFromFileResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.loadFromFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getConstKeyframeCollectionResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getConstKeyframeCollectionResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getConstKeyframeCollectionResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getConstKeyframeCollectionResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getConstKeyframeCollectionResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getConstKeyframeCollectionResponse.xpcfGrpcReturnValue)
}
inline std::string* getConstKeyframeCollectionResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getConstKeyframeCollectionResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getConstKeyframeCollectionResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getConstKeyframeCollectionResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getConstKeyframeCollectionResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getConstKeyframeCollectionResponse.xpcfGrpcReturnValue)
}
inline void getConstKeyframeCollectionResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getConstKeyframeCollectionResponse.xpcfGrpcReturnValue)
}
inline void getConstKeyframeCollectionResponse::set_xpcfgrpcreturnvalue(const void* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getConstKeyframeCollectionResponse.xpcfGrpcReturnValue)
}
inline std::string* getConstKeyframeCollectionResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getConstKeyframeCollectionResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getConstKeyframeCollectionResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getConstKeyframeCollectionResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getConstKeyframeCollectionResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getKeyframeCollectionRequest

// bytes keyframeCollection = 1;
inline void getKeyframeCollectionRequest::clear_keyframecollection() {
  keyframecollection_.ClearToEmpty();
}
inline const std::string& getKeyframeCollectionRequest::keyframecollection() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframeCollectionRequest.keyframeCollection)
  return _internal_keyframecollection();
}
inline void getKeyframeCollectionRequest::set_keyframecollection(const std::string& value) {
  _internal_set_keyframecollection(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframeCollectionRequest.keyframeCollection)
}
inline std::string* getKeyframeCollectionRequest::mutable_keyframecollection() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getKeyframeCollectionRequest.keyframeCollection)
  return _internal_mutable_keyframecollection();
}
inline const std::string& getKeyframeCollectionRequest::_internal_keyframecollection() const {
  return keyframecollection_.Get();
}
inline void getKeyframeCollectionRequest::_internal_set_keyframecollection(const std::string& value) {
  
  keyframecollection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getKeyframeCollectionRequest::set_keyframecollection(std::string&& value) {
  
  keyframecollection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getKeyframeCollectionRequest.keyframeCollection)
}
inline void getKeyframeCollectionRequest::set_keyframecollection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframecollection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getKeyframeCollectionRequest.keyframeCollection)
}
inline void getKeyframeCollectionRequest::set_keyframecollection(const void* value,
    size_t size) {
  
  keyframecollection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getKeyframeCollectionRequest.keyframeCollection)
}
inline std::string* getKeyframeCollectionRequest::_internal_mutable_keyframecollection() {
  
  return keyframecollection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getKeyframeCollectionRequest::release_keyframecollection() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getKeyframeCollectionRequest.keyframeCollection)
  return keyframecollection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getKeyframeCollectionRequest::set_allocated_keyframecollection(std::string* keyframecollection) {
  if (keyframecollection != nullptr) {
    
  } else {
    
  }
  keyframecollection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframecollection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getKeyframeCollectionRequest.keyframeCollection)
}

// -------------------------------------------------------------------

// getKeyframeCollectionResponse

// bytes keyframeCollection = 1;
inline void getKeyframeCollectionResponse::clear_keyframecollection() {
  keyframecollection_.ClearToEmpty();
}
inline const std::string& getKeyframeCollectionResponse::keyframecollection() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframeCollectionResponse.keyframeCollection)
  return _internal_keyframecollection();
}
inline void getKeyframeCollectionResponse::set_keyframecollection(const std::string& value) {
  _internal_set_keyframecollection(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframeCollectionResponse.keyframeCollection)
}
inline std::string* getKeyframeCollectionResponse::mutable_keyframecollection() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getKeyframeCollectionResponse.keyframeCollection)
  return _internal_mutable_keyframecollection();
}
inline const std::string& getKeyframeCollectionResponse::_internal_keyframecollection() const {
  return keyframecollection_.Get();
}
inline void getKeyframeCollectionResponse::_internal_set_keyframecollection(const std::string& value) {
  
  keyframecollection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getKeyframeCollectionResponse::set_keyframecollection(std::string&& value) {
  
  keyframecollection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getKeyframeCollectionResponse.keyframeCollection)
}
inline void getKeyframeCollectionResponse::set_keyframecollection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframecollection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getKeyframeCollectionResponse.keyframeCollection)
}
inline void getKeyframeCollectionResponse::set_keyframecollection(const void* value,
    size_t size) {
  
  keyframecollection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getKeyframeCollectionResponse.keyframeCollection)
}
inline std::string* getKeyframeCollectionResponse::_internal_mutable_keyframecollection() {
  
  return keyframecollection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getKeyframeCollectionResponse::release_keyframecollection() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getKeyframeCollectionResponse.keyframeCollection)
  return keyframecollection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getKeyframeCollectionResponse::set_allocated_keyframecollection(std::string* keyframecollection) {
  if (keyframecollection != nullptr) {
    
  } else {
    
  }
  keyframecollection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframecollection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getKeyframeCollectionResponse.keyframeCollection)
}

// bytes xpcfGrpcReturnValue = 2;
inline void getKeyframeCollectionResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getKeyframeCollectionResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.getKeyframeCollectionResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getKeyframeCollectionResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.getKeyframeCollectionResponse.xpcfGrpcReturnValue)
}
inline std::string* getKeyframeCollectionResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.getKeyframeCollectionResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getKeyframeCollectionResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getKeyframeCollectionResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getKeyframeCollectionResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.getKeyframeCollectionResponse.xpcfGrpcReturnValue)
}
inline void getKeyframeCollectionResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.getKeyframeCollectionResponse.xpcfGrpcReturnValue)
}
inline void getKeyframeCollectionResponse::set_xpcfgrpcreturnvalue(const void* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.getKeyframeCollectionResponse.xpcfGrpcReturnValue)
}
inline std::string* getKeyframeCollectionResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getKeyframeCollectionResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.getKeyframeCollectionResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getKeyframeCollectionResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.getKeyframeCollectionResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setKeyframeCollectionRequest

// bytes keyframeCollection = 1;
inline void setKeyframeCollectionRequest::clear_keyframecollection() {
  keyframecollection_.ClearToEmpty();
}
inline const std::string& setKeyframeCollectionRequest::keyframecollection() const {
  // @@protoc_insertion_point(field_get:grpcIKeyframesManager.setKeyframeCollectionRequest.keyframeCollection)
  return _internal_keyframecollection();
}
inline void setKeyframeCollectionRequest::set_keyframecollection(const std::string& value) {
  _internal_set_keyframecollection(value);
  // @@protoc_insertion_point(field_set:grpcIKeyframesManager.setKeyframeCollectionRequest.keyframeCollection)
}
inline std::string* setKeyframeCollectionRequest::mutable_keyframecollection() {
  // @@protoc_insertion_point(field_mutable:grpcIKeyframesManager.setKeyframeCollectionRequest.keyframeCollection)
  return _internal_mutable_keyframecollection();
}
inline const std::string& setKeyframeCollectionRequest::_internal_keyframecollection() const {
  return keyframecollection_.Get();
}
inline void setKeyframeCollectionRequest::_internal_set_keyframecollection(const std::string& value) {
  
  keyframecollection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setKeyframeCollectionRequest::set_keyframecollection(std::string&& value) {
  
  keyframecollection_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIKeyframesManager.setKeyframeCollectionRequest.keyframeCollection)
}
inline void setKeyframeCollectionRequest::set_keyframecollection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyframecollection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIKeyframesManager.setKeyframeCollectionRequest.keyframeCollection)
}
inline void setKeyframeCollectionRequest::set_keyframecollection(const void* value,
    size_t size) {
  
  keyframecollection_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIKeyframesManager.setKeyframeCollectionRequest.keyframeCollection)
}
inline std::string* setKeyframeCollectionRequest::_internal_mutable_keyframecollection() {
  
  return keyframecollection_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setKeyframeCollectionRequest::release_keyframecollection() {
  // @@protoc_insertion_point(field_release:grpcIKeyframesManager.setKeyframeCollectionRequest.keyframeCollection)
  return keyframecollection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setKeyframeCollectionRequest::set_allocated_keyframecollection(std::string* keyframecollection) {
  if (keyframecollection != nullptr) {
    
  } else {
    
  }
  keyframecollection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframecollection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIKeyframesManager.setKeyframeCollectionRequest.keyframeCollection)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIKeyframesManager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIKeyframesManagerService_2eproto
