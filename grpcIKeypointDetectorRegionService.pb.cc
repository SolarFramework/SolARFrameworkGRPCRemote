// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIKeypointDetectorRegionService.proto

#include "grpcIKeypointDetectorRegionService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIKeypointDetectorRegion {
PROTOBUF_CONSTEXPR setTypeRequest::setTypeRequest(
    ::_pbi::ConstantInitialized)
  : type_(0){}
struct setTypeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setTypeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setTypeRequestDefaultTypeInternal() {}
  union {
    setTypeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setTypeRequestDefaultTypeInternal _setTypeRequest_default_instance_;
PROTOBUF_CONSTEXPR getTypeRequest::getTypeRequest(
    ::_pbi::ConstantInitialized)
  : grpcservercompressionformat_(0){}
struct getTypeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getTypeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getTypeRequestDefaultTypeInternal() {}
  union {
    getTypeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getTypeRequestDefaultTypeInternal _getTypeRequest_default_instance_;
PROTOBUF_CONSTEXPR getTypeResponse::getTypeResponse(
    ::_pbi::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct getTypeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getTypeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getTypeResponseDefaultTypeInternal() {}
  union {
    getTypeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getTypeResponseDefaultTypeInternal _getTypeResponse_default_instance_;
PROTOBUF_CONSTEXPR detectRequest::detectRequest(
    ::_pbi::ConstantInitialized)
  : image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , contours_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , keypoints_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct detectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR detectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~detectRequestDefaultTypeInternal() {}
  union {
    detectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 detectRequestDefaultTypeInternal _detectRequest_default_instance_;
PROTOBUF_CONSTEXPR detectResponse::detectResponse(
    ::_pbi::ConstantInitialized)
  : keypoints_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct detectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR detectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~detectResponseDefaultTypeInternal() {}
  union {
    detectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 detectResponseDefaultTypeInternal _detectResponse_default_instance_;
}  // namespace grpcIKeypointDetectorRegion
static ::_pb::Metadata file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIKeypointDetectorRegionService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIKeypointDetectorRegionService_2eproto = nullptr;

const uint32_t TableStruct_grpcIKeypointDetectorRegionService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::setTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::setTypeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::getTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::getTypeRequest, grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::getTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::getTypeResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectRequest, image_),
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectRequest, contours_),
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectRequest, keypoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectResponse, keypoints_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIKeypointDetectorRegion::setTypeRequest)},
  { 7, -1, -1, sizeof(::grpcIKeypointDetectorRegion::getTypeRequest)},
  { 14, -1, -1, sizeof(::grpcIKeypointDetectorRegion::getTypeResponse)},
  { 21, -1, -1, sizeof(::grpcIKeypointDetectorRegion::detectRequest)},
  { 31, -1, -1, sizeof(::grpcIKeypointDetectorRegion::detectResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIKeypointDetectorRegion::_setTypeRequest_default_instance_._instance,
  &::grpcIKeypointDetectorRegion::_getTypeRequest_default_instance_._instance,
  &::grpcIKeypointDetectorRegion::_getTypeResponse_default_instance_._instance,
  &::grpcIKeypointDetectorRegion::_detectRequest_default_instance_._instance,
  &::grpcIKeypointDetectorRegion::_detectResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIKeypointDetectorRegionService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(grpcIKeypointDetectorRegionService.pro"
  "to\022\033grpcIKeypointDetectorRegion\032\033google/"
  "protobuf/empty.proto\"\036\n\016setTypeRequest\022\014"
  "\n\004type\030\001 \001(\021\"5\n\016getTypeRequest\022#\n\033grpcSe"
  "rverCompressionFormat\030\001 \001(\005\".\n\017getTypeRe"
  "sponse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"h\n\rd"
  "etectRequest\022#\n\033grpcServerCompressionFor"
  "mat\030\001 \001(\005\022\r\n\005image\030\002 \001(\014\022\020\n\010contours\030\003 \001"
  "(\014\022\021\n\tkeypoints\030\004 \001(\014\"#\n\016detectResponse\022"
  "\021\n\tkeypoints\030\001 \001(\0142\303\002\n\"grpcIKeypointDete"
  "ctorRegionService\022P\n\007setType\022+.grpcIKeyp"
  "ointDetectorRegion.setTypeRequest\032\026.goog"
  "le.protobuf.Empty\"\000\022f\n\007getType\022+.grpcIKe"
  "ypointDetectorRegion.getTypeRequest\032,.gr"
  "pcIKeypointDetectorRegion.getTypeRespons"
  "e\"\000\022c\n\006detect\022*.grpcIKeypointDetectorReg"
  "ion.detectRequest\032+.grpcIKeypointDetecto"
  "rRegion.detectResponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIKeypointDetectorRegionService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIKeypointDetectorRegionService_2eproto = {
    false, false, 712, descriptor_table_protodef_grpcIKeypointDetectorRegionService_2eproto,
    "grpcIKeypointDetectorRegionService.proto",
    &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once, descriptor_table_grpcIKeypointDetectorRegionService_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_grpcIKeypointDetectorRegionService_2eproto::offsets,
    file_level_metadata_grpcIKeypointDetectorRegionService_2eproto, file_level_enum_descriptors_grpcIKeypointDetectorRegionService_2eproto,
    file_level_service_descriptors_grpcIKeypointDetectorRegionService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter() {
  return &descriptor_table_grpcIKeypointDetectorRegionService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIKeypointDetectorRegionService_2eproto(&descriptor_table_grpcIKeypointDetectorRegionService_2eproto);
namespace grpcIKeypointDetectorRegion {

// ===================================================================

class setTypeRequest::_Internal {
 public:
};

setTypeRequest::setTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIKeypointDetectorRegion.setTypeRequest)
}
setTypeRequest::setTypeRequest(const setTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:grpcIKeypointDetectorRegion.setTypeRequest)
}

inline void setTypeRequest::SharedCtor() {
type_ = 0;
}

setTypeRequest::~setTypeRequest() {
  // @@protoc_insertion_point(destructor:grpcIKeypointDetectorRegion.setTypeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setTypeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void setTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIKeypointDetectorRegion.setTypeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setTypeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setTypeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIKeypointDetectorRegion.setTypeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIKeypointDetectorRegion.setTypeRequest)
  return target;
}

size_t setTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIKeypointDetectorRegion.setTypeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setTypeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    setTypeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setTypeRequest::GetClassData() const { return &_class_data_; }

void setTypeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<setTypeRequest *>(to)->MergeFrom(
      static_cast<const setTypeRequest &>(from));
}


void setTypeRequest::MergeFrom(const setTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIKeypointDetectorRegion.setTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setTypeRequest::CopyFrom(const setTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIKeypointDetectorRegion.setTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setTypeRequest::IsInitialized() const {
  return true;
}

void setTypeRequest::InternalSwap(setTypeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setTypeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter, &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once,
      file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[0]);
}

// ===================================================================

class getTypeRequest::_Internal {
 public:
};

getTypeRequest::getTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIKeypointDetectorRegion.getTypeRequest)
}
getTypeRequest::getTypeRequest(const getTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIKeypointDetectorRegion.getTypeRequest)
}

inline void getTypeRequest::SharedCtor() {
grpcservercompressionformat_ = 0;
}

getTypeRequest::~getTypeRequest() {
  // @@protoc_insertion_point(destructor:grpcIKeypointDetectorRegion.getTypeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getTypeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void getTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIKeypointDetectorRegion.getTypeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getTypeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getTypeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIKeypointDetectorRegion.getTypeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIKeypointDetectorRegion.getTypeRequest)
  return target;
}

size_t getTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIKeypointDetectorRegion.getTypeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getTypeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    getTypeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getTypeRequest::GetClassData() const { return &_class_data_; }

void getTypeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<getTypeRequest *>(to)->MergeFrom(
      static_cast<const getTypeRequest &>(from));
}


void getTypeRequest::MergeFrom(const getTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIKeypointDetectorRegion.getTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getTypeRequest::CopyFrom(const getTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIKeypointDetectorRegion.getTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getTypeRequest::IsInitialized() const {
  return true;
}

void getTypeRequest::InternalSwap(getTypeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getTypeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter, &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once,
      file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[1]);
}

// ===================================================================

class getTypeResponse::_Internal {
 public:
};

getTypeResponse::getTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIKeypointDetectorRegion.getTypeResponse)
}
getTypeResponse::getTypeResponse(const getTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIKeypointDetectorRegion.getTypeResponse)
}

inline void getTypeResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

getTypeResponse::~getTypeResponse() {
  // @@protoc_insertion_point(destructor:grpcIKeypointDetectorRegion.getTypeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getTypeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void getTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIKeypointDetectorRegion.getTypeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getTypeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getTypeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIKeypointDetectorRegion.getTypeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIKeypointDetectorRegion.getTypeResponse)
  return target;
}

size_t getTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIKeypointDetectorRegion.getTypeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getTypeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    getTypeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getTypeResponse::GetClassData() const { return &_class_data_; }

void getTypeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<getTypeResponse *>(to)->MergeFrom(
      static_cast<const getTypeResponse &>(from));
}


void getTypeResponse::MergeFrom(const getTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIKeypointDetectorRegion.getTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getTypeResponse::CopyFrom(const getTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIKeypointDetectorRegion.getTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getTypeResponse::IsInitialized() const {
  return true;
}

void getTypeResponse::InternalSwap(getTypeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getTypeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter, &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once,
      file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[2]);
}

// ===================================================================

class detectRequest::_Internal {
 public:
};

detectRequest::detectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIKeypointDetectorRegion.detectRequest)
}
detectRequest::detectRequest(const detectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  contours_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contours_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contours().empty()) {
    contours_.Set(from._internal_contours(), 
      GetArenaForAllocation());
  }
  keypoints_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keypoints_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keypoints().empty()) {
    keypoints_.Set(from._internal_keypoints(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIKeypointDetectorRegion.detectRequest)
}

inline void detectRequest::SharedCtor() {
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contours_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contours_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
keypoints_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keypoints_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

detectRequest::~detectRequest() {
  // @@protoc_insertion_point(destructor:grpcIKeypointDetectorRegion.detectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void detectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_.Destroy();
  contours_.Destroy();
  keypoints_.Destroy();
}

void detectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void detectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIKeypointDetectorRegion.detectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmpty();
  contours_.ClearToEmpty();
  keypoints_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* detectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes contours = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_contours();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keypoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_keypoints();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* detectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIKeypointDetectorRegion.detectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  // bytes contours = 3;
  if (!this->_internal_contours().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_contours(), target);
  }

  // bytes keypoints = 4;
  if (!this->_internal_keypoints().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_keypoints(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIKeypointDetectorRegion.detectRequest)
  return target;
}

size_t detectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIKeypointDetectorRegion.detectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // bytes contours = 3;
  if (!this->_internal_contours().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contours());
  }

  // bytes keypoints = 4;
  if (!this->_internal_keypoints().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData detectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    detectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*detectRequest::GetClassData() const { return &_class_data_; }

void detectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<detectRequest *>(to)->MergeFrom(
      static_cast<const detectRequest &>(from));
}


void detectRequest::MergeFrom(const detectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIKeypointDetectorRegion.detectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_contours().empty()) {
    _internal_set_contours(from._internal_contours());
  }
  if (!from._internal_keypoints().empty()) {
    _internal_set_keypoints(from._internal_keypoints());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void detectRequest::CopyFrom(const detectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIKeypointDetectorRegion.detectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detectRequest::IsInitialized() const {
  return true;
}

void detectRequest::InternalSwap(detectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &contours_, lhs_arena,
      &other->contours_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &keypoints_, lhs_arena,
      &other->keypoints_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata detectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter, &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once,
      file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[3]);
}

// ===================================================================

class detectResponse::_Internal {
 public:
};

detectResponse::detectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIKeypointDetectorRegion.detectResponse)
}
detectResponse::detectResponse(const detectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keypoints_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keypoints_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keypoints().empty()) {
    keypoints_.Set(from._internal_keypoints(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:grpcIKeypointDetectorRegion.detectResponse)
}

inline void detectResponse::SharedCtor() {
keypoints_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keypoints_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

detectResponse::~detectResponse() {
  // @@protoc_insertion_point(destructor:grpcIKeypointDetectorRegion.detectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void detectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  keypoints_.Destroy();
}

void detectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void detectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIKeypointDetectorRegion.detectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoints_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* detectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes keypoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_keypoints();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* detectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIKeypointDetectorRegion.detectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes keypoints = 1;
  if (!this->_internal_keypoints().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_keypoints(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIKeypointDetectorRegion.detectResponse)
  return target;
}

size_t detectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIKeypointDetectorRegion.detectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes keypoints = 1;
  if (!this->_internal_keypoints().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData detectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    detectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*detectResponse::GetClassData() const { return &_class_data_; }

void detectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<detectResponse *>(to)->MergeFrom(
      static_cast<const detectResponse &>(from));
}


void detectResponse::MergeFrom(const detectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIKeypointDetectorRegion.detectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_keypoints().empty()) {
    _internal_set_keypoints(from._internal_keypoints());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void detectResponse::CopyFrom(const detectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIKeypointDetectorRegion.detectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detectResponse::IsInitialized() const {
  return true;
}

void detectResponse::InternalSwap(detectResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &keypoints_, lhs_arena,
      &other->keypoints_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata detectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter, &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once,
      file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIKeypointDetectorRegion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIKeypointDetectorRegion::setTypeRequest*
Arena::CreateMaybeMessage< ::grpcIKeypointDetectorRegion::setTypeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIKeypointDetectorRegion::setTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIKeypointDetectorRegion::getTypeRequest*
Arena::CreateMaybeMessage< ::grpcIKeypointDetectorRegion::getTypeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIKeypointDetectorRegion::getTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIKeypointDetectorRegion::getTypeResponse*
Arena::CreateMaybeMessage< ::grpcIKeypointDetectorRegion::getTypeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIKeypointDetectorRegion::getTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIKeypointDetectorRegion::detectRequest*
Arena::CreateMaybeMessage< ::grpcIKeypointDetectorRegion::detectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIKeypointDetectorRegion::detectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIKeypointDetectorRegion::detectResponse*
Arena::CreateMaybeMessage< ::grpcIKeypointDetectorRegion::detectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIKeypointDetectorRegion::detectResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
