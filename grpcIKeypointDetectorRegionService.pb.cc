// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIKeypointDetectorRegionService.proto

#include "grpcIKeypointDetectorRegionService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace grpcIKeypointDetectorRegion {
constexpr setTypeRequest::setTypeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0){}
struct setTypeRequestDefaultTypeInternal {
  constexpr setTypeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~setTypeRequestDefaultTypeInternal() {}
  union {
    setTypeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT setTypeRequestDefaultTypeInternal _setTypeRequest_default_instance_;
constexpr getTypeResponse::getTypeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct getTypeResponseDefaultTypeInternal {
  constexpr getTypeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~getTypeResponseDefaultTypeInternal() {}
  union {
    getTypeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT getTypeResponseDefaultTypeInternal _getTypeResponse_default_instance_;
constexpr detectRequest::detectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contours_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , keypoints_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct detectRequestDefaultTypeInternal {
  constexpr detectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~detectRequestDefaultTypeInternal() {}
  union {
    detectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT detectRequestDefaultTypeInternal _detectRequest_default_instance_;
constexpr detectResponse::detectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keypoints_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct detectResponseDefaultTypeInternal {
  constexpr detectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~detectResponseDefaultTypeInternal() {}
  union {
    detectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT detectResponseDefaultTypeInternal _detectResponse_default_instance_;
}  // namespace grpcIKeypointDetectorRegion
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_grpcIKeypointDetectorRegionService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpcIKeypointDetectorRegionService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpcIKeypointDetectorRegionService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::setTypeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::setTypeRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::getTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::getTypeResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectRequest, image_),
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectRequest, contours_),
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectRequest, keypoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::grpcIKeypointDetectorRegion::detectResponse, keypoints_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::grpcIKeypointDetectorRegion::setTypeRequest)},
  { 6, -1, sizeof(::grpcIKeypointDetectorRegion::getTypeResponse)},
  { 12, -1, sizeof(::grpcIKeypointDetectorRegion::detectRequest)},
  { 20, -1, sizeof(::grpcIKeypointDetectorRegion::detectResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIKeypointDetectorRegion::_setTypeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIKeypointDetectorRegion::_getTypeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIKeypointDetectorRegion::_detectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::grpcIKeypointDetectorRegion::_detectResponse_default_instance_),
};

const char descriptor_table_protodef_grpcIKeypointDetectorRegionService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(grpcIKeypointDetectorRegionService.pro"
  "to\022\033grpcIKeypointDetectorRegion\032\033google/"
  "protobuf/empty.proto\"\036\n\016setTypeRequest\022\014"
  "\n\004type\030\001 \001(\021\".\n\017getTypeResponse\022\033\n\023xpcfG"
  "rpcReturnValue\030\001 \001(\021\"C\n\rdetectRequest\022\r\n"
  "\005image\030\001 \001(\014\022\020\n\010contours\030\002 \001(\014\022\021\n\tkeypoi"
  "nts\030\003 \001(\014\"#\n\016detectResponse\022\021\n\tkeypoints"
  "\030\001 \001(\0142\256\002\n\"grpcIKeypointDetectorRegionSe"
  "rvice\022P\n\007setType\022+.grpcIKeypointDetector"
  "Region.setTypeRequest\032\026.google.protobuf."
  "Empty\"\000\022Q\n\007getType\022\026.google.protobuf.Emp"
  "ty\032,.grpcIKeypointDetectorRegion.getType"
  "Response\"\000\022c\n\006detect\022*.grpcIKeypointDete"
  "ctorRegion.detectRequest\032+.grpcIKeypoint"
  "DetectorRegion.detectResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpcIKeypointDetectorRegionService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIKeypointDetectorRegionService_2eproto = {
  false, false, 599, descriptor_table_protodef_grpcIKeypointDetectorRegionService_2eproto, "grpcIKeypointDetectorRegionService.proto", 
  &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once, descriptor_table_grpcIKeypointDetectorRegionService_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_grpcIKeypointDetectorRegionService_2eproto::offsets,
  file_level_metadata_grpcIKeypointDetectorRegionService_2eproto, file_level_enum_descriptors_grpcIKeypointDetectorRegionService_2eproto, file_level_service_descriptors_grpcIKeypointDetectorRegionService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter() {
  return &descriptor_table_grpcIKeypointDetectorRegionService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_grpcIKeypointDetectorRegionService_2eproto(&descriptor_table_grpcIKeypointDetectorRegionService_2eproto);
namespace grpcIKeypointDetectorRegion {

// ===================================================================

class setTypeRequest::_Internal {
 public:
};

setTypeRequest::setTypeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpcIKeypointDetectorRegion.setTypeRequest)
}
setTypeRequest::setTypeRequest(const setTypeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:grpcIKeypointDetectorRegion.setTypeRequest)
}

inline void setTypeRequest::SharedCtor() {
type_ = 0;
}

setTypeRequest::~setTypeRequest() {
  // @@protoc_insertion_point(destructor:grpcIKeypointDetectorRegion.setTypeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void setTypeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void setTypeRequest::ArenaDtor(void* object) {
  setTypeRequest* _this = reinterpret_cast< setTypeRequest* >(object);
  (void)_this;
}
void setTypeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void setTypeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIKeypointDetectorRegion.setTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setTypeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* setTypeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIKeypointDetectorRegion.setTypeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIKeypointDetectorRegion.setTypeRequest)
  return target;
}

size_t setTypeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIKeypointDetectorRegion.setTypeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setTypeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    setTypeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setTypeRequest::GetClassData() const { return &_class_data_; }

void setTypeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<setTypeRequest *>(to)->MergeFrom(
      static_cast<const setTypeRequest &>(from));
}


void setTypeRequest::MergeFrom(const setTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIKeypointDetectorRegion.setTypeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setTypeRequest::CopyFrom(const setTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIKeypointDetectorRegion.setTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setTypeRequest::IsInitialized() const {
  return true;
}

void setTypeRequest::InternalSwap(setTypeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setTypeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter, &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once,
      file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[0]);
}

// ===================================================================

class getTypeResponse::_Internal {
 public:
};

getTypeResponse::getTypeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpcIKeypointDetectorRegion.getTypeResponse)
}
getTypeResponse::getTypeResponse(const getTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIKeypointDetectorRegion.getTypeResponse)
}

inline void getTypeResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

getTypeResponse::~getTypeResponse() {
  // @@protoc_insertion_point(destructor:grpcIKeypointDetectorRegion.getTypeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void getTypeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void getTypeResponse::ArenaDtor(void* object) {
  getTypeResponse* _this = reinterpret_cast< getTypeResponse* >(object);
  (void)_this;
}
void getTypeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void getTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIKeypointDetectorRegion.getTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getTypeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getTypeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIKeypointDetectorRegion.getTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIKeypointDetectorRegion.getTypeResponse)
  return target;
}

size_t getTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIKeypointDetectorRegion.getTypeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_xpcfgrpcreturnvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getTypeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    getTypeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getTypeResponse::GetClassData() const { return &_class_data_; }

void getTypeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<getTypeResponse *>(to)->MergeFrom(
      static_cast<const getTypeResponse &>(from));
}


void getTypeResponse::MergeFrom(const getTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIKeypointDetectorRegion.getTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getTypeResponse::CopyFrom(const getTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIKeypointDetectorRegion.getTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getTypeResponse::IsInitialized() const {
  return true;
}

void getTypeResponse::InternalSwap(getTypeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getTypeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter, &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once,
      file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[1]);
}

// ===================================================================

class detectRequest::_Internal {
 public:
};

detectRequest::detectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpcIKeypointDetectorRegion.detectRequest)
}
detectRequest::detectRequest(const detectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArenaForAllocation());
  }
  contours_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contours().empty()) {
    contours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contours(), 
      GetArenaForAllocation());
  }
  keypoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keypoints().empty()) {
    keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keypoints(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:grpcIKeypointDetectorRegion.detectRequest)
}

inline void detectRequest::SharedCtor() {
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
contours_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
keypoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

detectRequest::~detectRequest() {
  // @@protoc_insertion_point(destructor:grpcIKeypointDetectorRegion.detectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void detectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contours_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  keypoints_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void detectRequest::ArenaDtor(void* object) {
  detectRequest* _this = reinterpret_cast< detectRequest* >(object);
  (void)_this;
}
void detectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void detectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void detectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIKeypointDetectorRegion.detectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmpty();
  contours_.ClearToEmpty();
  keypoints_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* detectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes contours = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contours();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes keypoints = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_keypoints();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* detectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIKeypointDetectorRegion.detectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image(), target);
  }

  // bytes contours = 2;
  if (!this->_internal_contours().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contours(), target);
  }

  // bytes keypoints = 3;
  if (!this->_internal_keypoints().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_keypoints(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIKeypointDetectorRegion.detectRequest)
  return target;
}

size_t detectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIKeypointDetectorRegion.detectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // bytes contours = 2;
  if (!this->_internal_contours().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contours());
  }

  // bytes keypoints = 3;
  if (!this->_internal_keypoints().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData detectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    detectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*detectRequest::GetClassData() const { return &_class_data_; }

void detectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<detectRequest *>(to)->MergeFrom(
      static_cast<const detectRequest &>(from));
}


void detectRequest::MergeFrom(const detectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIKeypointDetectorRegion.detectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_contours().empty()) {
    _internal_set_contours(from._internal_contours());
  }
  if (!from._internal_keypoints().empty()) {
    _internal_set_keypoints(from._internal_keypoints());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void detectRequest::CopyFrom(const detectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIKeypointDetectorRegion.detectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detectRequest::IsInitialized() const {
  return true;
}

void detectRequest::InternalSwap(detectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_, GetArenaForAllocation(),
      &other->image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contours_, GetArenaForAllocation(),
      &other->contours_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &keypoints_, GetArenaForAllocation(),
      &other->keypoints_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata detectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter, &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once,
      file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[2]);
}

// ===================================================================

class detectResponse::_Internal {
 public:
};

detectResponse::detectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:grpcIKeypointDetectorRegion.detectResponse)
}
detectResponse::detectResponse(const detectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keypoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keypoints().empty()) {
    keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keypoints(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:grpcIKeypointDetectorRegion.detectResponse)
}

inline void detectResponse::SharedCtor() {
keypoints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

detectResponse::~detectResponse() {
  // @@protoc_insertion_point(destructor:grpcIKeypointDetectorRegion.detectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void detectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  keypoints_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void detectResponse::ArenaDtor(void* object) {
  detectResponse* _this = reinterpret_cast< detectResponse* >(object);
  (void)_this;
}
void detectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void detectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void detectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIKeypointDetectorRegion.detectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoints_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* detectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes keypoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_keypoints();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* detectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIKeypointDetectorRegion.detectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes keypoints = 1;
  if (!this->_internal_keypoints().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_keypoints(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIKeypointDetectorRegion.detectResponse)
  return target;
}

size_t detectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIKeypointDetectorRegion.detectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes keypoints = 1;
  if (!this->_internal_keypoints().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keypoints());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData detectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    detectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*detectResponse::GetClassData() const { return &_class_data_; }

void detectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<detectResponse *>(to)->MergeFrom(
      static_cast<const detectResponse &>(from));
}


void detectResponse::MergeFrom(const detectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIKeypointDetectorRegion.detectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_keypoints().empty()) {
    _internal_set_keypoints(from._internal_keypoints());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void detectResponse::CopyFrom(const detectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIKeypointDetectorRegion.detectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool detectResponse::IsInitialized() const {
  return true;
}

void detectResponse::InternalSwap(detectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &keypoints_, GetArenaForAllocation(),
      &other->keypoints_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata detectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_getter, &descriptor_table_grpcIKeypointDetectorRegionService_2eproto_once,
      file_level_metadata_grpcIKeypointDetectorRegionService_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIKeypointDetectorRegion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIKeypointDetectorRegion::setTypeRequest* Arena::CreateMaybeMessage< ::grpcIKeypointDetectorRegion::setTypeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIKeypointDetectorRegion::setTypeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIKeypointDetectorRegion::getTypeResponse* Arena::CreateMaybeMessage< ::grpcIKeypointDetectorRegion::getTypeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIKeypointDetectorRegion::getTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIKeypointDetectorRegion::detectRequest* Arena::CreateMaybeMessage< ::grpcIKeypointDetectorRegion::detectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIKeypointDetectorRegion::detectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIKeypointDetectorRegion::detectResponse* Arena::CreateMaybeMessage< ::grpcIKeypointDetectorRegion::detectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIKeypointDetectorRegion::detectResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
