// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIDescriptorsExtractorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIDescriptorsExtractorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIDescriptorsExtractorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIDescriptorsExtractorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIDescriptorsExtractorService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIDescriptorsExtractorService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIDescriptorsExtractorService_2eproto_metadata_getter(int index);
namespace grpcIDescriptorsExtractor {
class extractRequest;
struct extractRequestDefaultTypeInternal;
extern extractRequestDefaultTypeInternal _extractRequest_default_instance_;
class extractResponse;
struct extractResponseDefaultTypeInternal;
extern extractResponseDefaultTypeInternal _extractResponse_default_instance_;
class getTypeStringRequest;
struct getTypeStringRequestDefaultTypeInternal;
extern getTypeStringRequestDefaultTypeInternal _getTypeStringRequest_default_instance_;
class getTypeStringResponse;
struct getTypeStringResponseDefaultTypeInternal;
extern getTypeStringResponseDefaultTypeInternal _getTypeStringResponse_default_instance_;
}  // namespace grpcIDescriptorsExtractor
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIDescriptorsExtractor::extractRequest* Arena::CreateMaybeMessage<::grpcIDescriptorsExtractor::extractRequest>(Arena*);
template<> ::grpcIDescriptorsExtractor::extractResponse* Arena::CreateMaybeMessage<::grpcIDescriptorsExtractor::extractResponse>(Arena*);
template<> ::grpcIDescriptorsExtractor::getTypeStringRequest* Arena::CreateMaybeMessage<::grpcIDescriptorsExtractor::getTypeStringRequest>(Arena*);
template<> ::grpcIDescriptorsExtractor::getTypeStringResponse* Arena::CreateMaybeMessage<::grpcIDescriptorsExtractor::getTypeStringResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIDescriptorsExtractor {

// ===================================================================

class getTypeStringRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorsExtractor.getTypeStringRequest) */ {
 public:
  inline getTypeStringRequest() : getTypeStringRequest(nullptr) {}
  virtual ~getTypeStringRequest();
  explicit constexpr getTypeStringRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTypeStringRequest(const getTypeStringRequest& from);
  getTypeStringRequest(getTypeStringRequest&& from) noexcept
    : getTypeStringRequest() {
    *this = ::std::move(from);
  }

  inline getTypeStringRequest& operator=(const getTypeStringRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTypeStringRequest& operator=(getTypeStringRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getTypeStringRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTypeStringRequest* internal_default_instance() {
    return reinterpret_cast<const getTypeStringRequest*>(
               &_getTypeStringRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(getTypeStringRequest& a, getTypeStringRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getTypeStringRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTypeStringRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getTypeStringRequest* New() const final {
    return CreateMaybeMessage<getTypeStringRequest>(nullptr);
  }

  getTypeStringRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getTypeStringRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getTypeStringRequest& from);
  void MergeFrom(const getTypeStringRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTypeStringRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorsExtractor.getTypeStringRequest";
  }
  protected:
  explicit getTypeStringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorsExtractorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorsExtractor.getTypeStringRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorsExtractorService_2eproto;
};
// -------------------------------------------------------------------

class getTypeStringResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorsExtractor.getTypeStringResponse) */ {
 public:
  inline getTypeStringResponse() : getTypeStringResponse(nullptr) {}
  virtual ~getTypeStringResponse();
  explicit constexpr getTypeStringResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTypeStringResponse(const getTypeStringResponse& from);
  getTypeStringResponse(getTypeStringResponse&& from) noexcept
    : getTypeStringResponse() {
    *this = ::std::move(from);
  }

  inline getTypeStringResponse& operator=(const getTypeStringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTypeStringResponse& operator=(getTypeStringResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getTypeStringResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTypeStringResponse* internal_default_instance() {
    return reinterpret_cast<const getTypeStringResponse*>(
               &_getTypeStringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(getTypeStringResponse& a, getTypeStringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getTypeStringResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTypeStringResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getTypeStringResponse* New() const final {
    return CreateMaybeMessage<getTypeStringResponse>(nullptr);
  }

  getTypeStringResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getTypeStringResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getTypeStringResponse& from);
  void MergeFrom(const getTypeStringResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTypeStringResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorsExtractor.getTypeStringResponse";
  }
  protected:
  explicit getTypeStringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorsExtractorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // string xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const char* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorsExtractor.getTypeStringResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorsExtractorService_2eproto;
};
// -------------------------------------------------------------------

class extractRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorsExtractor.extractRequest) */ {
 public:
  inline extractRequest() : extractRequest(nullptr) {}
  virtual ~extractRequest();
  explicit constexpr extractRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  extractRequest(const extractRequest& from);
  extractRequest(extractRequest&& from) noexcept
    : extractRequest() {
    *this = ::std::move(from);
  }

  inline extractRequest& operator=(const extractRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline extractRequest& operator=(extractRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const extractRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const extractRequest* internal_default_instance() {
    return reinterpret_cast<const extractRequest*>(
               &_extractRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(extractRequest& a, extractRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(extractRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(extractRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline extractRequest* New() const final {
    return CreateMaybeMessage<extractRequest>(nullptr);
  }

  extractRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<extractRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const extractRequest& from);
  void MergeFrom(const extractRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(extractRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorsExtractor.extractRequest";
  }
  protected:
  explicit extractRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorsExtractorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kKeypointsFieldNumber = 3,
    kDescriptorsFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes keypoints = 3;
  void clear_keypoints();
  const std::string& keypoints() const;
  void set_keypoints(const std::string& value);
  void set_keypoints(std::string&& value);
  void set_keypoints(const char* value);
  void set_keypoints(const void* value, size_t size);
  std::string* mutable_keypoints();
  std::string* release_keypoints();
  void set_allocated_keypoints(std::string* keypoints);
  private:
  const std::string& _internal_keypoints() const;
  void _internal_set_keypoints(const std::string& value);
  std::string* _internal_mutable_keypoints();
  public:

  // bytes descriptors = 4;
  void clear_descriptors();
  const std::string& descriptors() const;
  void set_descriptors(const std::string& value);
  void set_descriptors(std::string&& value);
  void set_descriptors(const char* value);
  void set_descriptors(const void* value, size_t size);
  std::string* mutable_descriptors();
  std::string* release_descriptors();
  void set_allocated_descriptors(std::string* descriptors);
  private:
  const std::string& _internal_descriptors() const;
  void _internal_set_descriptors(const std::string& value);
  std::string* _internal_mutable_descriptors();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorsExtractor.extractRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptors_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorsExtractorService_2eproto;
};
// -------------------------------------------------------------------

class extractResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorsExtractor.extractResponse) */ {
 public:
  inline extractResponse() : extractResponse(nullptr) {}
  virtual ~extractResponse();
  explicit constexpr extractResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  extractResponse(const extractResponse& from);
  extractResponse(extractResponse&& from) noexcept
    : extractResponse() {
    *this = ::std::move(from);
  }

  inline extractResponse& operator=(const extractResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline extractResponse& operator=(extractResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const extractResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const extractResponse* internal_default_instance() {
    return reinterpret_cast<const extractResponse*>(
               &_extractResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(extractResponse& a, extractResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(extractResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(extractResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline extractResponse* New() const final {
    return CreateMaybeMessage<extractResponse>(nullptr);
  }

  extractResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<extractResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const extractResponse& from);
  void MergeFrom(const extractResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(extractResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorsExtractor.extractResponse";
  }
  protected:
  explicit extractResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIDescriptorsExtractorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorsFieldNumber = 1,
  };
  // bytes descriptors = 1;
  void clear_descriptors();
  const std::string& descriptors() const;
  void set_descriptors(const std::string& value);
  void set_descriptors(std::string&& value);
  void set_descriptors(const char* value);
  void set_descriptors(const void* value, size_t size);
  std::string* mutable_descriptors();
  std::string* release_descriptors();
  void set_allocated_descriptors(std::string* descriptors);
  private:
  const std::string& _internal_descriptors() const;
  void _internal_set_descriptors(const std::string& value);
  std::string* _internal_mutable_descriptors();
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorsExtractor.extractResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorsExtractorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// getTypeStringRequest

// int32 grpcServerCompressionFormat = 1;
inline void getTypeStringRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getTypeStringRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getTypeStringRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractor.getTypeStringRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getTypeStringRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void getTypeStringRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractor.getTypeStringRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// getTypeStringResponse

// string xpcfGrpcReturnValue = 1;
inline void getTypeStringResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getTypeStringResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractor.getTypeStringResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getTypeStringResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractor.getTypeStringResponse.xpcfGrpcReturnValue)
}
inline std::string* getTypeStringResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractor.getTypeStringResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getTypeStringResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getTypeStringResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getTypeStringResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorsExtractor.getTypeStringResponse.xpcfGrpcReturnValue)
}
inline void getTypeStringResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorsExtractor.getTypeStringResponse.xpcfGrpcReturnValue)
}
inline void getTypeStringResponse::set_xpcfgrpcreturnvalue(const char* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorsExtractor.getTypeStringResponse.xpcfGrpcReturnValue)
}
inline std::string* getTypeStringResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getTypeStringResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractor.getTypeStringResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getTypeStringResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractor.getTypeStringResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// extractRequest

// int32 grpcServerCompressionFormat = 1;
inline void extractRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 extractRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 extractRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractor.extractRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void extractRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void extractRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractor.extractRequest.grpcServerCompressionFormat)
}

// bytes image = 2;
inline void extractRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& extractRequest::image() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractor.extractRequest.image)
  return _internal_image();
}
inline void extractRequest::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractor.extractRequest.image)
}
inline std::string* extractRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractor.extractRequest.image)
  return _internal_mutable_image();
}
inline const std::string& extractRequest::_internal_image() const {
  return image_.Get();
}
inline void extractRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void extractRequest::set_image(std::string&& value) {
  
  image_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorsExtractor.extractRequest.image)
}
inline void extractRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorsExtractor.extractRequest.image)
}
inline void extractRequest::set_image(const void* value,
    size_t size) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorsExtractor.extractRequest.image)
}
inline std::string* extractRequest::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* extractRequest::release_image() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractor.extractRequest.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void extractRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractor.extractRequest.image)
}

// bytes keypoints = 3;
inline void extractRequest::clear_keypoints() {
  keypoints_.ClearToEmpty();
}
inline const std::string& extractRequest::keypoints() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractor.extractRequest.keypoints)
  return _internal_keypoints();
}
inline void extractRequest::set_keypoints(const std::string& value) {
  _internal_set_keypoints(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractor.extractRequest.keypoints)
}
inline std::string* extractRequest::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractor.extractRequest.keypoints)
  return _internal_mutable_keypoints();
}
inline const std::string& extractRequest::_internal_keypoints() const {
  return keypoints_.Get();
}
inline void extractRequest::_internal_set_keypoints(const std::string& value) {
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void extractRequest::set_keypoints(std::string&& value) {
  
  keypoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorsExtractor.extractRequest.keypoints)
}
inline void extractRequest::set_keypoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorsExtractor.extractRequest.keypoints)
}
inline void extractRequest::set_keypoints(const void* value,
    size_t size) {
  
  keypoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorsExtractor.extractRequest.keypoints)
}
inline std::string* extractRequest::_internal_mutable_keypoints() {
  
  return keypoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* extractRequest::release_keypoints() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractor.extractRequest.keypoints)
  return keypoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void extractRequest::set_allocated_keypoints(std::string* keypoints) {
  if (keypoints != nullptr) {
    
  } else {
    
  }
  keypoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keypoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractor.extractRequest.keypoints)
}

// bytes descriptors = 4;
inline void extractRequest::clear_descriptors() {
  descriptors_.ClearToEmpty();
}
inline const std::string& extractRequest::descriptors() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractor.extractRequest.descriptors)
  return _internal_descriptors();
}
inline void extractRequest::set_descriptors(const std::string& value) {
  _internal_set_descriptors(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractor.extractRequest.descriptors)
}
inline std::string* extractRequest::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractor.extractRequest.descriptors)
  return _internal_mutable_descriptors();
}
inline const std::string& extractRequest::_internal_descriptors() const {
  return descriptors_.Get();
}
inline void extractRequest::_internal_set_descriptors(const std::string& value) {
  
  descriptors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void extractRequest::set_descriptors(std::string&& value) {
  
  descriptors_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorsExtractor.extractRequest.descriptors)
}
inline void extractRequest::set_descriptors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorsExtractor.extractRequest.descriptors)
}
inline void extractRequest::set_descriptors(const void* value,
    size_t size) {
  
  descriptors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorsExtractor.extractRequest.descriptors)
}
inline std::string* extractRequest::_internal_mutable_descriptors() {
  
  return descriptors_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* extractRequest::release_descriptors() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractor.extractRequest.descriptors)
  return descriptors_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void extractRequest::set_allocated_descriptors(std::string* descriptors) {
  if (descriptors != nullptr) {
    
  } else {
    
  }
  descriptors_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptors,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractor.extractRequest.descriptors)
}

// -------------------------------------------------------------------

// extractResponse

// bytes descriptors = 1;
inline void extractResponse::clear_descriptors() {
  descriptors_.ClearToEmpty();
}
inline const std::string& extractResponse::descriptors() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractor.extractResponse.descriptors)
  return _internal_descriptors();
}
inline void extractResponse::set_descriptors(const std::string& value) {
  _internal_set_descriptors(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractor.extractResponse.descriptors)
}
inline std::string* extractResponse::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractor.extractResponse.descriptors)
  return _internal_mutable_descriptors();
}
inline const std::string& extractResponse::_internal_descriptors() const {
  return descriptors_.Get();
}
inline void extractResponse::_internal_set_descriptors(const std::string& value) {
  
  descriptors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void extractResponse::set_descriptors(std::string&& value) {
  
  descriptors_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIDescriptorsExtractor.extractResponse.descriptors)
}
inline void extractResponse::set_descriptors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  descriptors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIDescriptorsExtractor.extractResponse.descriptors)
}
inline void extractResponse::set_descriptors(const void* value,
    size_t size) {
  
  descriptors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIDescriptorsExtractor.extractResponse.descriptors)
}
inline std::string* extractResponse::_internal_mutable_descriptors() {
  
  return descriptors_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* extractResponse::release_descriptors() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractor.extractResponse.descriptors)
  return descriptors_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void extractResponse::set_allocated_descriptors(std::string* descriptors) {
  if (descriptors != nullptr) {
    
  } else {
    
  }
  descriptors_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), descriptors,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractor.extractResponse.descriptors)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIDescriptorsExtractor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIDescriptorsExtractorService_2eproto
