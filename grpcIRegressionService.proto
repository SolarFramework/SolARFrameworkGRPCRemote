syntax = "proto3";

import "google/protobuf/empty.proto";

package grpcIRegression;

message setCameraParametersRequest
{
bytes intrinsicParams = 1;
bytes distorsionParams = 2;
}

message addRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes descriptors = 2;
bytes points3D = 3;
}

message addResponse
{
sint32 xpcfGrpcReturnValue = 1;
}

message regressRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes frame = 2;
bytes points2D = 3;
bytes points3D = 4;
}

message regressResponse
{
bytes points2D = 1;
bytes points3D = 2;
sint32 xpcfGrpcReturnValue = 3;
}

message updateRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes inliers = 2;
bytes cameraPose = 3;
}

message updateResponse
{
bytes inliers = 1;
bytes cameraPose = 2;
sint32 xpcfGrpcReturnValue = 3;
}

message loadModelRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message loadModelResponse
{
sint32 xpcfGrpcReturnValue = 1;
}

message getTrainingStatusRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getTrainingStatusResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getNumActiveLeavesRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getNumActiveLeavesResponse
{
sint32 xpcfGrpcReturnValue = 1;
}

message getNumPassiveLeavesRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getNumPassiveLeavesResponse
{
sint32 xpcfGrpcReturnValue = 1;
}

service grpcIRegressionService {
rpc setCameraParameters(setCameraParametersRequest) returns(google.protobuf.Empty) {}
rpc add(addRequest) returns(addResponse) {}
rpc regress(regressRequest) returns(regressResponse) {}
rpc update(updateRequest) returns(updateResponse) {}
rpc loadModel(loadModelRequest) returns(loadModelResponse) {}
rpc getTrainingStatus(getTrainingStatusRequest) returns(getTrainingStatusResponse) {}
rpc getNumActiveLeaves(getNumActiveLeavesRequest) returns(getNumActiveLeavesResponse) {}
rpc getNumPassiveLeaves(getNumPassiveLeavesRequest) returns(getNumPassiveLeavesResponse) {}
}

