// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIBootstrapperService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIBootstrapperService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIBootstrapperService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIBootstrapperService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIBootstrapperService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIBootstrapperService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIBootstrapperService_2eproto_metadata_getter(int index);
namespace grpcIBootstrapper {
class processRequest;
struct processRequestDefaultTypeInternal;
extern processRequestDefaultTypeInternal _processRequest_default_instance_;
class processResponse;
struct processResponseDefaultTypeInternal;
extern processResponseDefaultTypeInternal _processResponse_default_instance_;
}  // namespace grpcIBootstrapper
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIBootstrapper::processRequest* Arena::CreateMaybeMessage<::grpcIBootstrapper::processRequest>(Arena*);
template<> ::grpcIBootstrapper::processResponse* Arena::CreateMaybeMessage<::grpcIBootstrapper::processResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIBootstrapper {

// ===================================================================

class processRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBootstrapper.processRequest) */ {
 public:
  inline processRequest() : processRequest(nullptr) {}
  virtual ~processRequest();
  explicit constexpr processRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  processRequest(const processRequest& from);
  processRequest(processRequest&& from) noexcept
    : processRequest() {
    *this = ::std::move(from);
  }

  inline processRequest& operator=(const processRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline processRequest& operator=(processRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const processRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const processRequest* internal_default_instance() {
    return reinterpret_cast<const processRequest*>(
               &_processRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(processRequest& a, processRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(processRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(processRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline processRequest* New() const final {
    return CreateMaybeMessage<processRequest>(nullptr);
  }

  processRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<processRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const processRequest& from);
  void MergeFrom(const processRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(processRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBootstrapper.processRequest";
  }
  protected:
  explicit processRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIBootstrapperService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kViewFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes frame = 2;
  void clear_frame();
  const std::string& frame() const;
  void set_frame(const std::string& value);
  void set_frame(std::string&& value);
  void set_frame(const char* value);
  void set_frame(const void* value, size_t size);
  std::string* mutable_frame();
  std::string* release_frame();
  void set_allocated_frame(std::string* frame);
  private:
  const std::string& _internal_frame() const;
  void _internal_set_frame(const std::string& value);
  std::string* _internal_mutable_frame();
  public:

  // bytes view = 3;
  void clear_view();
  const std::string& view() const;
  void set_view(const std::string& value);
  void set_view(std::string&& value);
  void set_view(const char* value);
  void set_view(const void* value, size_t size);
  std::string* mutable_view();
  std::string* release_view();
  void set_allocated_view(std::string* view);
  private:
  const std::string& _internal_view() const;
  void _internal_set_view(const std::string& value);
  std::string* _internal_mutable_view();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBootstrapper.processRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIBootstrapperService_2eproto;
};
// -------------------------------------------------------------------

class processResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIBootstrapper.processResponse) */ {
 public:
  inline processResponse() : processResponse(nullptr) {}
  virtual ~processResponse();
  explicit constexpr processResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  processResponse(const processResponse& from);
  processResponse(processResponse&& from) noexcept
    : processResponse() {
    *this = ::std::move(from);
  }

  inline processResponse& operator=(const processResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline processResponse& operator=(processResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const processResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const processResponse* internal_default_instance() {
    return reinterpret_cast<const processResponse*>(
               &_processResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(processResponse& a, processResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(processResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(processResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline processResponse* New() const final {
    return CreateMaybeMessage<processResponse>(nullptr);
  }

  processResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<processResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const processResponse& from);
  void MergeFrom(const processResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(processResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIBootstrapper.processResponse";
  }
  protected:
  explicit processResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIBootstrapperService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes view = 1;
  void clear_view();
  const std::string& view() const;
  void set_view(const std::string& value);
  void set_view(std::string&& value);
  void set_view(const char* value);
  void set_view(const void* value, size_t size);
  std::string* mutable_view();
  std::string* release_view();
  void set_allocated_view(std::string* view);
  private:
  const std::string& _internal_view() const;
  void _internal_set_view(const std::string& value);
  std::string* _internal_mutable_view();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIBootstrapper.processResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr view_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIBootstrapperService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// processRequest

// int32 grpcServerCompressionFormat = 1;
inline void processRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 processRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 processRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIBootstrapper.processRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void processRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void processRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIBootstrapper.processRequest.grpcServerCompressionFormat)
}

// bytes frame = 2;
inline void processRequest::clear_frame() {
  frame_.ClearToEmpty();
}
inline const std::string& processRequest::frame() const {
  // @@protoc_insertion_point(field_get:grpcIBootstrapper.processRequest.frame)
  return _internal_frame();
}
inline void processRequest::set_frame(const std::string& value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:grpcIBootstrapper.processRequest.frame)
}
inline std::string* processRequest::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:grpcIBootstrapper.processRequest.frame)
  return _internal_mutable_frame();
}
inline const std::string& processRequest::_internal_frame() const {
  return frame_.Get();
}
inline void processRequest::_internal_set_frame(const std::string& value) {
  
  frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void processRequest::set_frame(std::string&& value) {
  
  frame_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIBootstrapper.processRequest.frame)
}
inline void processRequest::set_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIBootstrapper.processRequest.frame)
}
inline void processRequest::set_frame(const void* value,
    size_t size) {
  
  frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIBootstrapper.processRequest.frame)
}
inline std::string* processRequest::_internal_mutable_frame() {
  
  return frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* processRequest::release_frame() {
  // @@protoc_insertion_point(field_release:grpcIBootstrapper.processRequest.frame)
  return frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void processRequest::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIBootstrapper.processRequest.frame)
}

// bytes view = 3;
inline void processRequest::clear_view() {
  view_.ClearToEmpty();
}
inline const std::string& processRequest::view() const {
  // @@protoc_insertion_point(field_get:grpcIBootstrapper.processRequest.view)
  return _internal_view();
}
inline void processRequest::set_view(const std::string& value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:grpcIBootstrapper.processRequest.view)
}
inline std::string* processRequest::mutable_view() {
  // @@protoc_insertion_point(field_mutable:grpcIBootstrapper.processRequest.view)
  return _internal_mutable_view();
}
inline const std::string& processRequest::_internal_view() const {
  return view_.Get();
}
inline void processRequest::_internal_set_view(const std::string& value) {
  
  view_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void processRequest::set_view(std::string&& value) {
  
  view_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIBootstrapper.processRequest.view)
}
inline void processRequest::set_view(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  view_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIBootstrapper.processRequest.view)
}
inline void processRequest::set_view(const void* value,
    size_t size) {
  
  view_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIBootstrapper.processRequest.view)
}
inline std::string* processRequest::_internal_mutable_view() {
  
  return view_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* processRequest::release_view() {
  // @@protoc_insertion_point(field_release:grpcIBootstrapper.processRequest.view)
  return view_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void processRequest::set_allocated_view(std::string* view) {
  if (view != nullptr) {
    
  } else {
    
  }
  view_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIBootstrapper.processRequest.view)
}

// -------------------------------------------------------------------

// processResponse

// bytes view = 1;
inline void processResponse::clear_view() {
  view_.ClearToEmpty();
}
inline const std::string& processResponse::view() const {
  // @@protoc_insertion_point(field_get:grpcIBootstrapper.processResponse.view)
  return _internal_view();
}
inline void processResponse::set_view(const std::string& value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:grpcIBootstrapper.processResponse.view)
}
inline std::string* processResponse::mutable_view() {
  // @@protoc_insertion_point(field_mutable:grpcIBootstrapper.processResponse.view)
  return _internal_mutable_view();
}
inline const std::string& processResponse::_internal_view() const {
  return view_.Get();
}
inline void processResponse::_internal_set_view(const std::string& value) {
  
  view_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void processResponse::set_view(std::string&& value) {
  
  view_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIBootstrapper.processResponse.view)
}
inline void processResponse::set_view(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  view_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIBootstrapper.processResponse.view)
}
inline void processResponse::set_view(const void* value,
    size_t size) {
  
  view_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIBootstrapper.processResponse.view)
}
inline std::string* processResponse::_internal_mutable_view() {
  
  return view_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* processResponse::release_view() {
  // @@protoc_insertion_point(field_release:grpcIBootstrapper.processResponse.view)
  return view_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void processResponse::set_allocated_view(std::string* view) {
  if (view != nullptr) {
    
  } else {
    
  }
  view_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), view,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIBootstrapper.processResponse.view)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void processResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 processResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 processResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIBootstrapper.processResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void processResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void processResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIBootstrapper.processResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIBootstrapper

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIBootstrapperService_2eproto
