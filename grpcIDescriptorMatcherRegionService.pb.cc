// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIDescriptorMatcherRegionService.proto

#include "grpcIDescriptorMatcherRegionService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIDescriptorMatcherRegion {
PROTOBUF_CONSTEXPR match_grpc0Request::match_grpc0Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.descriptors1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.descriptors2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.points2d1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.points2d2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matches_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.matchingdistancemax_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct match_grpc0RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR match_grpc0RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~match_grpc0RequestDefaultTypeInternal() {}
  union {
    match_grpc0Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 match_grpc0RequestDefaultTypeInternal _match_grpc0Request_default_instance_;
PROTOBUF_CONSTEXPR match_grpc0Response::match_grpc0Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matches_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct match_grpc0ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR match_grpc0ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~match_grpc0ResponseDefaultTypeInternal() {}
  union {
    match_grpc0Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 match_grpc0ResponseDefaultTypeInternal _match_grpc0Response_default_instance_;
PROTOBUF_CONSTEXPR match_grpc1Request::match_grpc1Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points2d_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.descriptors_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matches_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.matchingdistancemax_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct match_grpc1RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR match_grpc1RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~match_grpc1RequestDefaultTypeInternal() {}
  union {
    match_grpc1Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 match_grpc1RequestDefaultTypeInternal _match_grpc1Request_default_instance_;
PROTOBUF_CONSTEXPR match_grpc1Response::match_grpc1Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matches_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct match_grpc1ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR match_grpc1ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~match_grpc1ResponseDefaultTypeInternal() {}
  union {
    match_grpc1Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 match_grpc1ResponseDefaultTypeInternal _match_grpc1Response_default_instance_;
PROTOBUF_CONSTEXPR match_grpc2Request::match_grpc2Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currentframe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lastframe_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.matches_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.matchingdistancemax_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct match_grpc2RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR match_grpc2RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~match_grpc2RequestDefaultTypeInternal() {}
  union {
    match_grpc2Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 match_grpc2RequestDefaultTypeInternal _match_grpc2Request_default_instance_;
PROTOBUF_CONSTEXPR match_grpc2Response::match_grpc2Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matches_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct match_grpc2ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR match_grpc2ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~match_grpc2ResponseDefaultTypeInternal() {}
  union {
    match_grpc2Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 match_grpc2ResponseDefaultTypeInternal _match_grpc2Response_default_instance_;
}  // namespace grpcIDescriptorMatcherRegion
static ::_pb::Metadata file_level_metadata_grpcIDescriptorMatcherRegionService_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIDescriptorMatcherRegionService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIDescriptorMatcherRegionService_2eproto = nullptr;

const uint32_t TableStruct_grpcIDescriptorMatcherRegionService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Request, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Request, _impl_.descriptors1_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Request, _impl_.descriptors2_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Request, _impl_.points2d1_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Request, _impl_.points2d2_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Request, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Request, _impl_.matchingdistancemax_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Request, _impl_.matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Response, _impl_.matches_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc0Response, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Request, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Request, _impl_.points2d_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Request, _impl_.descriptors_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Request, _impl_.frame_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Request, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Request, _impl_.matchingdistancemax_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Request, _impl_.matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Response, _impl_.matches_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc1Response, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Request, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Request, _impl_.currentframe_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Request, _impl_.lastframe_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Request, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Request, _impl_.matchingdistancemax_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Request, _impl_.matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Response, _impl_.matches_),
  PROTOBUF_FIELD_OFFSET(::grpcIDescriptorMatcherRegion::match_grpc2Response, _impl_.xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIDescriptorMatcherRegion::match_grpc0Request)},
  { 14, -1, -1, sizeof(::grpcIDescriptorMatcherRegion::match_grpc0Response)},
  { 22, -1, -1, sizeof(::grpcIDescriptorMatcherRegion::match_grpc1Request)},
  { 35, -1, -1, sizeof(::grpcIDescriptorMatcherRegion::match_grpc1Response)},
  { 43, -1, -1, sizeof(::grpcIDescriptorMatcherRegion::match_grpc2Request)},
  { 55, -1, -1, sizeof(::grpcIDescriptorMatcherRegion::match_grpc2Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIDescriptorMatcherRegion::_match_grpc0Request_default_instance_._instance,
  &::grpcIDescriptorMatcherRegion::_match_grpc0Response_default_instance_._instance,
  &::grpcIDescriptorMatcherRegion::_match_grpc1Request_default_instance_._instance,
  &::grpcIDescriptorMatcherRegion::_match_grpc1Response_default_instance_._instance,
  &::grpcIDescriptorMatcherRegion::_match_grpc2Request_default_instance_._instance,
  &::grpcIDescriptorMatcherRegion::_match_grpc2Response_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIDescriptorMatcherRegionService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)grpcIDescriptorMatcherRegionService.pr"
  "oto\022\034grpcIDescriptorMatcherRegion\032\033googl"
  "e/protobuf/empty.proto\"\311\001\n\022match_grpc0Re"
  "quest\022#\n\033grpcServerCompressionFormat\030\001 \001"
  "(\005\022\024\n\014descriptors1\030\002 \001(\014\022\024\n\014descriptors2"
  "\030\003 \001(\014\022\021\n\tpoints2D1\030\004 \001(\014\022\021\n\tpoints2D2\030\005"
  " \001(\014\022\016\n\006radius\030\006 \001(\002\022\033\n\023matchingDistance"
  "Max\030\007 \001(\002\022\017\n\007matches\030\010 \001(\014\"C\n\023match_grpc"
  "0Response\022\017\n\007matches\030\001 \001(\014\022\033\n\023xpcfGrpcRe"
  "turnValue\030\002 \001(\021\"\255\001\n\022match_grpc1Request\022#"
  "\n\033grpcServerCompressionFormat\030\001 \001(\005\022\020\n\010p"
  "oints2D\030\002 \001(\014\022\023\n\013descriptors\030\003 \001(\014\022\r\n\005fr"
  "ame\030\004 \001(\014\022\016\n\006radius\030\005 \001(\002\022\033\n\023matchingDis"
  "tanceMax\030\006 \001(\002\022\017\n\007matches\030\007 \001(\014\"C\n\023match"
  "_grpc1Response\022\017\n\007matches\030\001 \001(\014\022\033\n\023xpcfG"
  "rpcReturnValue\030\002 \001(\021\"\240\001\n\022match_grpc2Requ"
  "est\022#\n\033grpcServerCompressionFormat\030\001 \001(\005"
  "\022\024\n\014currentFrame\030\002 \001(\014\022\021\n\tlastFrame\030\003 \001("
  "\014\022\016\n\006radius\030\004 \001(\002\022\033\n\023matchingDistanceMax"
  "\030\005 \001(\002\022\017\n\007matches\030\006 \001(\014\"C\n\023match_grpc2Re"
  "sponse\022\017\n\007matches\030\001 \001(\014\022\033\n\023xpcfGrpcRetur"
  "nValue\030\002 \001(\0212\207\003\n#grpcIDescriptorMatcherR"
  "egionService\022t\n\013match_grpc0\0220.grpcIDescr"
  "iptorMatcherRegion.match_grpc0Request\0321."
  "grpcIDescriptorMatcherRegion.match_grpc0"
  "Response\"\000\022t\n\013match_grpc1\0220.grpcIDescrip"
  "torMatcherRegion.match_grpc1Request\0321.gr"
  "pcIDescriptorMatcherRegion.match_grpc1Re"
  "sponse\"\000\022t\n\013match_grpc2\0220.grpcIDescripto"
  "rMatcherRegion.match_grpc2Request\0321.grpc"
  "IDescriptorMatcherRegion.match_grpc2Resp"
  "onse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIDescriptorMatcherRegionService_2eproto = {
    false, false, 1254, descriptor_table_protodef_grpcIDescriptorMatcherRegionService_2eproto,
    "grpcIDescriptorMatcherRegionService.proto",
    &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_once, descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_grpcIDescriptorMatcherRegionService_2eproto::offsets,
    file_level_metadata_grpcIDescriptorMatcherRegionService_2eproto, file_level_enum_descriptors_grpcIDescriptorMatcherRegionService_2eproto,
    file_level_service_descriptors_grpcIDescriptorMatcherRegionService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_getter() {
  return &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIDescriptorMatcherRegionService_2eproto(&descriptor_table_grpcIDescriptorMatcherRegionService_2eproto);
namespace grpcIDescriptorMatcherRegion {

// ===================================================================

class match_grpc0Request::_Internal {
 public:
};

match_grpc0Request::match_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIDescriptorMatcherRegion.match_grpc0Request)
}
match_grpc0Request::match_grpc0Request(const match_grpc0Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  match_grpc0Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.descriptors1_){}
    , decltype(_impl_.descriptors2_){}
    , decltype(_impl_.points2d1_){}
    , decltype(_impl_.points2d2_){}
    , decltype(_impl_.matches_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.matchingdistancemax_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.descriptors1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptors1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_descriptors1().empty()) {
    _this->_impl_.descriptors1_.Set(from._internal_descriptors1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.descriptors2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptors2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_descriptors2().empty()) {
    _this->_impl_.descriptors2_.Set(from._internal_descriptors2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.points2d1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.points2d1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_points2d1().empty()) {
    _this->_impl_.points2d1_.Set(from._internal_points2d1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.points2d2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.points2d2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_points2d2().empty()) {
    _this->_impl_.points2d2_.Set(from._internal_points2d2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    _this->_impl_.matches_.Set(from._internal_matches(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.matchingdistancemax_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.matchingdistancemax_));
  // @@protoc_insertion_point(copy_constructor:grpcIDescriptorMatcherRegion.match_grpc0Request)
}

inline void match_grpc0Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.descriptors1_){}
    , decltype(_impl_.descriptors2_){}
    , decltype(_impl_.points2d1_){}
    , decltype(_impl_.points2d2_){}
    , decltype(_impl_.matches_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.matchingdistancemax_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.descriptors1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptors1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.descriptors2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptors2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.points2d1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.points2d1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.points2d2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.points2d2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

match_grpc0Request::~match_grpc0Request() {
  // @@protoc_insertion_point(destructor:grpcIDescriptorMatcherRegion.match_grpc0Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void match_grpc0Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.descriptors1_.Destroy();
  _impl_.descriptors2_.Destroy();
  _impl_.points2d1_.Destroy();
  _impl_.points2d2_.Destroy();
  _impl_.matches_.Destroy();
}

void match_grpc0Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void match_grpc0Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIDescriptorMatcherRegion.match_grpc0Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.descriptors1_.ClearToEmpty();
  _impl_.descriptors2_.ClearToEmpty();
  _impl_.points2d1_.ClearToEmpty();
  _impl_.points2d2_.ClearToEmpty();
  _impl_.matches_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.matchingdistancemax_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.matchingdistancemax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* match_grpc0Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes descriptors1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_descriptors1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes descriptors2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_descriptors2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes points2D1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_points2d1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes points2D2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_points2d2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float matchingDistanceMax = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.matchingdistancemax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bytes matches = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* match_grpc0Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIDescriptorMatcherRegion.match_grpc0Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes descriptors1 = 2;
  if (!this->_internal_descriptors1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_descriptors1(), target);
  }

  // bytes descriptors2 = 3;
  if (!this->_internal_descriptors2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_descriptors2(), target);
  }

  // bytes points2D1 = 4;
  if (!this->_internal_points2d1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_points2d1(), target);
  }

  // bytes points2D2 = 5;
  if (!this->_internal_points2d2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_points2d2(), target);
  }

  // float radius = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_radius(), target);
  }

  // float matchingDistanceMax = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_matchingdistancemax = this->_internal_matchingdistancemax();
  uint32_t raw_matchingdistancemax;
  memcpy(&raw_matchingdistancemax, &tmp_matchingdistancemax, sizeof(tmp_matchingdistancemax));
  if (raw_matchingdistancemax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_matchingdistancemax(), target);
  }

  // bytes matches = 8;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_matches(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIDescriptorMatcherRegion.match_grpc0Request)
  return target;
}

size_t match_grpc0Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIDescriptorMatcherRegion.match_grpc0Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes descriptors1 = 2;
  if (!this->_internal_descriptors1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_descriptors1());
  }

  // bytes descriptors2 = 3;
  if (!this->_internal_descriptors2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_descriptors2());
  }

  // bytes points2D1 = 4;
  if (!this->_internal_points2d1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_points2d1());
  }

  // bytes points2D2 = 5;
  if (!this->_internal_points2d2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_points2d2());
  }

  // bytes matches = 8;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // float radius = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float matchingDistanceMax = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_matchingdistancemax = this->_internal_matchingdistancemax();
  uint32_t raw_matchingdistancemax;
  memcpy(&raw_matchingdistancemax, &tmp_matchingdistancemax, sizeof(tmp_matchingdistancemax));
  if (raw_matchingdistancemax != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData match_grpc0Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    match_grpc0Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*match_grpc0Request::GetClassData() const { return &_class_data_; }


void match_grpc0Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<match_grpc0Request*>(&to_msg);
  auto& from = static_cast<const match_grpc0Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIDescriptorMatcherRegion.match_grpc0Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_descriptors1().empty()) {
    _this->_internal_set_descriptors1(from._internal_descriptors1());
  }
  if (!from._internal_descriptors2().empty()) {
    _this->_internal_set_descriptors2(from._internal_descriptors2());
  }
  if (!from._internal_points2d1().empty()) {
    _this->_internal_set_points2d1(from._internal_points2d1());
  }
  if (!from._internal_points2d2().empty()) {
    _this->_internal_set_points2d2(from._internal_points2d2());
  }
  if (!from._internal_matches().empty()) {
    _this->_internal_set_matches(from._internal_matches());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_matchingdistancemax = from._internal_matchingdistancemax();
  uint32_t raw_matchingdistancemax;
  memcpy(&raw_matchingdistancemax, &tmp_matchingdistancemax, sizeof(tmp_matchingdistancemax));
  if (raw_matchingdistancemax != 0) {
    _this->_internal_set_matchingdistancemax(from._internal_matchingdistancemax());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void match_grpc0Request::CopyFrom(const match_grpc0Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIDescriptorMatcherRegion.match_grpc0Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_grpc0Request::IsInitialized() const {
  return true;
}

void match_grpc0Request::InternalSwap(match_grpc0Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.descriptors1_, lhs_arena,
      &other->_impl_.descriptors1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.descriptors2_, lhs_arena,
      &other->_impl_.descriptors2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.points2d1_, lhs_arena,
      &other->_impl_.points2d1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.points2d2_, lhs_arena,
      &other->_impl_.points2d2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matches_, lhs_arena,
      &other->_impl_.matches_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(match_grpc0Request, _impl_.matchingdistancemax_)
      + sizeof(match_grpc0Request::_impl_.matchingdistancemax_)
      - PROTOBUF_FIELD_OFFSET(match_grpc0Request, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata match_grpc0Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_getter, &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_once,
      file_level_metadata_grpcIDescriptorMatcherRegionService_2eproto[0]);
}

// ===================================================================

class match_grpc0Response::_Internal {
 public:
};

match_grpc0Response::match_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIDescriptorMatcherRegion.match_grpc0Response)
}
match_grpc0Response::match_grpc0Response(const match_grpc0Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  match_grpc0Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    _this->_impl_.matches_.Set(from._internal_matches(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIDescriptorMatcherRegion.match_grpc0Response)
}

inline void match_grpc0Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

match_grpc0Response::~match_grpc0Response() {
  // @@protoc_insertion_point(destructor:grpcIDescriptorMatcherRegion.match_grpc0Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void match_grpc0Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matches_.Destroy();
}

void match_grpc0Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void match_grpc0Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIDescriptorMatcherRegion.match_grpc0Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matches_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* match_grpc0Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* match_grpc0Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIDescriptorMatcherRegion.match_grpc0Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes matches = 1;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_matches(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIDescriptorMatcherRegion.match_grpc0Response)
  return target;
}

size_t match_grpc0Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIDescriptorMatcherRegion.match_grpc0Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes matches = 1;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData match_grpc0Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    match_grpc0Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*match_grpc0Response::GetClassData() const { return &_class_data_; }


void match_grpc0Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<match_grpc0Response*>(&to_msg);
  auto& from = static_cast<const match_grpc0Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIDescriptorMatcherRegion.match_grpc0Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_matches().empty()) {
    _this->_internal_set_matches(from._internal_matches());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void match_grpc0Response::CopyFrom(const match_grpc0Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIDescriptorMatcherRegion.match_grpc0Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_grpc0Response::IsInitialized() const {
  return true;
}

void match_grpc0Response::InternalSwap(match_grpc0Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matches_, lhs_arena,
      &other->_impl_.matches_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata match_grpc0Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_getter, &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_once,
      file_level_metadata_grpcIDescriptorMatcherRegionService_2eproto[1]);
}

// ===================================================================

class match_grpc1Request::_Internal {
 public:
};

match_grpc1Request::match_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIDescriptorMatcherRegion.match_grpc1Request)
}
match_grpc1Request::match_grpc1Request(const match_grpc1Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  match_grpc1Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points2d_){}
    , decltype(_impl_.descriptors_){}
    , decltype(_impl_.frame_){}
    , decltype(_impl_.matches_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.matchingdistancemax_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.points2d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.points2d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_points2d().empty()) {
    _this->_impl_.points2d_.Set(from._internal_points2d(), 
      _this->GetArenaForAllocation());
  }
  _impl_.descriptors_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptors_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_descriptors().empty()) {
    _this->_impl_.descriptors_.Set(from._internal_descriptors(), 
      _this->GetArenaForAllocation());
  }
  _impl_.frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame().empty()) {
    _this->_impl_.frame_.Set(from._internal_frame(), 
      _this->GetArenaForAllocation());
  }
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    _this->_impl_.matches_.Set(from._internal_matches(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.matchingdistancemax_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.matchingdistancemax_));
  // @@protoc_insertion_point(copy_constructor:grpcIDescriptorMatcherRegion.match_grpc1Request)
}

inline void match_grpc1Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points2d_){}
    , decltype(_impl_.descriptors_){}
    , decltype(_impl_.frame_){}
    , decltype(_impl_.matches_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.matchingdistancemax_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.points2d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.points2d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.descriptors_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.descriptors_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

match_grpc1Request::~match_grpc1Request() {
  // @@protoc_insertion_point(destructor:grpcIDescriptorMatcherRegion.match_grpc1Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void match_grpc1Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points2d_.Destroy();
  _impl_.descriptors_.Destroy();
  _impl_.frame_.Destroy();
  _impl_.matches_.Destroy();
}

void match_grpc1Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void match_grpc1Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIDescriptorMatcherRegion.match_grpc1Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points2d_.ClearToEmpty();
  _impl_.descriptors_.ClearToEmpty();
  _impl_.frame_.ClearToEmpty();
  _impl_.matches_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.matchingdistancemax_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.matchingdistancemax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* match_grpc1Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes points2D = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_points2d();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes descriptors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_descriptors();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float matchingDistanceMax = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.matchingdistancemax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bytes matches = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* match_grpc1Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIDescriptorMatcherRegion.match_grpc1Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes points2D = 2;
  if (!this->_internal_points2d().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_points2d(), target);
  }

  // bytes descriptors = 3;
  if (!this->_internal_descriptors().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_descriptors(), target);
  }

  // bytes frame = 4;
  if (!this->_internal_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_frame(), target);
  }

  // float radius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_radius(), target);
  }

  // float matchingDistanceMax = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_matchingdistancemax = this->_internal_matchingdistancemax();
  uint32_t raw_matchingdistancemax;
  memcpy(&raw_matchingdistancemax, &tmp_matchingdistancemax, sizeof(tmp_matchingdistancemax));
  if (raw_matchingdistancemax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_matchingdistancemax(), target);
  }

  // bytes matches = 7;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_matches(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIDescriptorMatcherRegion.match_grpc1Request)
  return target;
}

size_t match_grpc1Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIDescriptorMatcherRegion.match_grpc1Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes points2D = 2;
  if (!this->_internal_points2d().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_points2d());
  }

  // bytes descriptors = 3;
  if (!this->_internal_descriptors().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_descriptors());
  }

  // bytes frame = 4;
  if (!this->_internal_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_frame());
  }

  // bytes matches = 7;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // float radius = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float matchingDistanceMax = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_matchingdistancemax = this->_internal_matchingdistancemax();
  uint32_t raw_matchingdistancemax;
  memcpy(&raw_matchingdistancemax, &tmp_matchingdistancemax, sizeof(tmp_matchingdistancemax));
  if (raw_matchingdistancemax != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData match_grpc1Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    match_grpc1Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*match_grpc1Request::GetClassData() const { return &_class_data_; }


void match_grpc1Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<match_grpc1Request*>(&to_msg);
  auto& from = static_cast<const match_grpc1Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIDescriptorMatcherRegion.match_grpc1Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_points2d().empty()) {
    _this->_internal_set_points2d(from._internal_points2d());
  }
  if (!from._internal_descriptors().empty()) {
    _this->_internal_set_descriptors(from._internal_descriptors());
  }
  if (!from._internal_frame().empty()) {
    _this->_internal_set_frame(from._internal_frame());
  }
  if (!from._internal_matches().empty()) {
    _this->_internal_set_matches(from._internal_matches());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_matchingdistancemax = from._internal_matchingdistancemax();
  uint32_t raw_matchingdistancemax;
  memcpy(&raw_matchingdistancemax, &tmp_matchingdistancemax, sizeof(tmp_matchingdistancemax));
  if (raw_matchingdistancemax != 0) {
    _this->_internal_set_matchingdistancemax(from._internal_matchingdistancemax());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void match_grpc1Request::CopyFrom(const match_grpc1Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIDescriptorMatcherRegion.match_grpc1Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_grpc1Request::IsInitialized() const {
  return true;
}

void match_grpc1Request::InternalSwap(match_grpc1Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.points2d_, lhs_arena,
      &other->_impl_.points2d_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.descriptors_, lhs_arena,
      &other->_impl_.descriptors_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame_, lhs_arena,
      &other->_impl_.frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matches_, lhs_arena,
      &other->_impl_.matches_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(match_grpc1Request, _impl_.matchingdistancemax_)
      + sizeof(match_grpc1Request::_impl_.matchingdistancemax_)
      - PROTOBUF_FIELD_OFFSET(match_grpc1Request, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata match_grpc1Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_getter, &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_once,
      file_level_metadata_grpcIDescriptorMatcherRegionService_2eproto[2]);
}

// ===================================================================

class match_grpc1Response::_Internal {
 public:
};

match_grpc1Response::match_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIDescriptorMatcherRegion.match_grpc1Response)
}
match_grpc1Response::match_grpc1Response(const match_grpc1Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  match_grpc1Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    _this->_impl_.matches_.Set(from._internal_matches(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIDescriptorMatcherRegion.match_grpc1Response)
}

inline void match_grpc1Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

match_grpc1Response::~match_grpc1Response() {
  // @@protoc_insertion_point(destructor:grpcIDescriptorMatcherRegion.match_grpc1Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void match_grpc1Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matches_.Destroy();
}

void match_grpc1Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void match_grpc1Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIDescriptorMatcherRegion.match_grpc1Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matches_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* match_grpc1Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* match_grpc1Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIDescriptorMatcherRegion.match_grpc1Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes matches = 1;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_matches(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIDescriptorMatcherRegion.match_grpc1Response)
  return target;
}

size_t match_grpc1Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIDescriptorMatcherRegion.match_grpc1Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes matches = 1;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData match_grpc1Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    match_grpc1Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*match_grpc1Response::GetClassData() const { return &_class_data_; }


void match_grpc1Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<match_grpc1Response*>(&to_msg);
  auto& from = static_cast<const match_grpc1Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIDescriptorMatcherRegion.match_grpc1Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_matches().empty()) {
    _this->_internal_set_matches(from._internal_matches());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void match_grpc1Response::CopyFrom(const match_grpc1Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIDescriptorMatcherRegion.match_grpc1Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_grpc1Response::IsInitialized() const {
  return true;
}

void match_grpc1Response::InternalSwap(match_grpc1Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matches_, lhs_arena,
      &other->_impl_.matches_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata match_grpc1Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_getter, &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_once,
      file_level_metadata_grpcIDescriptorMatcherRegionService_2eproto[3]);
}

// ===================================================================

class match_grpc2Request::_Internal {
 public:
};

match_grpc2Request::match_grpc2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIDescriptorMatcherRegion.match_grpc2Request)
}
match_grpc2Request::match_grpc2Request(const match_grpc2Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  match_grpc2Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currentframe_){}
    , decltype(_impl_.lastframe_){}
    , decltype(_impl_.matches_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.matchingdistancemax_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currentframe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentframe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currentframe().empty()) {
    _this->_impl_.currentframe_.Set(from._internal_currentframe(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lastframe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lastframe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lastframe().empty()) {
    _this->_impl_.lastframe_.Set(from._internal_lastframe(), 
      _this->GetArenaForAllocation());
  }
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    _this->_impl_.matches_.Set(from._internal_matches(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.matchingdistancemax_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.matchingdistancemax_));
  // @@protoc_insertion_point(copy_constructor:grpcIDescriptorMatcherRegion.match_grpc2Request)
}

inline void match_grpc2Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currentframe_){}
    , decltype(_impl_.lastframe_){}
    , decltype(_impl_.matches_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.matchingdistancemax_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.currentframe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currentframe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lastframe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lastframe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

match_grpc2Request::~match_grpc2Request() {
  // @@protoc_insertion_point(destructor:grpcIDescriptorMatcherRegion.match_grpc2Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void match_grpc2Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currentframe_.Destroy();
  _impl_.lastframe_.Destroy();
  _impl_.matches_.Destroy();
}

void match_grpc2Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void match_grpc2Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIDescriptorMatcherRegion.match_grpc2Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.currentframe_.ClearToEmpty();
  _impl_.lastframe_.ClearToEmpty();
  _impl_.matches_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.matchingdistancemax_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.matchingdistancemax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* match_grpc2Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes currentFrame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_currentframe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes lastFrame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_lastframe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float matchingDistanceMax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.matchingdistancemax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bytes matches = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* match_grpc2Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIDescriptorMatcherRegion.match_grpc2Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes currentFrame = 2;
  if (!this->_internal_currentframe().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_currentframe(), target);
  }

  // bytes lastFrame = 3;
  if (!this->_internal_lastframe().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_lastframe(), target);
  }

  // float radius = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_radius(), target);
  }

  // float matchingDistanceMax = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_matchingdistancemax = this->_internal_matchingdistancemax();
  uint32_t raw_matchingdistancemax;
  memcpy(&raw_matchingdistancemax, &tmp_matchingdistancemax, sizeof(tmp_matchingdistancemax));
  if (raw_matchingdistancemax != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_matchingdistancemax(), target);
  }

  // bytes matches = 6;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_matches(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIDescriptorMatcherRegion.match_grpc2Request)
  return target;
}

size_t match_grpc2Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIDescriptorMatcherRegion.match_grpc2Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes currentFrame = 2;
  if (!this->_internal_currentframe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_currentframe());
  }

  // bytes lastFrame = 3;
  if (!this->_internal_lastframe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_lastframe());
  }

  // bytes matches = 6;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // float radius = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = this->_internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 4;
  }

  // float matchingDistanceMax = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_matchingdistancemax = this->_internal_matchingdistancemax();
  uint32_t raw_matchingdistancemax;
  memcpy(&raw_matchingdistancemax, &tmp_matchingdistancemax, sizeof(tmp_matchingdistancemax));
  if (raw_matchingdistancemax != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData match_grpc2Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    match_grpc2Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*match_grpc2Request::GetClassData() const { return &_class_data_; }


void match_grpc2Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<match_grpc2Request*>(&to_msg);
  auto& from = static_cast<const match_grpc2Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIDescriptorMatcherRegion.match_grpc2Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_currentframe().empty()) {
    _this->_internal_set_currentframe(from._internal_currentframe());
  }
  if (!from._internal_lastframe().empty()) {
    _this->_internal_set_lastframe(from._internal_lastframe());
  }
  if (!from._internal_matches().empty()) {
    _this->_internal_set_matches(from._internal_matches());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_radius = from._internal_radius();
  uint32_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_matchingdistancemax = from._internal_matchingdistancemax();
  uint32_t raw_matchingdistancemax;
  memcpy(&raw_matchingdistancemax, &tmp_matchingdistancemax, sizeof(tmp_matchingdistancemax));
  if (raw_matchingdistancemax != 0) {
    _this->_internal_set_matchingdistancemax(from._internal_matchingdistancemax());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void match_grpc2Request::CopyFrom(const match_grpc2Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIDescriptorMatcherRegion.match_grpc2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_grpc2Request::IsInitialized() const {
  return true;
}

void match_grpc2Request::InternalSwap(match_grpc2Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currentframe_, lhs_arena,
      &other->_impl_.currentframe_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lastframe_, lhs_arena,
      &other->_impl_.lastframe_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matches_, lhs_arena,
      &other->_impl_.matches_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(match_grpc2Request, _impl_.matchingdistancemax_)
      + sizeof(match_grpc2Request::_impl_.matchingdistancemax_)
      - PROTOBUF_FIELD_OFFSET(match_grpc2Request, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata match_grpc2Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_getter, &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_once,
      file_level_metadata_grpcIDescriptorMatcherRegionService_2eproto[4]);
}

// ===================================================================

class match_grpc2Response::_Internal {
 public:
};

match_grpc2Response::match_grpc2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIDescriptorMatcherRegion.match_grpc2Response)
}
match_grpc2Response::match_grpc2Response(const match_grpc2Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  match_grpc2Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    _this->_impl_.matches_.Set(from._internal_matches(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIDescriptorMatcherRegion.match_grpc2Response)
}

inline void match_grpc2Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

match_grpc2Response::~match_grpc2Response() {
  // @@protoc_insertion_point(destructor:grpcIDescriptorMatcherRegion.match_grpc2Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void match_grpc2Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.matches_.Destroy();
}

void match_grpc2Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void match_grpc2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIDescriptorMatcherRegion.match_grpc2Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.matches_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* match_grpc2Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* match_grpc2Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIDescriptorMatcherRegion.match_grpc2Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes matches = 1;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_matches(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIDescriptorMatcherRegion.match_grpc2Response)
  return target;
}

size_t match_grpc2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIDescriptorMatcherRegion.match_grpc2Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes matches = 1;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData match_grpc2Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    match_grpc2Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*match_grpc2Response::GetClassData() const { return &_class_data_; }


void match_grpc2Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<match_grpc2Response*>(&to_msg);
  auto& from = static_cast<const match_grpc2Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIDescriptorMatcherRegion.match_grpc2Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_matches().empty()) {
    _this->_internal_set_matches(from._internal_matches());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void match_grpc2Response::CopyFrom(const match_grpc2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIDescriptorMatcherRegion.match_grpc2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool match_grpc2Response::IsInitialized() const {
  return true;
}

void match_grpc2Response::InternalSwap(match_grpc2Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.matches_, lhs_arena,
      &other->_impl_.matches_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata match_grpc2Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_getter, &descriptor_table_grpcIDescriptorMatcherRegionService_2eproto_once,
      file_level_metadata_grpcIDescriptorMatcherRegionService_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIDescriptorMatcherRegion
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIDescriptorMatcherRegion::match_grpc0Request*
Arena::CreateMaybeMessage< ::grpcIDescriptorMatcherRegion::match_grpc0Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIDescriptorMatcherRegion::match_grpc0Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIDescriptorMatcherRegion::match_grpc0Response*
Arena::CreateMaybeMessage< ::grpcIDescriptorMatcherRegion::match_grpc0Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIDescriptorMatcherRegion::match_grpc0Response >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIDescriptorMatcherRegion::match_grpc1Request*
Arena::CreateMaybeMessage< ::grpcIDescriptorMatcherRegion::match_grpc1Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIDescriptorMatcherRegion::match_grpc1Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIDescriptorMatcherRegion::match_grpc1Response*
Arena::CreateMaybeMessage< ::grpcIDescriptorMatcherRegion::match_grpc1Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIDescriptorMatcherRegion::match_grpc1Response >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIDescriptorMatcherRegion::match_grpc2Request*
Arena::CreateMaybeMessage< ::grpcIDescriptorMatcherRegion::match_grpc2Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIDescriptorMatcherRegion::match_grpc2Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIDescriptorMatcherRegion::match_grpc2Response*
Arena::CreateMaybeMessage< ::grpcIDescriptorMatcherRegion::match_grpc2Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIDescriptorMatcherRegion::match_grpc2Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
