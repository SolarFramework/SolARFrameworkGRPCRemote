// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIReprojectionStereoService.proto

#include "grpcIReprojectionStereoService.pb.h"
#include "grpcIReprojectionStereoService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIReprojectionStereo {

static const char* grpcIReprojectionStereoService_method_names[] = {
  "/grpcIReprojectionStereo.grpcIReprojectionStereoService/reprojectToUnrectification",
  "/grpcIReprojectionStereo.grpcIReprojectionStereoService/reprojectToCloudPoints_grpc0",
  "/grpcIReprojectionStereo.grpcIReprojectionStereoService/reprojectToCloudPoints_grpc1",
};

std::unique_ptr< grpcIReprojectionStereoService::Stub> grpcIReprojectionStereoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIReprojectionStereoService::Stub> stub(new grpcIReprojectionStereoService::Stub(channel, options));
  return stub;
}

grpcIReprojectionStereoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_reprojectToUnrectification_(grpcIReprojectionStereoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reprojectToCloudPoints_grpc0_(grpcIReprojectionStereoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reprojectToCloudPoints_grpc1_(grpcIReprojectionStereoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIReprojectionStereoService::Stub::reprojectToUnrectification(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToUnrectificationRequest& request, ::grpcIReprojectionStereo::reprojectToUnrectificationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIReprojectionStereo::reprojectToUnrectificationRequest, ::grpcIReprojectionStereo::reprojectToUnrectificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reprojectToUnrectification_, context, request, response);
}

void grpcIReprojectionStereoService::Stub::async::reprojectToUnrectification(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToUnrectificationRequest* request, ::grpcIReprojectionStereo::reprojectToUnrectificationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIReprojectionStereo::reprojectToUnrectificationRequest, ::grpcIReprojectionStereo::reprojectToUnrectificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reprojectToUnrectification_, context, request, response, std::move(f));
}

void grpcIReprojectionStereoService::Stub::async::reprojectToUnrectification(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToUnrectificationRequest* request, ::grpcIReprojectionStereo::reprojectToUnrectificationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reprojectToUnrectification_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIReprojectionStereo::reprojectToUnrectificationResponse>* grpcIReprojectionStereoService::Stub::PrepareAsyncreprojectToUnrectificationRaw(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToUnrectificationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIReprojectionStereo::reprojectToUnrectificationResponse, ::grpcIReprojectionStereo::reprojectToUnrectificationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reprojectToUnrectification_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIReprojectionStereo::reprojectToUnrectificationResponse>* grpcIReprojectionStereoService::Stub::AsyncreprojectToUnrectificationRaw(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToUnrectificationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreprojectToUnrectificationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIReprojectionStereoService::Stub::reprojectToCloudPoints_grpc0(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request& request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reprojectToCloudPoints_grpc0_, context, request, response);
}

void grpcIReprojectionStereoService::Stub::async::reprojectToCloudPoints_grpc0(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request* request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reprojectToCloudPoints_grpc0_, context, request, response, std::move(f));
}

void grpcIReprojectionStereoService::Stub::async::reprojectToCloudPoints_grpc0(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request* request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reprojectToCloudPoints_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response>* grpcIReprojectionStereoService::Stub::PrepareAsyncreprojectToCloudPoints_grpc0Raw(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reprojectToCloudPoints_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response>* grpcIReprojectionStereoService::Stub::AsyncreprojectToCloudPoints_grpc0Raw(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreprojectToCloudPoints_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIReprojectionStereoService::Stub::reprojectToCloudPoints_grpc1(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request& request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reprojectToCloudPoints_grpc1_, context, request, response);
}

void grpcIReprojectionStereoService::Stub::async::reprojectToCloudPoints_grpc1(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request* request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reprojectToCloudPoints_grpc1_, context, request, response, std::move(f));
}

void grpcIReprojectionStereoService::Stub::async::reprojectToCloudPoints_grpc1(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request* request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reprojectToCloudPoints_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response>* grpcIReprojectionStereoService::Stub::PrepareAsyncreprojectToCloudPoints_grpc1Raw(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reprojectToCloudPoints_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response>* grpcIReprojectionStereoService::Stub::AsyncreprojectToCloudPoints_grpc1Raw(::grpc::ClientContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreprojectToCloudPoints_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIReprojectionStereoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIReprojectionStereoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIReprojectionStereoService::Service, ::grpcIReprojectionStereo::reprojectToUnrectificationRequest, ::grpcIReprojectionStereo::reprojectToUnrectificationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIReprojectionStereoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIReprojectionStereo::reprojectToUnrectificationRequest* req,
             ::grpcIReprojectionStereo::reprojectToUnrectificationResponse* resp) {
               return service->reprojectToUnrectification(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIReprojectionStereoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIReprojectionStereoService::Service, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIReprojectionStereoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request* req,
             ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response* resp) {
               return service->reprojectToCloudPoints_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIReprojectionStereoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIReprojectionStereoService::Service, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIReprojectionStereoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request* req,
             ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response* resp) {
               return service->reprojectToCloudPoints_grpc1(ctx, req, resp);
             }, this)));
}

grpcIReprojectionStereoService::Service::~Service() {
}

::grpc::Status grpcIReprojectionStereoService::Service::reprojectToUnrectification(::grpc::ServerContext* context, const ::grpcIReprojectionStereo::reprojectToUnrectificationRequest* request, ::grpcIReprojectionStereo::reprojectToUnrectificationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIReprojectionStereoService::Service::reprojectToCloudPoints_grpc0(::grpc::ServerContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Request* request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIReprojectionStereoService::Service::reprojectToCloudPoints_grpc1(::grpc::ServerContext* context, const ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Request* request, ::grpcIReprojectionStereo::reprojectToCloudPoints_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIReprojectionStereo

