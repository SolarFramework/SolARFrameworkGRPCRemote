// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcITrackingService.proto
#ifndef GRPC_grpcITrackingService_2eproto__INCLUDED
#define GRPC_grpcITrackingService_2eproto__INCLUDED

#include "grpcITrackingService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcITracking {

class grpcITrackingService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcITracking.grpcITrackingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status setNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetNewKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetNewKeyframeRaw(context, request, cq));
    }
    virtual ::grpc::Status checkNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpcITracking::checkNeedNewKeyframeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::checkNeedNewKeyframeResponse>> AsynccheckNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::checkNeedNewKeyframeResponse>>(AsynccheckNeedNewKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::checkNeedNewKeyframeResponse>> PrepareAsynccheckNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::checkNeedNewKeyframeResponse>>(PrepareAsynccheckNeedNewKeyframeRaw(context, request, cq));
    }
    virtual ::grpc::Status process(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpcITracking::processResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::processResponse>> Asyncprocess(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::processResponse>>(AsyncprocessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::processResponse>> PrepareAsyncprocess(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::processResponse>>(PrepareAsyncprocessRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void setNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void checkNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest* request, ::grpcITracking::checkNeedNewKeyframeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void checkNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest* request, ::grpcITracking::checkNeedNewKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void process(::grpc::ClientContext* context, const ::grpcITracking::processRequest* request, ::grpcITracking::processResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void process(::grpc::ClientContext* context, const ::grpcITracking::processRequest* request, ::grpcITracking::processResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetNewKeyframeRaw(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetNewKeyframeRaw(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::checkNeedNewKeyframeResponse>* AsynccheckNeedNewKeyframeRaw(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::checkNeedNewKeyframeResponse>* PrepareAsynccheckNeedNewKeyframeRaw(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::processResponse>* AsyncprocessRaw(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcITracking::processResponse>* PrepareAsyncprocessRaw(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status setNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetNewKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetNewKeyframeRaw(context, request, cq));
    }
    ::grpc::Status checkNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpcITracking::checkNeedNewKeyframeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITracking::checkNeedNewKeyframeResponse>> AsynccheckNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITracking::checkNeedNewKeyframeResponse>>(AsynccheckNeedNewKeyframeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITracking::checkNeedNewKeyframeResponse>> PrepareAsynccheckNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITracking::checkNeedNewKeyframeResponse>>(PrepareAsynccheckNeedNewKeyframeRaw(context, request, cq));
    }
    ::grpc::Status process(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpcITracking::processResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITracking::processResponse>> Asyncprocess(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITracking::processResponse>>(AsyncprocessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITracking::processResponse>> PrepareAsyncprocess(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcITracking::processResponse>>(PrepareAsyncprocessRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void setNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void checkNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest* request, ::grpcITracking::checkNeedNewKeyframeResponse* response, std::function<void(::grpc::Status)>) override;
      void checkNeedNewKeyframe(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest* request, ::grpcITracking::checkNeedNewKeyframeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void process(::grpc::ClientContext* context, const ::grpcITracking::processRequest* request, ::grpcITracking::processResponse* response, std::function<void(::grpc::Status)>) override;
      void process(::grpc::ClientContext* context, const ::grpcITracking::processRequest* request, ::grpcITracking::processResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetNewKeyframeRaw(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetNewKeyframeRaw(::grpc::ClientContext* context, const ::grpcITracking::setNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITracking::checkNeedNewKeyframeResponse>* AsynccheckNeedNewKeyframeRaw(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITracking::checkNeedNewKeyframeResponse>* PrepareAsynccheckNeedNewKeyframeRaw(::grpc::ClientContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITracking::processResponse>* AsyncprocessRaw(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcITracking::processResponse>* PrepareAsyncprocessRaw(::grpc::ClientContext* context, const ::grpcITracking::processRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_setNewKeyframe_;
    const ::grpc::internal::RpcMethod rpcmethod_checkNeedNewKeyframe_;
    const ::grpc::internal::RpcMethod rpcmethod_process_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status setNewKeyframe(::grpc::ServerContext* context, const ::grpcITracking::setNewKeyframeRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status checkNeedNewKeyframe(::grpc::ServerContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest* request, ::grpcITracking::checkNeedNewKeyframeResponse* response);
    virtual ::grpc::Status process(::grpc::ServerContext* context, const ::grpcITracking::processRequest* request, ::grpcITracking::processResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_setNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setNewKeyframe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::setNewKeyframeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetNewKeyframe(::grpc::ServerContext* context, ::grpcITracking::setNewKeyframeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_checkNeedNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_checkNeedNewKeyframe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_checkNeedNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkNeedNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::checkNeedNewKeyframeRequest* /*request*/, ::grpcITracking::checkNeedNewKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckNeedNewKeyframe(::grpc::ServerContext* context, ::grpcITracking::checkNeedNewKeyframeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcITracking::checkNeedNewKeyframeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_process() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status process(::grpc::ServerContext* /*context*/, const ::grpcITracking::processRequest* /*request*/, ::grpcITracking::processResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestprocess(::grpc::ServerContext* context, ::grpcITracking::processRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcITracking::processResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setNewKeyframe<WithAsyncMethod_checkNeedNewKeyframe<WithAsyncMethod_process<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_setNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setNewKeyframe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcITracking::setNewKeyframeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcITracking::setNewKeyframeRequest* request, ::google::protobuf::Empty* response) { return this->setNewKeyframe(context, request, response); }));}
    void SetMessageAllocatorFor_setNewKeyframe(
        ::grpc::MessageAllocator< ::grpcITracking::setNewKeyframeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcITracking::setNewKeyframeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::setNewKeyframeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setNewKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcITracking::setNewKeyframeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_checkNeedNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_checkNeedNewKeyframe() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcITracking::checkNeedNewKeyframeRequest, ::grpcITracking::checkNeedNewKeyframeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcITracking::checkNeedNewKeyframeRequest* request, ::grpcITracking::checkNeedNewKeyframeResponse* response) { return this->checkNeedNewKeyframe(context, request, response); }));}
    void SetMessageAllocatorFor_checkNeedNewKeyframe(
        ::grpc::MessageAllocator< ::grpcITracking::checkNeedNewKeyframeRequest, ::grpcITracking::checkNeedNewKeyframeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcITracking::checkNeedNewKeyframeRequest, ::grpcITracking::checkNeedNewKeyframeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_checkNeedNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkNeedNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::checkNeedNewKeyframeRequest* /*request*/, ::grpcITracking::checkNeedNewKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkNeedNewKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcITracking::checkNeedNewKeyframeRequest* /*request*/, ::grpcITracking::checkNeedNewKeyframeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_process() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcITracking::processRequest, ::grpcITracking::processResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcITracking::processRequest* request, ::grpcITracking::processResponse* response) { return this->process(context, request, response); }));}
    void SetMessageAllocatorFor_process(
        ::grpc::MessageAllocator< ::grpcITracking::processRequest, ::grpcITracking::processResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcITracking::processRequest, ::grpcITracking::processResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status process(::grpc::ServerContext* /*context*/, const ::grpcITracking::processRequest* /*request*/, ::grpcITracking::processResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* process(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcITracking::processRequest* /*request*/, ::grpcITracking::processResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_setNewKeyframe<WithCallbackMethod_checkNeedNewKeyframe<WithCallbackMethod_process<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_setNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setNewKeyframe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::setNewKeyframeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_checkNeedNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_checkNeedNewKeyframe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_checkNeedNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkNeedNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::checkNeedNewKeyframeRequest* /*request*/, ::grpcITracking::checkNeedNewKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_process() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status process(::grpc::ServerContext* /*context*/, const ::grpcITracking::processRequest* /*request*/, ::grpcITracking::processResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_setNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setNewKeyframe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_setNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::setNewKeyframeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetNewKeyframe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_checkNeedNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_checkNeedNewKeyframe() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_checkNeedNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkNeedNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::checkNeedNewKeyframeRequest* /*request*/, ::grpcITracking::checkNeedNewKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckNeedNewKeyframe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_process() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status process(::grpc::ServerContext* /*context*/, const ::grpcITracking::processRequest* /*request*/, ::grpcITracking::processResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestprocess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setNewKeyframe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setNewKeyframe(context, request, response); }));
    }
    ~WithRawCallbackMethod_setNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::setNewKeyframeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setNewKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_checkNeedNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_checkNeedNewKeyframe() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->checkNeedNewKeyframe(context, request, response); }));
    }
    ~WithRawCallbackMethod_checkNeedNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkNeedNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::checkNeedNewKeyframeRequest* /*request*/, ::grpcITracking::checkNeedNewKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkNeedNewKeyframe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_process() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->process(context, request, response); }));
    }
    ~WithRawCallbackMethod_process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status process(::grpc::ServerContext* /*context*/, const ::grpcITracking::processRequest* /*request*/, ::grpcITracking::processResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* process(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setNewKeyframe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcITracking::setNewKeyframeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcITracking::setNewKeyframeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetNewKeyframe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::setNewKeyframeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetNewKeyframe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcITracking::setNewKeyframeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_checkNeedNewKeyframe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_checkNeedNewKeyframe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcITracking::checkNeedNewKeyframeRequest, ::grpcITracking::checkNeedNewKeyframeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcITracking::checkNeedNewKeyframeRequest, ::grpcITracking::checkNeedNewKeyframeResponse>* streamer) {
                       return this->StreamedcheckNeedNewKeyframe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_checkNeedNewKeyframe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status checkNeedNewKeyframe(::grpc::ServerContext* /*context*/, const ::grpcITracking::checkNeedNewKeyframeRequest* /*request*/, ::grpcITracking::checkNeedNewKeyframeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcheckNeedNewKeyframe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcITracking::checkNeedNewKeyframeRequest,::grpcITracking::checkNeedNewKeyframeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_process : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_process() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcITracking::processRequest, ::grpcITracking::processResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcITracking::processRequest, ::grpcITracking::processResponse>* streamer) {
                       return this->Streamedprocess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_process() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status process(::grpc::ServerContext* /*context*/, const ::grpcITracking::processRequest* /*request*/, ::grpcITracking::processResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedprocess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcITracking::processRequest,::grpcITracking::processResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_setNewKeyframe<WithStreamedUnaryMethod_checkNeedNewKeyframe<WithStreamedUnaryMethod_process<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_setNewKeyframe<WithStreamedUnaryMethod_checkNeedNewKeyframe<WithStreamedUnaryMethod_process<Service > > > StreamedService;
};

}  // namespace grpcITracking


#endif  // GRPC_grpcITrackingService_2eproto__INCLUDED
