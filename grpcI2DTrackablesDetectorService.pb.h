// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcI2DTrackablesDetectorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcI2DTrackablesDetectorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcI2DTrackablesDetectorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcI2DTrackablesDetectorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcI2DTrackablesDetectorService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcI2DTrackablesDetectorService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcI2DTrackablesDetectorService_2eproto_metadata_getter(int index);
namespace grpcI2DTrackablesDetector {
class detectRequest;
struct detectRequestDefaultTypeInternal;
extern detectRequestDefaultTypeInternal _detectRequest_default_instance_;
class detectResponse;
struct detectResponseDefaultTypeInternal;
extern detectResponseDefaultTypeInternal _detectResponse_default_instance_;
class setTrackablesRequest;
struct setTrackablesRequestDefaultTypeInternal;
extern setTrackablesRequestDefaultTypeInternal _setTrackablesRequest_default_instance_;
class setTrackablesResponse;
struct setTrackablesResponseDefaultTypeInternal;
extern setTrackablesResponseDefaultTypeInternal _setTrackablesResponse_default_instance_;
}  // namespace grpcI2DTrackablesDetector
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcI2DTrackablesDetector::detectRequest* Arena::CreateMaybeMessage<::grpcI2DTrackablesDetector::detectRequest>(Arena*);
template<> ::grpcI2DTrackablesDetector::detectResponse* Arena::CreateMaybeMessage<::grpcI2DTrackablesDetector::detectResponse>(Arena*);
template<> ::grpcI2DTrackablesDetector::setTrackablesRequest* Arena::CreateMaybeMessage<::grpcI2DTrackablesDetector::setTrackablesRequest>(Arena*);
template<> ::grpcI2DTrackablesDetector::setTrackablesResponse* Arena::CreateMaybeMessage<::grpcI2DTrackablesDetector::setTrackablesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcI2DTrackablesDetector {

// ===================================================================

class setTrackablesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DTrackablesDetector.setTrackablesRequest) */ {
 public:
  inline setTrackablesRequest() : setTrackablesRequest(nullptr) {}
  virtual ~setTrackablesRequest();
  explicit constexpr setTrackablesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setTrackablesRequest(const setTrackablesRequest& from);
  setTrackablesRequest(setTrackablesRequest&& from) noexcept
    : setTrackablesRequest() {
    *this = ::std::move(from);
  }

  inline setTrackablesRequest& operator=(const setTrackablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setTrackablesRequest& operator=(setTrackablesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setTrackablesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setTrackablesRequest* internal_default_instance() {
    return reinterpret_cast<const setTrackablesRequest*>(
               &_setTrackablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setTrackablesRequest& a, setTrackablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setTrackablesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setTrackablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setTrackablesRequest* New() const final {
    return CreateMaybeMessage<setTrackablesRequest>(nullptr);
  }

  setTrackablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setTrackablesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setTrackablesRequest& from);
  void MergeFrom(const setTrackablesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setTrackablesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DTrackablesDetector.setTrackablesRequest";
  }
  protected:
  explicit setTrackablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DTrackablesDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackablesFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes trackables = 2;
  void clear_trackables();
  const std::string& trackables() const;
  void set_trackables(const std::string& value);
  void set_trackables(std::string&& value);
  void set_trackables(const char* value);
  void set_trackables(const void* value, size_t size);
  std::string* mutable_trackables();
  std::string* release_trackables();
  void set_allocated_trackables(std::string* trackables);
  private:
  const std::string& _internal_trackables() const;
  void _internal_set_trackables(const std::string& value);
  std::string* _internal_mutable_trackables();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DTrackablesDetector.setTrackablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackables_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DTrackablesDetectorService_2eproto;
};
// -------------------------------------------------------------------

class setTrackablesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DTrackablesDetector.setTrackablesResponse) */ {
 public:
  inline setTrackablesResponse() : setTrackablesResponse(nullptr) {}
  virtual ~setTrackablesResponse();
  explicit constexpr setTrackablesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setTrackablesResponse(const setTrackablesResponse& from);
  setTrackablesResponse(setTrackablesResponse&& from) noexcept
    : setTrackablesResponse() {
    *this = ::std::move(from);
  }

  inline setTrackablesResponse& operator=(const setTrackablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setTrackablesResponse& operator=(setTrackablesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setTrackablesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setTrackablesResponse* internal_default_instance() {
    return reinterpret_cast<const setTrackablesResponse*>(
               &_setTrackablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(setTrackablesResponse& a, setTrackablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setTrackablesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setTrackablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setTrackablesResponse* New() const final {
    return CreateMaybeMessage<setTrackablesResponse>(nullptr);
  }

  setTrackablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setTrackablesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setTrackablesResponse& from);
  void MergeFrom(const setTrackablesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setTrackablesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DTrackablesDetector.setTrackablesResponse";
  }
  protected:
  explicit setTrackablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DTrackablesDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DTrackablesDetector.setTrackablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DTrackablesDetectorService_2eproto;
};
// -------------------------------------------------------------------

class detectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DTrackablesDetector.detectRequest) */ {
 public:
  inline detectRequest() : detectRequest(nullptr) {}
  virtual ~detectRequest();
  explicit constexpr detectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detectRequest(const detectRequest& from);
  detectRequest(detectRequest&& from) noexcept
    : detectRequest() {
    *this = ::std::move(from);
  }

  inline detectRequest& operator=(const detectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline detectRequest& operator=(detectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const detectRequest* internal_default_instance() {
    return reinterpret_cast<const detectRequest*>(
               &_detectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(detectRequest& a, detectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(detectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detectRequest* New() const final {
    return CreateMaybeMessage<detectRequest>(nullptr);
  }

  detectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detectRequest& from);
  void MergeFrom(const detectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DTrackablesDetector.detectRequest";
  }
  protected:
  explicit detectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DTrackablesDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kCornersFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes corners = 3;
  void clear_corners();
  const std::string& corners() const;
  void set_corners(const std::string& value);
  void set_corners(std::string&& value);
  void set_corners(const char* value);
  void set_corners(const void* value, size_t size);
  std::string* mutable_corners();
  std::string* release_corners();
  void set_allocated_corners(std::string* corners);
  private:
  const std::string& _internal_corners() const;
  void _internal_set_corners(const std::string& value);
  std::string* _internal_mutable_corners();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DTrackablesDetector.detectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr corners_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DTrackablesDetectorService_2eproto;
};
// -------------------------------------------------------------------

class detectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI2DTrackablesDetector.detectResponse) */ {
 public:
  inline detectResponse() : detectResponse(nullptr) {}
  virtual ~detectResponse();
  explicit constexpr detectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  detectResponse(const detectResponse& from);
  detectResponse(detectResponse&& from) noexcept
    : detectResponse() {
    *this = ::std::move(from);
  }

  inline detectResponse& operator=(const detectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline detectResponse& operator=(detectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const detectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const detectResponse* internal_default_instance() {
    return reinterpret_cast<const detectResponse*>(
               &_detectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(detectResponse& a, detectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(detectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(detectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline detectResponse* New() const final {
    return CreateMaybeMessage<detectResponse>(nullptr);
  }

  detectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<detectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const detectResponse& from);
  void MergeFrom(const detectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(detectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI2DTrackablesDetector.detectResponse";
  }
  protected:
  explicit detectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcI2DTrackablesDetectorService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCornersFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes corners = 1;
  void clear_corners();
  const std::string& corners() const;
  void set_corners(const std::string& value);
  void set_corners(std::string&& value);
  void set_corners(const char* value);
  void set_corners(const void* value, size_t size);
  std::string* mutable_corners();
  std::string* release_corners();
  void set_allocated_corners(std::string* corners);
  private:
  const std::string& _internal_corners() const;
  void _internal_set_corners(const std::string& value);
  std::string* _internal_mutable_corners();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI2DTrackablesDetector.detectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr corners_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcI2DTrackablesDetectorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setTrackablesRequest

// int32 grpcServerCompressionFormat = 1;
inline void setTrackablesRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setTrackablesRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setTrackablesRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI2DTrackablesDetector.setTrackablesRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setTrackablesRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void setTrackablesRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI2DTrackablesDetector.setTrackablesRequest.grpcServerCompressionFormat)
}

// bytes trackables = 2;
inline void setTrackablesRequest::clear_trackables() {
  trackables_.ClearToEmpty();
}
inline const std::string& setTrackablesRequest::trackables() const {
  // @@protoc_insertion_point(field_get:grpcI2DTrackablesDetector.setTrackablesRequest.trackables)
  return _internal_trackables();
}
inline void setTrackablesRequest::set_trackables(const std::string& value) {
  _internal_set_trackables(value);
  // @@protoc_insertion_point(field_set:grpcI2DTrackablesDetector.setTrackablesRequest.trackables)
}
inline std::string* setTrackablesRequest::mutable_trackables() {
  // @@protoc_insertion_point(field_mutable:grpcI2DTrackablesDetector.setTrackablesRequest.trackables)
  return _internal_mutable_trackables();
}
inline const std::string& setTrackablesRequest::_internal_trackables() const {
  return trackables_.Get();
}
inline void setTrackablesRequest::_internal_set_trackables(const std::string& value) {
  
  trackables_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setTrackablesRequest::set_trackables(std::string&& value) {
  
  trackables_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DTrackablesDetector.setTrackablesRequest.trackables)
}
inline void setTrackablesRequest::set_trackables(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trackables_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DTrackablesDetector.setTrackablesRequest.trackables)
}
inline void setTrackablesRequest::set_trackables(const void* value,
    size_t size) {
  
  trackables_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DTrackablesDetector.setTrackablesRequest.trackables)
}
inline std::string* setTrackablesRequest::_internal_mutable_trackables() {
  
  return trackables_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setTrackablesRequest::release_trackables() {
  // @@protoc_insertion_point(field_release:grpcI2DTrackablesDetector.setTrackablesRequest.trackables)
  return trackables_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setTrackablesRequest::set_allocated_trackables(std::string* trackables) {
  if (trackables != nullptr) {
    
  } else {
    
  }
  trackables_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trackables,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DTrackablesDetector.setTrackablesRequest.trackables)
}

// -------------------------------------------------------------------

// setTrackablesResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setTrackablesResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setTrackablesResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setTrackablesResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI2DTrackablesDetector.setTrackablesResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setTrackablesResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setTrackablesResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI2DTrackablesDetector.setTrackablesResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// detectRequest

// int32 grpcServerCompressionFormat = 1;
inline void detectRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detectRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detectRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI2DTrackablesDetector.detectRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void detectRequest::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void detectRequest::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI2DTrackablesDetector.detectRequest.grpcServerCompressionFormat)
}

// bytes image = 2;
inline void detectRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& detectRequest::image() const {
  // @@protoc_insertion_point(field_get:grpcI2DTrackablesDetector.detectRequest.image)
  return _internal_image();
}
inline void detectRequest::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:grpcI2DTrackablesDetector.detectRequest.image)
}
inline std::string* detectRequest::mutable_image() {
  // @@protoc_insertion_point(field_mutable:grpcI2DTrackablesDetector.detectRequest.image)
  return _internal_mutable_image();
}
inline const std::string& detectRequest::_internal_image() const {
  return image_.Get();
}
inline void detectRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectRequest::set_image(std::string&& value) {
  
  image_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DTrackablesDetector.detectRequest.image)
}
inline void detectRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DTrackablesDetector.detectRequest.image)
}
inline void detectRequest::set_image(const void* value,
    size_t size) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DTrackablesDetector.detectRequest.image)
}
inline std::string* detectRequest::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectRequest::release_image() {
  // @@protoc_insertion_point(field_release:grpcI2DTrackablesDetector.detectRequest.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DTrackablesDetector.detectRequest.image)
}

// bytes corners = 3;
inline void detectRequest::clear_corners() {
  corners_.ClearToEmpty();
}
inline const std::string& detectRequest::corners() const {
  // @@protoc_insertion_point(field_get:grpcI2DTrackablesDetector.detectRequest.corners)
  return _internal_corners();
}
inline void detectRequest::set_corners(const std::string& value) {
  _internal_set_corners(value);
  // @@protoc_insertion_point(field_set:grpcI2DTrackablesDetector.detectRequest.corners)
}
inline std::string* detectRequest::mutable_corners() {
  // @@protoc_insertion_point(field_mutable:grpcI2DTrackablesDetector.detectRequest.corners)
  return _internal_mutable_corners();
}
inline const std::string& detectRequest::_internal_corners() const {
  return corners_.Get();
}
inline void detectRequest::_internal_set_corners(const std::string& value) {
  
  corners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectRequest::set_corners(std::string&& value) {
  
  corners_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DTrackablesDetector.detectRequest.corners)
}
inline void detectRequest::set_corners(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  corners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DTrackablesDetector.detectRequest.corners)
}
inline void detectRequest::set_corners(const void* value,
    size_t size) {
  
  corners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DTrackablesDetector.detectRequest.corners)
}
inline std::string* detectRequest::_internal_mutable_corners() {
  
  return corners_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectRequest::release_corners() {
  // @@protoc_insertion_point(field_release:grpcI2DTrackablesDetector.detectRequest.corners)
  return corners_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectRequest::set_allocated_corners(std::string* corners) {
  if (corners != nullptr) {
    
  } else {
    
  }
  corners_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), corners,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DTrackablesDetector.detectRequest.corners)
}

// -------------------------------------------------------------------

// detectResponse

// bytes corners = 1;
inline void detectResponse::clear_corners() {
  corners_.ClearToEmpty();
}
inline const std::string& detectResponse::corners() const {
  // @@protoc_insertion_point(field_get:grpcI2DTrackablesDetector.detectResponse.corners)
  return _internal_corners();
}
inline void detectResponse::set_corners(const std::string& value) {
  _internal_set_corners(value);
  // @@protoc_insertion_point(field_set:grpcI2DTrackablesDetector.detectResponse.corners)
}
inline std::string* detectResponse::mutable_corners() {
  // @@protoc_insertion_point(field_mutable:grpcI2DTrackablesDetector.detectResponse.corners)
  return _internal_mutable_corners();
}
inline const std::string& detectResponse::_internal_corners() const {
  return corners_.Get();
}
inline void detectResponse::_internal_set_corners(const std::string& value) {
  
  corners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void detectResponse::set_corners(std::string&& value) {
  
  corners_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcI2DTrackablesDetector.detectResponse.corners)
}
inline void detectResponse::set_corners(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  corners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcI2DTrackablesDetector.detectResponse.corners)
}
inline void detectResponse::set_corners(const void* value,
    size_t size) {
  
  corners_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcI2DTrackablesDetector.detectResponse.corners)
}
inline std::string* detectResponse::_internal_mutable_corners() {
  
  return corners_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* detectResponse::release_corners() {
  // @@protoc_insertion_point(field_release:grpcI2DTrackablesDetector.detectResponse.corners)
  return corners_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void detectResponse::set_allocated_corners(std::string* corners) {
  if (corners != nullptr) {
    
  } else {
    
  }
  corners_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), corners,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcI2DTrackablesDetector.detectResponse.corners)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void detectResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detectResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 detectResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI2DTrackablesDetector.detectResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void detectResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void detectResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI2DTrackablesDetector.detectResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcI2DTrackablesDetector

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcI2DTrackablesDetectorService_2eproto
