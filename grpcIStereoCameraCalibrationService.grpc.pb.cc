// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIStereoCameraCalibrationService.proto

#include "grpcIStereoCameraCalibrationService.pb.h"
#include "grpcIStereoCameraCalibrationService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIStereoCameraCalibration {

static const char* grpcIStereoCameraCalibrationService_method_names[] = {
  "/grpcIStereoCameraCalibration.grpcIStereoCameraCalibrationService/calibrate",
  "/grpcIStereoCameraCalibration.grpcIStereoCameraCalibrationService/rectify",
};

std::unique_ptr< grpcIStereoCameraCalibrationService::Stub> grpcIStereoCameraCalibrationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIStereoCameraCalibrationService::Stub> stub(new grpcIStereoCameraCalibrationService::Stub(channel, options));
  return stub;
}

grpcIStereoCameraCalibrationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_calibrate_(grpcIStereoCameraCalibrationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_rectify_(grpcIStereoCameraCalibrationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIStereoCameraCalibrationService::Stub::calibrate(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::calibrateRequest& request, ::grpcIStereoCameraCalibration::calibrateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIStereoCameraCalibration::calibrateRequest, ::grpcIStereoCameraCalibration::calibrateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_calibrate_, context, request, response);
}

void grpcIStereoCameraCalibrationService::Stub::async::calibrate(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::calibrateRequest* request, ::grpcIStereoCameraCalibration::calibrateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIStereoCameraCalibration::calibrateRequest, ::grpcIStereoCameraCalibration::calibrateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_calibrate_, context, request, response, std::move(f));
}

void grpcIStereoCameraCalibrationService::Stub::async::calibrate(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::calibrateRequest* request, ::grpcIStereoCameraCalibration::calibrateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_calibrate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIStereoCameraCalibration::calibrateResponse>* grpcIStereoCameraCalibrationService::Stub::PrepareAsynccalibrateRaw(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::calibrateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIStereoCameraCalibration::calibrateResponse, ::grpcIStereoCameraCalibration::calibrateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_calibrate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIStereoCameraCalibration::calibrateResponse>* grpcIStereoCameraCalibrationService::Stub::AsynccalibrateRaw(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::calibrateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccalibrateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIStereoCameraCalibrationService::Stub::rectify(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::rectifyRequest& request, ::grpcIStereoCameraCalibration::rectifyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIStereoCameraCalibration::rectifyRequest, ::grpcIStereoCameraCalibration::rectifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_rectify_, context, request, response);
}

void grpcIStereoCameraCalibrationService::Stub::async::rectify(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::rectifyRequest* request, ::grpcIStereoCameraCalibration::rectifyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIStereoCameraCalibration::rectifyRequest, ::grpcIStereoCameraCalibration::rectifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_rectify_, context, request, response, std::move(f));
}

void grpcIStereoCameraCalibrationService::Stub::async::rectify(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::rectifyRequest* request, ::grpcIStereoCameraCalibration::rectifyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_rectify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIStereoCameraCalibration::rectifyResponse>* grpcIStereoCameraCalibrationService::Stub::PrepareAsyncrectifyRaw(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::rectifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIStereoCameraCalibration::rectifyResponse, ::grpcIStereoCameraCalibration::rectifyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_rectify_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIStereoCameraCalibration::rectifyResponse>* grpcIStereoCameraCalibrationService::Stub::AsyncrectifyRaw(::grpc::ClientContext* context, const ::grpcIStereoCameraCalibration::rectifyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrectifyRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIStereoCameraCalibrationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIStereoCameraCalibrationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIStereoCameraCalibrationService::Service, ::grpcIStereoCameraCalibration::calibrateRequest, ::grpcIStereoCameraCalibration::calibrateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIStereoCameraCalibrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIStereoCameraCalibration::calibrateRequest* req,
             ::grpcIStereoCameraCalibration::calibrateResponse* resp) {
               return service->calibrate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIStereoCameraCalibrationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIStereoCameraCalibrationService::Service, ::grpcIStereoCameraCalibration::rectifyRequest, ::grpcIStereoCameraCalibration::rectifyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIStereoCameraCalibrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIStereoCameraCalibration::rectifyRequest* req,
             ::grpcIStereoCameraCalibration::rectifyResponse* resp) {
               return service->rectify(ctx, req, resp);
             }, this)));
}

grpcIStereoCameraCalibrationService::Service::~Service() {
}

::grpc::Status grpcIStereoCameraCalibrationService::Service::calibrate(::grpc::ServerContext* context, const ::grpcIStereoCameraCalibration::calibrateRequest* request, ::grpcIStereoCameraCalibration::calibrateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIStereoCameraCalibrationService::Service::rectify(::grpc::ServerContext* context, const ::grpcIStereoCameraCalibration::rectifyRequest* request, ::grpcIStereoCameraCalibration::rectifyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIStereoCameraCalibration

