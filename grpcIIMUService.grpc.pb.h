// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIIMUService.proto
#ifndef GRPC_grpcIIMUService_2eproto__INCLUDED
#define GRPC_grpcIIMUService_2eproto__INCLUDED

#include "grpcIIMUService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIIMU {

class grpcIIMUService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIIMU.grpcIIMUService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpcIIMU::startResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpcIIMU::stopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpcIIMU::getGyroscopeDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getGyroscopeDataResponse>> AsyncgetGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getGyroscopeDataResponse>>(AsyncgetGyroscopeDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getGyroscopeDataResponse>> PrepareAsyncgetGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getGyroscopeDataResponse>>(PrepareAsyncgetGyroscopeDataRaw(context, request, cq));
    }
    virtual ::grpc::Status getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpcIIMU::getAccelerometerDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAccelerometerDataResponse>> AsyncgetAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAccelerometerDataResponse>>(AsyncgetAccelerometerDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAccelerometerDataResponse>> PrepareAsyncgetAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAccelerometerDataResponse>>(PrepareAsyncgetAccelerometerDataRaw(context, request, cq));
    }
    virtual ::grpc::Status getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpcIIMU::getMagnetometerDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getMagnetometerDataResponse>> AsyncgetMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getMagnetometerDataResponse>>(AsyncgetMagnetometerDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getMagnetometerDataResponse>> PrepareAsyncgetMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getMagnetometerDataResponse>>(PrepareAsyncgetMagnetometerDataRaw(context, request, cq));
    }
    virtual ::grpc::Status getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpcIIMU::getAllSensorsDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAllSensorsDataResponse>> AsyncgetAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAllSensorsDataResponse>>(AsyncgetAllSensorsDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAllSensorsDataResponse>> PrepareAsyncgetAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAllSensorsDataResponse>>(PrepareAsyncgetAllSensorsDataRaw(context, request, cq));
    }
    virtual ::grpc::Status isGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpcIIMU::isGyroscopeAvailableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isGyroscopeAvailableResponse>> AsyncisGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isGyroscopeAvailableResponse>>(AsyncisGyroscopeAvailableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isGyroscopeAvailableResponse>> PrepareAsyncisGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isGyroscopeAvailableResponse>>(PrepareAsyncisGyroscopeAvailableRaw(context, request, cq));
    }
    virtual ::grpc::Status isAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpcIIMU::isAccelerometerAvailableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isAccelerometerAvailableResponse>> AsyncisAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isAccelerometerAvailableResponse>>(AsyncisAccelerometerAvailableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isAccelerometerAvailableResponse>> PrepareAsyncisAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isAccelerometerAvailableResponse>>(PrepareAsyncisAccelerometerAvailableRaw(context, request, cq));
    }
    virtual ::grpc::Status isMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpcIIMU::isMagnetometerAvailableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isMagnetometerAvailableResponse>> AsyncisMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isMagnetometerAvailableResponse>>(AsyncisMagnetometerAvailableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isMagnetometerAvailableResponse>> PrepareAsyncisMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isMagnetometerAvailableResponse>>(PrepareAsyncisMagnetometerAvailableRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void start(::grpc::ClientContext* context, const ::grpcIIMU::startRequest* request, ::grpcIIMU::startResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void start(::grpc::ClientContext* context, const ::grpcIIMU::startRequest* request, ::grpcIIMU::startResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void start(::grpc::ClientContext* context, const ::grpcIIMU::startRequest* request, ::grpcIIMU::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void stop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest* request, ::grpcIIMU::stopResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void stop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest* request, ::grpcIIMU::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void stop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest* request, ::grpcIIMU::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void isGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest* request, ::grpcIIMU::isGyroscopeAvailableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void isGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest* request, ::grpcIIMU::isGyroscopeAvailableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void isGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest* request, ::grpcIIMU::isGyroscopeAvailableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void isAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest* request, ::grpcIIMU::isAccelerometerAvailableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void isAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest* request, ::grpcIIMU::isAccelerometerAvailableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void isAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest* request, ::grpcIIMU::isAccelerometerAvailableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void isMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest* request, ::grpcIIMU::isMagnetometerAvailableResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void isMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest* request, ::grpcIIMU::isMagnetometerAvailableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void isMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest* request, ::grpcIIMU::isMagnetometerAvailableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getGyroscopeDataResponse>* AsyncgetGyroscopeDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getGyroscopeDataResponse>* PrepareAsyncgetGyroscopeDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAccelerometerDataResponse>* AsyncgetAccelerometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAccelerometerDataResponse>* PrepareAsyncgetAccelerometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getMagnetometerDataResponse>* AsyncgetMagnetometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getMagnetometerDataResponse>* PrepareAsyncgetMagnetometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAllSensorsDataResponse>* AsyncgetAllSensorsDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::getAllSensorsDataResponse>* PrepareAsyncgetAllSensorsDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isGyroscopeAvailableResponse>* AsyncisGyroscopeAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isGyroscopeAvailableResponse>* PrepareAsyncisGyroscopeAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isAccelerometerAvailableResponse>* AsyncisAccelerometerAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isAccelerometerAvailableResponse>* PrepareAsyncisAccelerometerAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isMagnetometerAvailableResponse>* AsyncisMagnetometerAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIIMU::isMagnetometerAvailableResponse>* PrepareAsyncisMagnetometerAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpcIIMU::startResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpcIIMU::stopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpcIIMU::getGyroscopeDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getGyroscopeDataResponse>> AsyncgetGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getGyroscopeDataResponse>>(AsyncgetGyroscopeDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getGyroscopeDataResponse>> PrepareAsyncgetGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getGyroscopeDataResponse>>(PrepareAsyncgetGyroscopeDataRaw(context, request, cq));
    }
    ::grpc::Status getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpcIIMU::getAccelerometerDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAccelerometerDataResponse>> AsyncgetAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAccelerometerDataResponse>>(AsyncgetAccelerometerDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAccelerometerDataResponse>> PrepareAsyncgetAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAccelerometerDataResponse>>(PrepareAsyncgetAccelerometerDataRaw(context, request, cq));
    }
    ::grpc::Status getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpcIIMU::getMagnetometerDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getMagnetometerDataResponse>> AsyncgetMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getMagnetometerDataResponse>>(AsyncgetMagnetometerDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getMagnetometerDataResponse>> PrepareAsyncgetMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getMagnetometerDataResponse>>(PrepareAsyncgetMagnetometerDataRaw(context, request, cq));
    }
    ::grpc::Status getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpcIIMU::getAllSensorsDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAllSensorsDataResponse>> AsyncgetAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAllSensorsDataResponse>>(AsyncgetAllSensorsDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAllSensorsDataResponse>> PrepareAsyncgetAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAllSensorsDataResponse>>(PrepareAsyncgetAllSensorsDataRaw(context, request, cq));
    }
    ::grpc::Status isGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpcIIMU::isGyroscopeAvailableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isGyroscopeAvailableResponse>> AsyncisGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isGyroscopeAvailableResponse>>(AsyncisGyroscopeAvailableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isGyroscopeAvailableResponse>> PrepareAsyncisGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isGyroscopeAvailableResponse>>(PrepareAsyncisGyroscopeAvailableRaw(context, request, cq));
    }
    ::grpc::Status isAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpcIIMU::isAccelerometerAvailableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isAccelerometerAvailableResponse>> AsyncisAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isAccelerometerAvailableResponse>>(AsyncisAccelerometerAvailableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isAccelerometerAvailableResponse>> PrepareAsyncisAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isAccelerometerAvailableResponse>>(PrepareAsyncisAccelerometerAvailableRaw(context, request, cq));
    }
    ::grpc::Status isMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpcIIMU::isMagnetometerAvailableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isMagnetometerAvailableResponse>> AsyncisMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isMagnetometerAvailableResponse>>(AsyncisMagnetometerAvailableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isMagnetometerAvailableResponse>> PrepareAsyncisMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isMagnetometerAvailableResponse>>(PrepareAsyncisMagnetometerAvailableRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void start(::grpc::ClientContext* context, const ::grpcIIMU::startRequest* request, ::grpcIIMU::startResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void start(::grpc::ClientContext* context, const ::grpcIIMU::startRequest* request, ::grpcIIMU::startResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void start(::grpc::ClientContext* context, const ::grpcIIMU::startRequest* request, ::grpcIIMU::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void stop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest* request, ::grpcIIMU::stopResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void stop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest* request, ::grpcIIMU::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void stop(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest* request, ::grpcIIMU::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void isGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest* request, ::grpcIIMU::isGyroscopeAvailableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void isGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest* request, ::grpcIIMU::isGyroscopeAvailableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void isGyroscopeAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest* request, ::grpcIIMU::isGyroscopeAvailableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void isAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest* request, ::grpcIIMU::isAccelerometerAvailableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void isAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest* request, ::grpcIIMU::isAccelerometerAvailableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void isAccelerometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest* request, ::grpcIIMU::isAccelerometerAvailableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void isMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest* request, ::grpcIIMU::isMagnetometerAvailableResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void isMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest* request, ::grpcIIMU::isMagnetometerAvailableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void isMagnetometerAvailable(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest* request, ::grpcIIMU::isMagnetometerAvailableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIIMU::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIIMU::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getGyroscopeDataResponse>* AsyncgetGyroscopeDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getGyroscopeDataResponse>* PrepareAsyncgetGyroscopeDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAccelerometerDataResponse>* AsyncgetAccelerometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAccelerometerDataResponse>* PrepareAsyncgetAccelerometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getMagnetometerDataResponse>* AsyncgetMagnetometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getMagnetometerDataResponse>* PrepareAsyncgetMagnetometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAllSensorsDataResponse>* AsyncgetAllSensorsDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAllSensorsDataResponse>* PrepareAsyncgetAllSensorsDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isGyroscopeAvailableResponse>* AsyncisGyroscopeAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isGyroscopeAvailableResponse>* PrepareAsyncisGyroscopeAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isAccelerometerAvailableResponse>* AsyncisAccelerometerAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isAccelerometerAvailableResponse>* PrepareAsyncisAccelerometerAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isMagnetometerAvailableResponse>* AsyncisMagnetometerAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIIMU::isMagnetometerAvailableResponse>* PrepareAsyncisMagnetometerAvailableRaw(::grpc::ClientContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_getGyroscopeData_;
    const ::grpc::internal::RpcMethod rpcmethod_getAccelerometerData_;
    const ::grpc::internal::RpcMethod rpcmethod_getMagnetometerData_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllSensorsData_;
    const ::grpc::internal::RpcMethod rpcmethod_isGyroscopeAvailable_;
    const ::grpc::internal::RpcMethod rpcmethod_isAccelerometerAvailable_;
    const ::grpc::internal::RpcMethod rpcmethod_isMagnetometerAvailable_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::grpcIIMU::startRequest* request, ::grpcIIMU::startResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::grpcIIMU::stopRequest* request, ::grpcIIMU::stopResponse* response);
    virtual ::grpc::Status getGyroscopeData(::grpc::ServerContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response);
    virtual ::grpc::Status getAccelerometerData(::grpc::ServerContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response);
    virtual ::grpc::Status getMagnetometerData(::grpc::ServerContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response);
    virtual ::grpc::Status getAllSensorsData(::grpc::ServerContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response);
    virtual ::grpc::Status isGyroscopeAvailable(::grpc::ServerContext* context, const ::grpcIIMU::isGyroscopeAvailableRequest* request, ::grpcIIMU::isGyroscopeAvailableResponse* response);
    virtual ::grpc::Status isAccelerometerAvailable(::grpc::ServerContext* context, const ::grpcIIMU::isAccelerometerAvailableRequest* request, ::grpcIIMU::isAccelerometerAvailableResponse* response);
    virtual ::grpc::Status isMagnetometerAvailable(::grpc::ServerContext* context, const ::grpcIIMU::isMagnetometerAvailableRequest* request, ::grpcIIMU::isMagnetometerAvailableResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIIMU::startRequest* /*request*/, ::grpcIIMU::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpcIIMU::startRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIIMU::startResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIIMU::stopRequest* /*request*/, ::grpcIIMU::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpcIIMU::stopRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIIMU::stopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getGyroscopeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getGyroscopeData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getGyroscopeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGyroscopeData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getGyroscopeDataRequest* /*request*/, ::grpcIIMU::getGyroscopeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGyroscopeData(::grpc::ServerContext* context, ::grpcIIMU::getGyroscopeDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIIMU::getGyroscopeDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAccelerometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAccelerometerData() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getAccelerometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAccelerometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAccelerometerDataRequest* /*request*/, ::grpcIIMU::getAccelerometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAccelerometerData(::grpc::ServerContext* context, ::grpcIIMU::getAccelerometerDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIIMU::getAccelerometerDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMagnetometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMagnetometerData() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getMagnetometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMagnetometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getMagnetometerDataRequest* /*request*/, ::grpcIIMU::getMagnetometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMagnetometerData(::grpc::ServerContext* context, ::grpcIIMU::getMagnetometerDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIIMU::getMagnetometerDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllSensorsData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllSensorsData() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getAllSensorsData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllSensorsData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAllSensorsDataRequest* /*request*/, ::grpcIIMU::getAllSensorsDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllSensorsData(::grpc::ServerContext* context, ::grpcIIMU::getAllSensorsDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIIMU::getAllSensorsDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isGyroscopeAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isGyroscopeAvailable() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_isGyroscopeAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isGyroscopeAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isGyroscopeAvailableRequest* /*request*/, ::grpcIIMU::isGyroscopeAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisGyroscopeAvailable(::grpc::ServerContext* context, ::grpcIIMU::isGyroscopeAvailableRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIIMU::isGyroscopeAvailableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isAccelerometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isAccelerometerAvailable() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_isAccelerometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAccelerometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isAccelerometerAvailableRequest* /*request*/, ::grpcIIMU::isAccelerometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisAccelerometerAvailable(::grpc::ServerContext* context, ::grpcIIMU::isAccelerometerAvailableRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIIMU::isAccelerometerAvailableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_isMagnetometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_isMagnetometerAvailable() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_isMagnetometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isMagnetometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isMagnetometerAvailableRequest* /*request*/, ::grpcIIMU::isMagnetometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisMagnetometerAvailable(::grpc::ServerContext* context, ::grpcIIMU::isMagnetometerAvailableRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIIMU::isMagnetometerAvailableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_getGyroscopeData<WithAsyncMethod_getAccelerometerData<WithAsyncMethod_getMagnetometerData<WithAsyncMethod_getAllSensorsData<WithAsyncMethod_isGyroscopeAvailable<WithAsyncMethod_isAccelerometerAvailable<WithAsyncMethod_isMagnetometerAvailable<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::startRequest, ::grpcIIMU::startResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIIMU::startRequest* request, ::grpcIIMU::startResponse* response) { return this->start(context, request, response); }));}
    void SetMessageAllocatorFor_start(
        ::grpc::experimental::MessageAllocator< ::grpcIIMU::startRequest, ::grpcIIMU::startResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::startRequest, ::grpcIIMU::startResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIIMU::startRequest* /*request*/, ::grpcIIMU::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIIMU::startRequest* /*request*/, ::grpcIIMU::startResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIIMU::startRequest* /*request*/, ::grpcIIMU::startResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::stopRequest, ::grpcIIMU::stopResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIIMU::stopRequest* request, ::grpcIIMU::stopResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::experimental::MessageAllocator< ::grpcIIMU::stopRequest, ::grpcIIMU::stopResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::stopRequest, ::grpcIIMU::stopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIIMU::stopRequest* /*request*/, ::grpcIIMU::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIIMU::stopRequest* /*request*/, ::grpcIIMU::stopResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIIMU::stopRequest* /*request*/, ::grpcIIMU::stopResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getGyroscopeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getGyroscopeData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::getGyroscopeDataRequest, ::grpcIIMU::getGyroscopeDataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response) { return this->getGyroscopeData(context, request, response); }));}
    void SetMessageAllocatorFor_getGyroscopeData(
        ::grpc::experimental::MessageAllocator< ::grpcIIMU::getGyroscopeDataRequest, ::grpcIIMU::getGyroscopeDataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::getGyroscopeDataRequest, ::grpcIIMU::getGyroscopeDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getGyroscopeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGyroscopeData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getGyroscopeDataRequest* /*request*/, ::grpcIIMU::getGyroscopeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getGyroscopeData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIIMU::getGyroscopeDataRequest* /*request*/, ::grpcIIMU::getGyroscopeDataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getGyroscopeData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIIMU::getGyroscopeDataRequest* /*request*/, ::grpcIIMU::getGyroscopeDataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getAccelerometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getAccelerometerData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::getAccelerometerDataRequest, ::grpcIIMU::getAccelerometerDataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response) { return this->getAccelerometerData(context, request, response); }));}
    void SetMessageAllocatorFor_getAccelerometerData(
        ::grpc::experimental::MessageAllocator< ::grpcIIMU::getAccelerometerDataRequest, ::grpcIIMU::getAccelerometerDataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::getAccelerometerDataRequest, ::grpcIIMU::getAccelerometerDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getAccelerometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAccelerometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAccelerometerDataRequest* /*request*/, ::grpcIIMU::getAccelerometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAccelerometerData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIIMU::getAccelerometerDataRequest* /*request*/, ::grpcIIMU::getAccelerometerDataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAccelerometerData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIIMU::getAccelerometerDataRequest* /*request*/, ::grpcIIMU::getAccelerometerDataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getMagnetometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getMagnetometerData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::getMagnetometerDataRequest, ::grpcIIMU::getMagnetometerDataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response) { return this->getMagnetometerData(context, request, response); }));}
    void SetMessageAllocatorFor_getMagnetometerData(
        ::grpc::experimental::MessageAllocator< ::grpcIIMU::getMagnetometerDataRequest, ::grpcIIMU::getMagnetometerDataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::getMagnetometerDataRequest, ::grpcIIMU::getMagnetometerDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getMagnetometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMagnetometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getMagnetometerDataRequest* /*request*/, ::grpcIIMU::getMagnetometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getMagnetometerData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIIMU::getMagnetometerDataRequest* /*request*/, ::grpcIIMU::getMagnetometerDataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getMagnetometerData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIIMU::getMagnetometerDataRequest* /*request*/, ::grpcIIMU::getMagnetometerDataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getAllSensorsData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getAllSensorsData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::getAllSensorsDataRequest, ::grpcIIMU::getAllSensorsDataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response) { return this->getAllSensorsData(context, request, response); }));}
    void SetMessageAllocatorFor_getAllSensorsData(
        ::grpc::experimental::MessageAllocator< ::grpcIIMU::getAllSensorsDataRequest, ::grpcIIMU::getAllSensorsDataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::getAllSensorsDataRequest, ::grpcIIMU::getAllSensorsDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getAllSensorsData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllSensorsData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAllSensorsDataRequest* /*request*/, ::grpcIIMU::getAllSensorsDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAllSensorsData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIIMU::getAllSensorsDataRequest* /*request*/, ::grpcIIMU::getAllSensorsDataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAllSensorsData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIIMU::getAllSensorsDataRequest* /*request*/, ::grpcIIMU::getAllSensorsDataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_isGyroscopeAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_isGyroscopeAvailable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::isGyroscopeAvailableRequest, ::grpcIIMU::isGyroscopeAvailableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIIMU::isGyroscopeAvailableRequest* request, ::grpcIIMU::isGyroscopeAvailableResponse* response) { return this->isGyroscopeAvailable(context, request, response); }));}
    void SetMessageAllocatorFor_isGyroscopeAvailable(
        ::grpc::experimental::MessageAllocator< ::grpcIIMU::isGyroscopeAvailableRequest, ::grpcIIMU::isGyroscopeAvailableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::isGyroscopeAvailableRequest, ::grpcIIMU::isGyroscopeAvailableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_isGyroscopeAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isGyroscopeAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isGyroscopeAvailableRequest* /*request*/, ::grpcIIMU::isGyroscopeAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isGyroscopeAvailable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIIMU::isGyroscopeAvailableRequest* /*request*/, ::grpcIIMU::isGyroscopeAvailableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isGyroscopeAvailable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIIMU::isGyroscopeAvailableRequest* /*request*/, ::grpcIIMU::isGyroscopeAvailableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_isAccelerometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_isAccelerometerAvailable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::isAccelerometerAvailableRequest, ::grpcIIMU::isAccelerometerAvailableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIIMU::isAccelerometerAvailableRequest* request, ::grpcIIMU::isAccelerometerAvailableResponse* response) { return this->isAccelerometerAvailable(context, request, response); }));}
    void SetMessageAllocatorFor_isAccelerometerAvailable(
        ::grpc::experimental::MessageAllocator< ::grpcIIMU::isAccelerometerAvailableRequest, ::grpcIIMU::isAccelerometerAvailableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::isAccelerometerAvailableRequest, ::grpcIIMU::isAccelerometerAvailableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_isAccelerometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAccelerometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isAccelerometerAvailableRequest* /*request*/, ::grpcIIMU::isAccelerometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isAccelerometerAvailable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIIMU::isAccelerometerAvailableRequest* /*request*/, ::grpcIIMU::isAccelerometerAvailableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isAccelerometerAvailable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIIMU::isAccelerometerAvailableRequest* /*request*/, ::grpcIIMU::isAccelerometerAvailableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_isMagnetometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_isMagnetometerAvailable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::isMagnetometerAvailableRequest, ::grpcIIMU::isMagnetometerAvailableResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIIMU::isMagnetometerAvailableRequest* request, ::grpcIIMU::isMagnetometerAvailableResponse* response) { return this->isMagnetometerAvailable(context, request, response); }));}
    void SetMessageAllocatorFor_isMagnetometerAvailable(
        ::grpc::experimental::MessageAllocator< ::grpcIIMU::isMagnetometerAvailableRequest, ::grpcIIMU::isMagnetometerAvailableResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIIMU::isMagnetometerAvailableRequest, ::grpcIIMU::isMagnetometerAvailableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_isMagnetometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isMagnetometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isMagnetometerAvailableRequest* /*request*/, ::grpcIIMU::isMagnetometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isMagnetometerAvailable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIIMU::isMagnetometerAvailableRequest* /*request*/, ::grpcIIMU::isMagnetometerAvailableResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isMagnetometerAvailable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIIMU::isMagnetometerAvailableRequest* /*request*/, ::grpcIIMU::isMagnetometerAvailableResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_start<ExperimentalWithCallbackMethod_stop<ExperimentalWithCallbackMethod_getGyroscopeData<ExperimentalWithCallbackMethod_getAccelerometerData<ExperimentalWithCallbackMethod_getMagnetometerData<ExperimentalWithCallbackMethod_getAllSensorsData<ExperimentalWithCallbackMethod_isGyroscopeAvailable<ExperimentalWithCallbackMethod_isAccelerometerAvailable<ExperimentalWithCallbackMethod_isMagnetometerAvailable<Service > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_start<ExperimentalWithCallbackMethod_stop<ExperimentalWithCallbackMethod_getGyroscopeData<ExperimentalWithCallbackMethod_getAccelerometerData<ExperimentalWithCallbackMethod_getMagnetometerData<ExperimentalWithCallbackMethod_getAllSensorsData<ExperimentalWithCallbackMethod_isGyroscopeAvailable<ExperimentalWithCallbackMethod_isAccelerometerAvailable<ExperimentalWithCallbackMethod_isMagnetometerAvailable<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIIMU::startRequest* /*request*/, ::grpcIIMU::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIIMU::stopRequest* /*request*/, ::grpcIIMU::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getGyroscopeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getGyroscopeData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getGyroscopeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGyroscopeData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getGyroscopeDataRequest* /*request*/, ::grpcIIMU::getGyroscopeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAccelerometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAccelerometerData() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getAccelerometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAccelerometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAccelerometerDataRequest* /*request*/, ::grpcIIMU::getAccelerometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMagnetometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMagnetometerData() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getMagnetometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMagnetometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getMagnetometerDataRequest* /*request*/, ::grpcIIMU::getMagnetometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllSensorsData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllSensorsData() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getAllSensorsData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllSensorsData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAllSensorsDataRequest* /*request*/, ::grpcIIMU::getAllSensorsDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isGyroscopeAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isGyroscopeAvailable() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_isGyroscopeAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isGyroscopeAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isGyroscopeAvailableRequest* /*request*/, ::grpcIIMU::isGyroscopeAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isAccelerometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isAccelerometerAvailable() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_isAccelerometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAccelerometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isAccelerometerAvailableRequest* /*request*/, ::grpcIIMU::isAccelerometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_isMagnetometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_isMagnetometerAvailable() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_isMagnetometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isMagnetometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isMagnetometerAvailableRequest* /*request*/, ::grpcIIMU::isMagnetometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIIMU::startRequest* /*request*/, ::grpcIIMU::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIIMU::stopRequest* /*request*/, ::grpcIIMU::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getGyroscopeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getGyroscopeData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getGyroscopeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGyroscopeData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getGyroscopeDataRequest* /*request*/, ::grpcIIMU::getGyroscopeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetGyroscopeData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAccelerometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAccelerometerData() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getAccelerometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAccelerometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAccelerometerDataRequest* /*request*/, ::grpcIIMU::getAccelerometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAccelerometerData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMagnetometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMagnetometerData() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getMagnetometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMagnetometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getMagnetometerDataRequest* /*request*/, ::grpcIIMU::getMagnetometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMagnetometerData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllSensorsData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllSensorsData() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getAllSensorsData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllSensorsData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAllSensorsDataRequest* /*request*/, ::grpcIIMU::getAllSensorsDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllSensorsData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isGyroscopeAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isGyroscopeAvailable() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_isGyroscopeAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isGyroscopeAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isGyroscopeAvailableRequest* /*request*/, ::grpcIIMU::isGyroscopeAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisGyroscopeAvailable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isAccelerometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isAccelerometerAvailable() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_isAccelerometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAccelerometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isAccelerometerAvailableRequest* /*request*/, ::grpcIIMU::isAccelerometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisAccelerometerAvailable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_isMagnetometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_isMagnetometerAvailable() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_isMagnetometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isMagnetometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isMagnetometerAvailableRequest* /*request*/, ::grpcIIMU::isMagnetometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestisMagnetometerAvailable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIIMU::startRequest* /*request*/, ::grpcIIMU::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIIMU::stopRequest* /*request*/, ::grpcIIMU::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getGyroscopeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getGyroscopeData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getGyroscopeData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getGyroscopeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getGyroscopeData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getGyroscopeDataRequest* /*request*/, ::grpcIIMU::getGyroscopeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getGyroscopeData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getGyroscopeData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getAccelerometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getAccelerometerData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAccelerometerData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getAccelerometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAccelerometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAccelerometerDataRequest* /*request*/, ::grpcIIMU::getAccelerometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAccelerometerData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAccelerometerData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getMagnetometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getMagnetometerData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMagnetometerData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getMagnetometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMagnetometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getMagnetometerDataRequest* /*request*/, ::grpcIIMU::getMagnetometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getMagnetometerData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getMagnetometerData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getAllSensorsData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getAllSensorsData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllSensorsData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getAllSensorsData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllSensorsData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAllSensorsDataRequest* /*request*/, ::grpcIIMU::getAllSensorsDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getAllSensorsData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getAllSensorsData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_isGyroscopeAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_isGyroscopeAvailable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isGyroscopeAvailable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_isGyroscopeAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isGyroscopeAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isGyroscopeAvailableRequest* /*request*/, ::grpcIIMU::isGyroscopeAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isGyroscopeAvailable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isGyroscopeAvailable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_isAccelerometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_isAccelerometerAvailable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isAccelerometerAvailable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_isAccelerometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isAccelerometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isAccelerometerAvailableRequest* /*request*/, ::grpcIIMU::isAccelerometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isAccelerometerAvailable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isAccelerometerAvailable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_isMagnetometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_isMagnetometerAvailable() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->isMagnetometerAvailable(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_isMagnetometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status isMagnetometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isMagnetometerAvailableRequest* /*request*/, ::grpcIIMU::isMagnetometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* isMagnetometerAvailable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* isMagnetometerAvailable(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIIMU::startRequest, ::grpcIIMU::startResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIIMU::startRequest, ::grpcIIMU::startResponse>* streamer) {
                       return this->Streamedstart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIIMU::startRequest* /*request*/, ::grpcIIMU::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIIMU::startRequest,::grpcIIMU::startResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIIMU::stopRequest, ::grpcIIMU::stopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIIMU::stopRequest, ::grpcIIMU::stopResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIIMU::stopRequest* /*request*/, ::grpcIIMU::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIIMU::stopRequest,::grpcIIMU::stopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getGyroscopeData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getGyroscopeData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIIMU::getGyroscopeDataRequest, ::grpcIIMU::getGyroscopeDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIIMU::getGyroscopeDataRequest, ::grpcIIMU::getGyroscopeDataResponse>* streamer) {
                       return this->StreamedgetGyroscopeData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getGyroscopeData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getGyroscopeData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getGyroscopeDataRequest* /*request*/, ::grpcIIMU::getGyroscopeDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetGyroscopeData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIIMU::getGyroscopeDataRequest,::grpcIIMU::getGyroscopeDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAccelerometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAccelerometerData() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIIMU::getAccelerometerDataRequest, ::grpcIIMU::getAccelerometerDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIIMU::getAccelerometerDataRequest, ::grpcIIMU::getAccelerometerDataResponse>* streamer) {
                       return this->StreamedgetAccelerometerData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAccelerometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAccelerometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAccelerometerDataRequest* /*request*/, ::grpcIIMU::getAccelerometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAccelerometerData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIIMU::getAccelerometerDataRequest,::grpcIIMU::getAccelerometerDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMagnetometerData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMagnetometerData() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIIMU::getMagnetometerDataRequest, ::grpcIIMU::getMagnetometerDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIIMU::getMagnetometerDataRequest, ::grpcIIMU::getMagnetometerDataResponse>* streamer) {
                       return this->StreamedgetMagnetometerData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMagnetometerData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMagnetometerData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getMagnetometerDataRequest* /*request*/, ::grpcIIMU::getMagnetometerDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMagnetometerData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIIMU::getMagnetometerDataRequest,::grpcIIMU::getMagnetometerDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllSensorsData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllSensorsData() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIIMU::getAllSensorsDataRequest, ::grpcIIMU::getAllSensorsDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIIMU::getAllSensorsDataRequest, ::grpcIIMU::getAllSensorsDataResponse>* streamer) {
                       return this->StreamedgetAllSensorsData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllSensorsData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllSensorsData(::grpc::ServerContext* /*context*/, const ::grpcIIMU::getAllSensorsDataRequest* /*request*/, ::grpcIIMU::getAllSensorsDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllSensorsData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIIMU::getAllSensorsDataRequest,::grpcIIMU::getAllSensorsDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isGyroscopeAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isGyroscopeAvailable() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIIMU::isGyroscopeAvailableRequest, ::grpcIIMU::isGyroscopeAvailableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIIMU::isGyroscopeAvailableRequest, ::grpcIIMU::isGyroscopeAvailableResponse>* streamer) {
                       return this->StreamedisGyroscopeAvailable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isGyroscopeAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isGyroscopeAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isGyroscopeAvailableRequest* /*request*/, ::grpcIIMU::isGyroscopeAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisGyroscopeAvailable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIIMU::isGyroscopeAvailableRequest,::grpcIIMU::isGyroscopeAvailableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isAccelerometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isAccelerometerAvailable() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIIMU::isAccelerometerAvailableRequest, ::grpcIIMU::isAccelerometerAvailableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIIMU::isAccelerometerAvailableRequest, ::grpcIIMU::isAccelerometerAvailableResponse>* streamer) {
                       return this->StreamedisAccelerometerAvailable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isAccelerometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isAccelerometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isAccelerometerAvailableRequest* /*request*/, ::grpcIIMU::isAccelerometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisAccelerometerAvailable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIIMU::isAccelerometerAvailableRequest,::grpcIIMU::isAccelerometerAvailableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_isMagnetometerAvailable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_isMagnetometerAvailable() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIIMU::isMagnetometerAvailableRequest, ::grpcIIMU::isMagnetometerAvailableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIIMU::isMagnetometerAvailableRequest, ::grpcIIMU::isMagnetometerAvailableResponse>* streamer) {
                       return this->StreamedisMagnetometerAvailable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_isMagnetometerAvailable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status isMagnetometerAvailable(::grpc::ServerContext* /*context*/, const ::grpcIIMU::isMagnetometerAvailableRequest* /*request*/, ::grpcIIMU::isMagnetometerAvailableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedisMagnetometerAvailable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIIMU::isMagnetometerAvailableRequest,::grpcIIMU::isMagnetometerAvailableResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getGyroscopeData<WithStreamedUnaryMethod_getAccelerometerData<WithStreamedUnaryMethod_getMagnetometerData<WithStreamedUnaryMethod_getAllSensorsData<WithStreamedUnaryMethod_isGyroscopeAvailable<WithStreamedUnaryMethod_isAccelerometerAvailable<WithStreamedUnaryMethod_isMagnetometerAvailable<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getGyroscopeData<WithStreamedUnaryMethod_getAccelerometerData<WithStreamedUnaryMethod_getMagnetometerData<WithStreamedUnaryMethod_getAllSensorsData<WithStreamedUnaryMethod_isGyroscopeAvailable<WithStreamedUnaryMethod_isAccelerometerAvailable<WithStreamedUnaryMethod_isMagnetometerAvailable<Service > > > > > > > > > StreamedService;
};

}  // namespace grpcIIMU


#endif  // GRPC_grpcIIMUService_2eproto__INCLUDED
