// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIWorldGraphManagerService.proto
#ifndef GRPC_grpcIWorldGraphManagerService_2eproto__INCLUDED
#define GRPC_grpcIWorldGraphManagerService_2eproto__INCLUDED

#include "grpcIWorldGraphManagerService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIWorldGraphManager {

class grpcIWorldGraphManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIWorldGraphManager.grpcIWorldGraphManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>> AsyncgetRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>>(AsyncgetRelocalizationInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>> PrepareAsyncgetRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>>(PrepareAsyncgetRelocalizationInformationRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpcIWorldGraphManager::getWorldElementResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementResponse>> AsyncgetWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementResponse>>(AsyncgetWorldElementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementResponse>> PrepareAsyncgetWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementResponse>>(PrepareAsyncgetWorldElementRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpcIWorldGraphManager::getWorldElementsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementsResponse>> AsyncgetWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementsResponse>>(AsyncgetWorldElementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementsResponse>> PrepareAsyncgetWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementsResponse>>(PrepareAsyncgetWorldElementsRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>> AsyncgetWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>>(AsyncgetWorldElementByKeyValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>> PrepareAsyncgetWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>>(PrepareAsyncgetWorldElementByKeyValueRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>> AsyncgetWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>>(AsyncgetWorldElementByKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>> PrepareAsyncgetWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>>(PrepareAsyncgetWorldElementByKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status addTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpcIWorldGraphManager::addTrackableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addTrackableResponse>> AsyncaddTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addTrackableResponse>>(AsyncaddTrackableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addTrackableResponse>> PrepareAsyncaddTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addTrackableResponse>>(PrepareAsyncaddTrackableRaw(context, request, cq));
    }
    virtual ::grpc::Status getTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpcIWorldGraphManager::getTrackableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackableResponse>> AsyncgetTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackableResponse>>(AsyncgetTrackableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackableResponse>> PrepareAsyncgetTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackableResponse>>(PrepareAsyncgetTrackableRaw(context, request, cq));
    }
    virtual ::grpc::Status removeTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpcIWorldGraphManager::removeTrackableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeTrackableResponse>> AsyncremoveTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeTrackableResponse>>(AsyncremoveTrackableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeTrackableResponse>> PrepareAsyncremoveTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeTrackableResponse>>(PrepareAsyncremoveTrackableRaw(context, request, cq));
    }
    virtual ::grpc::Status getTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpcIWorldGraphManager::getTrackablesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackablesResponse>> AsyncgetTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackablesResponse>>(AsyncgetTrackablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackablesResponse>> PrepareAsyncgetTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackablesResponse>>(PrepareAsyncgetTrackablesRaw(context, request, cq));
    }
    virtual ::grpc::Status modifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpcIWorldGraphManager::modifyTrackableResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyTrackableResponse>> AsyncmodifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyTrackableResponse>>(AsyncmodifyTrackableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyTrackableResponse>> PrepareAsyncmodifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyTrackableResponse>>(PrepareAsyncmodifyTrackableRaw(context, request, cq));
    }
    virtual ::grpc::Status addWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldAnchorResponse>> AsyncaddWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldAnchorResponse>>(AsyncaddWorldAnchorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldAnchorResponse>> PrepareAsyncaddWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldAnchorResponse>>(PrepareAsyncaddWorldAnchorRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorResponse>> AsyncgetWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorResponse>>(AsyncgetWorldAnchorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorResponse>> PrepareAsyncgetWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorResponse>>(PrepareAsyncgetWorldAnchorRaw(context, request, cq));
    }
    virtual ::grpc::Status removeWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldAnchorResponse>> AsyncremoveWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldAnchorResponse>>(AsyncremoveWorldAnchorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldAnchorResponse>> PrepareAsyncremoveWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldAnchorResponse>>(PrepareAsyncremoveWorldAnchorRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorsResponse>> AsyncgetWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorsResponse>>(AsyncgetWorldAnchorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorsResponse>> PrepareAsyncgetWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorsResponse>>(PrepareAsyncgetWorldAnchorsRaw(context, request, cq));
    }
    virtual ::grpc::Status modifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>> AsyncmodifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>>(AsyncmodifyWorldAnchorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>> PrepareAsyncmodifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>>(PrepareAsyncmodifyWorldAnchorRaw(context, request, cq));
    }
    virtual ::grpc::Status addWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpcIWorldGraphManager::addWorldLinkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldLinkResponse>> AsyncaddWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldLinkResponse>>(AsyncaddWorldLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldLinkResponse>> PrepareAsyncaddWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldLinkResponse>>(PrepareAsyncaddWorldLinkRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>> AsyncgetWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>>(AsyncgetWorldLink_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>> PrepareAsyncgetWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>>(PrepareAsyncgetWorldLink_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status getWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>> AsyncgetWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>>(AsyncgetWorldLink_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>> PrepareAsyncgetWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>>(PrepareAsyncgetWorldLink_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status removeWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>> AsyncremoveWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>>(AsyncremoveWorldLink_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>> PrepareAsyncremoveWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>>(PrepareAsyncremoveWorldLink_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status removeWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>> AsyncremoveWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>>(AsyncremoveWorldLink_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>> PrepareAsyncremoveWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>>(PrepareAsyncremoveWorldLink_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status getWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpcIWorldGraphManager::getWorldLinksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLinksResponse>> AsyncgetWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLinksResponse>>(AsyncgetWorldLinksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLinksResponse>> PrepareAsyncgetWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLinksResponse>>(PrepareAsyncgetWorldLinksRaw(context, request, cq));
    }
    virtual ::grpc::Status modifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldLinkResponse>> AsyncmodifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldLinkResponse>>(AsyncmodifyWorldLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldLinkResponse>> PrepareAsyncmodifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldLinkResponse>>(PrepareAsyncmodifyWorldLinkRaw(context, request, cq));
    }
    virtual ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpcIWorldGraphManager::saveToFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    virtual ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpcIWorldGraphManager::loadFromFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpcIWorldGraphManager::deleteFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::deleteFileResponse>> AsyncdeleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::deleteFileResponse>>(AsyncdeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::deleteFileResponse>> PrepareAsyncdeleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::deleteFileResponse>>(PrepareAsyncdeleteFileRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void getRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpcIWorldGraphManager::getWorldElementResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpcIWorldGraphManager::getWorldElementResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpcIWorldGraphManager::getWorldElementsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpcIWorldGraphManager::getWorldElementsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void addTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpcIWorldGraphManager::addTrackableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpcIWorldGraphManager::addTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpcIWorldGraphManager::getTrackableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpcIWorldGraphManager::getTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void removeTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpcIWorldGraphManager::removeTrackableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void removeTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpcIWorldGraphManager::removeTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpcIWorldGraphManager::getTrackablesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpcIWorldGraphManager::getTrackablesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void modifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpcIWorldGraphManager::modifyTrackableResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void modifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpcIWorldGraphManager::modifyTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void addWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void removeWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void removeWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void modifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void modifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void addWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpcIWorldGraphManager::addWorldLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpcIWorldGraphManager::addWorldLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void removeWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void removeWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void removeWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void removeWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpcIWorldGraphManager::getWorldLinksResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpcIWorldGraphManager::getWorldLinksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void modifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void modifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpcIWorldGraphManager::saveToFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void saveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpcIWorldGraphManager::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpcIWorldGraphManager::loadFromFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpcIWorldGraphManager::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpcIWorldGraphManager::deleteFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpcIWorldGraphManager::deleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>* AsyncgetRelocalizationInformationRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>* PrepareAsyncgetRelocalizationInformationRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementResponse>* AsyncgetWorldElementRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementResponse>* PrepareAsyncgetWorldElementRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementsResponse>* AsyncgetWorldElementsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementsResponse>* PrepareAsyncgetWorldElementsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* AsyncgetWorldElementByKeyValueRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* PrepareAsyncgetWorldElementByKeyValueRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>* AsyncgetWorldElementByKeyRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>* PrepareAsyncgetWorldElementByKeyRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addTrackableResponse>* AsyncaddTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addTrackableResponse>* PrepareAsyncaddTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackableResponse>* AsyncgetTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackableResponse>* PrepareAsyncgetTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeTrackableResponse>* AsyncremoveTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeTrackableResponse>* PrepareAsyncremoveTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackablesResponse>* AsyncgetTrackablesRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getTrackablesResponse>* PrepareAsyncgetTrackablesRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyTrackableResponse>* AsyncmodifyTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyTrackableResponse>* PrepareAsyncmodifyTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldAnchorResponse>* AsyncaddWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldAnchorResponse>* PrepareAsyncaddWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorResponse>* AsyncgetWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorResponse>* PrepareAsyncgetWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldAnchorResponse>* AsyncremoveWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldAnchorResponse>* PrepareAsyncremoveWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorsResponse>* AsyncgetWorldAnchorsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldAnchorsResponse>* PrepareAsyncgetWorldAnchorsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>* AsyncmodifyWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>* PrepareAsyncmodifyWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldLinkResponse>* AsyncaddWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::addWorldLinkResponse>* PrepareAsyncaddWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>* AsyncgetWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>* PrepareAsyncgetWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>* AsyncgetWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>* PrepareAsyncgetWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* AsyncremoveWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* PrepareAsyncremoveWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* AsyncremoveWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* PrepareAsyncremoveWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLinksResponse>* AsyncgetWorldLinksRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::getWorldLinksResponse>* PrepareAsyncgetWorldLinksRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldLinkResponse>* AsyncmodifyWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::modifyWorldLinkResponse>* PrepareAsyncmodifyWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::deleteFileResponse>* AsyncdeleteFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIWorldGraphManager::deleteFileResponse>* PrepareAsyncdeleteFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>> AsyncgetRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>>(AsyncgetRelocalizationInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>> PrepareAsyncgetRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>>(PrepareAsyncgetRelocalizationInformationRaw(context, request, cq));
    }
    ::grpc::Status getWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpcIWorldGraphManager::getWorldElementResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementResponse>> AsyncgetWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementResponse>>(AsyncgetWorldElementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementResponse>> PrepareAsyncgetWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementResponse>>(PrepareAsyncgetWorldElementRaw(context, request, cq));
    }
    ::grpc::Status getWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpcIWorldGraphManager::getWorldElementsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementsResponse>> AsyncgetWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementsResponse>>(AsyncgetWorldElementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementsResponse>> PrepareAsyncgetWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementsResponse>>(PrepareAsyncgetWorldElementsRaw(context, request, cq));
    }
    ::grpc::Status getWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>> AsyncgetWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>>(AsyncgetWorldElementByKeyValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>> PrepareAsyncgetWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>>(PrepareAsyncgetWorldElementByKeyValueRaw(context, request, cq));
    }
    ::grpc::Status getWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>> AsyncgetWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>>(AsyncgetWorldElementByKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>> PrepareAsyncgetWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>>(PrepareAsyncgetWorldElementByKeyRaw(context, request, cq));
    }
    ::grpc::Status addTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpcIWorldGraphManager::addTrackableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addTrackableResponse>> AsyncaddTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addTrackableResponse>>(AsyncaddTrackableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addTrackableResponse>> PrepareAsyncaddTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addTrackableResponse>>(PrepareAsyncaddTrackableRaw(context, request, cq));
    }
    ::grpc::Status getTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpcIWorldGraphManager::getTrackableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackableResponse>> AsyncgetTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackableResponse>>(AsyncgetTrackableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackableResponse>> PrepareAsyncgetTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackableResponse>>(PrepareAsyncgetTrackableRaw(context, request, cq));
    }
    ::grpc::Status removeTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpcIWorldGraphManager::removeTrackableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeTrackableResponse>> AsyncremoveTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeTrackableResponse>>(AsyncremoveTrackableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeTrackableResponse>> PrepareAsyncremoveTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeTrackableResponse>>(PrepareAsyncremoveTrackableRaw(context, request, cq));
    }
    ::grpc::Status getTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpcIWorldGraphManager::getTrackablesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackablesResponse>> AsyncgetTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackablesResponse>>(AsyncgetTrackablesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackablesResponse>> PrepareAsyncgetTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackablesResponse>>(PrepareAsyncgetTrackablesRaw(context, request, cq));
    }
    ::grpc::Status modifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpcIWorldGraphManager::modifyTrackableResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyTrackableResponse>> AsyncmodifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyTrackableResponse>>(AsyncmodifyTrackableRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyTrackableResponse>> PrepareAsyncmodifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyTrackableResponse>>(PrepareAsyncmodifyTrackableRaw(context, request, cq));
    }
    ::grpc::Status addWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldAnchorResponse>> AsyncaddWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldAnchorResponse>>(AsyncaddWorldAnchorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldAnchorResponse>> PrepareAsyncaddWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldAnchorResponse>>(PrepareAsyncaddWorldAnchorRaw(context, request, cq));
    }
    ::grpc::Status getWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorResponse>> AsyncgetWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorResponse>>(AsyncgetWorldAnchorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorResponse>> PrepareAsyncgetWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorResponse>>(PrepareAsyncgetWorldAnchorRaw(context, request, cq));
    }
    ::grpc::Status removeWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldAnchorResponse>> AsyncremoveWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldAnchorResponse>>(AsyncremoveWorldAnchorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldAnchorResponse>> PrepareAsyncremoveWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldAnchorResponse>>(PrepareAsyncremoveWorldAnchorRaw(context, request, cq));
    }
    ::grpc::Status getWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorsResponse>> AsyncgetWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorsResponse>>(AsyncgetWorldAnchorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorsResponse>> PrepareAsyncgetWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorsResponse>>(PrepareAsyncgetWorldAnchorsRaw(context, request, cq));
    }
    ::grpc::Status modifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>> AsyncmodifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>>(AsyncmodifyWorldAnchorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>> PrepareAsyncmodifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>>(PrepareAsyncmodifyWorldAnchorRaw(context, request, cq));
    }
    ::grpc::Status addWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpcIWorldGraphManager::addWorldLinkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldLinkResponse>> AsyncaddWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldLinkResponse>>(AsyncaddWorldLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldLinkResponse>> PrepareAsyncaddWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldLinkResponse>>(PrepareAsyncaddWorldLinkRaw(context, request, cq));
    }
    ::grpc::Status getWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>> AsyncgetWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>>(AsyncgetWorldLink_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>> PrepareAsyncgetWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>>(PrepareAsyncgetWorldLink_grpc0Raw(context, request, cq));
    }
    ::grpc::Status getWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>> AsyncgetWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>>(AsyncgetWorldLink_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>> PrepareAsyncgetWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>>(PrepareAsyncgetWorldLink_grpc1Raw(context, request, cq));
    }
    ::grpc::Status removeWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>> AsyncremoveWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>>(AsyncremoveWorldLink_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>> PrepareAsyncremoveWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>>(PrepareAsyncremoveWorldLink_grpc0Raw(context, request, cq));
    }
    ::grpc::Status removeWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>> AsyncremoveWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>>(AsyncremoveWorldLink_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>> PrepareAsyncremoveWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>>(PrepareAsyncremoveWorldLink_grpc1Raw(context, request, cq));
    }
    ::grpc::Status getWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpcIWorldGraphManager::getWorldLinksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLinksResponse>> AsyncgetWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLinksResponse>>(AsyncgetWorldLinksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLinksResponse>> PrepareAsyncgetWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLinksResponse>>(PrepareAsyncgetWorldLinksRaw(context, request, cq));
    }
    ::grpc::Status modifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldLinkResponse>> AsyncmodifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldLinkResponse>>(AsyncmodifyWorldLinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldLinkResponse>> PrepareAsyncmodifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldLinkResponse>>(PrepareAsyncmodifyWorldLinkRaw(context, request, cq));
    }
    ::grpc::Status saveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpcIWorldGraphManager::saveToFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::saveToFileResponse>> AsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::saveToFileResponse>>(AsyncsaveToFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::saveToFileResponse>> PrepareAsyncsaveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::saveToFileResponse>>(PrepareAsyncsaveToFileRaw(context, request, cq));
    }
    ::grpc::Status loadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpcIWorldGraphManager::loadFromFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::loadFromFileResponse>> AsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::loadFromFileResponse>>(AsyncloadFromFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::loadFromFileResponse>> PrepareAsyncloadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::loadFromFileResponse>>(PrepareAsyncloadFromFileRaw(context, request, cq));
    }
    ::grpc::Status deleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpcIWorldGraphManager::deleteFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::deleteFileResponse>> AsyncdeleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::deleteFileResponse>>(AsyncdeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::deleteFileResponse>> PrepareAsyncdeleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::deleteFileResponse>>(PrepareAsyncdeleteFileRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void getRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response, std::function<void(::grpc::Status)>) override;
      void getRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpcIWorldGraphManager::getWorldElementResponse* response, std::function<void(::grpc::Status)>) override;
      void getWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpcIWorldGraphManager::getWorldElementResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpcIWorldGraphManager::getWorldElementsResponse* response, std::function<void(::grpc::Status)>) override;
      void getWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpcIWorldGraphManager::getWorldElementsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response, std::function<void(::grpc::Status)>) override;
      void getWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void getWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpcIWorldGraphManager::addTrackableResponse* response, std::function<void(::grpc::Status)>) override;
      void addTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpcIWorldGraphManager::addTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpcIWorldGraphManager::getTrackableResponse* response, std::function<void(::grpc::Status)>) override;
      void getTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpcIWorldGraphManager::getTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void removeTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpcIWorldGraphManager::removeTrackableResponse* response, std::function<void(::grpc::Status)>) override;
      void removeTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpcIWorldGraphManager::removeTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpcIWorldGraphManager::getTrackablesResponse* response, std::function<void(::grpc::Status)>) override;
      void getTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpcIWorldGraphManager::getTrackablesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void modifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpcIWorldGraphManager::modifyTrackableResponse* response, std::function<void(::grpc::Status)>) override;
      void modifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpcIWorldGraphManager::modifyTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response, std::function<void(::grpc::Status)>) override;
      void addWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response, std::function<void(::grpc::Status)>) override;
      void getWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void removeWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response, std::function<void(::grpc::Status)>) override;
      void removeWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response, std::function<void(::grpc::Status)>) override;
      void getWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void modifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response, std::function<void(::grpc::Status)>) override;
      void modifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpcIWorldGraphManager::addWorldLinkResponse* response, std::function<void(::grpc::Status)>) override;
      void addWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpcIWorldGraphManager::addWorldLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void getWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void getWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void removeWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void removeWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void removeWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void removeWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpcIWorldGraphManager::getWorldLinksResponse* response, std::function<void(::grpc::Status)>) override;
      void getWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpcIWorldGraphManager::getWorldLinksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void modifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response, std::function<void(::grpc::Status)>) override;
      void modifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void saveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpcIWorldGraphManager::saveToFileResponse* response, std::function<void(::grpc::Status)>) override;
      void saveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpcIWorldGraphManager::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpcIWorldGraphManager::loadFromFileResponse* response, std::function<void(::grpc::Status)>) override;
      void loadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpcIWorldGraphManager::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpcIWorldGraphManager::deleteFileResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpcIWorldGraphManager::deleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>* AsyncgetRelocalizationInformationRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>* PrepareAsyncgetRelocalizationInformationRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementResponse>* AsyncgetWorldElementRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementResponse>* PrepareAsyncgetWorldElementRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementsResponse>* AsyncgetWorldElementsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementsResponse>* PrepareAsyncgetWorldElementsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* AsyncgetWorldElementByKeyValueRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* PrepareAsyncgetWorldElementByKeyValueRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>* AsyncgetWorldElementByKeyRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>* PrepareAsyncgetWorldElementByKeyRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addTrackableResponse>* AsyncaddTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addTrackableResponse>* PrepareAsyncaddTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackableResponse>* AsyncgetTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackableResponse>* PrepareAsyncgetTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeTrackableResponse>* AsyncremoveTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeTrackableResponse>* PrepareAsyncremoveTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackablesResponse>* AsyncgetTrackablesRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackablesResponse>* PrepareAsyncgetTrackablesRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyTrackableResponse>* AsyncmodifyTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyTrackableResponse>* PrepareAsyncmodifyTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldAnchorResponse>* AsyncaddWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldAnchorResponse>* PrepareAsyncaddWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorResponse>* AsyncgetWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorResponse>* PrepareAsyncgetWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldAnchorResponse>* AsyncremoveWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldAnchorResponse>* PrepareAsyncremoveWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorsResponse>* AsyncgetWorldAnchorsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorsResponse>* PrepareAsyncgetWorldAnchorsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>* AsyncmodifyWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>* PrepareAsyncmodifyWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldLinkResponse>* AsyncaddWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldLinkResponse>* PrepareAsyncaddWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>* AsyncgetWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>* PrepareAsyncgetWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>* AsyncgetWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>* PrepareAsyncgetWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* AsyncremoveWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* PrepareAsyncremoveWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* AsyncremoveWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* PrepareAsyncremoveWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLinksResponse>* AsyncgetWorldLinksRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLinksResponse>* PrepareAsyncgetWorldLinksRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldLinkResponse>* AsyncmodifyWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldLinkResponse>* PrepareAsyncmodifyWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::saveToFileResponse>* AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::saveToFileResponse>* PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::loadFromFileResponse>* AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::loadFromFileResponse>* PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::deleteFileResponse>* AsyncdeleteFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::deleteFileResponse>* PrepareAsyncdeleteFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getRelocalizationInformation_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldElement_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldElements_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldElementByKeyValue_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldElementByKey_;
    const ::grpc::internal::RpcMethod rpcmethod_addTrackable_;
    const ::grpc::internal::RpcMethod rpcmethod_getTrackable_;
    const ::grpc::internal::RpcMethod rpcmethod_removeTrackable_;
    const ::grpc::internal::RpcMethod rpcmethod_getTrackables_;
    const ::grpc::internal::RpcMethod rpcmethod_modifyTrackable_;
    const ::grpc::internal::RpcMethod rpcmethod_addWorldAnchor_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldAnchor_;
    const ::grpc::internal::RpcMethod rpcmethod_removeWorldAnchor_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldAnchors_;
    const ::grpc::internal::RpcMethod rpcmethod_modifyWorldAnchor_;
    const ::grpc::internal::RpcMethod rpcmethod_addWorldLink_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldLink_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldLink_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_removeWorldLink_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_removeWorldLink_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldLinks_;
    const ::grpc::internal::RpcMethod rpcmethod_modifyWorldLink_;
    const ::grpc::internal::RpcMethod rpcmethod_saveToFile_;
    const ::grpc::internal::RpcMethod rpcmethod_loadFromFile_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getRelocalizationInformation(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response);
    virtual ::grpc::Status getWorldElement(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpcIWorldGraphManager::getWorldElementResponse* response);
    virtual ::grpc::Status getWorldElements(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpcIWorldGraphManager::getWorldElementsResponse* response);
    virtual ::grpc::Status getWorldElementByKeyValue(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response);
    virtual ::grpc::Status getWorldElementByKey(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response);
    virtual ::grpc::Status addTrackable(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpcIWorldGraphManager::addTrackableResponse* response);
    virtual ::grpc::Status getTrackable(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpcIWorldGraphManager::getTrackableResponse* response);
    virtual ::grpc::Status removeTrackable(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpcIWorldGraphManager::removeTrackableResponse* response);
    virtual ::grpc::Status getTrackables(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpcIWorldGraphManager::getTrackablesResponse* response);
    virtual ::grpc::Status modifyTrackable(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpcIWorldGraphManager::modifyTrackableResponse* response);
    virtual ::grpc::Status addWorldAnchor(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response);
    virtual ::grpc::Status getWorldAnchor(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response);
    virtual ::grpc::Status removeWorldAnchor(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response);
    virtual ::grpc::Status getWorldAnchors(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response);
    virtual ::grpc::Status modifyWorldAnchor(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response);
    virtual ::grpc::Status addWorldLink(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpcIWorldGraphManager::addWorldLinkResponse* response);
    virtual ::grpc::Status getWorldLink_grpc0(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response);
    virtual ::grpc::Status getWorldLink_grpc1(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response);
    virtual ::grpc::Status removeWorldLink_grpc0(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response);
    virtual ::grpc::Status removeWorldLink_grpc1(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response);
    virtual ::grpc::Status getWorldLinks(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpcIWorldGraphManager::getWorldLinksResponse* response);
    virtual ::grpc::Status modifyWorldLink(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response);
    virtual ::grpc::Status saveToFile(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpcIWorldGraphManager::saveToFileResponse* response);
    virtual ::grpc::Status loadFromFile(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpcIWorldGraphManager::loadFromFileResponse* response);
    virtual ::grpc::Status deleteFile(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpcIWorldGraphManager::deleteFileResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getRelocalizationInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getRelocalizationInformation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getRelocalizationInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRelocalizationInformation(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* /*request*/, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRelocalizationInformation(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldElement() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getWorldElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElement(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldElement(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getWorldElementResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldElements() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getWorldElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElements(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldElements(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getWorldElementsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldElementByKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldElementByKeyValue() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getWorldElementByKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKeyValue(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldElementByKeyValue(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldElementByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldElementByKey() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getWorldElementByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKey(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldElementByKey(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addTrackable() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_addTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addTrackableRequest* /*request*/, ::grpcIWorldGraphManager::addTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddTrackable(::grpc::ServerContext* context, ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::addTrackableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getTrackable() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackableRequest* /*request*/, ::grpcIWorldGraphManager::getTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTrackable(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getTrackableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_removeTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_removeTrackable() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_removeTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeTrackableRequest* /*request*/, ::grpcIWorldGraphManager::removeTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveTrackable(::grpc::ServerContext* context, ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::removeTrackableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getTrackables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getTrackables() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getTrackables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackables(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackablesRequest* /*request*/, ::grpcIWorldGraphManager::getTrackablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTrackables(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getTrackablesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_modifyTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_modifyTrackable() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_modifyTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyTrackableRequest* /*request*/, ::grpcIWorldGraphManager::modifyTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmodifyTrackable(::grpc::ServerContext* context, ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::modifyTrackableResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addWorldAnchor() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_addWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::addWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddWorldAnchor(::grpc::ServerContext* context, ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::addWorldAnchorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldAnchor() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldAnchor(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getWorldAnchorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_removeWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_removeWorldAnchor() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_removeWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::removeWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveWorldAnchor(::grpc::ServerContext* context, ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::removeWorldAnchorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldAnchors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldAnchors() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_getWorldAnchors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchors(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldAnchors(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getWorldAnchorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_modifyWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_modifyWorldAnchor() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_modifyWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmodifyWorldAnchor(::grpc::ServerContext* context, ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addWorldLink() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_addWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::addWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddWorldLink(::grpc::ServerContext* context, ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::addWorldLinkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldLink_grpc0() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_getWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldLink_grpc0(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldLink_grpc1() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_getWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldLink_grpc1(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_removeWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_removeWorldLink_grpc0() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_removeWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveWorldLink_grpc0(::grpc::ServerContext* context, ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_removeWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_removeWorldLink_grpc1() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_removeWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveWorldLink_grpc1(::grpc::ServerContext* context, ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldLinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldLinks() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_getWorldLinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLinks(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLinksRequest* /*request*/, ::grpcIWorldGraphManager::getWorldLinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldLinks(::grpc::ServerContext* context, ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::getWorldLinksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_modifyWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_modifyWorldLink() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_modifyWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmodifyWorldLink(::grpc::ServerContext* context, ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::modifyWorldLinkResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_saveToFile() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::saveToFileRequest* /*request*/, ::grpcIWorldGraphManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::saveToFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadFromFile() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::loadFromFileRequest* /*request*/, ::grpcIWorldGraphManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::loadFromFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteFile() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::deleteFileRequest* /*request*/, ::grpcIWorldGraphManager::deleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteFile(::grpc::ServerContext* context, ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIWorldGraphManager::deleteFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getRelocalizationInformation<WithAsyncMethod_getWorldElement<WithAsyncMethod_getWorldElements<WithAsyncMethod_getWorldElementByKeyValue<WithAsyncMethod_getWorldElementByKey<WithAsyncMethod_addTrackable<WithAsyncMethod_getTrackable<WithAsyncMethod_removeTrackable<WithAsyncMethod_getTrackables<WithAsyncMethod_modifyTrackable<WithAsyncMethod_addWorldAnchor<WithAsyncMethod_getWorldAnchor<WithAsyncMethod_removeWorldAnchor<WithAsyncMethod_getWorldAnchors<WithAsyncMethod_modifyWorldAnchor<WithAsyncMethod_addWorldLink<WithAsyncMethod_getWorldLink_grpc0<WithAsyncMethod_getWorldLink_grpc1<WithAsyncMethod_removeWorldLink_grpc0<WithAsyncMethod_removeWorldLink_grpc1<WithAsyncMethod_getWorldLinks<WithAsyncMethod_modifyWorldLink<WithAsyncMethod_saveToFile<WithAsyncMethod_loadFromFile<WithAsyncMethod_deleteFile<Service > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_getRelocalizationInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getRelocalizationInformation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getRelocalizationInformationRequest, ::grpcIWorldGraphManager::getRelocalizationInformationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response) { return this->getRelocalizationInformation(context, request, response); }));}
    void SetMessageAllocatorFor_getRelocalizationInformation(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getRelocalizationInformationRequest, ::grpcIWorldGraphManager::getRelocalizationInformationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getRelocalizationInformationRequest, ::grpcIWorldGraphManager::getRelocalizationInformationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getRelocalizationInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRelocalizationInformation(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* /*request*/, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRelocalizationInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* /*request*/, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorldElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorldElement() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldElementRequest, ::grpcIWorldGraphManager::getWorldElementResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpcIWorldGraphManager::getWorldElementResponse* response) { return this->getWorldElement(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldElement(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getWorldElementRequest, ::grpcIWorldGraphManager::getWorldElementResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldElementRequest, ::grpcIWorldGraphManager::getWorldElementResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorldElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElement(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldElement(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorldElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorldElements() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldElementsRequest, ::grpcIWorldGraphManager::getWorldElementsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpcIWorldGraphManager::getWorldElementsResponse* response) { return this->getWorldElements(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldElements(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getWorldElementsRequest, ::grpcIWorldGraphManager::getWorldElementsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldElementsRequest, ::grpcIWorldGraphManager::getWorldElementsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorldElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElements(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldElements(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorldElementByKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorldElementByKeyValue() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response) { return this->getWorldElementByKeyValue(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldElementByKeyValue(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorldElementByKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKeyValue(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldElementByKeyValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorldElementByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorldElementByKey() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldElementByKeyRequest, ::grpcIWorldGraphManager::getWorldElementByKeyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response) { return this->getWorldElementByKey(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldElementByKey(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getWorldElementByKeyRequest, ::grpcIWorldGraphManager::getWorldElementByKeyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldElementByKeyRequest, ::grpcIWorldGraphManager::getWorldElementByKeyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorldElementByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKey(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldElementByKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addTrackable() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::addTrackableRequest, ::grpcIWorldGraphManager::addTrackableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpcIWorldGraphManager::addTrackableResponse* response) { return this->addTrackable(context, request, response); }));}
    void SetMessageAllocatorFor_addTrackable(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::addTrackableRequest, ::grpcIWorldGraphManager::addTrackableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::addTrackableRequest, ::grpcIWorldGraphManager::addTrackableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addTrackableRequest* /*request*/, ::grpcIWorldGraphManager::addTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addTrackable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::addTrackableRequest* /*request*/, ::grpcIWorldGraphManager::addTrackableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getTrackable() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getTrackableRequest, ::grpcIWorldGraphManager::getTrackableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpcIWorldGraphManager::getTrackableResponse* response) { return this->getTrackable(context, request, response); }));}
    void SetMessageAllocatorFor_getTrackable(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getTrackableRequest, ::grpcIWorldGraphManager::getTrackableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getTrackableRequest, ::grpcIWorldGraphManager::getTrackableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackableRequest* /*request*/, ::grpcIWorldGraphManager::getTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTrackable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackableRequest* /*request*/, ::grpcIWorldGraphManager::getTrackableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_removeTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_removeTrackable() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::removeTrackableRequest, ::grpcIWorldGraphManager::removeTrackableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpcIWorldGraphManager::removeTrackableResponse* response) { return this->removeTrackable(context, request, response); }));}
    void SetMessageAllocatorFor_removeTrackable(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::removeTrackableRequest, ::grpcIWorldGraphManager::removeTrackableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::removeTrackableRequest, ::grpcIWorldGraphManager::removeTrackableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_removeTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeTrackableRequest* /*request*/, ::grpcIWorldGraphManager::removeTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeTrackable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::removeTrackableRequest* /*request*/, ::grpcIWorldGraphManager::removeTrackableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getTrackables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getTrackables() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getTrackablesRequest, ::grpcIWorldGraphManager::getTrackablesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpcIWorldGraphManager::getTrackablesResponse* response) { return this->getTrackables(context, request, response); }));}
    void SetMessageAllocatorFor_getTrackables(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getTrackablesRequest, ::grpcIWorldGraphManager::getTrackablesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getTrackablesRequest, ::grpcIWorldGraphManager::getTrackablesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getTrackables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackables(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackablesRequest* /*request*/, ::grpcIWorldGraphManager::getTrackablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTrackables(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackablesRequest* /*request*/, ::grpcIWorldGraphManager::getTrackablesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_modifyTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_modifyTrackable() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::modifyTrackableRequest, ::grpcIWorldGraphManager::modifyTrackableResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpcIWorldGraphManager::modifyTrackableResponse* response) { return this->modifyTrackable(context, request, response); }));}
    void SetMessageAllocatorFor_modifyTrackable(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::modifyTrackableRequest, ::grpcIWorldGraphManager::modifyTrackableResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::modifyTrackableRequest, ::grpcIWorldGraphManager::modifyTrackableResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_modifyTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyTrackableRequest* /*request*/, ::grpcIWorldGraphManager::modifyTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* modifyTrackable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyTrackableRequest* /*request*/, ::grpcIWorldGraphManager::modifyTrackableResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addWorldAnchor() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::addWorldAnchorRequest, ::grpcIWorldGraphManager::addWorldAnchorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response) { return this->addWorldAnchor(context, request, response); }));}
    void SetMessageAllocatorFor_addWorldAnchor(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::addWorldAnchorRequest, ::grpcIWorldGraphManager::addWorldAnchorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::addWorldAnchorRequest, ::grpcIWorldGraphManager::addWorldAnchorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::addWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addWorldAnchor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::addWorldAnchorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorldAnchor() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldAnchorRequest, ::grpcIWorldGraphManager::getWorldAnchorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response) { return this->getWorldAnchor(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldAnchor(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getWorldAnchorRequest, ::grpcIWorldGraphManager::getWorldAnchorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldAnchorRequest, ::grpcIWorldGraphManager::getWorldAnchorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldAnchor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_removeWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_removeWorldAnchor() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::removeWorldAnchorRequest, ::grpcIWorldGraphManager::removeWorldAnchorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response) { return this->removeWorldAnchor(context, request, response); }));}
    void SetMessageAllocatorFor_removeWorldAnchor(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::removeWorldAnchorRequest, ::grpcIWorldGraphManager::removeWorldAnchorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::removeWorldAnchorRequest, ::grpcIWorldGraphManager::removeWorldAnchorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_removeWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::removeWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeWorldAnchor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::removeWorldAnchorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorldAnchors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorldAnchors() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldAnchorsRequest, ::grpcIWorldGraphManager::getWorldAnchorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response) { return this->getWorldAnchors(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldAnchors(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getWorldAnchorsRequest, ::grpcIWorldGraphManager::getWorldAnchorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldAnchorsRequest, ::grpcIWorldGraphManager::getWorldAnchorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorldAnchors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchors(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldAnchors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_modifyWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_modifyWorldAnchor() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::modifyWorldAnchorRequest, ::grpcIWorldGraphManager::modifyWorldAnchorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response) { return this->modifyWorldAnchor(context, request, response); }));}
    void SetMessageAllocatorFor_modifyWorldAnchor(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::modifyWorldAnchorRequest, ::grpcIWorldGraphManager::modifyWorldAnchorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::modifyWorldAnchorRequest, ::grpcIWorldGraphManager::modifyWorldAnchorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_modifyWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* modifyWorldAnchor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addWorldLink() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::addWorldLinkRequest, ::grpcIWorldGraphManager::addWorldLinkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpcIWorldGraphManager::addWorldLinkResponse* response) { return this->addWorldLink(context, request, response); }));}
    void SetMessageAllocatorFor_addWorldLink(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::addWorldLinkRequest, ::grpcIWorldGraphManager::addWorldLinkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::addWorldLinkRequest, ::grpcIWorldGraphManager::addWorldLinkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::addWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addWorldLink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::addWorldLinkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorldLink_grpc0() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldLink_grpc0Request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response) { return this->getWorldLink_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldLink_grpc0(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getWorldLink_grpc0Request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldLink_grpc0Request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldLink_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorldLink_grpc1() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldLink_grpc1Request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response) { return this->getWorldLink_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldLink_grpc1(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getWorldLink_grpc1Request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldLink_grpc1Request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldLink_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_removeWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_removeWorldLink_grpc0() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::removeWorldLink_grpc0Request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response) { return this->removeWorldLink_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_removeWorldLink_grpc0(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::removeWorldLink_grpc0Request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::removeWorldLink_grpc0Request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_removeWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeWorldLink_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_removeWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_removeWorldLink_grpc1() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::removeWorldLink_grpc1Request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response) { return this->removeWorldLink_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_removeWorldLink_grpc1(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::removeWorldLink_grpc1Request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::removeWorldLink_grpc1Request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_removeWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeWorldLink_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getWorldLinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getWorldLinks() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldLinksRequest, ::grpcIWorldGraphManager::getWorldLinksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpcIWorldGraphManager::getWorldLinksResponse* response) { return this->getWorldLinks(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldLinks(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::getWorldLinksRequest, ::grpcIWorldGraphManager::getWorldLinksResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::getWorldLinksRequest, ::grpcIWorldGraphManager::getWorldLinksResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getWorldLinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLinks(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLinksRequest* /*request*/, ::grpcIWorldGraphManager::getWorldLinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldLinks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLinksRequest* /*request*/, ::grpcIWorldGraphManager::getWorldLinksResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_modifyWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_modifyWorldLink() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::modifyWorldLinkRequest, ::grpcIWorldGraphManager::modifyWorldLinkResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response) { return this->modifyWorldLink(context, request, response); }));}
    void SetMessageAllocatorFor_modifyWorldLink(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::modifyWorldLinkRequest, ::grpcIWorldGraphManager::modifyWorldLinkResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::modifyWorldLinkRequest, ::grpcIWorldGraphManager::modifyWorldLinkResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_modifyWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* modifyWorldLink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldLinkResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_saveToFile() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::saveToFileRequest, ::grpcIWorldGraphManager::saveToFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpcIWorldGraphManager::saveToFileResponse* response) { return this->saveToFile(context, request, response); }));}
    void SetMessageAllocatorFor_saveToFile(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::saveToFileRequest, ::grpcIWorldGraphManager::saveToFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::saveToFileRequest, ::grpcIWorldGraphManager::saveToFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::saveToFileRequest* /*request*/, ::grpcIWorldGraphManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::saveToFileRequest* /*request*/, ::grpcIWorldGraphManager::saveToFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadFromFile() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::loadFromFileRequest, ::grpcIWorldGraphManager::loadFromFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpcIWorldGraphManager::loadFromFileResponse* response) { return this->loadFromFile(context, request, response); }));}
    void SetMessageAllocatorFor_loadFromFile(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::loadFromFileRequest, ::grpcIWorldGraphManager::loadFromFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::loadFromFileRequest, ::grpcIWorldGraphManager::loadFromFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::loadFromFileRequest* /*request*/, ::grpcIWorldGraphManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::loadFromFileRequest* /*request*/, ::grpcIWorldGraphManager::loadFromFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteFile() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::deleteFileRequest, ::grpcIWorldGraphManager::deleteFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpcIWorldGraphManager::deleteFileResponse* response) { return this->deleteFile(context, request, response); }));}
    void SetMessageAllocatorFor_deleteFile(
        ::grpc::MessageAllocator< ::grpcIWorldGraphManager::deleteFileRequest, ::grpcIWorldGraphManager::deleteFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIWorldGraphManager::deleteFileRequest, ::grpcIWorldGraphManager::deleteFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::deleteFileRequest* /*request*/, ::grpcIWorldGraphManager::deleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIWorldGraphManager::deleteFileRequest* /*request*/, ::grpcIWorldGraphManager::deleteFileResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_getRelocalizationInformation<WithCallbackMethod_getWorldElement<WithCallbackMethod_getWorldElements<WithCallbackMethod_getWorldElementByKeyValue<WithCallbackMethod_getWorldElementByKey<WithCallbackMethod_addTrackable<WithCallbackMethod_getTrackable<WithCallbackMethod_removeTrackable<WithCallbackMethod_getTrackables<WithCallbackMethod_modifyTrackable<WithCallbackMethod_addWorldAnchor<WithCallbackMethod_getWorldAnchor<WithCallbackMethod_removeWorldAnchor<WithCallbackMethod_getWorldAnchors<WithCallbackMethod_modifyWorldAnchor<WithCallbackMethod_addWorldLink<WithCallbackMethod_getWorldLink_grpc0<WithCallbackMethod_getWorldLink_grpc1<WithCallbackMethod_removeWorldLink_grpc0<WithCallbackMethod_removeWorldLink_grpc1<WithCallbackMethod_getWorldLinks<WithCallbackMethod_modifyWorldLink<WithCallbackMethod_saveToFile<WithCallbackMethod_loadFromFile<WithCallbackMethod_deleteFile<Service > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getRelocalizationInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getRelocalizationInformation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getRelocalizationInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRelocalizationInformation(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* /*request*/, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldElement() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getWorldElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElement(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldElements() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getWorldElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElements(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldElementByKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldElementByKeyValue() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getWorldElementByKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKeyValue(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldElementByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldElementByKey() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getWorldElementByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKey(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addTrackable() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_addTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addTrackableRequest* /*request*/, ::grpcIWorldGraphManager::addTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getTrackable() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackableRequest* /*request*/, ::grpcIWorldGraphManager::getTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_removeTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_removeTrackable() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_removeTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeTrackableRequest* /*request*/, ::grpcIWorldGraphManager::removeTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getTrackables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getTrackables() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getTrackables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackables(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackablesRequest* /*request*/, ::grpcIWorldGraphManager::getTrackablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_modifyTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_modifyTrackable() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_modifyTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyTrackableRequest* /*request*/, ::grpcIWorldGraphManager::modifyTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addWorldAnchor() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_addWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::addWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldAnchor() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_removeWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_removeWorldAnchor() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_removeWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::removeWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldAnchors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldAnchors() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_getWorldAnchors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchors(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_modifyWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_modifyWorldAnchor() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_modifyWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addWorldLink() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_addWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::addWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldLink_grpc0() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_getWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldLink_grpc1() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_getWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_removeWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_removeWorldLink_grpc0() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_removeWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_removeWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_removeWorldLink_grpc1() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_removeWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldLinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldLinks() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_getWorldLinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLinks(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLinksRequest* /*request*/, ::grpcIWorldGraphManager::getWorldLinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_modifyWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_modifyWorldLink() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_modifyWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_saveToFile() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::saveToFileRequest* /*request*/, ::grpcIWorldGraphManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadFromFile() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::loadFromFileRequest* /*request*/, ::grpcIWorldGraphManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteFile() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::deleteFileRequest* /*request*/, ::grpcIWorldGraphManager::deleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getRelocalizationInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getRelocalizationInformation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getRelocalizationInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRelocalizationInformation(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* /*request*/, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetRelocalizationInformation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldElement() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getWorldElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElement(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldElement(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldElements() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getWorldElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElements(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldElements(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldElementByKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldElementByKeyValue() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getWorldElementByKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKeyValue(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldElementByKeyValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldElementByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldElementByKey() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getWorldElementByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKey(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldElementByKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addTrackable() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_addTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addTrackableRequest* /*request*/, ::grpcIWorldGraphManager::addTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddTrackable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getTrackable() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackableRequest* /*request*/, ::grpcIWorldGraphManager::getTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTrackable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_removeTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_removeTrackable() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_removeTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeTrackableRequest* /*request*/, ::grpcIWorldGraphManager::removeTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveTrackable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getTrackables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getTrackables() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getTrackables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackables(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackablesRequest* /*request*/, ::grpcIWorldGraphManager::getTrackablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetTrackables(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_modifyTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_modifyTrackable() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_modifyTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyTrackableRequest* /*request*/, ::grpcIWorldGraphManager::modifyTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmodifyTrackable(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addWorldAnchor() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_addWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::addWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddWorldAnchor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldAnchor() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_getWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldAnchor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_removeWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_removeWorldAnchor() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_removeWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::removeWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveWorldAnchor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldAnchors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldAnchors() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_getWorldAnchors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchors(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldAnchors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_modifyWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_modifyWorldAnchor() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_modifyWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmodifyWorldAnchor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addWorldLink() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_addWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::addWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddWorldLink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldLink_grpc0() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_getWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldLink_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldLink_grpc1() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_getWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldLink_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_removeWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_removeWorldLink_grpc0() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_removeWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveWorldLink_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_removeWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_removeWorldLink_grpc1() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_removeWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveWorldLink_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldLinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldLinks() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_getWorldLinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLinks(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLinksRequest* /*request*/, ::grpcIWorldGraphManager::getWorldLinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldLinks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_modifyWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_modifyWorldLink() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_modifyWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmodifyWorldLink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_saveToFile() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::saveToFileRequest* /*request*/, ::grpcIWorldGraphManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsaveToFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadFromFile() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::loadFromFileRequest* /*request*/, ::grpcIWorldGraphManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadFromFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteFile() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::deleteFileRequest* /*request*/, ::grpcIWorldGraphManager::deleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getRelocalizationInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getRelocalizationInformation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getRelocalizationInformation(context, request, response); }));
    }
    ~WithRawCallbackMethod_getRelocalizationInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getRelocalizationInformation(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* /*request*/, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getRelocalizationInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorldElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorldElement() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldElement(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorldElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElement(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldElement(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorldElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorldElements() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldElements(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorldElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElements(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldElements(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorldElementByKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorldElementByKeyValue() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldElementByKeyValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorldElementByKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKeyValue(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldElementByKeyValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorldElementByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorldElementByKey() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldElementByKey(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorldElementByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldElementByKey(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldElementByKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addTrackable() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addTrackable(context, request, response); }));
    }
    ~WithRawCallbackMethod_addTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addTrackableRequest* /*request*/, ::grpcIWorldGraphManager::addTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addTrackable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getTrackable() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getTrackable(context, request, response); }));
    }
    ~WithRawCallbackMethod_getTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackableRequest* /*request*/, ::grpcIWorldGraphManager::getTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTrackable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_removeTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_removeTrackable() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->removeTrackable(context, request, response); }));
    }
    ~WithRawCallbackMethod_removeTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeTrackableRequest* /*request*/, ::grpcIWorldGraphManager::removeTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeTrackable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getTrackables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getTrackables() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getTrackables(context, request, response); }));
    }
    ~WithRawCallbackMethod_getTrackables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getTrackables(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackablesRequest* /*request*/, ::grpcIWorldGraphManager::getTrackablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getTrackables(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_modifyTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_modifyTrackable() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->modifyTrackable(context, request, response); }));
    }
    ~WithRawCallbackMethod_modifyTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyTrackableRequest* /*request*/, ::grpcIWorldGraphManager::modifyTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* modifyTrackable(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addWorldAnchor() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addWorldAnchor(context, request, response); }));
    }
    ~WithRawCallbackMethod_addWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::addWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addWorldAnchor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorldAnchor() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldAnchor(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldAnchor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_removeWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_removeWorldAnchor() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->removeWorldAnchor(context, request, response); }));
    }
    ~WithRawCallbackMethod_removeWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::removeWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeWorldAnchor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorldAnchors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorldAnchors() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldAnchors(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorldAnchors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldAnchors(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldAnchors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_modifyWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_modifyWorldAnchor() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->modifyWorldAnchor(context, request, response); }));
    }
    ~WithRawCallbackMethod_modifyWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* modifyWorldAnchor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addWorldLink() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addWorldLink(context, request, response); }));
    }
    ~WithRawCallbackMethod_addWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::addWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addWorldLink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorldLink_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldLink_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldLink_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorldLink_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldLink_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldLink_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_removeWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_removeWorldLink_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->removeWorldLink_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_removeWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeWorldLink_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_removeWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_removeWorldLink_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->removeWorldLink_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_removeWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* removeWorldLink_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getWorldLinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getWorldLinks() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldLinks(context, request, response); }));
    }
    ~WithRawCallbackMethod_getWorldLinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldLinks(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLinksRequest* /*request*/, ::grpcIWorldGraphManager::getWorldLinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getWorldLinks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_modifyWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_modifyWorldLink() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->modifyWorldLink(context, request, response); }));
    }
    ~WithRawCallbackMethod_modifyWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status modifyWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* modifyWorldLink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_saveToFile() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->saveToFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::saveToFileRequest* /*request*/, ::grpcIWorldGraphManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* saveToFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadFromFile() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadFromFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::loadFromFileRequest* /*request*/, ::grpcIWorldGraphManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadFromFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteFile() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::deleteFileRequest* /*request*/, ::grpcIWorldGraphManager::deleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getRelocalizationInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getRelocalizationInformation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getRelocalizationInformationRequest, ::grpcIWorldGraphManager::getRelocalizationInformationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getRelocalizationInformationRequest, ::grpcIWorldGraphManager::getRelocalizationInformationResponse>* streamer) {
                       return this->StreamedgetRelocalizationInformation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getRelocalizationInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getRelocalizationInformation(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* /*request*/, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetRelocalizationInformation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getRelocalizationInformationRequest,::grpcIWorldGraphManager::getRelocalizationInformationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldElement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldElement() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getWorldElementRequest, ::grpcIWorldGraphManager::getWorldElementResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getWorldElementRequest, ::grpcIWorldGraphManager::getWorldElementResponse>* streamer) {
                       return this->StreamedgetWorldElement(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldElement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldElement(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldElement(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getWorldElementRequest,::grpcIWorldGraphManager::getWorldElementResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldElements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldElements() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getWorldElementsRequest, ::grpcIWorldGraphManager::getWorldElementsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getWorldElementsRequest, ::grpcIWorldGraphManager::getWorldElementsResponse>* streamer) {
                       return this->StreamedgetWorldElements(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldElements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldElements(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldElements(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getWorldElementsRequest,::grpcIWorldGraphManager::getWorldElementsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldElementByKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldElementByKeyValue() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* streamer) {
                       return this->StreamedgetWorldElementByKeyValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldElementByKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldElementByKeyValue(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldElementByKeyValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest,::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldElementByKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldElementByKey() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getWorldElementByKeyRequest, ::grpcIWorldGraphManager::getWorldElementByKeyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getWorldElementByKeyRequest, ::grpcIWorldGraphManager::getWorldElementByKeyResponse>* streamer) {
                       return this->StreamedgetWorldElementByKey(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldElementByKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldElementByKey(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* /*request*/, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldElementByKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getWorldElementByKeyRequest,::grpcIWorldGraphManager::getWorldElementByKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addTrackable() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::addTrackableRequest, ::grpcIWorldGraphManager::addTrackableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::addTrackableRequest, ::grpcIWorldGraphManager::addTrackableResponse>* streamer) {
                       return this->StreamedaddTrackable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addTrackableRequest* /*request*/, ::grpcIWorldGraphManager::addTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddTrackable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::addTrackableRequest,::grpcIWorldGraphManager::addTrackableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getTrackable() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getTrackableRequest, ::grpcIWorldGraphManager::getTrackableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getTrackableRequest, ::grpcIWorldGraphManager::getTrackableResponse>* streamer) {
                       return this->StreamedgetTrackable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackableRequest* /*request*/, ::grpcIWorldGraphManager::getTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTrackable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getTrackableRequest,::grpcIWorldGraphManager::getTrackableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_removeTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_removeTrackable() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::removeTrackableRequest, ::grpcIWorldGraphManager::removeTrackableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::removeTrackableRequest, ::grpcIWorldGraphManager::removeTrackableResponse>* streamer) {
                       return this->StreamedremoveTrackable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_removeTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status removeTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeTrackableRequest* /*request*/, ::grpcIWorldGraphManager::removeTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedremoveTrackable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::removeTrackableRequest,::grpcIWorldGraphManager::removeTrackableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getTrackables : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getTrackables() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getTrackablesRequest, ::grpcIWorldGraphManager::getTrackablesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getTrackablesRequest, ::grpcIWorldGraphManager::getTrackablesResponse>* streamer) {
                       return this->StreamedgetTrackables(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getTrackables() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getTrackables(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getTrackablesRequest* /*request*/, ::grpcIWorldGraphManager::getTrackablesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetTrackables(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getTrackablesRequest,::grpcIWorldGraphManager::getTrackablesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_modifyTrackable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_modifyTrackable() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::modifyTrackableRequest, ::grpcIWorldGraphManager::modifyTrackableResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::modifyTrackableRequest, ::grpcIWorldGraphManager::modifyTrackableResponse>* streamer) {
                       return this->StreamedmodifyTrackable(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_modifyTrackable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status modifyTrackable(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyTrackableRequest* /*request*/, ::grpcIWorldGraphManager::modifyTrackableResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmodifyTrackable(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::modifyTrackableRequest,::grpcIWorldGraphManager::modifyTrackableResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addWorldAnchor() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::addWorldAnchorRequest, ::grpcIWorldGraphManager::addWorldAnchorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::addWorldAnchorRequest, ::grpcIWorldGraphManager::addWorldAnchorResponse>* streamer) {
                       return this->StreamedaddWorldAnchor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::addWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddWorldAnchor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::addWorldAnchorRequest,::grpcIWorldGraphManager::addWorldAnchorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldAnchor() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getWorldAnchorRequest, ::grpcIWorldGraphManager::getWorldAnchorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getWorldAnchorRequest, ::grpcIWorldGraphManager::getWorldAnchorResponse>* streamer) {
                       return this->StreamedgetWorldAnchor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldAnchor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getWorldAnchorRequest,::grpcIWorldGraphManager::getWorldAnchorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_removeWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_removeWorldAnchor() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::removeWorldAnchorRequest, ::grpcIWorldGraphManager::removeWorldAnchorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::removeWorldAnchorRequest, ::grpcIWorldGraphManager::removeWorldAnchorResponse>* streamer) {
                       return this->StreamedremoveWorldAnchor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_removeWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status removeWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::removeWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedremoveWorldAnchor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::removeWorldAnchorRequest,::grpcIWorldGraphManager::removeWorldAnchorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldAnchors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldAnchors() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getWorldAnchorsRequest, ::grpcIWorldGraphManager::getWorldAnchorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getWorldAnchorsRequest, ::grpcIWorldGraphManager::getWorldAnchorsResponse>* streamer) {
                       return this->StreamedgetWorldAnchors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldAnchors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldAnchors(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* /*request*/, ::grpcIWorldGraphManager::getWorldAnchorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldAnchors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getWorldAnchorsRequest,::grpcIWorldGraphManager::getWorldAnchorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_modifyWorldAnchor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_modifyWorldAnchor() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::modifyWorldAnchorRequest, ::grpcIWorldGraphManager::modifyWorldAnchorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::modifyWorldAnchorRequest, ::grpcIWorldGraphManager::modifyWorldAnchorResponse>* streamer) {
                       return this->StreamedmodifyWorldAnchor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_modifyWorldAnchor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status modifyWorldAnchor(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmodifyWorldAnchor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::modifyWorldAnchorRequest,::grpcIWorldGraphManager::modifyWorldAnchorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addWorldLink() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::addWorldLinkRequest, ::grpcIWorldGraphManager::addWorldLinkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::addWorldLinkRequest, ::grpcIWorldGraphManager::addWorldLinkResponse>* streamer) {
                       return this->StreamedaddWorldLink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::addWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::addWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddWorldLink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::addWorldLinkRequest,::grpcIWorldGraphManager::addWorldLinkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldLink_grpc0() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getWorldLink_grpc0Request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getWorldLink_grpc0Request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response>* streamer) {
                       return this->StreamedgetWorldLink_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldLink_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getWorldLink_grpc0Request,::grpcIWorldGraphManager::getWorldLink_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldLink_grpc1() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getWorldLink_grpc1Request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getWorldLink_grpc1Request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response>* streamer) {
                       return this->StreamedgetWorldLink_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldLink_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getWorldLink_grpc1Request,::grpcIWorldGraphManager::getWorldLink_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_removeWorldLink_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_removeWorldLink_grpc0() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::removeWorldLink_grpc0Request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::removeWorldLink_grpc0Request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* streamer) {
                       return this->StreamedremoveWorldLink_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_removeWorldLink_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status removeWorldLink_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedremoveWorldLink_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::removeWorldLink_grpc0Request,::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_removeWorldLink_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_removeWorldLink_grpc1() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::removeWorldLink_grpc1Request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::removeWorldLink_grpc1Request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* streamer) {
                       return this->StreamedremoveWorldLink_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_removeWorldLink_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status removeWorldLink_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* /*request*/, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedremoveWorldLink_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::removeWorldLink_grpc1Request,::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldLinks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldLinks() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::getWorldLinksRequest, ::grpcIWorldGraphManager::getWorldLinksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::getWorldLinksRequest, ::grpcIWorldGraphManager::getWorldLinksResponse>* streamer) {
                       return this->StreamedgetWorldLinks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldLinks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldLinks(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::getWorldLinksRequest* /*request*/, ::grpcIWorldGraphManager::getWorldLinksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldLinks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::getWorldLinksRequest,::grpcIWorldGraphManager::getWorldLinksResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_modifyWorldLink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_modifyWorldLink() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::modifyWorldLinkRequest, ::grpcIWorldGraphManager::modifyWorldLinkResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::modifyWorldLinkRequest, ::grpcIWorldGraphManager::modifyWorldLinkResponse>* streamer) {
                       return this->StreamedmodifyWorldLink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_modifyWorldLink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status modifyWorldLink(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* /*request*/, ::grpcIWorldGraphManager::modifyWorldLinkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmodifyWorldLink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::modifyWorldLinkRequest,::grpcIWorldGraphManager::modifyWorldLinkResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_saveToFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_saveToFile() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::saveToFileRequest, ::grpcIWorldGraphManager::saveToFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::saveToFileRequest, ::grpcIWorldGraphManager::saveToFileResponse>* streamer) {
                       return this->StreamedsaveToFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_saveToFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status saveToFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::saveToFileRequest* /*request*/, ::grpcIWorldGraphManager::saveToFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsaveToFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::saveToFileRequest,::grpcIWorldGraphManager::saveToFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadFromFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadFromFile() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::loadFromFileRequest, ::grpcIWorldGraphManager::loadFromFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::loadFromFileRequest, ::grpcIWorldGraphManager::loadFromFileResponse>* streamer) {
                       return this->StreamedloadFromFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadFromFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadFromFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::loadFromFileRequest* /*request*/, ::grpcIWorldGraphManager::loadFromFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadFromFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::loadFromFileRequest,::grpcIWorldGraphManager::loadFromFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteFile() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIWorldGraphManager::deleteFileRequest, ::grpcIWorldGraphManager::deleteFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIWorldGraphManager::deleteFileRequest, ::grpcIWorldGraphManager::deleteFileResponse>* streamer) {
                       return this->StreameddeleteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteFile(::grpc::ServerContext* /*context*/, const ::grpcIWorldGraphManager::deleteFileRequest* /*request*/, ::grpcIWorldGraphManager::deleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIWorldGraphManager::deleteFileRequest,::grpcIWorldGraphManager::deleteFileResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getRelocalizationInformation<WithStreamedUnaryMethod_getWorldElement<WithStreamedUnaryMethod_getWorldElements<WithStreamedUnaryMethod_getWorldElementByKeyValue<WithStreamedUnaryMethod_getWorldElementByKey<WithStreamedUnaryMethod_addTrackable<WithStreamedUnaryMethod_getTrackable<WithStreamedUnaryMethod_removeTrackable<WithStreamedUnaryMethod_getTrackables<WithStreamedUnaryMethod_modifyTrackable<WithStreamedUnaryMethod_addWorldAnchor<WithStreamedUnaryMethod_getWorldAnchor<WithStreamedUnaryMethod_removeWorldAnchor<WithStreamedUnaryMethod_getWorldAnchors<WithStreamedUnaryMethod_modifyWorldAnchor<WithStreamedUnaryMethod_addWorldLink<WithStreamedUnaryMethod_getWorldLink_grpc0<WithStreamedUnaryMethod_getWorldLink_grpc1<WithStreamedUnaryMethod_removeWorldLink_grpc0<WithStreamedUnaryMethod_removeWorldLink_grpc1<WithStreamedUnaryMethod_getWorldLinks<WithStreamedUnaryMethod_modifyWorldLink<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_deleteFile<Service > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getRelocalizationInformation<WithStreamedUnaryMethod_getWorldElement<WithStreamedUnaryMethod_getWorldElements<WithStreamedUnaryMethod_getWorldElementByKeyValue<WithStreamedUnaryMethod_getWorldElementByKey<WithStreamedUnaryMethod_addTrackable<WithStreamedUnaryMethod_getTrackable<WithStreamedUnaryMethod_removeTrackable<WithStreamedUnaryMethod_getTrackables<WithStreamedUnaryMethod_modifyTrackable<WithStreamedUnaryMethod_addWorldAnchor<WithStreamedUnaryMethod_getWorldAnchor<WithStreamedUnaryMethod_removeWorldAnchor<WithStreamedUnaryMethod_getWorldAnchors<WithStreamedUnaryMethod_modifyWorldAnchor<WithStreamedUnaryMethod_addWorldLink<WithStreamedUnaryMethod_getWorldLink_grpc0<WithStreamedUnaryMethod_getWorldLink_grpc1<WithStreamedUnaryMethod_removeWorldLink_grpc0<WithStreamedUnaryMethod_removeWorldLink_grpc1<WithStreamedUnaryMethod_getWorldLinks<WithStreamedUnaryMethod_modifyWorldLink<WithStreamedUnaryMethod_saveToFile<WithStreamedUnaryMethod_loadFromFile<WithStreamedUnaryMethod_deleteFile<Service > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace grpcIWorldGraphManager


#endif  // GRPC_grpcIWorldGraphManagerService_2eproto__INCLUDED
