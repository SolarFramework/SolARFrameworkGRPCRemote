// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIClientContextManagerService.proto
#ifndef GRPC_grpcIClientContextManagerService_2eproto__INCLUDED
#define GRPC_grpcIClientContextManagerService_2eproto__INCLUDED

#include "grpcIClientContextManagerService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace grpcIClientContextManager {

class grpcIClientContextManagerService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIClientContextManager.grpcIClientContextManagerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status registerClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpcIClientContextManager::registerClientResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::registerClientResponse>> AsyncregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::registerClientResponse>>(AsyncregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::registerClientResponse>> PrepareAsyncregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::registerClientResponse>>(PrepareAsyncregisterClientRaw(context, request, cq));
    }
    virtual ::grpc::Status unregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpcIClientContextManager::unregisterClientResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::unregisterClientResponse>> AsyncunregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::unregisterClientResponse>>(AsyncunregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::unregisterClientResponse>> PrepareAsyncunregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::unregisterClientResponse>>(PrepareAsyncunregisterClientRaw(context, request, cq));
    }
    virtual ::grpc::Status getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getAllClientsUUIDResponse>> AsyncgetAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getAllClientsUUIDResponse>>(AsyncgetAllClientsUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getAllClientsUUIDResponse>> PrepareAsyncgetAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getAllClientsUUIDResponse>>(PrepareAsyncgetAllClientsUUIDRaw(context, request, cq));
    }
    virtual ::grpc::Status getDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpcIClientContextManager::getDeviceInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getDeviceInfoResponse>> AsyncgetDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getDeviceInfoResponse>>(AsyncgetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getDeviceInfoResponse>> PrepareAsyncgetDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getDeviceInfoResponse>>(PrepareAsyncgetDeviceInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status init_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpcIClientContextManager::init_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc0Response>> Asyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc0Response>>(Asyncinit_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc0Response>> PrepareAsyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc0Response>>(PrepareAsyncinit_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status init_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpcIClientContextManager::init_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc1Response>> Asyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc1Response>>(Asyncinit_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc1Response>> PrepareAsyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc1Response>>(PrepareAsyncinit_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpcIClientContextManager::startResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpcIClientContextManager::stopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status getProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpcIClientContextManager::getProcessingModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getProcessingModeResponse>> AsyncgetProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getProcessingModeResponse>>(AsyncgetProcessingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getProcessingModeResponse>> PrepareAsyncgetProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getProcessingModeResponse>>(PrepareAsyncgetProcessingModeRaw(context, request, cq));
    }
    virtual ::grpc::Status setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc0Response>> AsyncsetCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc0Response>>(AsyncsetCameraParameters_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc0Response>> PrepareAsyncsetCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc0Response>>(PrepareAsyncsetCameraParameters_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc1Response>> AsyncsetCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc1Response>>(AsyncsetCameraParameters_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc1Response>> PrepareAsyncsetCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc1Response>>(PrepareAsyncsetCameraParameters_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status setRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpcIClientContextManager::setRectificationParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setRectificationParametersResponse>> AsyncsetRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setRectificationParametersResponse>>(AsyncsetRectificationParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setRectificationParametersResponse>> PrepareAsyncsetRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setRectificationParametersResponse>>(PrepareAsyncsetRectificationParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpcIClientContextManager::getCameraParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getCameraParametersResponse>> AsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getCameraParametersResponse>>(AsyncgetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getCameraParametersResponse>> PrepareAsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getCameraParametersResponse>>(PrepareAsyncgetCameraParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>> AsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>>(AsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>> PrepareAsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>>(PrepareAsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>> AsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>>(AsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>> PrepareAsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>>(PrepareAsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpcIClientContextManager::get3DTransformRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::get3DTransformRequestResponse>> Asyncget3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::get3DTransformRequestResponse>>(Asyncget3DTransformRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::get3DTransformRequestResponse>> PrepareAsyncget3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::get3DTransformRequestResponse>>(PrepareAsyncget3DTransformRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpcIClientContextManager::getMappingDataRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getMappingDataRequestResponse>> AsyncgetMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getMappingDataRequestResponse>>(AsyncgetMappingDataRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getMappingDataRequestResponse>> PrepareAsyncgetMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getMappingDataRequestResponse>>(PrepareAsyncgetMappingDataRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status getLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpcIClientContextManager::getLastPoseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getLastPoseResponse>> AsyncgetLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getLastPoseResponse>>(AsyncgetLastPoseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getLastPoseResponse>> PrepareAsyncgetLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getLastPoseResponse>>(PrepareAsyncgetLastPoseRaw(context, request, cq));
    }
    virtual ::grpc::Status getClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpcIClientContextManager::getClientMapUUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getClientMapUUIDResponse>> AsyncgetClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getClientMapUUIDResponse>>(AsyncgetClientMapUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getClientMapUUIDResponse>> PrepareAsyncgetClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getClientMapUUIDResponse>>(PrepareAsyncgetClientMapUUIDRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void registerClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest* request, ::grpcIClientContextManager::registerClientResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest* request, ::grpcIClientContextManager::registerClientResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void unregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest* request, ::grpcIClientContextManager::unregisterClientResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest* request, ::grpcIClientContextManager::unregisterClientResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpcIClientContextManager::getDeviceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpcIClientContextManager::getDeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void init_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request* request, ::grpcIClientContextManager::init_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request* request, ::grpcIClientContextManager::init_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void init_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request* request, ::grpcIClientContextManager::init_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request* request, ::grpcIClientContextManager::init_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest* request, ::grpcIClientContextManager::startResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest* request, ::grpcIClientContextManager::startResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest* request, ::grpcIClientContextManager::stopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest* request, ::grpcIClientContextManager::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpcIClientContextManager::getProcessingModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpcIClientContextManager::getProcessingModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpcIClientContextManager::setRectificationParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpcIClientContextManager::setRectificationParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpcIClientContextManager::getCameraParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpcIClientContextManager::getCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpcIClientContextManager::get3DTransformRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpcIClientContextManager::get3DTransformRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpcIClientContextManager::getMappingDataRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpcIClientContextManager::getMappingDataRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest* request, ::grpcIClientContextManager::getLastPoseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest* request, ::grpcIClientContextManager::getLastPoseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpcIClientContextManager::getClientMapUUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpcIClientContextManager::getClientMapUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::registerClientResponse>* AsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::registerClientResponse>* PrepareAsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::unregisterClientResponse>* AsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::unregisterClientResponse>* PrepareAsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getAllClientsUUIDResponse>* AsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getAllClientsUUIDResponse>* PrepareAsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getDeviceInfoResponse>* AsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getDeviceInfoResponse>* PrepareAsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc0Response>* Asyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc0Response>* PrepareAsyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc1Response>* Asyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::init_grpc1Response>* PrepareAsyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getProcessingModeResponse>* AsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getProcessingModeResponse>* PrepareAsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc0Response>* AsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc0Response>* PrepareAsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc1Response>* AsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setCameraParameters_grpc1Response>* PrepareAsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setRectificationParametersResponse>* AsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::setRectificationParametersResponse>* PrepareAsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getCameraParametersResponse>* AsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getCameraParametersResponse>* PrepareAsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* AsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* PrepareAsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* AsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* PrepareAsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::get3DTransformRequestResponse>* Asyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::get3DTransformRequestResponse>* PrepareAsyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getMappingDataRequestResponse>* AsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getMappingDataRequestResponse>* PrepareAsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getLastPoseResponse>* AsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getLastPoseResponse>* PrepareAsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getClientMapUUIDResponse>* AsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIClientContextManager::getClientMapUUIDResponse>* PrepareAsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status registerClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpcIClientContextManager::registerClientResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::registerClientResponse>> AsyncregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::registerClientResponse>>(AsyncregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::registerClientResponse>> PrepareAsyncregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::registerClientResponse>>(PrepareAsyncregisterClientRaw(context, request, cq));
    }
    ::grpc::Status unregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpcIClientContextManager::unregisterClientResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::unregisterClientResponse>> AsyncunregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::unregisterClientResponse>>(AsyncunregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::unregisterClientResponse>> PrepareAsyncunregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::unregisterClientResponse>>(PrepareAsyncunregisterClientRaw(context, request, cq));
    }
    ::grpc::Status getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getAllClientsUUIDResponse>> AsyncgetAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getAllClientsUUIDResponse>>(AsyncgetAllClientsUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getAllClientsUUIDResponse>> PrepareAsyncgetAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getAllClientsUUIDResponse>>(PrepareAsyncgetAllClientsUUIDRaw(context, request, cq));
    }
    ::grpc::Status getDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpcIClientContextManager::getDeviceInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getDeviceInfoResponse>> AsyncgetDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getDeviceInfoResponse>>(AsyncgetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getDeviceInfoResponse>> PrepareAsyncgetDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getDeviceInfoResponse>>(PrepareAsyncgetDeviceInfoRaw(context, request, cq));
    }
    ::grpc::Status init_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpcIClientContextManager::init_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc0Response>> Asyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc0Response>>(Asyncinit_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc0Response>> PrepareAsyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc0Response>>(PrepareAsyncinit_grpc0Raw(context, request, cq));
    }
    ::grpc::Status init_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpcIClientContextManager::init_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc1Response>> Asyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc1Response>>(Asyncinit_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc1Response>> PrepareAsyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc1Response>>(PrepareAsyncinit_grpc1Raw(context, request, cq));
    }
    ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpcIClientContextManager::startResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpcIClientContextManager::stopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status getProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpcIClientContextManager::getProcessingModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getProcessingModeResponse>> AsyncgetProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getProcessingModeResponse>>(AsyncgetProcessingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getProcessingModeResponse>> PrepareAsyncgetProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getProcessingModeResponse>>(PrepareAsyncgetProcessingModeRaw(context, request, cq));
    }
    ::grpc::Status setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc0Response>> AsyncsetCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc0Response>>(AsyncsetCameraParameters_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc0Response>> PrepareAsyncsetCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc0Response>>(PrepareAsyncsetCameraParameters_grpc0Raw(context, request, cq));
    }
    ::grpc::Status setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc1Response>> AsyncsetCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc1Response>>(AsyncsetCameraParameters_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc1Response>> PrepareAsyncsetCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc1Response>>(PrepareAsyncsetCameraParameters_grpc1Raw(context, request, cq));
    }
    ::grpc::Status setRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpcIClientContextManager::setRectificationParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setRectificationParametersResponse>> AsyncsetRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setRectificationParametersResponse>>(AsyncsetRectificationParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setRectificationParametersResponse>> PrepareAsyncsetRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setRectificationParametersResponse>>(PrepareAsyncsetRectificationParametersRaw(context, request, cq));
    }
    ::grpc::Status getCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpcIClientContextManager::getCameraParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getCameraParametersResponse>> AsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getCameraParametersResponse>>(AsyncgetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getCameraParametersResponse>> PrepareAsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getCameraParametersResponse>>(PrepareAsyncgetCameraParametersRaw(context, request, cq));
    }
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>> AsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>>(AsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>> PrepareAsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>>(PrepareAsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>> AsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>>(AsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>> PrepareAsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>>(PrepareAsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    ::grpc::Status get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpcIClientContextManager::get3DTransformRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::get3DTransformRequestResponse>> Asyncget3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::get3DTransformRequestResponse>>(Asyncget3DTransformRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::get3DTransformRequestResponse>> PrepareAsyncget3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::get3DTransformRequestResponse>>(PrepareAsyncget3DTransformRequestRaw(context, request, cq));
    }
    ::grpc::Status getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpcIClientContextManager::getMappingDataRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getMappingDataRequestResponse>> AsyncgetMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getMappingDataRequestResponse>>(AsyncgetMappingDataRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getMappingDataRequestResponse>> PrepareAsyncgetMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getMappingDataRequestResponse>>(PrepareAsyncgetMappingDataRequestRaw(context, request, cq));
    }
    ::grpc::Status getLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpcIClientContextManager::getLastPoseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getLastPoseResponse>> AsyncgetLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getLastPoseResponse>>(AsyncgetLastPoseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getLastPoseResponse>> PrepareAsyncgetLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getLastPoseResponse>>(PrepareAsyncgetLastPoseRaw(context, request, cq));
    }
    ::grpc::Status getClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpcIClientContextManager::getClientMapUUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getClientMapUUIDResponse>> AsyncgetClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getClientMapUUIDResponse>>(AsyncgetClientMapUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getClientMapUUIDResponse>> PrepareAsyncgetClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getClientMapUUIDResponse>>(PrepareAsyncgetClientMapUUIDRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void registerClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest* request, ::grpcIClientContextManager::registerClientResponse* response, std::function<void(::grpc::Status)>) override;
      void registerClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest* request, ::grpcIClientContextManager::registerClientResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void unregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest* request, ::grpcIClientContextManager::unregisterClientResponse* response, std::function<void(::grpc::Status)>) override;
      void unregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest* request, ::grpcIClientContextManager::unregisterClientResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpcIClientContextManager::getDeviceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void getDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpcIClientContextManager::getDeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void init_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request* request, ::grpcIClientContextManager::init_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void init_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request* request, ::grpcIClientContextManager::init_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void init_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request* request, ::grpcIClientContextManager::init_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void init_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request* request, ::grpcIClientContextManager::init_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void start(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest* request, ::grpcIClientContextManager::startResponse* response, std::function<void(::grpc::Status)>) override;
      void start(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest* request, ::grpcIClientContextManager::startResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void stop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest* request, ::grpcIClientContextManager::stopResponse* response, std::function<void(::grpc::Status)>) override;
      void stop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest* request, ::grpcIClientContextManager::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpcIClientContextManager::getProcessingModeResponse* response, std::function<void(::grpc::Status)>) override;
      void getProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpcIClientContextManager::getProcessingModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpcIClientContextManager::setRectificationParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void setRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpcIClientContextManager::setRectificationParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpcIClientContextManager::getCameraParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void getCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpcIClientContextManager::getCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpcIClientContextManager::get3DTransformRequestResponse* response, std::function<void(::grpc::Status)>) override;
      void get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpcIClientContextManager::get3DTransformRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpcIClientContextManager::getMappingDataRequestResponse* response, std::function<void(::grpc::Status)>) override;
      void getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpcIClientContextManager::getMappingDataRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest* request, ::grpcIClientContextManager::getLastPoseResponse* response, std::function<void(::grpc::Status)>) override;
      void getLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest* request, ::grpcIClientContextManager::getLastPoseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpcIClientContextManager::getClientMapUUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void getClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpcIClientContextManager::getClientMapUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::registerClientResponse>* AsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::registerClientResponse>* PrepareAsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::unregisterClientResponse>* AsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::unregisterClientResponse>* PrepareAsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getAllClientsUUIDResponse>* AsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getAllClientsUUIDResponse>* PrepareAsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getDeviceInfoResponse>* AsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getDeviceInfoResponse>* PrepareAsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc0Response>* Asyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc0Response>* PrepareAsyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc1Response>* Asyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc1Response>* PrepareAsyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getProcessingModeResponse>* AsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getProcessingModeResponse>* PrepareAsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc0Response>* AsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc0Response>* PrepareAsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc1Response>* AsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc1Response>* PrepareAsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setRectificationParametersResponse>* AsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setRectificationParametersResponse>* PrepareAsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getCameraParametersResponse>* AsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getCameraParametersResponse>* PrepareAsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* AsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* PrepareAsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* AsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* PrepareAsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::get3DTransformRequestResponse>* Asyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::get3DTransformRequestResponse>* PrepareAsyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getMappingDataRequestResponse>* AsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getMappingDataRequestResponse>* PrepareAsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getLastPoseResponse>* AsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getLastPoseResponse>* PrepareAsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getClientMapUUIDResponse>* AsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getClientMapUUIDResponse>* PrepareAsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_registerClient_;
    const ::grpc::internal::RpcMethod rpcmethod_unregisterClient_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllClientsUUID_;
    const ::grpc::internal::RpcMethod rpcmethod_getDeviceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_init_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_init_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_getProcessingMode_;
    const ::grpc::internal::RpcMethod rpcmethod_setCameraParameters_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_setCameraParameters_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_setRectificationParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getCameraParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_relocalizeProcessRequest_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_relocalizeProcessRequest_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_get3DTransformRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_getMappingDataRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_getLastPose_;
    const ::grpc::internal::RpcMethod rpcmethod_getClientMapUUID_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status registerClient(::grpc::ServerContext* context, const ::grpcIClientContextManager::registerClientRequest* request, ::grpcIClientContextManager::registerClientResponse* response);
    virtual ::grpc::Status unregisterClient(::grpc::ServerContext* context, const ::grpcIClientContextManager::unregisterClientRequest* request, ::grpcIClientContextManager::unregisterClientResponse* response);
    virtual ::grpc::Status getAllClientsUUID(::grpc::ServerContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response);
    virtual ::grpc::Status getDeviceInfo(::grpc::ServerContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpcIClientContextManager::getDeviceInfoResponse* response);
    virtual ::grpc::Status init_grpc0(::grpc::ServerContext* context, const ::grpcIClientContextManager::init_grpc0Request* request, ::grpcIClientContextManager::init_grpc0Response* response);
    virtual ::grpc::Status init_grpc1(::grpc::ServerContext* context, const ::grpcIClientContextManager::init_grpc1Request* request, ::grpcIClientContextManager::init_grpc1Response* response);
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::grpcIClientContextManager::startRequest* request, ::grpcIClientContextManager::startResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::grpcIClientContextManager::stopRequest* request, ::grpcIClientContextManager::stopResponse* response);
    virtual ::grpc::Status getProcessingMode(::grpc::ServerContext* context, const ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpcIClientContextManager::getProcessingModeResponse* response);
    virtual ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response);
    virtual ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response);
    virtual ::grpc::Status setRectificationParameters(::grpc::ServerContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpcIClientContextManager::setRectificationParametersResponse* response);
    virtual ::grpc::Status getCameraParameters(::grpc::ServerContext* context, const ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpcIClientContextManager::getCameraParametersResponse* response);
    virtual ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response);
    virtual ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response);
    virtual ::grpc::Status get3DTransformRequest(::grpc::ServerContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpcIClientContextManager::get3DTransformRequestResponse* response);
    virtual ::grpc::Status getMappingDataRequest(::grpc::ServerContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpcIClientContextManager::getMappingDataRequestResponse* response);
    virtual ::grpc::Status getLastPose(::grpc::ServerContext* context, const ::grpcIClientContextManager::getLastPoseRequest* request, ::grpcIClientContextManager::getLastPoseResponse* response);
    virtual ::grpc::Status getClientMapUUID(::grpc::ServerContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpcIClientContextManager::getClientMapUUIDResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::registerClientRequest* /*request*/, ::grpcIClientContextManager::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterClient(::grpc::ServerContext* context, ::grpcIClientContextManager::registerClientRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::registerClientResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unregisterClient() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::unregisterClientRequest* /*request*/, ::grpcIClientContextManager::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunregisterClient(::grpc::ServerContext* context, ::grpcIClientContextManager::unregisterClientRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::unregisterClientResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getAllClientsUUIDRequest* /*request*/, ::grpcIClientContextManager::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllClientsUUID(::grpc::ServerContext* context, ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::getAllClientsUUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getDeviceInfoRequest* /*request*/, ::grpcIClientContextManager::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeviceInfo(::grpc::ServerContext* context, ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::getDeviceInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_grpc0() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc0Request* /*request*/, ::grpcIClientContextManager::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc0(::grpc::ServerContext* context, ::grpcIClientContextManager::init_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::init_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_grpc1() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc1Request* /*request*/, ::grpcIClientContextManager::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc1(::grpc::ServerContext* context, ::grpcIClientContextManager::init_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::init_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::startRequest* /*request*/, ::grpcIClientContextManager::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpcIClientContextManager::startRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::startResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::stopRequest* /*request*/, ::grpcIClientContextManager::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpcIClientContextManager::stopRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::stopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getProcessingModeRequest* /*request*/, ::grpcIClientContextManager::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProcessingMode(::grpc::ServerContext* context, ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::getProcessingModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters_grpc0(::grpc::ServerContext* context, ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::setCameraParameters_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters_grpc1(::grpc::ServerContext* context, ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::setCameraParameters_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setRectificationParametersRequest* /*request*/, ::grpcIClientContextManager::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetRectificationParameters(::grpc::ServerContext* context, ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::setRectificationParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getCameraParametersRequest* /*request*/, ::grpcIClientContextManager::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCameraParameters(::grpc::ServerContext* context, ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::getCameraParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc0(::grpc::ServerContext* context, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc1(::grpc::ServerContext* context, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::get3DTransformRequestRequest* /*request*/, ::grpcIClientContextManager::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget3DTransformRequest(::grpc::ServerContext* context, ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::get3DTransformRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getMappingDataRequestRequest* /*request*/, ::grpcIClientContextManager::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMappingDataRequest(::grpc::ServerContext* context, ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::getMappingDataRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getLastPose() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getLastPoseRequest* /*request*/, ::grpcIClientContextManager::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLastPose(::grpc::ServerContext* context, ::grpcIClientContextManager::getLastPoseRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::getLastPoseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getClientMapUUIDRequest* /*request*/, ::grpcIClientContextManager::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetClientMapUUID(::grpc::ServerContext* context, ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIClientContextManager::getClientMapUUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerClient<WithAsyncMethod_unregisterClient<WithAsyncMethod_getAllClientsUUID<WithAsyncMethod_getDeviceInfo<WithAsyncMethod_init_grpc0<WithAsyncMethod_init_grpc1<WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_getProcessingMode<WithAsyncMethod_setCameraParameters_grpc0<WithAsyncMethod_setCameraParameters_grpc1<WithAsyncMethod_setRectificationParameters<WithAsyncMethod_getCameraParameters<WithAsyncMethod_relocalizeProcessRequest_grpc0<WithAsyncMethod_relocalizeProcessRequest_grpc1<WithAsyncMethod_get3DTransformRequest<WithAsyncMethod_getMappingDataRequest<WithAsyncMethod_getLastPose<WithAsyncMethod_getClientMapUUID<Service > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_registerClient() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::registerClientRequest, ::grpcIClientContextManager::registerClientResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::registerClientRequest* request, ::grpcIClientContextManager::registerClientResponse* response) { return this->registerClient(context, request, response); }));}
    void SetMessageAllocatorFor_registerClient(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::registerClientRequest, ::grpcIClientContextManager::registerClientResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::registerClientRequest, ::grpcIClientContextManager::registerClientResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::registerClientRequest* /*request*/, ::grpcIClientContextManager::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::registerClientRequest* /*request*/, ::grpcIClientContextManager::registerClientResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unregisterClient() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::unregisterClientRequest, ::grpcIClientContextManager::unregisterClientResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::unregisterClientRequest* request, ::grpcIClientContextManager::unregisterClientResponse* response) { return this->unregisterClient(context, request, response); }));}
    void SetMessageAllocatorFor_unregisterClient(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::unregisterClientRequest, ::grpcIClientContextManager::unregisterClientResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::unregisterClientRequest, ::grpcIClientContextManager::unregisterClientResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::unregisterClientRequest* /*request*/, ::grpcIClientContextManager::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::unregisterClientRequest* /*request*/, ::grpcIClientContextManager::unregisterClientResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getAllClientsUUIDRequest, ::grpcIClientContextManager::getAllClientsUUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response) { return this->getAllClientsUUID(context, request, response); }));}
    void SetMessageAllocatorFor_getAllClientsUUID(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::getAllClientsUUIDRequest, ::grpcIClientContextManager::getAllClientsUUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getAllClientsUUIDRequest, ::grpcIClientContextManager::getAllClientsUUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getAllClientsUUIDRequest* /*request*/, ::grpcIClientContextManager::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllClientsUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::getAllClientsUUIDRequest* /*request*/, ::grpcIClientContextManager::getAllClientsUUIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getDeviceInfoRequest, ::grpcIClientContextManager::getDeviceInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpcIClientContextManager::getDeviceInfoResponse* response) { return this->getDeviceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_getDeviceInfo(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::getDeviceInfoRequest, ::grpcIClientContextManager::getDeviceInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getDeviceInfoRequest, ::grpcIClientContextManager::getDeviceInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getDeviceInfoRequest* /*request*/, ::grpcIClientContextManager::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::getDeviceInfoRequest* /*request*/, ::grpcIClientContextManager::getDeviceInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_grpc0() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::init_grpc0Request, ::grpcIClientContextManager::init_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::init_grpc0Request* request, ::grpcIClientContextManager::init_grpc0Response* response) { return this->init_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_init_grpc0(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::init_grpc0Request, ::grpcIClientContextManager::init_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::init_grpc0Request, ::grpcIClientContextManager::init_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc0Request* /*request*/, ::grpcIClientContextManager::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc0Request* /*request*/, ::grpcIClientContextManager::init_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_grpc1() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::init_grpc1Request, ::grpcIClientContextManager::init_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::init_grpc1Request* request, ::grpcIClientContextManager::init_grpc1Response* response) { return this->init_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_init_grpc1(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::init_grpc1Request, ::grpcIClientContextManager::init_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::init_grpc1Request, ::grpcIClientContextManager::init_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc1Request* /*request*/, ::grpcIClientContextManager::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc1Request* /*request*/, ::grpcIClientContextManager::init_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_start() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::startRequest, ::grpcIClientContextManager::startResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::startRequest* request, ::grpcIClientContextManager::startResponse* response) { return this->start(context, request, response); }));}
    void SetMessageAllocatorFor_start(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::startRequest, ::grpcIClientContextManager::startResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::startRequest, ::grpcIClientContextManager::startResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::startRequest* /*request*/, ::grpcIClientContextManager::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::startRequest* /*request*/, ::grpcIClientContextManager::startResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stop() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::stopRequest, ::grpcIClientContextManager::stopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::stopRequest* request, ::grpcIClientContextManager::stopResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::stopRequest, ::grpcIClientContextManager::stopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::stopRequest, ::grpcIClientContextManager::stopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::stopRequest* /*request*/, ::grpcIClientContextManager::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::stopRequest* /*request*/, ::grpcIClientContextManager::stopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getProcessingModeRequest, ::grpcIClientContextManager::getProcessingModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpcIClientContextManager::getProcessingModeResponse* response) { return this->getProcessingMode(context, request, response); }));}
    void SetMessageAllocatorFor_getProcessingMode(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::getProcessingModeRequest, ::grpcIClientContextManager::getProcessingModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getProcessingModeRequest, ::grpcIClientContextManager::getProcessingModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getProcessingModeRequest* /*request*/, ::grpcIClientContextManager::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProcessingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::getProcessingModeRequest* /*request*/, ::grpcIClientContextManager::getProcessingModeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::setCameraParameters_grpc0Request, ::grpcIClientContextManager::setCameraParameters_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response) { return this->setCameraParameters_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_setCameraParameters_grpc0(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::setCameraParameters_grpc0Request, ::grpcIClientContextManager::setCameraParameters_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::setCameraParameters_grpc0Request, ::grpcIClientContextManager::setCameraParameters_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::setCameraParameters_grpc1Request, ::grpcIClientContextManager::setCameraParameters_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response) { return this->setCameraParameters_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_setCameraParameters_grpc1(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::setCameraParameters_grpc1Request, ::grpcIClientContextManager::setCameraParameters_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::setCameraParameters_grpc1Request, ::grpcIClientContextManager::setCameraParameters_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::setRectificationParametersRequest, ::grpcIClientContextManager::setRectificationParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpcIClientContextManager::setRectificationParametersResponse* response) { return this->setRectificationParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setRectificationParameters(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::setRectificationParametersRequest, ::grpcIClientContextManager::setRectificationParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::setRectificationParametersRequest, ::grpcIClientContextManager::setRectificationParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setRectificationParametersRequest* /*request*/, ::grpcIClientContextManager::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setRectificationParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::setRectificationParametersRequest* /*request*/, ::grpcIClientContextManager::setRectificationParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getCameraParametersRequest, ::grpcIClientContextManager::getCameraParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpcIClientContextManager::getCameraParametersResponse* response) { return this->getCameraParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getCameraParameters(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::getCameraParametersRequest, ::grpcIClientContextManager::getCameraParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getCameraParametersRequest, ::grpcIClientContextManager::getCameraParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getCameraParametersRequest* /*request*/, ::grpcIClientContextManager::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::getCameraParametersRequest* /*request*/, ::grpcIClientContextManager::getCameraParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response) { return this->relocalizeProcessRequest_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_relocalizeProcessRequest_grpc0(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response) { return this->relocalizeProcessRequest_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_relocalizeProcessRequest_grpc1(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::get3DTransformRequestRequest, ::grpcIClientContextManager::get3DTransformRequestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpcIClientContextManager::get3DTransformRequestResponse* response) { return this->get3DTransformRequest(context, request, response); }));}
    void SetMessageAllocatorFor_get3DTransformRequest(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::get3DTransformRequestRequest, ::grpcIClientContextManager::get3DTransformRequestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::get3DTransformRequestRequest, ::grpcIClientContextManager::get3DTransformRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::get3DTransformRequestRequest* /*request*/, ::grpcIClientContextManager::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get3DTransformRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::get3DTransformRequestRequest* /*request*/, ::grpcIClientContextManager::get3DTransformRequestResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getMappingDataRequestRequest, ::grpcIClientContextManager::getMappingDataRequestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpcIClientContextManager::getMappingDataRequestResponse* response) { return this->getMappingDataRequest(context, request, response); }));}
    void SetMessageAllocatorFor_getMappingDataRequest(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::getMappingDataRequestRequest, ::grpcIClientContextManager::getMappingDataRequestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getMappingDataRequestRequest, ::grpcIClientContextManager::getMappingDataRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getMappingDataRequestRequest* /*request*/, ::grpcIClientContextManager::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMappingDataRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::getMappingDataRequestRequest* /*request*/, ::grpcIClientContextManager::getMappingDataRequestResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getLastPose() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getLastPoseRequest, ::grpcIClientContextManager::getLastPoseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::getLastPoseRequest* request, ::grpcIClientContextManager::getLastPoseResponse* response) { return this->getLastPose(context, request, response); }));}
    void SetMessageAllocatorFor_getLastPose(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::getLastPoseRequest, ::grpcIClientContextManager::getLastPoseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getLastPoseRequest, ::grpcIClientContextManager::getLastPoseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getLastPoseRequest* /*request*/, ::grpcIClientContextManager::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLastPose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::getLastPoseRequest* /*request*/, ::grpcIClientContextManager::getLastPoseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getClientMapUUIDRequest, ::grpcIClientContextManager::getClientMapUUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpcIClientContextManager::getClientMapUUIDResponse* response) { return this->getClientMapUUID(context, request, response); }));}
    void SetMessageAllocatorFor_getClientMapUUID(
        ::grpc::MessageAllocator< ::grpcIClientContextManager::getClientMapUUIDRequest, ::grpcIClientContextManager::getClientMapUUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIClientContextManager::getClientMapUUIDRequest, ::grpcIClientContextManager::getClientMapUUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getClientMapUUIDRequest* /*request*/, ::grpcIClientContextManager::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getClientMapUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIClientContextManager::getClientMapUUIDRequest* /*request*/, ::grpcIClientContextManager::getClientMapUUIDResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_registerClient<WithCallbackMethod_unregisterClient<WithCallbackMethod_getAllClientsUUID<WithCallbackMethod_getDeviceInfo<WithCallbackMethod_init_grpc0<WithCallbackMethod_init_grpc1<WithCallbackMethod_start<WithCallbackMethod_stop<WithCallbackMethod_getProcessingMode<WithCallbackMethod_setCameraParameters_grpc0<WithCallbackMethod_setCameraParameters_grpc1<WithCallbackMethod_setRectificationParameters<WithCallbackMethod_getCameraParameters<WithCallbackMethod_relocalizeProcessRequest_grpc0<WithCallbackMethod_relocalizeProcessRequest_grpc1<WithCallbackMethod_get3DTransformRequest<WithCallbackMethod_getMappingDataRequest<WithCallbackMethod_getLastPose<WithCallbackMethod_getClientMapUUID<Service > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::registerClientRequest* /*request*/, ::grpcIClientContextManager::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unregisterClient() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::unregisterClientRequest* /*request*/, ::grpcIClientContextManager::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getAllClientsUUIDRequest* /*request*/, ::grpcIClientContextManager::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getDeviceInfoRequest* /*request*/, ::grpcIClientContextManager::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_grpc0() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc0Request* /*request*/, ::grpcIClientContextManager::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_grpc1() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc1Request* /*request*/, ::grpcIClientContextManager::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::startRequest* /*request*/, ::grpcIClientContextManager::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::stopRequest* /*request*/, ::grpcIClientContextManager::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getProcessingModeRequest* /*request*/, ::grpcIClientContextManager::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setRectificationParametersRequest* /*request*/, ::grpcIClientContextManager::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getCameraParametersRequest* /*request*/, ::grpcIClientContextManager::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::get3DTransformRequestRequest* /*request*/, ::grpcIClientContextManager::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getMappingDataRequestRequest* /*request*/, ::grpcIClientContextManager::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getLastPose() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getLastPoseRequest* /*request*/, ::grpcIClientContextManager::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getClientMapUUIDRequest* /*request*/, ::grpcIClientContextManager::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerClient() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::registerClientRequest* /*request*/, ::grpcIClientContextManager::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unregisterClient() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::unregisterClientRequest* /*request*/, ::grpcIClientContextManager::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunregisterClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getAllClientsUUIDRequest* /*request*/, ::grpcIClientContextManager::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllClientsUUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getDeviceInfoRequest* /*request*/, ::grpcIClientContextManager::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeviceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_grpc0() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc0Request* /*request*/, ::grpcIClientContextManager::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_grpc1() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc1Request* /*request*/, ::grpcIClientContextManager::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::startRequest* /*request*/, ::grpcIClientContextManager::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::stopRequest* /*request*/, ::grpcIClientContextManager::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getProcessingModeRequest* /*request*/, ::grpcIClientContextManager::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProcessingMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setRectificationParametersRequest* /*request*/, ::grpcIClientContextManager::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetRectificationParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getCameraParametersRequest* /*request*/, ::grpcIClientContextManager::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCameraParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::get3DTransformRequestRequest* /*request*/, ::grpcIClientContextManager::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget3DTransformRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getMappingDataRequestRequest* /*request*/, ::grpcIClientContextManager::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMappingDataRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getLastPose() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getLastPoseRequest* /*request*/, ::grpcIClientContextManager::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLastPose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getClientMapUUIDRequest* /*request*/, ::grpcIClientContextManager::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetClientMapUUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_registerClient() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::registerClientRequest* /*request*/, ::grpcIClientContextManager::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unregisterClient() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unregisterClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::unregisterClientRequest* /*request*/, ::grpcIClientContextManager::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllClientsUUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getAllClientsUUIDRequest* /*request*/, ::grpcIClientContextManager::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllClientsUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDeviceInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getDeviceInfoRequest* /*request*/, ::grpcIClientContextManager::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc0Request* /*request*/, ::grpcIClientContextManager::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc1Request* /*request*/, ::grpcIClientContextManager::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_start() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start(context, request, response); }));
    }
    ~WithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::startRequest* /*request*/, ::grpcIClientContextManager::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stop() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::stopRequest* /*request*/, ::grpcIClientContextManager::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getProcessingMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getProcessingModeRequest* /*request*/, ::grpcIClientContextManager::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProcessingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setCameraParameters_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setCameraParameters_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setRectificationParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setRectificationParametersRequest* /*request*/, ::grpcIClientContextManager::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setRectificationParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCameraParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getCameraParametersRequest* /*request*/, ::grpcIClientContextManager::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->relocalizeProcessRequest_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->relocalizeProcessRequest_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get3DTransformRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::get3DTransformRequestRequest* /*request*/, ::grpcIClientContextManager::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get3DTransformRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMappingDataRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getMappingDataRequestRequest* /*request*/, ::grpcIClientContextManager::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMappingDataRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getLastPose() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getLastPose(context, request, response); }));
    }
    ~WithRawCallbackMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getLastPoseRequest* /*request*/, ::grpcIClientContextManager::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLastPose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getClientMapUUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getClientMapUUIDRequest* /*request*/, ::grpcIClientContextManager::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getClientMapUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerClient() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::registerClientRequest, ::grpcIClientContextManager::registerClientResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::registerClientRequest, ::grpcIClientContextManager::registerClientResponse>* streamer) {
                       return this->StreamedregisterClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::registerClientRequest* /*request*/, ::grpcIClientContextManager::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::registerClientRequest,::grpcIClientContextManager::registerClientResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unregisterClient() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::unregisterClientRequest, ::grpcIClientContextManager::unregisterClientResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::unregisterClientRequest, ::grpcIClientContextManager::unregisterClientResponse>* streamer) {
                       return this->StreamedunregisterClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::unregisterClientRequest* /*request*/, ::grpcIClientContextManager::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunregisterClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::unregisterClientRequest,::grpcIClientContextManager::unregisterClientResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::getAllClientsUUIDRequest, ::grpcIClientContextManager::getAllClientsUUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::getAllClientsUUIDRequest, ::grpcIClientContextManager::getAllClientsUUIDResponse>* streamer) {
                       return this->StreamedgetAllClientsUUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getAllClientsUUIDRequest* /*request*/, ::grpcIClientContextManager::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllClientsUUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::getAllClientsUUIDRequest,::grpcIClientContextManager::getAllClientsUUIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::getDeviceInfoRequest, ::grpcIClientContextManager::getDeviceInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::getDeviceInfoRequest, ::grpcIClientContextManager::getDeviceInfoResponse>* streamer) {
                       return this->StreamedgetDeviceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getDeviceInfoRequest* /*request*/, ::grpcIClientContextManager::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDeviceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::getDeviceInfoRequest,::grpcIClientContextManager::getDeviceInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_grpc0() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::init_grpc0Request, ::grpcIClientContextManager::init_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::init_grpc0Request, ::grpcIClientContextManager::init_grpc0Response>* streamer) {
                       return this->Streamedinit_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc0Request* /*request*/, ::grpcIClientContextManager::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::init_grpc0Request,::grpcIClientContextManager::init_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_grpc1() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::init_grpc1Request, ::grpcIClientContextManager::init_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::init_grpc1Request, ::grpcIClientContextManager::init_grpc1Response>* streamer) {
                       return this->Streamedinit_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::init_grpc1Request* /*request*/, ::grpcIClientContextManager::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::init_grpc1Request,::grpcIClientContextManager::init_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::startRequest, ::grpcIClientContextManager::startResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::startRequest, ::grpcIClientContextManager::startResponse>* streamer) {
                       return this->Streamedstart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::startRequest* /*request*/, ::grpcIClientContextManager::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::startRequest,::grpcIClientContextManager::startResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::stopRequest, ::grpcIClientContextManager::stopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::stopRequest, ::grpcIClientContextManager::stopResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::stopRequest* /*request*/, ::grpcIClientContextManager::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::stopRequest,::grpcIClientContextManager::stopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::getProcessingModeRequest, ::grpcIClientContextManager::getProcessingModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::getProcessingModeRequest, ::grpcIClientContextManager::getProcessingModeResponse>* streamer) {
                       return this->StreamedgetProcessingMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getProcessingModeRequest* /*request*/, ::grpcIClientContextManager::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetProcessingMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::getProcessingModeRequest,::grpcIClientContextManager::getProcessingModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::setCameraParameters_grpc0Request, ::grpcIClientContextManager::setCameraParameters_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::setCameraParameters_grpc0Request, ::grpcIClientContextManager::setCameraParameters_grpc0Response>* streamer) {
                       return this->StreamedsetCameraParameters_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetCameraParameters_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::setCameraParameters_grpc0Request,::grpcIClientContextManager::setCameraParameters_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::setCameraParameters_grpc1Request, ::grpcIClientContextManager::setCameraParameters_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::setCameraParameters_grpc1Request, ::grpcIClientContextManager::setCameraParameters_grpc1Response>* streamer) {
                       return this->StreamedsetCameraParameters_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* /*request*/, ::grpcIClientContextManager::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetCameraParameters_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::setCameraParameters_grpc1Request,::grpcIClientContextManager::setCameraParameters_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::setRectificationParametersRequest, ::grpcIClientContextManager::setRectificationParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::setRectificationParametersRequest, ::grpcIClientContextManager::setRectificationParametersResponse>* streamer) {
                       return this->StreamedsetRectificationParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::setRectificationParametersRequest* /*request*/, ::grpcIClientContextManager::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetRectificationParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::setRectificationParametersRequest,::grpcIClientContextManager::setRectificationParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::getCameraParametersRequest, ::grpcIClientContextManager::getCameraParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::getCameraParametersRequest, ::grpcIClientContextManager::getCameraParametersResponse>* streamer) {
                       return this->StreamedgetCameraParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getCameraParametersRequest* /*request*/, ::grpcIClientContextManager::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCameraParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::getCameraParametersRequest,::grpcIClientContextManager::getCameraParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* streamer) {
                       return this->StreamedrelocalizeProcessRequest_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrelocalizeProcessRequest_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request,::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* streamer) {
                       return this->StreamedrelocalizeProcessRequest_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrelocalizeProcessRequest_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request,::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::get3DTransformRequestRequest, ::grpcIClientContextManager::get3DTransformRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::get3DTransformRequestRequest, ::grpcIClientContextManager::get3DTransformRequestResponse>* streamer) {
                       return this->Streamedget3DTransformRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::get3DTransformRequestRequest* /*request*/, ::grpcIClientContextManager::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget3DTransformRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::get3DTransformRequestRequest,::grpcIClientContextManager::get3DTransformRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::getMappingDataRequestRequest, ::grpcIClientContextManager::getMappingDataRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::getMappingDataRequestRequest, ::grpcIClientContextManager::getMappingDataRequestResponse>* streamer) {
                       return this->StreamedgetMappingDataRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getMappingDataRequestRequest* /*request*/, ::grpcIClientContextManager::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMappingDataRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::getMappingDataRequestRequest,::grpcIClientContextManager::getMappingDataRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getLastPose() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::getLastPoseRequest, ::grpcIClientContextManager::getLastPoseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::getLastPoseRequest, ::grpcIClientContextManager::getLastPoseResponse>* streamer) {
                       return this->StreamedgetLastPose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getLastPoseRequest* /*request*/, ::grpcIClientContextManager::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetLastPose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::getLastPoseRequest,::grpcIClientContextManager::getLastPoseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIClientContextManager::getClientMapUUIDRequest, ::grpcIClientContextManager::getClientMapUUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIClientContextManager::getClientMapUUIDRequest, ::grpcIClientContextManager::getClientMapUUIDResponse>* streamer) {
                       return this->StreamedgetClientMapUUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIClientContextManager::getClientMapUUIDRequest* /*request*/, ::grpcIClientContextManager::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetClientMapUUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIClientContextManager::getClientMapUUIDRequest,::grpcIClientContextManager::getClientMapUUIDResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerClient<WithStreamedUnaryMethod_unregisterClient<WithStreamedUnaryMethod_getAllClientsUUID<WithStreamedUnaryMethod_getDeviceInfo<WithStreamedUnaryMethod_init_grpc0<WithStreamedUnaryMethod_init_grpc1<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getProcessingMode<WithStreamedUnaryMethod_setCameraParameters_grpc0<WithStreamedUnaryMethod_setCameraParameters_grpc1<WithStreamedUnaryMethod_setRectificationParameters<WithStreamedUnaryMethod_getCameraParameters<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1<WithStreamedUnaryMethod_get3DTransformRequest<WithStreamedUnaryMethod_getMappingDataRequest<WithStreamedUnaryMethod_getLastPose<WithStreamedUnaryMethod_getClientMapUUID<Service > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerClient<WithStreamedUnaryMethod_unregisterClient<WithStreamedUnaryMethod_getAllClientsUUID<WithStreamedUnaryMethod_getDeviceInfo<WithStreamedUnaryMethod_init_grpc0<WithStreamedUnaryMethod_init_grpc1<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getProcessingMode<WithStreamedUnaryMethod_setCameraParameters_grpc0<WithStreamedUnaryMethod_setCameraParameters_grpc1<WithStreamedUnaryMethod_setRectificationParameters<WithStreamedUnaryMethod_getCameraParameters<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1<WithStreamedUnaryMethod_get3DTransformRequest<WithStreamedUnaryMethod_getMappingDataRequest<WithStreamedUnaryMethod_getLastPose<WithStreamedUnaryMethod_getClientMapUUID<Service > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace grpcIClientContextManager


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_grpcIClientContextManagerService_2eproto__INCLUDED
