// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIRelocalizationTrackablePipelineService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIRelocalizationTrackablePipelineService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIRelocalizationTrackablePipelineService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIRelocalizationTrackablePipelineService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIRelocalizationTrackablePipelineService_2eproto;
namespace grpcIRelocalizationTrackablePipeline {
class getCameraParametersRequest;
struct getCameraParametersRequestDefaultTypeInternal;
extern getCameraParametersRequestDefaultTypeInternal _getCameraParametersRequest_default_instance_;
class getCameraParametersResponse;
struct getCameraParametersResponseDefaultTypeInternal;
extern getCameraParametersResponseDefaultTypeInternal _getCameraParametersResponse_default_instance_;
class getMapRequestRequest;
struct getMapRequestRequestDefaultTypeInternal;
extern getMapRequestRequestDefaultTypeInternal _getMapRequestRequest_default_instance_;
class getMapRequestResponse;
struct getMapRequestResponseDefaultTypeInternal;
extern getMapRequestResponseDefaultTypeInternal _getMapRequestResponse_default_instance_;
class init_grpc0Request;
struct init_grpc0RequestDefaultTypeInternal;
extern init_grpc0RequestDefaultTypeInternal _init_grpc0Request_default_instance_;
class init_grpc0Response;
struct init_grpc0ResponseDefaultTypeInternal;
extern init_grpc0ResponseDefaultTypeInternal _init_grpc0Response_default_instance_;
class init_grpc1Request;
struct init_grpc1RequestDefaultTypeInternal;
extern init_grpc1RequestDefaultTypeInternal _init_grpc1Request_default_instance_;
class init_grpc1Response;
struct init_grpc1ResponseDefaultTypeInternal;
extern init_grpc1ResponseDefaultTypeInternal _init_grpc1Response_default_instance_;
class init_grpc2Request;
struct init_grpc2RequestDefaultTypeInternal;
extern init_grpc2RequestDefaultTypeInternal _init_grpc2Request_default_instance_;
class init_grpc2Response;
struct init_grpc2ResponseDefaultTypeInternal;
extern init_grpc2ResponseDefaultTypeInternal _init_grpc2Response_default_instance_;
class init_grpc3Request;
struct init_grpc3RequestDefaultTypeInternal;
extern init_grpc3RequestDefaultTypeInternal _init_grpc3Request_default_instance_;
class init_grpc3Response;
struct init_grpc3ResponseDefaultTypeInternal;
extern init_grpc3ResponseDefaultTypeInternal _init_grpc3Response_default_instance_;
class relocalizeProcessRequest_grpc0Request;
struct relocalizeProcessRequest_grpc0RequestDefaultTypeInternal;
extern relocalizeProcessRequest_grpc0RequestDefaultTypeInternal _relocalizeProcessRequest_grpc0Request_default_instance_;
class relocalizeProcessRequest_grpc0Response;
struct relocalizeProcessRequest_grpc0ResponseDefaultTypeInternal;
extern relocalizeProcessRequest_grpc0ResponseDefaultTypeInternal _relocalizeProcessRequest_grpc0Response_default_instance_;
class relocalizeProcessRequest_grpc1Request;
struct relocalizeProcessRequest_grpc1RequestDefaultTypeInternal;
extern relocalizeProcessRequest_grpc1RequestDefaultTypeInternal _relocalizeProcessRequest_grpc1Request_default_instance_;
class relocalizeProcessRequest_grpc1Response;
struct relocalizeProcessRequest_grpc1ResponseDefaultTypeInternal;
extern relocalizeProcessRequest_grpc1ResponseDefaultTypeInternal _relocalizeProcessRequest_grpc1Response_default_instance_;
class relocalizeProcessRequest_grpc2Request;
struct relocalizeProcessRequest_grpc2RequestDefaultTypeInternal;
extern relocalizeProcessRequest_grpc2RequestDefaultTypeInternal _relocalizeProcessRequest_grpc2Request_default_instance_;
class relocalizeProcessRequest_grpc2Response;
struct relocalizeProcessRequest_grpc2ResponseDefaultTypeInternal;
extern relocalizeProcessRequest_grpc2ResponseDefaultTypeInternal _relocalizeProcessRequest_grpc2Response_default_instance_;
class setCameraParametersRequest;
struct setCameraParametersRequestDefaultTypeInternal;
extern setCameraParametersRequestDefaultTypeInternal _setCameraParametersRequest_default_instance_;
class setCameraParametersResponse;
struct setCameraParametersResponseDefaultTypeInternal;
extern setCameraParametersResponseDefaultTypeInternal _setCameraParametersResponse_default_instance_;
class start_grpc0Request;
struct start_grpc0RequestDefaultTypeInternal;
extern start_grpc0RequestDefaultTypeInternal _start_grpc0Request_default_instance_;
class start_grpc0Response;
struct start_grpc0ResponseDefaultTypeInternal;
extern start_grpc0ResponseDefaultTypeInternal _start_grpc0Response_default_instance_;
class start_grpc1Request;
struct start_grpc1RequestDefaultTypeInternal;
extern start_grpc1RequestDefaultTypeInternal _start_grpc1Request_default_instance_;
class start_grpc1Response;
struct start_grpc1ResponseDefaultTypeInternal;
extern start_grpc1ResponseDefaultTypeInternal _start_grpc1Response_default_instance_;
class stop_grpc0Request;
struct stop_grpc0RequestDefaultTypeInternal;
extern stop_grpc0RequestDefaultTypeInternal _stop_grpc0Request_default_instance_;
class stop_grpc0Response;
struct stop_grpc0ResponseDefaultTypeInternal;
extern stop_grpc0ResponseDefaultTypeInternal _stop_grpc0Response_default_instance_;
class stop_grpc1Request;
struct stop_grpc1RequestDefaultTypeInternal;
extern stop_grpc1RequestDefaultTypeInternal _stop_grpc1Request_default_instance_;
class stop_grpc1Response;
struct stop_grpc1ResponseDefaultTypeInternal;
extern stop_grpc1ResponseDefaultTypeInternal _stop_grpc1Response_default_instance_;
}  // namespace grpcIRelocalizationTrackablePipeline
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::getMapRequestRequest>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::init_grpc0Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::init_grpc0Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::init_grpc1Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::init_grpc1Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::init_grpc2Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::init_grpc2Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::init_grpc3Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::init_grpc3Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::init_grpc3Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::init_grpc3Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::start_grpc0Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::start_grpc0Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::start_grpc0Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::start_grpc0Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::start_grpc1Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::start_grpc1Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::start_grpc1Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::start_grpc1Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::stop_grpc0Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::stop_grpc0Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::stop_grpc0Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::stop_grpc0Response>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::stop_grpc1Request* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::stop_grpc1Request>(Arena*);
template<> ::grpcIRelocalizationTrackablePipeline::stop_grpc1Response* Arena::CreateMaybeMessage<::grpcIRelocalizationTrackablePipeline::stop_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIRelocalizationTrackablePipeline {

// ===================================================================

class init_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.init_grpc0Request) */ {
 public:
  inline init_grpc0Request() : init_grpc0Request(nullptr) {}
  ~init_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc0Request(const init_grpc0Request& from);
  init_grpc0Request(init_grpc0Request&& from) noexcept
    : init_grpc0Request() {
    *this = ::std::move(from);
  }

  inline init_grpc0Request& operator=(const init_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc0Request& operator=(init_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc0Request*>(
               &_init_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(init_grpc0Request& a, init_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc0Request& from) {
    init_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.init_grpc0Request";
  }
  protected:
  explicit init_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.init_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.init_grpc0Response) */ {
 public:
  inline init_grpc0Response() : init_grpc0Response(nullptr) {}
  ~init_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc0Response(const init_grpc0Response& from);
  init_grpc0Response(init_grpc0Response&& from) noexcept
    : init_grpc0Response() {
    *this = ::std::move(from);
  }

  inline init_grpc0Response& operator=(const init_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc0Response& operator=(init_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc0Response*>(
               &_init_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(init_grpc0Response& a, init_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc0Response& from) {
    init_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.init_grpc0Response";
  }
  protected:
  explicit init_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.init_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class start_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.start_grpc0Request) */ {
 public:
  inline start_grpc0Request() : start_grpc0Request(nullptr) {}
  ~start_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR start_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  start_grpc0Request(const start_grpc0Request& from);
  start_grpc0Request(start_grpc0Request&& from) noexcept
    : start_grpc0Request() {
    *this = ::std::move(from);
  }

  inline start_grpc0Request& operator=(const start_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline start_grpc0Request& operator=(start_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const start_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const start_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const start_grpc0Request*>(
               &_start_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(start_grpc0Request& a, start_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(start_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(start_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  start_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<start_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const start_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const start_grpc0Request& from) {
    start_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(start_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.start_grpc0Request";
  }
  protected:
  explicit start_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.start_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class start_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.start_grpc0Response) */ {
 public:
  inline start_grpc0Response() : start_grpc0Response(nullptr) {}
  ~start_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR start_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  start_grpc0Response(const start_grpc0Response& from);
  start_grpc0Response(start_grpc0Response&& from) noexcept
    : start_grpc0Response() {
    *this = ::std::move(from);
  }

  inline start_grpc0Response& operator=(const start_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline start_grpc0Response& operator=(start_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const start_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const start_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const start_grpc0Response*>(
               &_start_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(start_grpc0Response& a, start_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(start_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(start_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  start_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<start_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const start_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const start_grpc0Response& from) {
    start_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(start_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.start_grpc0Response";
  }
  protected:
  explicit start_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.start_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class stop_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.stop_grpc0Request) */ {
 public:
  inline stop_grpc0Request() : stop_grpc0Request(nullptr) {}
  ~stop_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR stop_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stop_grpc0Request(const stop_grpc0Request& from);
  stop_grpc0Request(stop_grpc0Request&& from) noexcept
    : stop_grpc0Request() {
    *this = ::std::move(from);
  }

  inline stop_grpc0Request& operator=(const stop_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline stop_grpc0Request& operator=(stop_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stop_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const stop_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const stop_grpc0Request*>(
               &_stop_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(stop_grpc0Request& a, stop_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(stop_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stop_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stop_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stop_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stop_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stop_grpc0Request& from) {
    stop_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stop_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.stop_grpc0Request";
  }
  protected:
  explicit stop_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.stop_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class stop_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.stop_grpc0Response) */ {
 public:
  inline stop_grpc0Response() : stop_grpc0Response(nullptr) {}
  ~stop_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR stop_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stop_grpc0Response(const stop_grpc0Response& from);
  stop_grpc0Response(stop_grpc0Response&& from) noexcept
    : stop_grpc0Response() {
    *this = ::std::move(from);
  }

  inline stop_grpc0Response& operator=(const stop_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline stop_grpc0Response& operator=(stop_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stop_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const stop_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const stop_grpc0Response*>(
               &_stop_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(stop_grpc0Response& a, stop_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(stop_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stop_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stop_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stop_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stop_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stop_grpc0Response& from) {
    stop_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stop_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.stop_grpc0Response";
  }
  protected:
  explicit stop_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.stop_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.init_grpc1Request) */ {
 public:
  inline init_grpc1Request() : init_grpc1Request(nullptr) {}
  ~init_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc1Request(const init_grpc1Request& from);
  init_grpc1Request(init_grpc1Request&& from) noexcept
    : init_grpc1Request() {
    *this = ::std::move(from);
  }

  inline init_grpc1Request& operator=(const init_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc1Request& operator=(init_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc1Request*>(
               &_init_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(init_grpc1Request& a, init_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc1Request& from) {
    init_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.init_grpc1Request";
  }
  protected:
  explicit init_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.init_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.init_grpc1Response) */ {
 public:
  inline init_grpc1Response() : init_grpc1Response(nullptr) {}
  ~init_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc1Response(const init_grpc1Response& from);
  init_grpc1Response(init_grpc1Response&& from) noexcept
    : init_grpc1Response() {
    *this = ::std::move(from);
  }

  inline init_grpc1Response& operator=(const init_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc1Response& operator=(init_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc1Response*>(
               &_init_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(init_grpc1Response& a, init_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc1Response& from) {
    init_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.init_grpc1Response";
  }
  protected:
  explicit init_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.init_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.init_grpc2Request) */ {
 public:
  inline init_grpc2Request() : init_grpc2Request(nullptr) {}
  ~init_grpc2Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc2Request(const init_grpc2Request& from);
  init_grpc2Request(init_grpc2Request&& from) noexcept
    : init_grpc2Request() {
    *this = ::std::move(from);
  }

  inline init_grpc2Request& operator=(const init_grpc2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc2Request& operator=(init_grpc2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc2Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc2Request*>(
               &_init_grpc2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(init_grpc2Request& a, init_grpc2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc2Request& from) {
    init_grpc2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.init_grpc2Request";
  }
  protected:
  explicit init_grpc2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kMapupdateServiceURLFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // string mapupdateServiceURL = 3;
  void clear_mapupdateserviceurl();
  const std::string& mapupdateserviceurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapupdateserviceurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapupdateserviceurl();
  PROTOBUF_NODISCARD std::string* release_mapupdateserviceurl();
  void set_allocated_mapupdateserviceurl(std::string* mapupdateserviceurl);
  private:
  const std::string& _internal_mapupdateserviceurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapupdateserviceurl(const std::string& value);
  std::string* _internal_mutable_mapupdateserviceurl();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.init_grpc2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapupdateserviceurl_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.init_grpc2Response) */ {
 public:
  inline init_grpc2Response() : init_grpc2Response(nullptr) {}
  ~init_grpc2Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc2Response(const init_grpc2Response& from);
  init_grpc2Response(init_grpc2Response&& from) noexcept
    : init_grpc2Response() {
    *this = ::std::move(from);
  }

  inline init_grpc2Response& operator=(const init_grpc2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc2Response& operator=(init_grpc2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc2Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc2Response*>(
               &_init_grpc2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(init_grpc2Response& a, init_grpc2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc2Response& from) {
    init_grpc2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.init_grpc2Response";
  }
  protected:
  explicit init_grpc2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.init_grpc2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class start_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.start_grpc1Request) */ {
 public:
  inline start_grpc1Request() : start_grpc1Request(nullptr) {}
  ~start_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR start_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  start_grpc1Request(const start_grpc1Request& from);
  start_grpc1Request(start_grpc1Request&& from) noexcept
    : start_grpc1Request() {
    *this = ::std::move(from);
  }

  inline start_grpc1Request& operator=(const start_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline start_grpc1Request& operator=(start_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const start_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const start_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const start_grpc1Request*>(
               &_start_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(start_grpc1Request& a, start_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(start_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(start_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  start_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<start_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const start_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const start_grpc1Request& from) {
    start_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(start_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.start_grpc1Request";
  }
  protected:
  explicit start_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.start_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class start_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.start_grpc1Response) */ {
 public:
  inline start_grpc1Response() : start_grpc1Response(nullptr) {}
  ~start_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR start_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  start_grpc1Response(const start_grpc1Response& from);
  start_grpc1Response(start_grpc1Response&& from) noexcept
    : start_grpc1Response() {
    *this = ::std::move(from);
  }

  inline start_grpc1Response& operator=(const start_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline start_grpc1Response& operator=(start_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const start_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const start_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const start_grpc1Response*>(
               &_start_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(start_grpc1Response& a, start_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(start_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(start_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  start_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<start_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const start_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const start_grpc1Response& from) {
    start_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(start_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.start_grpc1Response";
  }
  protected:
  explicit start_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.start_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class stop_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.stop_grpc1Request) */ {
 public:
  inline stop_grpc1Request() : stop_grpc1Request(nullptr) {}
  ~stop_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR stop_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stop_grpc1Request(const stop_grpc1Request& from);
  stop_grpc1Request(stop_grpc1Request&& from) noexcept
    : stop_grpc1Request() {
    *this = ::std::move(from);
  }

  inline stop_grpc1Request& operator=(const stop_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline stop_grpc1Request& operator=(stop_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stop_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const stop_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const stop_grpc1Request*>(
               &_stop_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(stop_grpc1Request& a, stop_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(stop_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stop_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stop_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stop_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stop_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stop_grpc1Request& from) {
    stop_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stop_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.stop_grpc1Request";
  }
  protected:
  explicit stop_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.stop_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class stop_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.stop_grpc1Response) */ {
 public:
  inline stop_grpc1Response() : stop_grpc1Response(nullptr) {}
  ~stop_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR stop_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stop_grpc1Response(const stop_grpc1Response& from);
  stop_grpc1Response(stop_grpc1Response&& from) noexcept
    : stop_grpc1Response() {
    *this = ::std::move(from);
  }

  inline stop_grpc1Response& operator=(const stop_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline stop_grpc1Response& operator=(stop_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stop_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const stop_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const stop_grpc1Response*>(
               &_stop_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(stop_grpc1Response& a, stop_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(stop_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stop_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stop_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stop_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stop_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stop_grpc1Response& from) {
    stop_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stop_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.stop_grpc1Response";
  }
  protected:
  explicit stop_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.stop_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest) */ {
 public:
  inline setCameraParametersRequest() : setCameraParametersRequest(nullptr) {}
  ~setCameraParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParametersRequest(const setCameraParametersRequest& from);
  setCameraParametersRequest(setCameraParametersRequest&& from) noexcept
    : setCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline setCameraParametersRequest& operator=(const setCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParametersRequest& operator=(setCameraParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setCameraParametersRequest*>(
               &_setCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(setCameraParametersRequest& a, setCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParametersRequest& from) {
    setCameraParametersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.setCameraParametersRequest";
  }
  protected:
  explicit setCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kCameraParamsFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes cameraParams = 3;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.setCameraParametersResponse) */ {
 public:
  inline setCameraParametersResponse() : setCameraParametersResponse(nullptr) {}
  ~setCameraParametersResponse() override;
  explicit PROTOBUF_CONSTEXPR setCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParametersResponse(const setCameraParametersResponse& from);
  setCameraParametersResponse(setCameraParametersResponse&& from) noexcept
    : setCameraParametersResponse() {
    *this = ::std::move(from);
  }

  inline setCameraParametersResponse& operator=(const setCameraParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParametersResponse& operator=(setCameraParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setCameraParametersResponse*>(
               &_setCameraParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(setCameraParametersResponse& a, setCameraParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParametersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParametersResponse& from) {
    setCameraParametersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParametersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.setCameraParametersResponse";
  }
  protected:
  explicit setCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.setCameraParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest) */ {
 public:
  inline getCameraParametersRequest() : getCameraParametersRequest(nullptr) {}
  ~getCameraParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR getCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParametersRequest(const getCameraParametersRequest& from);
  getCameraParametersRequest(getCameraParametersRequest&& from) noexcept
    : getCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline getCameraParametersRequest& operator=(const getCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParametersRequest& operator=(getCameraParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const getCameraParametersRequest*>(
               &_getCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(getCameraParametersRequest& a, getCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getCameraParametersRequest& from) {
    getCameraParametersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.getCameraParametersRequest";
  }
  protected:
  explicit getCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kCameraParamsFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes cameraParams = 3;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.getCameraParametersResponse) */ {
 public:
  inline getCameraParametersResponse() : getCameraParametersResponse(nullptr) {}
  ~getCameraParametersResponse() override;
  explicit PROTOBUF_CONSTEXPR getCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParametersResponse(const getCameraParametersResponse& from);
  getCameraParametersResponse(getCameraParametersResponse&& from) noexcept
    : getCameraParametersResponse() {
    *this = ::std::move(from);
  }

  inline getCameraParametersResponse& operator=(const getCameraParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParametersResponse& operator=(getCameraParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getCameraParametersResponse*>(
               &_getCameraParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(getCameraParametersResponse& a, getCameraParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParametersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getCameraParametersResponse& from) {
    getCameraParametersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParametersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.getCameraParametersResponse";
  }
  protected:
  explicit getCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParamsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes cameraParams = 1;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.getCameraParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeProcessRequest_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request) */ {
 public:
  inline relocalizeProcessRequest_grpc0Request() : relocalizeProcessRequest_grpc0Request(nullptr) {}
  ~relocalizeProcessRequest_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR relocalizeProcessRequest_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeProcessRequest_grpc0Request(const relocalizeProcessRequest_grpc0Request& from);
  relocalizeProcessRequest_grpc0Request(relocalizeProcessRequest_grpc0Request&& from) noexcept
    : relocalizeProcessRequest_grpc0Request() {
    *this = ::std::move(from);
  }

  inline relocalizeProcessRequest_grpc0Request& operator=(const relocalizeProcessRequest_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeProcessRequest_grpc0Request& operator=(relocalizeProcessRequest_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeProcessRequest_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeProcessRequest_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const relocalizeProcessRequest_grpc0Request*>(
               &_relocalizeProcessRequest_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(relocalizeProcessRequest_grpc0Request& a, relocalizeProcessRequest_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeProcessRequest_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeProcessRequest_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  relocalizeProcessRequest_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<relocalizeProcessRequest_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeProcessRequest_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const relocalizeProcessRequest_grpc0Request& from) {
    relocalizeProcessRequest_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeProcessRequest_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request";
  }
  protected:
  explicit relocalizeProcessRequest_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kImageFieldNumber = 3,
    kPoseCoarseFieldNumber = 4,
    kPoseFieldNumber = 5,
    kConfidenceFieldNumber = 6,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes image = 3;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes poseCoarse = 4;
  void clear_posecoarse();
  const std::string& posecoarse() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_posecoarse(ArgT0&& arg0, ArgT... args);
  std::string* mutable_posecoarse();
  PROTOBUF_NODISCARD std::string* release_posecoarse();
  void set_allocated_posecoarse(std::string* posecoarse);
  private:
  const std::string& _internal_posecoarse() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_posecoarse(const std::string& value);
  std::string* _internal_mutable_posecoarse();
  public:

  // bytes pose = 5;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes confidence = 6;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posecoarse_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeProcessRequest_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response) */ {
 public:
  inline relocalizeProcessRequest_grpc0Response() : relocalizeProcessRequest_grpc0Response(nullptr) {}
  ~relocalizeProcessRequest_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR relocalizeProcessRequest_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeProcessRequest_grpc0Response(const relocalizeProcessRequest_grpc0Response& from);
  relocalizeProcessRequest_grpc0Response(relocalizeProcessRequest_grpc0Response&& from) noexcept
    : relocalizeProcessRequest_grpc0Response() {
    *this = ::std::move(from);
  }

  inline relocalizeProcessRequest_grpc0Response& operator=(const relocalizeProcessRequest_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeProcessRequest_grpc0Response& operator=(relocalizeProcessRequest_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeProcessRequest_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeProcessRequest_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const relocalizeProcessRequest_grpc0Response*>(
               &_relocalizeProcessRequest_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(relocalizeProcessRequest_grpc0Response& a, relocalizeProcessRequest_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeProcessRequest_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeProcessRequest_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  relocalizeProcessRequest_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<relocalizeProcessRequest_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeProcessRequest_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const relocalizeProcessRequest_grpc0Response& from) {
    relocalizeProcessRequest_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeProcessRequest_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response";
  }
  protected:
  explicit relocalizeProcessRequest_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes pose = 1;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes confidence = 2;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeProcessRequest_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request) */ {
 public:
  inline relocalizeProcessRequest_grpc1Request() : relocalizeProcessRequest_grpc1Request(nullptr) {}
  ~relocalizeProcessRequest_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR relocalizeProcessRequest_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeProcessRequest_grpc1Request(const relocalizeProcessRequest_grpc1Request& from);
  relocalizeProcessRequest_grpc1Request(relocalizeProcessRequest_grpc1Request&& from) noexcept
    : relocalizeProcessRequest_grpc1Request() {
    *this = ::std::move(from);
  }

  inline relocalizeProcessRequest_grpc1Request& operator=(const relocalizeProcessRequest_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeProcessRequest_grpc1Request& operator=(relocalizeProcessRequest_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeProcessRequest_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeProcessRequest_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const relocalizeProcessRequest_grpc1Request*>(
               &_relocalizeProcessRequest_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(relocalizeProcessRequest_grpc1Request& a, relocalizeProcessRequest_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeProcessRequest_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeProcessRequest_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  relocalizeProcessRequest_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<relocalizeProcessRequest_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeProcessRequest_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const relocalizeProcessRequest_grpc1Request& from) {
    relocalizeProcessRequest_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeProcessRequest_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request";
  }
  protected:
  explicit relocalizeProcessRequest_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kImageFieldNumber = 3,
    kPoseCoarseFieldNumber = 4,
    kCurrPointCloudFieldNumber = 5,
    kPoseFieldNumber = 6,
    kConfidenceFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes image = 3;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes poseCoarse = 4;
  void clear_posecoarse();
  const std::string& posecoarse() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_posecoarse(ArgT0&& arg0, ArgT... args);
  std::string* mutable_posecoarse();
  PROTOBUF_NODISCARD std::string* release_posecoarse();
  void set_allocated_posecoarse(std::string* posecoarse);
  private:
  const std::string& _internal_posecoarse() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_posecoarse(const std::string& value);
  std::string* _internal_mutable_posecoarse();
  public:

  // bytes currPointCloud = 5;
  void clear_currpointcloud();
  const std::string& currpointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currpointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currpointcloud();
  PROTOBUF_NODISCARD std::string* release_currpointcloud();
  void set_allocated_currpointcloud(std::string* currpointcloud);
  private:
  const std::string& _internal_currpointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currpointcloud(const std::string& value);
  std::string* _internal_mutable_currpointcloud();
  public:

  // bytes pose = 6;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes confidence = 7;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posecoarse_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currpointcloud_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeProcessRequest_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response) */ {
 public:
  inline relocalizeProcessRequest_grpc1Response() : relocalizeProcessRequest_grpc1Response(nullptr) {}
  ~relocalizeProcessRequest_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR relocalizeProcessRequest_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeProcessRequest_grpc1Response(const relocalizeProcessRequest_grpc1Response& from);
  relocalizeProcessRequest_grpc1Response(relocalizeProcessRequest_grpc1Response&& from) noexcept
    : relocalizeProcessRequest_grpc1Response() {
    *this = ::std::move(from);
  }

  inline relocalizeProcessRequest_grpc1Response& operator=(const relocalizeProcessRequest_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeProcessRequest_grpc1Response& operator=(relocalizeProcessRequest_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeProcessRequest_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeProcessRequest_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const relocalizeProcessRequest_grpc1Response*>(
               &_relocalizeProcessRequest_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(relocalizeProcessRequest_grpc1Response& a, relocalizeProcessRequest_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeProcessRequest_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeProcessRequest_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  relocalizeProcessRequest_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<relocalizeProcessRequest_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeProcessRequest_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const relocalizeProcessRequest_grpc1Response& from) {
    relocalizeProcessRequest_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeProcessRequest_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response";
  }
  protected:
  explicit relocalizeProcessRequest_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrPointCloudFieldNumber = 1,
    kPoseFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes currPointCloud = 1;
  void clear_currpointcloud();
  const std::string& currpointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currpointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currpointcloud();
  PROTOBUF_NODISCARD std::string* release_currpointcloud();
  void set_allocated_currpointcloud(std::string* currpointcloud);
  private:
  const std::string& _internal_currpointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currpointcloud(const std::string& value);
  std::string* _internal_mutable_currpointcloud();
  public:

  // bytes pose = 2;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes confidence = 3;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currpointcloud_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeProcessRequest_grpc2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request) */ {
 public:
  inline relocalizeProcessRequest_grpc2Request() : relocalizeProcessRequest_grpc2Request(nullptr) {}
  ~relocalizeProcessRequest_grpc2Request() override;
  explicit PROTOBUF_CONSTEXPR relocalizeProcessRequest_grpc2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeProcessRequest_grpc2Request(const relocalizeProcessRequest_grpc2Request& from);
  relocalizeProcessRequest_grpc2Request(relocalizeProcessRequest_grpc2Request&& from) noexcept
    : relocalizeProcessRequest_grpc2Request() {
    *this = ::std::move(from);
  }

  inline relocalizeProcessRequest_grpc2Request& operator=(const relocalizeProcessRequest_grpc2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeProcessRequest_grpc2Request& operator=(relocalizeProcessRequest_grpc2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeProcessRequest_grpc2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeProcessRequest_grpc2Request* internal_default_instance() {
    return reinterpret_cast<const relocalizeProcessRequest_grpc2Request*>(
               &_relocalizeProcessRequest_grpc2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(relocalizeProcessRequest_grpc2Request& a, relocalizeProcessRequest_grpc2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeProcessRequest_grpc2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeProcessRequest_grpc2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  relocalizeProcessRequest_grpc2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<relocalizeProcessRequest_grpc2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeProcessRequest_grpc2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const relocalizeProcessRequest_grpc2Request& from) {
    relocalizeProcessRequest_grpc2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeProcessRequest_grpc2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request";
  }
  protected:
  explicit relocalizeProcessRequest_grpc2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kImageFieldNumber = 3,
    kPoseCoarseFieldNumber = 4,
    kPoseFieldNumber = 5,
    kConfidenceFieldNumber = 6,
    kDetectedObjectsFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes image = 3;
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes poseCoarse = 4;
  void clear_posecoarse();
  const std::string& posecoarse() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_posecoarse(ArgT0&& arg0, ArgT... args);
  std::string* mutable_posecoarse();
  PROTOBUF_NODISCARD std::string* release_posecoarse();
  void set_allocated_posecoarse(std::string* posecoarse);
  private:
  const std::string& _internal_posecoarse() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_posecoarse(const std::string& value);
  std::string* _internal_mutable_posecoarse();
  public:

  // bytes pose = 5;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes confidence = 6;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // bytes detectedObjects = 7;
  void clear_detectedobjects();
  const std::string& detectedobjects() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detectedobjects(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detectedobjects();
  PROTOBUF_NODISCARD std::string* release_detectedobjects();
  void set_allocated_detectedobjects(std::string* detectedobjects);
  private:
  const std::string& _internal_detectedobjects() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detectedobjects(const std::string& value);
  std::string* _internal_mutable_detectedobjects();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posecoarse_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detectedobjects_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeProcessRequest_grpc2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response) */ {
 public:
  inline relocalizeProcessRequest_grpc2Response() : relocalizeProcessRequest_grpc2Response(nullptr) {}
  ~relocalizeProcessRequest_grpc2Response() override;
  explicit PROTOBUF_CONSTEXPR relocalizeProcessRequest_grpc2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeProcessRequest_grpc2Response(const relocalizeProcessRequest_grpc2Response& from);
  relocalizeProcessRequest_grpc2Response(relocalizeProcessRequest_grpc2Response&& from) noexcept
    : relocalizeProcessRequest_grpc2Response() {
    *this = ::std::move(from);
  }

  inline relocalizeProcessRequest_grpc2Response& operator=(const relocalizeProcessRequest_grpc2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeProcessRequest_grpc2Response& operator=(relocalizeProcessRequest_grpc2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeProcessRequest_grpc2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeProcessRequest_grpc2Response* internal_default_instance() {
    return reinterpret_cast<const relocalizeProcessRequest_grpc2Response*>(
               &_relocalizeProcessRequest_grpc2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(relocalizeProcessRequest_grpc2Response& a, relocalizeProcessRequest_grpc2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeProcessRequest_grpc2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeProcessRequest_grpc2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  relocalizeProcessRequest_grpc2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<relocalizeProcessRequest_grpc2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeProcessRequest_grpc2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const relocalizeProcessRequest_grpc2Response& from) {
    relocalizeProcessRequest_grpc2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeProcessRequest_grpc2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response";
  }
  protected:
  explicit relocalizeProcessRequest_grpc2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kDetectedObjectsFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes pose = 1;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes confidence = 2;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // bytes detectedObjects = 3;
  void clear_detectedobjects();
  const std::string& detectedobjects() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detectedobjects(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detectedobjects();
  PROTOBUF_NODISCARD std::string* release_detectedobjects();
  void set_allocated_detectedobjects(std::string* detectedobjects);
  private:
  const std::string& _internal_detectedobjects() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detectedobjects(const std::string& value);
  std::string* _internal_mutable_detectedobjects();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detectedobjects_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.getMapRequestRequest) */ {
 public:
  inline getMapRequestRequest() : getMapRequestRequest(nullptr) {}
  ~getMapRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR getMapRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequestRequest(const getMapRequestRequest& from);
  getMapRequestRequest(getMapRequestRequest&& from) noexcept
    : getMapRequestRequest() {
    *this = ::std::move(from);
  }

  inline getMapRequestRequest& operator=(const getMapRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequestRequest& operator=(getMapRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequestRequest* internal_default_instance() {
    return reinterpret_cast<const getMapRequestRequest*>(
               &_getMapRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(getMapRequestRequest& a, getMapRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapRequestRequest& from) {
    getMapRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.getMapRequestRequest";
  }
  protected:
  explicit getMapRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kMapFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes map = 3;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.getMapRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.getMapRequestResponse) */ {
 public:
  inline getMapRequestResponse() : getMapRequestResponse(nullptr) {}
  ~getMapRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR getMapRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequestResponse(const getMapRequestResponse& from);
  getMapRequestResponse(getMapRequestResponse&& from) noexcept
    : getMapRequestResponse() {
    *this = ::std::move(from);
  }

  inline getMapRequestResponse& operator=(const getMapRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequestResponse& operator=(getMapRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequestResponse* internal_default_instance() {
    return reinterpret_cast<const getMapRequestResponse*>(
               &_getMapRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(getMapRequestResponse& a, getMapRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapRequestResponse& from) {
    getMapRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.getMapRequestResponse";
  }
  protected:
  explicit getMapRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes map = 1;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.getMapRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc3Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.init_grpc3Request) */ {
 public:
  inline init_grpc3Request() : init_grpc3Request(nullptr) {}
  ~init_grpc3Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc3Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc3Request(const init_grpc3Request& from);
  init_grpc3Request(init_grpc3Request&& from) noexcept
    : init_grpc3Request() {
    *this = ::std::move(from);
  }

  inline init_grpc3Request& operator=(const init_grpc3Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc3Request& operator=(init_grpc3Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc3Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc3Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc3Request*>(
               &_init_grpc3Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(init_grpc3Request& a, init_grpc3Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc3Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc3Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc3Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc3Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc3Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc3Request& from) {
    init_grpc3Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc3Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.init_grpc3Request";
  }
  protected:
  explicit init_grpc3Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 2,
    kTrackableObjectsFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string clientUUID = 2;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes trackableObjects = 3;
  void clear_trackableobjects();
  const std::string& trackableobjects() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackableobjects(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackableobjects();
  PROTOBUF_NODISCARD std::string* release_trackableobjects();
  void set_allocated_trackableobjects(std::string* trackableobjects);
  private:
  const std::string& _internal_trackableobjects() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackableobjects(const std::string& value);
  std::string* _internal_mutable_trackableobjects();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.init_grpc3Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackableobjects_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc3Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizationTrackablePipeline.init_grpc3Response) */ {
 public:
  inline init_grpc3Response() : init_grpc3Response(nullptr) {}
  ~init_grpc3Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc3Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc3Response(const init_grpc3Response& from);
  init_grpc3Response(init_grpc3Response&& from) noexcept
    : init_grpc3Response() {
    *this = ::std::move(from);
  }

  inline init_grpc3Response& operator=(const init_grpc3Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc3Response& operator=(init_grpc3Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc3Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc3Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc3Response*>(
               &_init_grpc3Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(init_grpc3Response& a, init_grpc3Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc3Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc3Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc3Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc3Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc3Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc3Response& from) {
    init_grpc3Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc3Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizationTrackablePipeline.init_grpc3Response";
  }
  protected:
  explicit init_grpc3Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizationTrackablePipeline.init_grpc3Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIRelocalizationTrackablePipelineService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// init_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc0Request.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// init_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// start_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void start_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t start_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t start_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.start_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void start_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void start_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.start_grpc0Request.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// start_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void start_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t start_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t start_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.start_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void start_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void start_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.start_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stop_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void stop_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t stop_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t stop_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.stop_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void stop_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void stop_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.stop_grpc0Request.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// stop_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void stop_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t stop_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t stop_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.stop_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stop_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void stop_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.stop_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// init_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc1Request.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void init_grpc1Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& init_grpc1Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc1Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc1Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc1Request.clientUUID)
}
inline std::string* init_grpc1Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.init_grpc1Request.clientUUID)
  return _s;
}
inline const std::string& init_grpc1Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void init_grpc1Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc1Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc1Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.init_grpc1Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void init_grpc1Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.init_grpc1Request.clientUUID)
}

// -------------------------------------------------------------------

// init_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// init_grpc2Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc2Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc2Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc2Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc2Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc2Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc2Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc2Request.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void init_grpc2Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& init_grpc2Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc2Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc2Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc2Request.clientUUID)
}
inline std::string* init_grpc2Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.init_grpc2Request.clientUUID)
  return _s;
}
inline const std::string& init_grpc2Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void init_grpc2Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc2Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc2Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.init_grpc2Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void init_grpc2Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.init_grpc2Request.clientUUID)
}

// string mapupdateServiceURL = 3;
inline void init_grpc2Request::clear_mapupdateserviceurl() {
  _impl_.mapupdateserviceurl_.ClearToEmpty();
}
inline const std::string& init_grpc2Request::mapupdateserviceurl() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc2Request.mapupdateServiceURL)
  return _internal_mapupdateserviceurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc2Request::set_mapupdateserviceurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapupdateserviceurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc2Request.mapupdateServiceURL)
}
inline std::string* init_grpc2Request::mutable_mapupdateserviceurl() {
  std::string* _s = _internal_mutable_mapupdateserviceurl();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.init_grpc2Request.mapupdateServiceURL)
  return _s;
}
inline const std::string& init_grpc2Request::_internal_mapupdateserviceurl() const {
  return _impl_.mapupdateserviceurl_.Get();
}
inline void init_grpc2Request::_internal_set_mapupdateserviceurl(const std::string& value) {
  
  _impl_.mapupdateserviceurl_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc2Request::_internal_mutable_mapupdateserviceurl() {
  
  return _impl_.mapupdateserviceurl_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc2Request::release_mapupdateserviceurl() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.init_grpc2Request.mapupdateServiceURL)
  return _impl_.mapupdateserviceurl_.Release();
}
inline void init_grpc2Request::set_allocated_mapupdateserviceurl(std::string* mapupdateserviceurl) {
  if (mapupdateserviceurl != nullptr) {
    
  } else {
    
  }
  _impl_.mapupdateserviceurl_.SetAllocated(mapupdateserviceurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapupdateserviceurl_.IsDefault()) {
    _impl_.mapupdateserviceurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.init_grpc2Request.mapupdateServiceURL)
}

// -------------------------------------------------------------------

// init_grpc2Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc2Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc2Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc2Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc2Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc2Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc2Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc2Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// start_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void start_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t start_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t start_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.start_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void start_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void start_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.start_grpc1Request.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void start_grpc1Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& start_grpc1Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.start_grpc1Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void start_grpc1Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.start_grpc1Request.clientUUID)
}
inline std::string* start_grpc1Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.start_grpc1Request.clientUUID)
  return _s;
}
inline const std::string& start_grpc1Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void start_grpc1Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* start_grpc1Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* start_grpc1Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.start_grpc1Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void start_grpc1Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.start_grpc1Request.clientUUID)
}

// -------------------------------------------------------------------

// start_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void start_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t start_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t start_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.start_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void start_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void start_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.start_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stop_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void stop_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t stop_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t stop_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.stop_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void stop_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void stop_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.stop_grpc1Request.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void stop_grpc1Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& stop_grpc1Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.stop_grpc1Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void stop_grpc1Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.stop_grpc1Request.clientUUID)
}
inline std::string* stop_grpc1Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.stop_grpc1Request.clientUUID)
  return _s;
}
inline const std::string& stop_grpc1Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void stop_grpc1Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* stop_grpc1Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* stop_grpc1Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.stop_grpc1Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void stop_grpc1Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.stop_grpc1Request.clientUUID)
}

// -------------------------------------------------------------------

// stop_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void stop_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t stop_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t stop_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.stop_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stop_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void stop_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.stop_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setCameraParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void setCameraParametersRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setCameraParametersRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setCameraParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setCameraParametersRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setCameraParametersRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void setCameraParametersRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParametersRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.clientUUID)
}
inline std::string* setCameraParametersRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.clientUUID)
  return _s;
}
inline const std::string& setCameraParametersRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void setCameraParametersRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void setCameraParametersRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.clientUUID)
}

// bytes cameraParams = 3;
inline void setCameraParametersRequest::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& setCameraParametersRequest::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParametersRequest::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.cameraParams)
}
inline std::string* setCameraParametersRequest::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.cameraParams)
  return _s;
}
inline const std::string& setCameraParametersRequest::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void setCameraParametersRequest::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParametersRequest::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void setCameraParametersRequest::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.setCameraParametersRequest.cameraParams)
}

// -------------------------------------------------------------------

// setCameraParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setCameraParametersResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setCameraParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setCameraParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.setCameraParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setCameraParametersResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setCameraParametersResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.setCameraParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getCameraParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void getCameraParametersRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getCameraParametersRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getCameraParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getCameraParametersRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getCameraParametersRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void getCameraParametersRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& getCameraParametersRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.clientUUID)
}
inline std::string* getCameraParametersRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.clientUUID)
  return _s;
}
inline const std::string& getCameraParametersRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void getCameraParametersRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void getCameraParametersRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.clientUUID)
}

// bytes cameraParams = 3;
inline void getCameraParametersRequest::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& getCameraParametersRequest::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersRequest::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.cameraParams)
}
inline std::string* getCameraParametersRequest::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.cameraParams)
  return _s;
}
inline const std::string& getCameraParametersRequest::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void getCameraParametersRequest::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void getCameraParametersRequest::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.getCameraParametersRequest.cameraParams)
}

// -------------------------------------------------------------------

// getCameraParametersResponse

// bytes cameraParams = 1;
inline void getCameraParametersResponse::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& getCameraParametersResponse::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getCameraParametersResponse.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersResponse::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getCameraParametersResponse.cameraParams)
}
inline std::string* getCameraParametersResponse::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.getCameraParametersResponse.cameraParams)
  return _s;
}
inline const std::string& getCameraParametersResponse::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void getCameraParametersResponse::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersResponse::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersResponse::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.getCameraParametersResponse.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void getCameraParametersResponse::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.getCameraParametersResponse.cameraParams)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getCameraParametersResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getCameraParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getCameraParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getCameraParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getCameraParametersResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getCameraParametersResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getCameraParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// relocalizeProcessRequest_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void relocalizeProcessRequest_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t relocalizeProcessRequest_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t relocalizeProcessRequest_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void relocalizeProcessRequest_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void relocalizeProcessRequest_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void relocalizeProcessRequest_grpc0Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc0Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc0Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.clientUUID)
}
inline std::string* relocalizeProcessRequest_grpc0Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.clientUUID)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc0Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void relocalizeProcessRequest_grpc0Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void relocalizeProcessRequest_grpc0Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.clientUUID)
}

// bytes image = 3;
inline void relocalizeProcessRequest_grpc0Request::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc0Request::image() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc0Request::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.image)
}
inline std::string* relocalizeProcessRequest_grpc0Request::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.image)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc0Request::_internal_image() const {
  return _impl_.image_.Get();
}
inline void relocalizeProcessRequest_grpc0Request::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::release_image() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.image)
  return _impl_.image_.Release();
}
inline void relocalizeProcessRequest_grpc0Request::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.image)
}

// bytes poseCoarse = 4;
inline void relocalizeProcessRequest_grpc0Request::clear_posecoarse() {
  _impl_.posecoarse_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc0Request::posecoarse() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.poseCoarse)
  return _internal_posecoarse();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc0Request::set_posecoarse(ArgT0&& arg0, ArgT... args) {
 
 _impl_.posecoarse_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.poseCoarse)
}
inline std::string* relocalizeProcessRequest_grpc0Request::mutable_posecoarse() {
  std::string* _s = _internal_mutable_posecoarse();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.poseCoarse)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc0Request::_internal_posecoarse() const {
  return _impl_.posecoarse_.Get();
}
inline void relocalizeProcessRequest_grpc0Request::_internal_set_posecoarse(const std::string& value) {
  
  _impl_.posecoarse_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::_internal_mutable_posecoarse() {
  
  return _impl_.posecoarse_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::release_posecoarse() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.poseCoarse)
  return _impl_.posecoarse_.Release();
}
inline void relocalizeProcessRequest_grpc0Request::set_allocated_posecoarse(std::string* posecoarse) {
  if (posecoarse != nullptr) {
    
  } else {
    
  }
  _impl_.posecoarse_.SetAllocated(posecoarse, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.posecoarse_.IsDefault()) {
    _impl_.posecoarse_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.poseCoarse)
}

// bytes pose = 5;
inline void relocalizeProcessRequest_grpc0Request::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc0Request::pose() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc0Request::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.pose)
}
inline std::string* relocalizeProcessRequest_grpc0Request::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.pose)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc0Request::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void relocalizeProcessRequest_grpc0Request::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.pose)
  return _impl_.pose_.Release();
}
inline void relocalizeProcessRequest_grpc0Request::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.pose)
}

// bytes confidence = 6;
inline void relocalizeProcessRequest_grpc0Request::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc0Request::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc0Request::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.confidence)
}
inline std::string* relocalizeProcessRequest_grpc0Request::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.confidence)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc0Request::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void relocalizeProcessRequest_grpc0Request::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Request::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.confidence)
  return _impl_.confidence_.Release();
}
inline void relocalizeProcessRequest_grpc0Request::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Request.confidence)
}

// -------------------------------------------------------------------

// relocalizeProcessRequest_grpc0Response

// bytes pose = 1;
inline void relocalizeProcessRequest_grpc0Response::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc0Response::pose() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc0Response::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.pose)
}
inline std::string* relocalizeProcessRequest_grpc0Response::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.pose)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc0Response::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void relocalizeProcessRequest_grpc0Response::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Response::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Response::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.pose)
  return _impl_.pose_.Release();
}
inline void relocalizeProcessRequest_grpc0Response::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.pose)
}

// bytes confidence = 2;
inline void relocalizeProcessRequest_grpc0Response::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc0Response::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc0Response::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.confidence)
}
inline std::string* relocalizeProcessRequest_grpc0Response::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.confidence)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc0Response::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void relocalizeProcessRequest_grpc0Response::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Response::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc0Response::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.confidence)
  return _impl_.confidence_.Release();
}
inline void relocalizeProcessRequest_grpc0Response::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.confidence)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void relocalizeProcessRequest_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t relocalizeProcessRequest_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t relocalizeProcessRequest_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void relocalizeProcessRequest_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void relocalizeProcessRequest_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// relocalizeProcessRequest_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void relocalizeProcessRequest_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t relocalizeProcessRequest_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t relocalizeProcessRequest_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void relocalizeProcessRequest_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void relocalizeProcessRequest_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void relocalizeProcessRequest_grpc1Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc1Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc1Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.clientUUID)
}
inline std::string* relocalizeProcessRequest_grpc1Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.clientUUID)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc1Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void relocalizeProcessRequest_grpc1Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void relocalizeProcessRequest_grpc1Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.clientUUID)
}

// bytes image = 3;
inline void relocalizeProcessRequest_grpc1Request::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc1Request::image() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc1Request::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.image)
}
inline std::string* relocalizeProcessRequest_grpc1Request::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.image)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc1Request::_internal_image() const {
  return _impl_.image_.Get();
}
inline void relocalizeProcessRequest_grpc1Request::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::release_image() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.image)
  return _impl_.image_.Release();
}
inline void relocalizeProcessRequest_grpc1Request::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.image)
}

// bytes poseCoarse = 4;
inline void relocalizeProcessRequest_grpc1Request::clear_posecoarse() {
  _impl_.posecoarse_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc1Request::posecoarse() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.poseCoarse)
  return _internal_posecoarse();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc1Request::set_posecoarse(ArgT0&& arg0, ArgT... args) {
 
 _impl_.posecoarse_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.poseCoarse)
}
inline std::string* relocalizeProcessRequest_grpc1Request::mutable_posecoarse() {
  std::string* _s = _internal_mutable_posecoarse();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.poseCoarse)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc1Request::_internal_posecoarse() const {
  return _impl_.posecoarse_.Get();
}
inline void relocalizeProcessRequest_grpc1Request::_internal_set_posecoarse(const std::string& value) {
  
  _impl_.posecoarse_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::_internal_mutable_posecoarse() {
  
  return _impl_.posecoarse_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::release_posecoarse() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.poseCoarse)
  return _impl_.posecoarse_.Release();
}
inline void relocalizeProcessRequest_grpc1Request::set_allocated_posecoarse(std::string* posecoarse) {
  if (posecoarse != nullptr) {
    
  } else {
    
  }
  _impl_.posecoarse_.SetAllocated(posecoarse, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.posecoarse_.IsDefault()) {
    _impl_.posecoarse_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.poseCoarse)
}

// bytes currPointCloud = 5;
inline void relocalizeProcessRequest_grpc1Request::clear_currpointcloud() {
  _impl_.currpointcloud_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc1Request::currpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.currPointCloud)
  return _internal_currpointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc1Request::set_currpointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currpointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.currPointCloud)
}
inline std::string* relocalizeProcessRequest_grpc1Request::mutable_currpointcloud() {
  std::string* _s = _internal_mutable_currpointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.currPointCloud)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc1Request::_internal_currpointcloud() const {
  return _impl_.currpointcloud_.Get();
}
inline void relocalizeProcessRequest_grpc1Request::_internal_set_currpointcloud(const std::string& value) {
  
  _impl_.currpointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::_internal_mutable_currpointcloud() {
  
  return _impl_.currpointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::release_currpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.currPointCloud)
  return _impl_.currpointcloud_.Release();
}
inline void relocalizeProcessRequest_grpc1Request::set_allocated_currpointcloud(std::string* currpointcloud) {
  if (currpointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.currpointcloud_.SetAllocated(currpointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currpointcloud_.IsDefault()) {
    _impl_.currpointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.currPointCloud)
}

// bytes pose = 6;
inline void relocalizeProcessRequest_grpc1Request::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc1Request::pose() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc1Request::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.pose)
}
inline std::string* relocalizeProcessRequest_grpc1Request::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.pose)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc1Request::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void relocalizeProcessRequest_grpc1Request::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.pose)
  return _impl_.pose_.Release();
}
inline void relocalizeProcessRequest_grpc1Request::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.pose)
}

// bytes confidence = 7;
inline void relocalizeProcessRequest_grpc1Request::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc1Request::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc1Request::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.confidence)
}
inline std::string* relocalizeProcessRequest_grpc1Request::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.confidence)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc1Request::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void relocalizeProcessRequest_grpc1Request::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Request::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.confidence)
  return _impl_.confidence_.Release();
}
inline void relocalizeProcessRequest_grpc1Request::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Request.confidence)
}

// -------------------------------------------------------------------

// relocalizeProcessRequest_grpc1Response

// bytes currPointCloud = 1;
inline void relocalizeProcessRequest_grpc1Response::clear_currpointcloud() {
  _impl_.currpointcloud_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc1Response::currpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.currPointCloud)
  return _internal_currpointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc1Response::set_currpointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currpointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.currPointCloud)
}
inline std::string* relocalizeProcessRequest_grpc1Response::mutable_currpointcloud() {
  std::string* _s = _internal_mutable_currpointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.currPointCloud)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc1Response::_internal_currpointcloud() const {
  return _impl_.currpointcloud_.Get();
}
inline void relocalizeProcessRequest_grpc1Response::_internal_set_currpointcloud(const std::string& value) {
  
  _impl_.currpointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Response::_internal_mutable_currpointcloud() {
  
  return _impl_.currpointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Response::release_currpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.currPointCloud)
  return _impl_.currpointcloud_.Release();
}
inline void relocalizeProcessRequest_grpc1Response::set_allocated_currpointcloud(std::string* currpointcloud) {
  if (currpointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.currpointcloud_.SetAllocated(currpointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currpointcloud_.IsDefault()) {
    _impl_.currpointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.currPointCloud)
}

// bytes pose = 2;
inline void relocalizeProcessRequest_grpc1Response::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc1Response::pose() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc1Response::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.pose)
}
inline std::string* relocalizeProcessRequest_grpc1Response::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.pose)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc1Response::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void relocalizeProcessRequest_grpc1Response::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Response::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Response::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.pose)
  return _impl_.pose_.Release();
}
inline void relocalizeProcessRequest_grpc1Response::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.pose)
}

// bytes confidence = 3;
inline void relocalizeProcessRequest_grpc1Response::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc1Response::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc1Response::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.confidence)
}
inline std::string* relocalizeProcessRequest_grpc1Response::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.confidence)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc1Response::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void relocalizeProcessRequest_grpc1Response::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Response::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc1Response::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.confidence)
  return _impl_.confidence_.Release();
}
inline void relocalizeProcessRequest_grpc1Response::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.confidence)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void relocalizeProcessRequest_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t relocalizeProcessRequest_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t relocalizeProcessRequest_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void relocalizeProcessRequest_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void relocalizeProcessRequest_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// relocalizeProcessRequest_grpc2Request

// int32 grpcServerCompressionFormat = 1;
inline void relocalizeProcessRequest_grpc2Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t relocalizeProcessRequest_grpc2Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t relocalizeProcessRequest_grpc2Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void relocalizeProcessRequest_grpc2Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void relocalizeProcessRequest_grpc2Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void relocalizeProcessRequest_grpc2Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc2Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc2Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.clientUUID)
}
inline std::string* relocalizeProcessRequest_grpc2Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.clientUUID)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc2Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void relocalizeProcessRequest_grpc2Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void relocalizeProcessRequest_grpc2Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.clientUUID)
}

// bytes image = 3;
inline void relocalizeProcessRequest_grpc2Request::clear_image() {
  _impl_.image_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc2Request::image() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc2Request::set_image(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.image)
}
inline std::string* relocalizeProcessRequest_grpc2Request::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.image)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc2Request::_internal_image() const {
  return _impl_.image_.Get();
}
inline void relocalizeProcessRequest_grpc2Request::_internal_set_image(const std::string& value) {
  
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::_internal_mutable_image() {
  
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::release_image() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.image)
  return _impl_.image_.Release();
}
inline void relocalizeProcessRequest_grpc2Request::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.image)
}

// bytes poseCoarse = 4;
inline void relocalizeProcessRequest_grpc2Request::clear_posecoarse() {
  _impl_.posecoarse_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc2Request::posecoarse() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.poseCoarse)
  return _internal_posecoarse();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc2Request::set_posecoarse(ArgT0&& arg0, ArgT... args) {
 
 _impl_.posecoarse_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.poseCoarse)
}
inline std::string* relocalizeProcessRequest_grpc2Request::mutable_posecoarse() {
  std::string* _s = _internal_mutable_posecoarse();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.poseCoarse)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc2Request::_internal_posecoarse() const {
  return _impl_.posecoarse_.Get();
}
inline void relocalizeProcessRequest_grpc2Request::_internal_set_posecoarse(const std::string& value) {
  
  _impl_.posecoarse_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::_internal_mutable_posecoarse() {
  
  return _impl_.posecoarse_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::release_posecoarse() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.poseCoarse)
  return _impl_.posecoarse_.Release();
}
inline void relocalizeProcessRequest_grpc2Request::set_allocated_posecoarse(std::string* posecoarse) {
  if (posecoarse != nullptr) {
    
  } else {
    
  }
  _impl_.posecoarse_.SetAllocated(posecoarse, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.posecoarse_.IsDefault()) {
    _impl_.posecoarse_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.poseCoarse)
}

// bytes pose = 5;
inline void relocalizeProcessRequest_grpc2Request::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc2Request::pose() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc2Request::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.pose)
}
inline std::string* relocalizeProcessRequest_grpc2Request::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.pose)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc2Request::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void relocalizeProcessRequest_grpc2Request::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.pose)
  return _impl_.pose_.Release();
}
inline void relocalizeProcessRequest_grpc2Request::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.pose)
}

// bytes confidence = 6;
inline void relocalizeProcessRequest_grpc2Request::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc2Request::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc2Request::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.confidence)
}
inline std::string* relocalizeProcessRequest_grpc2Request::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.confidence)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc2Request::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void relocalizeProcessRequest_grpc2Request::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.confidence)
  return _impl_.confidence_.Release();
}
inline void relocalizeProcessRequest_grpc2Request::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.confidence)
}

// bytes detectedObjects = 7;
inline void relocalizeProcessRequest_grpc2Request::clear_detectedobjects() {
  _impl_.detectedobjects_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc2Request::detectedobjects() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.detectedObjects)
  return _internal_detectedobjects();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc2Request::set_detectedobjects(ArgT0&& arg0, ArgT... args) {
 
 _impl_.detectedobjects_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.detectedObjects)
}
inline std::string* relocalizeProcessRequest_grpc2Request::mutable_detectedobjects() {
  std::string* _s = _internal_mutable_detectedobjects();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.detectedObjects)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc2Request::_internal_detectedobjects() const {
  return _impl_.detectedobjects_.Get();
}
inline void relocalizeProcessRequest_grpc2Request::_internal_set_detectedobjects(const std::string& value) {
  
  _impl_.detectedobjects_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::_internal_mutable_detectedobjects() {
  
  return _impl_.detectedobjects_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Request::release_detectedobjects() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.detectedObjects)
  return _impl_.detectedobjects_.Release();
}
inline void relocalizeProcessRequest_grpc2Request::set_allocated_detectedobjects(std::string* detectedobjects) {
  if (detectedobjects != nullptr) {
    
  } else {
    
  }
  _impl_.detectedobjects_.SetAllocated(detectedobjects, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detectedobjects_.IsDefault()) {
    _impl_.detectedobjects_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Request.detectedObjects)
}

// -------------------------------------------------------------------

// relocalizeProcessRequest_grpc2Response

// bytes pose = 1;
inline void relocalizeProcessRequest_grpc2Response::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc2Response::pose() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc2Response::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.pose)
}
inline std::string* relocalizeProcessRequest_grpc2Response::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.pose)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc2Response::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void relocalizeProcessRequest_grpc2Response::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Response::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Response::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.pose)
  return _impl_.pose_.Release();
}
inline void relocalizeProcessRequest_grpc2Response::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.pose)
}

// bytes confidence = 2;
inline void relocalizeProcessRequest_grpc2Response::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc2Response::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc2Response::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.confidence)
}
inline std::string* relocalizeProcessRequest_grpc2Response::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.confidence)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc2Response::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void relocalizeProcessRequest_grpc2Response::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Response::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Response::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.confidence)
  return _impl_.confidence_.Release();
}
inline void relocalizeProcessRequest_grpc2Response::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.confidence)
}

// bytes detectedObjects = 3;
inline void relocalizeProcessRequest_grpc2Response::clear_detectedobjects() {
  _impl_.detectedobjects_.ClearToEmpty();
}
inline const std::string& relocalizeProcessRequest_grpc2Response::detectedobjects() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.detectedObjects)
  return _internal_detectedobjects();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeProcessRequest_grpc2Response::set_detectedobjects(ArgT0&& arg0, ArgT... args) {
 
 _impl_.detectedobjects_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.detectedObjects)
}
inline std::string* relocalizeProcessRequest_grpc2Response::mutable_detectedobjects() {
  std::string* _s = _internal_mutable_detectedobjects();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.detectedObjects)
  return _s;
}
inline const std::string& relocalizeProcessRequest_grpc2Response::_internal_detectedobjects() const {
  return _impl_.detectedobjects_.Get();
}
inline void relocalizeProcessRequest_grpc2Response::_internal_set_detectedobjects(const std::string& value) {
  
  _impl_.detectedobjects_.Set(value, GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Response::_internal_mutable_detectedobjects() {
  
  return _impl_.detectedobjects_.Mutable(GetArenaForAllocation());
}
inline std::string* relocalizeProcessRequest_grpc2Response::release_detectedobjects() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.detectedObjects)
  return _impl_.detectedobjects_.Release();
}
inline void relocalizeProcessRequest_grpc2Response::set_allocated_detectedobjects(std::string* detectedobjects) {
  if (detectedobjects != nullptr) {
    
  } else {
    
  }
  _impl_.detectedobjects_.SetAllocated(detectedobjects, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detectedobjects_.IsDefault()) {
    _impl_.detectedobjects_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.detectedObjects)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void relocalizeProcessRequest_grpc2Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t relocalizeProcessRequest_grpc2Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t relocalizeProcessRequest_grpc2Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void relocalizeProcessRequest_grpc2Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void relocalizeProcessRequest_grpc2Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.relocalizeProcessRequest_grpc2Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMapRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMapRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMapRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMapRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMapRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMapRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void getMapRequestRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& getMapRequestRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.clientUUID)
}
inline std::string* getMapRequestRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.clientUUID)
  return _s;
}
inline const std::string& getMapRequestRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void getMapRequestRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void getMapRequestRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.clientUUID)
}

// bytes map = 3;
inline void getMapRequestRequest::clear_map() {
  _impl_.map_.ClearToEmpty();
}
inline const std::string& getMapRequestRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestRequest::set_map(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.map)
}
inline std::string* getMapRequestRequest::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.map)
  return _s;
}
inline const std::string& getMapRequestRequest::_internal_map() const {
  return _impl_.map_.Get();
}
inline void getMapRequestRequest::_internal_set_map(const std::string& value) {
  
  _impl_.map_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::_internal_mutable_map() {
  
  return _impl_.map_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.map)
  return _impl_.map_.Release();
}
inline void getMapRequestRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  _impl_.map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_.IsDefault()) {
    _impl_.map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.getMapRequestRequest.map)
}

// -------------------------------------------------------------------

// getMapRequestResponse

// bytes map = 1;
inline void getMapRequestResponse::clear_map() {
  _impl_.map_.ClearToEmpty();
}
inline const std::string& getMapRequestResponse::map() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getMapRequestResponse.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestResponse::set_map(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getMapRequestResponse.map)
}
inline std::string* getMapRequestResponse::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.getMapRequestResponse.map)
  return _s;
}
inline const std::string& getMapRequestResponse::_internal_map() const {
  return _impl_.map_.Get();
}
inline void getMapRequestResponse::_internal_set_map(const std::string& value) {
  
  _impl_.map_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestResponse::_internal_mutable_map() {
  
  return _impl_.map_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestResponse::release_map() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.getMapRequestResponse.map)
  return _impl_.map_.Release();
}
inline void getMapRequestResponse::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  _impl_.map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_.IsDefault()) {
    _impl_.map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.getMapRequestResponse.map)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getMapRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMapRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMapRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.getMapRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMapRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMapRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.getMapRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// init_grpc3Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc3Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc3Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc3Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc3Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc3Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc3Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc3Request.grpcServerCompressionFormat)
}

// string clientUUID = 2;
inline void init_grpc3Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& init_grpc3Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc3Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc3Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc3Request.clientUUID)
}
inline std::string* init_grpc3Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.init_grpc3Request.clientUUID)
  return _s;
}
inline const std::string& init_grpc3Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void init_grpc3Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc3Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc3Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.init_grpc3Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void init_grpc3Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.init_grpc3Request.clientUUID)
}

// bytes trackableObjects = 3;
inline void init_grpc3Request::clear_trackableobjects() {
  _impl_.trackableobjects_.ClearToEmpty();
}
inline const std::string& init_grpc3Request::trackableobjects() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc3Request.trackableObjects)
  return _internal_trackableobjects();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc3Request::set_trackableobjects(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trackableobjects_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc3Request.trackableObjects)
}
inline std::string* init_grpc3Request::mutable_trackableobjects() {
  std::string* _s = _internal_mutable_trackableobjects();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizationTrackablePipeline.init_grpc3Request.trackableObjects)
  return _s;
}
inline const std::string& init_grpc3Request::_internal_trackableobjects() const {
  return _impl_.trackableobjects_.Get();
}
inline void init_grpc3Request::_internal_set_trackableobjects(const std::string& value) {
  
  _impl_.trackableobjects_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc3Request::_internal_mutable_trackableobjects() {
  
  return _impl_.trackableobjects_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc3Request::release_trackableobjects() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizationTrackablePipeline.init_grpc3Request.trackableObjects)
  return _impl_.trackableobjects_.Release();
}
inline void init_grpc3Request::set_allocated_trackableobjects(std::string* trackableobjects) {
  if (trackableobjects != nullptr) {
    
  } else {
    
  }
  _impl_.trackableobjects_.SetAllocated(trackableobjects, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trackableobjects_.IsDefault()) {
    _impl_.trackableobjects_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizationTrackablePipeline.init_grpc3Request.trackableObjects)
}

// -------------------------------------------------------------------

// init_grpc3Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc3Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc3Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc3Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizationTrackablePipeline.init_grpc3Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc3Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc3Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizationTrackablePipeline.init_grpc3Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIRelocalizationTrackablePipeline

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIRelocalizationTrackablePipelineService_2eproto
