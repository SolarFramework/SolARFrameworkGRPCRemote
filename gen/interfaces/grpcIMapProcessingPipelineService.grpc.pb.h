// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMapProcessingPipelineService.proto
#ifndef GRPC_grpcIMapProcessingPipelineService_2eproto__INCLUDED
#define GRPC_grpcIMapProcessingPipelineService_2eproto__INCLUDED

#include "grpcIMapProcessingPipelineService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIMapProcessingPipeline {

class grpcIMapProcessingPipelineService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIMapProcessingPipeline.grpcIMapProcessingPipelineService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status init(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpcIMapProcessingPipeline::initResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::initResponse>> Asyncinit(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::initResponse>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::initResponse>> PrepareAsyncinit(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::initResponse>>(PrepareAsyncinitRaw(context, request, cq));
    }
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpcIMapProcessingPipeline::startResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpcIMapProcessingPipeline::stopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status setMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::setMapToProcessResponse>> AsyncsetMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::setMapToProcessResponse>>(AsyncsetMapToProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::setMapToProcessResponse>> PrepareAsyncsetMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::setMapToProcessResponse>>(PrepareAsyncsetMapToProcessRaw(context, request, cq));
    }
    virtual ::grpc::Status getStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpcIMapProcessingPipeline::getStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getStatusResponse>> AsyncgetStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getStatusResponse>>(AsyncgetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getStatusResponse>> PrepareAsyncgetStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getStatusResponse>>(PrepareAsyncgetStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status getProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessingDataResponse>> AsyncgetProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessingDataResponse>>(AsyncgetProcessingDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessingDataResponse>> PrepareAsyncgetProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessingDataResponse>>(PrepareAsyncgetProcessingDataRaw(context, request, cq));
    }
    virtual ::grpc::Status getProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessedMapResponse>> AsyncgetProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessedMapResponse>>(AsyncgetProcessedMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessedMapResponse>> PrepareAsyncgetProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessedMapResponse>>(PrepareAsyncgetProcessedMapRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void init(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest* request, ::grpcIMapProcessingPipeline::initResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest* request, ::grpcIMapProcessingPipeline::initResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest* request, ::grpcIMapProcessingPipeline::startResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest* request, ::grpcIMapProcessingPipeline::startResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest* request, ::grpcIMapProcessingPipeline::stopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest* request, ::grpcIMapProcessingPipeline::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpcIMapProcessingPipeline::getStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpcIMapProcessingPipeline::getStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::initResponse>* AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::initResponse>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::setMapToProcessResponse>* AsyncsetMapToProcessRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::setMapToProcessResponse>* PrepareAsyncsetMapToProcessRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getStatusResponse>* AsyncgetStatusRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getStatusResponse>* PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessingDataResponse>* AsyncgetProcessingDataRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessingDataResponse>* PrepareAsyncgetProcessingDataRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessedMapResponse>* AsyncgetProcessedMapRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIMapProcessingPipeline::getProcessedMapResponse>* PrepareAsyncgetProcessedMapRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status init(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpcIMapProcessingPipeline::initResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::initResponse>> Asyncinit(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::initResponse>>(AsyncinitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::initResponse>> PrepareAsyncinit(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::initResponse>>(PrepareAsyncinitRaw(context, request, cq));
    }
    ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpcIMapProcessingPipeline::startResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpcIMapProcessingPipeline::stopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status setMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::setMapToProcessResponse>> AsyncsetMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::setMapToProcessResponse>>(AsyncsetMapToProcessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::setMapToProcessResponse>> PrepareAsyncsetMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::setMapToProcessResponse>>(PrepareAsyncsetMapToProcessRaw(context, request, cq));
    }
    ::grpc::Status getStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpcIMapProcessingPipeline::getStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getStatusResponse>> AsyncgetStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getStatusResponse>>(AsyncgetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getStatusResponse>> PrepareAsyncgetStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getStatusResponse>>(PrepareAsyncgetStatusRaw(context, request, cq));
    }
    ::grpc::Status getProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessingDataResponse>> AsyncgetProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessingDataResponse>>(AsyncgetProcessingDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessingDataResponse>> PrepareAsyncgetProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessingDataResponse>>(PrepareAsyncgetProcessingDataRaw(context, request, cq));
    }
    ::grpc::Status getProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessedMapResponse>> AsyncgetProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessedMapResponse>>(AsyncgetProcessedMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessedMapResponse>> PrepareAsyncgetProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessedMapResponse>>(PrepareAsyncgetProcessedMapRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void init(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest* request, ::grpcIMapProcessingPipeline::initResponse* response, std::function<void(::grpc::Status)>) override;
      void init(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest* request, ::grpcIMapProcessingPipeline::initResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void start(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest* request, ::grpcIMapProcessingPipeline::startResponse* response, std::function<void(::grpc::Status)>) override;
      void start(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest* request, ::grpcIMapProcessingPipeline::startResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void stop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest* request, ::grpcIMapProcessingPipeline::stopResponse* response, std::function<void(::grpc::Status)>) override;
      void stop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest* request, ::grpcIMapProcessingPipeline::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response, std::function<void(::grpc::Status)>) override;
      void setMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpcIMapProcessingPipeline::getStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void getStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpcIMapProcessingPipeline::getStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response, std::function<void(::grpc::Status)>) override;
      void getProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response, std::function<void(::grpc::Status)>) override;
      void getProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::initResponse>* AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::initResponse>* PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::setMapToProcessResponse>* AsyncsetMapToProcessRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::setMapToProcessResponse>* PrepareAsyncsetMapToProcessRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getStatusResponse>* AsyncgetStatusRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getStatusResponse>* PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessingDataResponse>* AsyncgetProcessingDataRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessingDataResponse>* PrepareAsyncgetProcessingDataRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessedMapResponse>* AsyncgetProcessedMapRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessedMapResponse>* PrepareAsyncgetProcessedMapRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_init_;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_setMapToProcess_;
    const ::grpc::internal::RpcMethod rpcmethod_getStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_getProcessingData_;
    const ::grpc::internal::RpcMethod rpcmethod_getProcessedMap_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status init(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::initRequest* request, ::grpcIMapProcessingPipeline::initResponse* response);
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::startRequest* request, ::grpcIMapProcessingPipeline::startResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::stopRequest* request, ::grpcIMapProcessingPipeline::stopResponse* response);
    virtual ::grpc::Status setMapToProcess(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response);
    virtual ::grpc::Status getStatus(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpcIMapProcessingPipeline::getStatusResponse* response);
    virtual ::grpc::Status getProcessingData(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response);
    virtual ::grpc::Status getProcessedMap(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::initRequest* /*request*/, ::grpcIMapProcessingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit(::grpc::ServerContext* context, ::grpcIMapProcessingPipeline::initRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapProcessingPipeline::initResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::startRequest* /*request*/, ::grpcIMapProcessingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpcIMapProcessingPipeline::startRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapProcessingPipeline::startResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::stopRequest* /*request*/, ::grpcIMapProcessingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpcIMapProcessingPipeline::stopRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapProcessingPipeline::stopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setMapToProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setMapToProcess() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_setMapToProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapToProcess(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* /*request*/, ::grpcIMapProcessingPipeline::setMapToProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetMapToProcess(::grpc::ServerContext* context, ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapProcessingPipeline::setMapToProcessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getStatusRequest* /*request*/, ::grpcIMapProcessingPipeline::getStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatus(::grpc::ServerContext* context, ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapProcessingPipeline::getStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getProcessingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getProcessingData() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getProcessingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingData(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProcessingData(::grpc::ServerContext* context, ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapProcessingPipeline::getProcessingDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getProcessedMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getProcessedMap() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getProcessedMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessedMap(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessedMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProcessedMap(::grpc::ServerContext* context, ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIMapProcessingPipeline::getProcessedMapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_init<WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_setMapToProcess<WithAsyncMethod_getStatus<WithAsyncMethod_getProcessingData<WithAsyncMethod_getProcessedMap<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::initRequest, ::grpcIMapProcessingPipeline::initResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapProcessingPipeline::initRequest* request, ::grpcIMapProcessingPipeline::initResponse* response) { return this->init(context, request, response); }));}
    void SetMessageAllocatorFor_init(
        ::grpc::MessageAllocator< ::grpcIMapProcessingPipeline::initRequest, ::grpcIMapProcessingPipeline::initResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::initRequest, ::grpcIMapProcessingPipeline::initResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::initRequest* /*request*/, ::grpcIMapProcessingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapProcessingPipeline::initRequest* /*request*/, ::grpcIMapProcessingPipeline::initResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_start() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::startRequest, ::grpcIMapProcessingPipeline::startResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapProcessingPipeline::startRequest* request, ::grpcIMapProcessingPipeline::startResponse* response) { return this->start(context, request, response); }));}
    void SetMessageAllocatorFor_start(
        ::grpc::MessageAllocator< ::grpcIMapProcessingPipeline::startRequest, ::grpcIMapProcessingPipeline::startResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::startRequest, ::grpcIMapProcessingPipeline::startResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::startRequest* /*request*/, ::grpcIMapProcessingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapProcessingPipeline::startRequest* /*request*/, ::grpcIMapProcessingPipeline::startResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stop() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::stopRequest, ::grpcIMapProcessingPipeline::stopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapProcessingPipeline::stopRequest* request, ::grpcIMapProcessingPipeline::stopResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::MessageAllocator< ::grpcIMapProcessingPipeline::stopRequest, ::grpcIMapProcessingPipeline::stopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::stopRequest, ::grpcIMapProcessingPipeline::stopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::stopRequest* /*request*/, ::grpcIMapProcessingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapProcessingPipeline::stopRequest* /*request*/, ::grpcIMapProcessingPipeline::stopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setMapToProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setMapToProcess() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::setMapToProcessRequest, ::grpcIMapProcessingPipeline::setMapToProcessResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response) { return this->setMapToProcess(context, request, response); }));}
    void SetMessageAllocatorFor_setMapToProcess(
        ::grpc::MessageAllocator< ::grpcIMapProcessingPipeline::setMapToProcessRequest, ::grpcIMapProcessingPipeline::setMapToProcessResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::setMapToProcessRequest, ::grpcIMapProcessingPipeline::setMapToProcessResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setMapToProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapToProcess(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* /*request*/, ::grpcIMapProcessingPipeline::setMapToProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setMapToProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* /*request*/, ::grpcIMapProcessingPipeline::setMapToProcessResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getStatus() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::getStatusRequest, ::grpcIMapProcessingPipeline::getStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpcIMapProcessingPipeline::getStatusResponse* response) { return this->getStatus(context, request, response); }));}
    void SetMessageAllocatorFor_getStatus(
        ::grpc::MessageAllocator< ::grpcIMapProcessingPipeline::getStatusRequest, ::grpcIMapProcessingPipeline::getStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::getStatusRequest, ::grpcIMapProcessingPipeline::getStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getStatusRequest* /*request*/, ::grpcIMapProcessingPipeline::getStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getStatusRequest* /*request*/, ::grpcIMapProcessingPipeline::getStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getProcessingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getProcessingData() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::getProcessingDataRequest, ::grpcIMapProcessingPipeline::getProcessingDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response) { return this->getProcessingData(context, request, response); }));}
    void SetMessageAllocatorFor_getProcessingData(
        ::grpc::MessageAllocator< ::grpcIMapProcessingPipeline::getProcessingDataRequest, ::grpcIMapProcessingPipeline::getProcessingDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::getProcessingDataRequest, ::grpcIMapProcessingPipeline::getProcessingDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getProcessingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingData(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProcessingData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessingDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getProcessedMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getProcessedMap() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::getProcessedMapRequest, ::grpcIMapProcessingPipeline::getProcessedMapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response) { return this->getProcessedMap(context, request, response); }));}
    void SetMessageAllocatorFor_getProcessedMap(
        ::grpc::MessageAllocator< ::grpcIMapProcessingPipeline::getProcessedMapRequest, ::grpcIMapProcessingPipeline::getProcessedMapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIMapProcessingPipeline::getProcessedMapRequest, ::grpcIMapProcessingPipeline::getProcessedMapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getProcessedMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessedMap(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessedMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProcessedMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessedMapResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_init<WithCallbackMethod_start<WithCallbackMethod_stop<WithCallbackMethod_setMapToProcess<WithCallbackMethod_getStatus<WithCallbackMethod_getProcessingData<WithCallbackMethod_getProcessedMap<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::initRequest* /*request*/, ::grpcIMapProcessingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::startRequest* /*request*/, ::grpcIMapProcessingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::stopRequest* /*request*/, ::grpcIMapProcessingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setMapToProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setMapToProcess() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_setMapToProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapToProcess(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* /*request*/, ::grpcIMapProcessingPipeline::setMapToProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getStatusRequest* /*request*/, ::grpcIMapProcessingPipeline::getStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getProcessingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getProcessingData() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getProcessingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingData(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getProcessedMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getProcessedMap() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getProcessedMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessedMap(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessedMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::initRequest* /*request*/, ::grpcIMapProcessingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::startRequest* /*request*/, ::grpcIMapProcessingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::stopRequest* /*request*/, ::grpcIMapProcessingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setMapToProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setMapToProcess() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_setMapToProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapToProcess(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* /*request*/, ::grpcIMapProcessingPipeline::setMapToProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetMapToProcess(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getStatusRequest* /*request*/, ::grpcIMapProcessingPipeline::getStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getProcessingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getProcessingData() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getProcessingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingData(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProcessingData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getProcessedMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getProcessedMap() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getProcessedMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessedMap(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessedMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProcessedMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init(context, request, response); }));
    }
    ~WithRawCallbackMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::initRequest* /*request*/, ::grpcIMapProcessingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_start() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start(context, request, response); }));
    }
    ~WithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::startRequest* /*request*/, ::grpcIMapProcessingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stop() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::stopRequest* /*request*/, ::grpcIMapProcessingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setMapToProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setMapToProcess() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setMapToProcess(context, request, response); }));
    }
    ~WithRawCallbackMethod_setMapToProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapToProcess(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* /*request*/, ::grpcIMapProcessingPipeline::setMapToProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setMapToProcess(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getStatus() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getStatusRequest* /*request*/, ::grpcIMapProcessingPipeline::getStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getProcessingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getProcessingData() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getProcessingData(context, request, response); }));
    }
    ~WithRawCallbackMethod_getProcessingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingData(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProcessingData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getProcessedMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getProcessedMap() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getProcessedMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_getProcessedMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessedMap(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessedMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProcessedMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapProcessingPipeline::initRequest, ::grpcIMapProcessingPipeline::initResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapProcessingPipeline::initRequest, ::grpcIMapProcessingPipeline::initResponse>* streamer) {
                       return this->Streamedinit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::initRequest* /*request*/, ::grpcIMapProcessingPipeline::initResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapProcessingPipeline::initRequest,::grpcIMapProcessingPipeline::initResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapProcessingPipeline::startRequest, ::grpcIMapProcessingPipeline::startResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapProcessingPipeline::startRequest, ::grpcIMapProcessingPipeline::startResponse>* streamer) {
                       return this->Streamedstart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::startRequest* /*request*/, ::grpcIMapProcessingPipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapProcessingPipeline::startRequest,::grpcIMapProcessingPipeline::startResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapProcessingPipeline::stopRequest, ::grpcIMapProcessingPipeline::stopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapProcessingPipeline::stopRequest, ::grpcIMapProcessingPipeline::stopResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::stopRequest* /*request*/, ::grpcIMapProcessingPipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapProcessingPipeline::stopRequest,::grpcIMapProcessingPipeline::stopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setMapToProcess : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setMapToProcess() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapProcessingPipeline::setMapToProcessRequest, ::grpcIMapProcessingPipeline::setMapToProcessResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapProcessingPipeline::setMapToProcessRequest, ::grpcIMapProcessingPipeline::setMapToProcessResponse>* streamer) {
                       return this->StreamedsetMapToProcess(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setMapToProcess() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setMapToProcess(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* /*request*/, ::grpcIMapProcessingPipeline::setMapToProcessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetMapToProcess(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapProcessingPipeline::setMapToProcessRequest,::grpcIMapProcessingPipeline::setMapToProcessResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getStatus() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapProcessingPipeline::getStatusRequest, ::grpcIMapProcessingPipeline::getStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapProcessingPipeline::getStatusRequest, ::grpcIMapProcessingPipeline::getStatusResponse>* streamer) {
                       return this->StreamedgetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getStatus(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getStatusRequest* /*request*/, ::grpcIMapProcessingPipeline::getStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapProcessingPipeline::getStatusRequest,::grpcIMapProcessingPipeline::getStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getProcessingData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getProcessingData() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapProcessingPipeline::getProcessingDataRequest, ::grpcIMapProcessingPipeline::getProcessingDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapProcessingPipeline::getProcessingDataRequest, ::grpcIMapProcessingPipeline::getProcessingDataResponse>* streamer) {
                       return this->StreamedgetProcessingData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getProcessingData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getProcessingData(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessingDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetProcessingData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapProcessingPipeline::getProcessingDataRequest,::grpcIMapProcessingPipeline::getProcessingDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getProcessedMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getProcessedMap() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIMapProcessingPipeline::getProcessedMapRequest, ::grpcIMapProcessingPipeline::getProcessedMapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIMapProcessingPipeline::getProcessedMapRequest, ::grpcIMapProcessingPipeline::getProcessedMapResponse>* streamer) {
                       return this->StreamedgetProcessedMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getProcessedMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getProcessedMap(::grpc::ServerContext* /*context*/, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* /*request*/, ::grpcIMapProcessingPipeline::getProcessedMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetProcessedMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIMapProcessingPipeline::getProcessedMapRequest,::grpcIMapProcessingPipeline::getProcessedMapResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_setMapToProcess<WithStreamedUnaryMethod_getStatus<WithStreamedUnaryMethod_getProcessingData<WithStreamedUnaryMethod_getProcessedMap<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_init<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_setMapToProcess<WithStreamedUnaryMethod_getStatus<WithStreamedUnaryMethod_getProcessingData<WithStreamedUnaryMethod_getProcessedMap<Service > > > > > > > StreamedService;
};

}  // namespace grpcIMapProcessingPipeline


#endif  // GRPC_grpcIMapProcessingPipelineService_2eproto__INCLUDED
