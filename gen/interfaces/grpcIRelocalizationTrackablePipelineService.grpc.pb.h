// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIRelocalizationTrackablePipelineService.proto
#ifndef GRPC_grpcIRelocalizationTrackablePipelineService_2eproto__INCLUDED
#define GRPC_grpcIRelocalizationTrackablePipelineService_2eproto__INCLUDED

#include "grpcIRelocalizationTrackablePipelineService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIRelocalizationTrackablePipeline {

class grpcIRelocalizationTrackablePipelineService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIRelocalizationTrackablePipeline.grpcIRelocalizationTrackablePipelineService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status init_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>> Asyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>>(Asyncinit_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>> PrepareAsyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>>(PrepareAsyncinit_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpcIRelocalizationTrackablePipeline::startResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpcIRelocalizationTrackablePipeline::stopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status init_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>> Asyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>>(Asyncinit_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>> PrepareAsyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>>(PrepareAsyncinit_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status setCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>> AsyncsetCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>>(AsyncsetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>> PrepareAsyncsetCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>>(PrepareAsyncsetCameraParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>> AsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>>(AsyncgetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>> PrepareAsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>>(PrepareAsyncgetCameraParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>> AsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>>(AsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>> PrepareAsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>>(PrepareAsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>> AsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>>(AsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>> PrepareAsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>>(PrepareAsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status relocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>> AsyncrelocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>>(AsyncrelocalizeProcessRequest_grpc2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>> PrepareAsyncrelocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>>(PrepareAsyncrelocalizeProcessRequest_grpc2Raw(context, request, cq));
    }
    virtual ::grpc::Status getMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>> AsyncgetMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>>(AsyncgetMapRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>> PrepareAsyncgetMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>>(PrepareAsyncgetMapRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status init_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>> Asyncinit_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>>(Asyncinit_grpc2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>> PrepareAsyncinit_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>>(PrepareAsyncinit_grpc2Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void init_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest* request, ::grpcIRelocalizationTrackablePipeline::startResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest* request, ::grpcIRelocalizationTrackablePipeline::startResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest* request, ::grpcIRelocalizationTrackablePipeline::stopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest* request, ::grpcIRelocalizationTrackablePipeline::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void init_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void relocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void relocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* request, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* request, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void init_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>* Asyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>* PrepareAsyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>* Asyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>* PrepareAsyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>* AsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>* PrepareAsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>* AsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>* PrepareAsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>* AsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>* PrepareAsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>* AsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>* PrepareAsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>* AsyncrelocalizeProcessRequest_grpc2Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>* PrepareAsyncrelocalizeProcessRequest_grpc2Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>* AsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>* PrepareAsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>* Asyncinit_grpc2Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>* PrepareAsyncinit_grpc2Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status init_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>> Asyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>>(Asyncinit_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>> PrepareAsyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>>(PrepareAsyncinit_grpc0Raw(context, request, cq));
    }
    ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpcIRelocalizationTrackablePipeline::startResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpcIRelocalizationTrackablePipeline::stopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status init_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>> Asyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>>(Asyncinit_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>> PrepareAsyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>>(PrepareAsyncinit_grpc1Raw(context, request, cq));
    }
    ::grpc::Status setCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>> AsyncsetCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>>(AsyncsetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>> PrepareAsyncsetCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>>(PrepareAsyncsetCameraParametersRaw(context, request, cq));
    }
    ::grpc::Status getCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>> AsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>>(AsyncgetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>> PrepareAsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>>(PrepareAsyncgetCameraParametersRaw(context, request, cq));
    }
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>> AsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>>(AsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>> PrepareAsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>>(PrepareAsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>> AsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>>(AsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>> PrepareAsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>>(PrepareAsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    ::grpc::Status relocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>> AsyncrelocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>>(AsyncrelocalizeProcessRequest_grpc2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>> PrepareAsyncrelocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>>(PrepareAsyncrelocalizeProcessRequest_grpc2Raw(context, request, cq));
    }
    ::grpc::Status getMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>> AsyncgetMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>>(AsyncgetMapRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>> PrepareAsyncgetMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>>(PrepareAsyncgetMapRequestRaw(context, request, cq));
    }
    ::grpc::Status init_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>> Asyncinit_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>>(Asyncinit_grpc2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>> PrepareAsyncinit_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>>(PrepareAsyncinit_grpc2Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void init_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void init_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void start(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest* request, ::grpcIRelocalizationTrackablePipeline::startResponse* response, std::function<void(::grpc::Status)>) override;
      void start(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest* request, ::grpcIRelocalizationTrackablePipeline::startResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void stop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest* request, ::grpcIRelocalizationTrackablePipeline::stopResponse* response, std::function<void(::grpc::Status)>) override;
      void stop(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest* request, ::grpcIRelocalizationTrackablePipeline::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void init_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void init_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void setCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void getCameraParameters(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void relocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* response, std::function<void(::grpc::Status)>) override;
      void relocalizeProcessRequest_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* request, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* response, std::function<void(::grpc::Status)>) override;
      void getMapRequest(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* request, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void init_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* response, std::function<void(::grpc::Status)>) override;
      void init_grpc2(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>* Asyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>* PrepareAsyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>* Asyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>* PrepareAsyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>* AsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>* PrepareAsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>* AsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>* PrepareAsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>* AsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>* PrepareAsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>* AsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>* PrepareAsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>* AsyncrelocalizeProcessRequest_grpc2Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>* PrepareAsyncrelocalizeProcessRequest_grpc2Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>* AsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>* PrepareAsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>* Asyncinit_grpc2Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>* PrepareAsyncinit_grpc2Raw(::grpc::ClientContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_init_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_init_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_setCameraParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getCameraParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_relocalizeProcessRequest_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_relocalizeProcessRequest_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_relocalizeProcessRequest_grpc2_;
    const ::grpc::internal::RpcMethod rpcmethod_getMapRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_init_grpc2_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status init_grpc0(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* response);
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest* request, ::grpcIRelocalizationTrackablePipeline::startResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest* request, ::grpcIRelocalizationTrackablePipeline::stopResponse* response);
    virtual ::grpc::Status init_grpc1(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* response);
    virtual ::grpc::Status setCameraParameters(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* response);
    virtual ::grpc::Status getCameraParameters(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* response);
    virtual ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* response);
    virtual ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* response);
    virtual ::grpc::Status relocalizeProcessRequest_grpc2(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* response);
    virtual ::grpc::Status getMapRequest(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* request, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* response);
    virtual ::grpc::Status init_grpc2(::grpc::ServerContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_grpc0() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc0(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::startRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::startRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::startResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::stopRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::stopRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::stopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_grpc1() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc1(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCameraParameters(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc0(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc1(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_relocalizeProcessRequest_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_relocalizeProcessRequest_grpc2() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_relocalizeProcessRequest_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc2(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMapRequest() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMapRequest(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_init_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_grpc2() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_init_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc2(::grpc::ServerContext* context, ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_init_grpc0<WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_init_grpc1<WithAsyncMethod_setCameraParameters<WithAsyncMethod_getCameraParameters<WithAsyncMethod_relocalizeProcessRequest_grpc0<WithAsyncMethod_relocalizeProcessRequest_grpc1<WithAsyncMethod_relocalizeProcessRequest_grpc2<WithAsyncMethod_getMapRequest<WithAsyncMethod_init_grpc2<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_grpc0() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::init_grpc0Request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* response) { return this->init_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_init_grpc0(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::init_grpc0Request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::init_grpc0Request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_start() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::startRequest, ::grpcIRelocalizationTrackablePipeline::startResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::startRequest* request, ::grpcIRelocalizationTrackablePipeline::startResponse* response) { return this->start(context, request, response); }));}
    void SetMessageAllocatorFor_start(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::startRequest, ::grpcIRelocalizationTrackablePipeline::startResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::startRequest, ::grpcIRelocalizationTrackablePipeline::startResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::startRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::startRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::startResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stop() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::stopRequest, ::grpcIRelocalizationTrackablePipeline::stopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::stopRequest* request, ::grpcIRelocalizationTrackablePipeline::stopResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::stopRequest, ::grpcIRelocalizationTrackablePipeline::stopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::stopRequest, ::grpcIRelocalizationTrackablePipeline::stopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::stopRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::stopRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::stopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_grpc1() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::init_grpc1Request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* response) { return this->init_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_init_grpc1(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::init_grpc1Request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::init_grpc1Request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* response) { return this->setCameraParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setCameraParameters(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* request, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* response) { return this->getCameraParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getCameraParameters(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* response) { return this->relocalizeProcessRequest_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_relocalizeProcessRequest_grpc0(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* response) { return this->relocalizeProcessRequest_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_relocalizeProcessRequest_grpc1(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_relocalizeProcessRequest_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_relocalizeProcessRequest_grpc2() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* response) { return this->relocalizeProcessRequest_grpc2(context, request, response); }));}
    void SetMessageAllocatorFor_relocalizeProcessRequest_grpc2(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_relocalizeProcessRequest_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMapRequest() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* request, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* response) { return this->getMapRequest(context, request, response); }));}
    void SetMessageAllocatorFor_getMapRequest(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMapRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_init_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_grpc2() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::init_grpc2Request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* response) { return this->init_grpc2(context, request, response); }));}
    void SetMessageAllocatorFor_init_grpc2(
        ::grpc::MessageAllocator< ::grpcIRelocalizationTrackablePipeline::init_grpc2Request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRelocalizationTrackablePipeline::init_grpc2Request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_init_grpc0<WithCallbackMethod_start<WithCallbackMethod_stop<WithCallbackMethod_init_grpc1<WithCallbackMethod_setCameraParameters<WithCallbackMethod_getCameraParameters<WithCallbackMethod_relocalizeProcessRequest_grpc0<WithCallbackMethod_relocalizeProcessRequest_grpc1<WithCallbackMethod_relocalizeProcessRequest_grpc2<WithCallbackMethod_getMapRequest<WithCallbackMethod_init_grpc2<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_grpc0() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::startRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::stopRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_grpc1() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_relocalizeProcessRequest_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_relocalizeProcessRequest_grpc2() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_relocalizeProcessRequest_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMapRequest() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_init_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_grpc2() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_init_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_grpc0() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::startRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::stopRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_grpc1() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCameraParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_relocalizeProcessRequest_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_relocalizeProcessRequest_grpc2() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_relocalizeProcessRequest_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMapRequest() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMapRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_grpc2() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_init_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_start() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start(context, request, response); }));
    }
    ~WithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::startRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stop() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::stopRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setCameraParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCameraParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->relocalizeProcessRequest_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->relocalizeProcessRequest_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_relocalizeProcessRequest_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_relocalizeProcessRequest_grpc2() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->relocalizeProcessRequest_grpc2(context, request, response); }));
    }
    ~WithRawCallbackMethod_relocalizeProcessRequest_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMapRequest() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMapRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMapRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_grpc2() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_grpc2(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_grpc0() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::init_grpc0Request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::init_grpc0Request, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response>* streamer) {
                       return this->Streamedinit_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::init_grpc0Request,::grpcIRelocalizationTrackablePipeline::init_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::startRequest, ::grpcIRelocalizationTrackablePipeline::startResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::startRequest, ::grpcIRelocalizationTrackablePipeline::startResponse>* streamer) {
                       return this->Streamedstart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::startRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::startRequest,::grpcIRelocalizationTrackablePipeline::startResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::stopRequest, ::grpcIRelocalizationTrackablePipeline::stopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::stopRequest, ::grpcIRelocalizationTrackablePipeline::stopResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::stopRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::stopRequest,::grpcIRelocalizationTrackablePipeline::stopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_grpc1() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::init_grpc1Request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::init_grpc1Request, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response>* streamer) {
                       return this->Streamedinit_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::init_grpc1Request,::grpcIRelocalizationTrackablePipeline::init_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>* streamer) {
                       return this->StreamedsetCameraParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetCameraParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::setCameraParametersRequest,::grpcIRelocalizationTrackablePipeline::setCameraParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>* streamer) {
                       return this->StreamedgetCameraParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCameraParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::getCameraParametersRequest,::grpcIRelocalizationTrackablePipeline::getCameraParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>* streamer) {
                       return this->StreamedrelocalizeProcessRequest_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrelocalizeProcessRequest_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Request,::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>* streamer) {
                       return this->StreamedrelocalizeProcessRequest_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrelocalizeProcessRequest_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Request,::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_relocalizeProcessRequest_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_relocalizeProcessRequest_grpc2() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>* streamer) {
                       return this->StreamedrelocalizeProcessRequest_grpc2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_relocalizeProcessRequest_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status relocalizeProcessRequest_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrelocalizeProcessRequest_grpc2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Request,::grpcIRelocalizationTrackablePipeline::relocalizeProcessRequest_grpc2Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMapRequest() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>* streamer) {
                       return this->StreamedgetMapRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest* /*request*/, ::grpcIRelocalizationTrackablePipeline::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMapRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::getMapRequestRequest,::grpcIRelocalizationTrackablePipeline::getMapRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_grpc2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_grpc2() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRelocalizationTrackablePipeline::init_grpc2Request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRelocalizationTrackablePipeline::init_grpc2Request, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response>* streamer) {
                       return this->Streamedinit_grpc2(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_grpc2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_grpc2(::grpc::ServerContext* /*context*/, const ::grpcIRelocalizationTrackablePipeline::init_grpc2Request* /*request*/, ::grpcIRelocalizationTrackablePipeline::init_grpc2Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_grpc2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRelocalizationTrackablePipeline::init_grpc2Request,::grpcIRelocalizationTrackablePipeline::init_grpc2Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_init_grpc0<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_init_grpc1<WithStreamedUnaryMethod_setCameraParameters<WithStreamedUnaryMethod_getCameraParameters<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc2<WithStreamedUnaryMethod_getMapRequest<WithStreamedUnaryMethod_init_grpc2<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_init_grpc0<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_init_grpc1<WithStreamedUnaryMethod_setCameraParameters<WithStreamedUnaryMethod_getCameraParameters<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc2<WithStreamedUnaryMethod_getMapRequest<WithStreamedUnaryMethod_init_grpc2<Service > > > > > > > > > > > StreamedService;
};

}  // namespace grpcIRelocalizationTrackablePipeline


#endif  // GRPC_grpcIRelocalizationTrackablePipelineService_2eproto__INCLUDED
