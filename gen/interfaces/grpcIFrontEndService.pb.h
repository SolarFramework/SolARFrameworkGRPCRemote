// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIFrontEndService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIFrontEndService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIFrontEndService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIFrontEndService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIFrontEndService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIFrontEndService_2eproto;
namespace grpcIFrontEnd {
class createMapRequest;
struct createMapRequestDefaultTypeInternal;
extern createMapRequestDefaultTypeInternal _createMapRequest_default_instance_;
class createMapResponse;
struct createMapResponseDefaultTypeInternal;
extern createMapResponseDefaultTypeInternal _createMapResponse_default_instance_;
class deleteMapRequest;
struct deleteMapRequestDefaultTypeInternal;
extern deleteMapRequestDefaultTypeInternal _deleteMapRequest_default_instance_;
class deleteMapResponse;
struct deleteMapResponseDefaultTypeInternal;
extern deleteMapResponseDefaultTypeInternal _deleteMapResponse_default_instance_;
class getAllClientsUUIDRequest;
struct getAllClientsUUIDRequestDefaultTypeInternal;
extern getAllClientsUUIDRequestDefaultTypeInternal _getAllClientsUUIDRequest_default_instance_;
class getAllClientsUUIDResponse;
struct getAllClientsUUIDResponseDefaultTypeInternal;
extern getAllClientsUUIDResponseDefaultTypeInternal _getAllClientsUUIDResponse_default_instance_;
class getAllMapsUUIDRequest;
struct getAllMapsUUIDRequestDefaultTypeInternal;
extern getAllMapsUUIDRequestDefaultTypeInternal _getAllMapsUUIDRequest_default_instance_;
class getAllMapsUUIDResponse;
struct getAllMapsUUIDResponseDefaultTypeInternal;
extern getAllMapsUUIDResponseDefaultTypeInternal _getAllMapsUUIDResponse_default_instance_;
class getCameraParametersRequest;
struct getCameraParametersRequestDefaultTypeInternal;
extern getCameraParametersRequestDefaultTypeInternal _getCameraParametersRequest_default_instance_;
class getCameraParametersResponse;
struct getCameraParametersResponseDefaultTypeInternal;
extern getCameraParametersResponseDefaultTypeInternal _getCameraParametersResponse_default_instance_;
class getClientInfoForMapRequest;
struct getClientInfoForMapRequestDefaultTypeInternal;
extern getClientInfoForMapRequestDefaultTypeInternal _getClientInfoForMapRequest_default_instance_;
class getClientInfoForMapResponse;
struct getClientInfoForMapResponseDefaultTypeInternal;
extern getClientInfoForMapResponseDefaultTypeInternal _getClientInfoForMapResponse_default_instance_;
class getClientMapUUIDRequest;
struct getClientMapUUIDRequestDefaultTypeInternal;
extern getClientMapUUIDRequestDefaultTypeInternal _getClientMapUUIDRequest_default_instance_;
class getClientMapUUIDResponse;
struct getClientMapUUIDResponseDefaultTypeInternal;
extern getClientMapUUIDResponseDefaultTypeInternal _getClientMapUUIDResponse_default_instance_;
class getClientPoseRequest;
struct getClientPoseRequestDefaultTypeInternal;
extern getClientPoseRequestDefaultTypeInternal _getClientPoseRequest_default_instance_;
class getClientPoseResponse;
struct getClientPoseResponseDefaultTypeInternal;
extern getClientPoseResponseDefaultTypeInternal _getClientPoseResponse_default_instance_;
class getDeviceInfoRequest;
struct getDeviceInfoRequestDefaultTypeInternal;
extern getDeviceInfoRequestDefaultTypeInternal _getDeviceInfoRequest_default_instance_;
class getDeviceInfoResponse;
struct getDeviceInfoResponseDefaultTypeInternal;
extern getDeviceInfoResponseDefaultTypeInternal _getDeviceInfoResponse_default_instance_;
class getMapInfoRequest;
struct getMapInfoRequestDefaultTypeInternal;
extern getMapInfoRequestDefaultTypeInternal _getMapInfoRequest_default_instance_;
class getMapInfoResponse;
struct getMapInfoResponseDefaultTypeInternal;
extern getMapInfoResponseDefaultTypeInternal _getMapInfoResponse_default_instance_;
class getMapProcessingDataRequest;
struct getMapProcessingDataRequestDefaultTypeInternal;
extern getMapProcessingDataRequestDefaultTypeInternal _getMapProcessingDataRequest_default_instance_;
class getMapProcessingDataResponse;
struct getMapProcessingDataResponseDefaultTypeInternal;
extern getMapProcessingDataResponseDefaultTypeInternal _getMapProcessingDataResponse_default_instance_;
class getMapProcessingStatusRequest;
struct getMapProcessingStatusRequestDefaultTypeInternal;
extern getMapProcessingStatusRequestDefaultTypeInternal _getMapProcessingStatusRequest_default_instance_;
class getMapProcessingStatusResponse;
struct getMapProcessingStatusResponseDefaultTypeInternal;
extern getMapProcessingStatusResponseDefaultTypeInternal _getMapProcessingStatusResponse_default_instance_;
class getMapRequestRequest;
struct getMapRequestRequestDefaultTypeInternal;
extern getMapRequestRequestDefaultTypeInternal _getMapRequestRequest_default_instance_;
class getMapRequestResponse;
struct getMapRequestResponseDefaultTypeInternal;
extern getMapRequestResponseDefaultTypeInternal _getMapRequestResponse_default_instance_;
class getMappingDataRequestRequest;
struct getMappingDataRequestRequestDefaultTypeInternal;
extern getMappingDataRequestRequestDefaultTypeInternal _getMappingDataRequestRequest_default_instance_;
class getMappingDataRequestResponse;
struct getMappingDataRequestResponseDefaultTypeInternal;
extern getMappingDataRequestResponseDefaultTypeInternal _getMappingDataRequestResponse_default_instance_;
class getPointCloudRequestRequest;
struct getPointCloudRequestRequestDefaultTypeInternal;
extern getPointCloudRequestRequestDefaultTypeInternal _getPointCloudRequestRequest_default_instance_;
class getPointCloudRequestResponse;
struct getPointCloudRequestResponseDefaultTypeInternal;
extern getPointCloudRequestResponseDefaultTypeInternal _getPointCloudRequestResponse_default_instance_;
class getProcessingModeRequest;
struct getProcessingModeRequestDefaultTypeInternal;
extern getProcessingModeRequestDefaultTypeInternal _getProcessingModeRequest_default_instance_;
class getProcessingModeResponse;
struct getProcessingModeResponseDefaultTypeInternal;
extern getProcessingModeResponseDefaultTypeInternal _getProcessingModeResponse_default_instance_;
class imageProcessRequestRequest;
struct imageProcessRequestRequestDefaultTypeInternal;
extern imageProcessRequestRequestDefaultTypeInternal _imageProcessRequestRequest_default_instance_;
class imageProcessRequestResponse;
struct imageProcessRequestResponseDefaultTypeInternal;
extern imageProcessRequestResponseDefaultTypeInternal _imageProcessRequestResponse_default_instance_;
class init_grpc0Request;
struct init_grpc0RequestDefaultTypeInternal;
extern init_grpc0RequestDefaultTypeInternal _init_grpc0Request_default_instance_;
class init_grpc0Response;
struct init_grpc0ResponseDefaultTypeInternal;
extern init_grpc0ResponseDefaultTypeInternal _init_grpc0Response_default_instance_;
class init_grpc1Request;
struct init_grpc1RequestDefaultTypeInternal;
extern init_grpc1RequestDefaultTypeInternal _init_grpc1Request_default_instance_;
class init_grpc1Response;
struct init_grpc1ResponseDefaultTypeInternal;
extern init_grpc1ResponseDefaultTypeInternal _init_grpc1Response_default_instance_;
class registerClientRequest;
struct registerClientRequestDefaultTypeInternal;
extern registerClientRequestDefaultTypeInternal _registerClientRequest_default_instance_;
class registerClientResponse;
struct registerClientResponseDefaultTypeInternal;
extern registerClientResponseDefaultTypeInternal _registerClientResponse_default_instance_;
class requestMapProcessingRequest;
struct requestMapProcessingRequestDefaultTypeInternal;
extern requestMapProcessingRequestDefaultTypeInternal _requestMapProcessingRequest_default_instance_;
class requestMapProcessingResponse;
struct requestMapProcessingResponseDefaultTypeInternal;
extern requestMapProcessingResponseDefaultTypeInternal _requestMapProcessingResponse_default_instance_;
class setCameraParameters_grpc0Request;
struct setCameraParameters_grpc0RequestDefaultTypeInternal;
extern setCameraParameters_grpc0RequestDefaultTypeInternal _setCameraParameters_grpc0Request_default_instance_;
class setCameraParameters_grpc0Response;
struct setCameraParameters_grpc0ResponseDefaultTypeInternal;
extern setCameraParameters_grpc0ResponseDefaultTypeInternal _setCameraParameters_grpc0Response_default_instance_;
class setCameraParameters_grpc1Request;
struct setCameraParameters_grpc1RequestDefaultTypeInternal;
extern setCameraParameters_grpc1RequestDefaultTypeInternal _setCameraParameters_grpc1Request_default_instance_;
class setCameraParameters_grpc1Response;
struct setCameraParameters_grpc1ResponseDefaultTypeInternal;
extern setCameraParameters_grpc1ResponseDefaultTypeInternal _setCameraParameters_grpc1Response_default_instance_;
class setMapRequestRequest;
struct setMapRequestRequestDefaultTypeInternal;
extern setMapRequestRequestDefaultTypeInternal _setMapRequestRequest_default_instance_;
class setMapRequestResponse;
struct setMapRequestResponseDefaultTypeInternal;
extern setMapRequestResponseDefaultTypeInternal _setMapRequestResponse_default_instance_;
class setRectificationParametersRequest;
struct setRectificationParametersRequestDefaultTypeInternal;
extern setRectificationParametersRequestDefaultTypeInternal _setRectificationParametersRequest_default_instance_;
class setRectificationParametersResponse;
struct setRectificationParametersResponseDefaultTypeInternal;
extern setRectificationParametersResponseDefaultTypeInternal _setRectificationParametersResponse_default_instance_;
class startRequest;
struct startRequestDefaultTypeInternal;
extern startRequestDefaultTypeInternal _startRequest_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopRequest;
struct stopRequestDefaultTypeInternal;
extern stopRequestDefaultTypeInternal _stopRequest_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
class unregisterClientRequest;
struct unregisterClientRequestDefaultTypeInternal;
extern unregisterClientRequestDefaultTypeInternal _unregisterClientRequest_default_instance_;
class unregisterClientResponse;
struct unregisterClientResponseDefaultTypeInternal;
extern unregisterClientResponseDefaultTypeInternal _unregisterClientResponse_default_instance_;
}  // namespace grpcIFrontEnd
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIFrontEnd::createMapRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::createMapRequest>(Arena*);
template<> ::grpcIFrontEnd::createMapResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::createMapResponse>(Arena*);
template<> ::grpcIFrontEnd::deleteMapRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::deleteMapRequest>(Arena*);
template<> ::grpcIFrontEnd::deleteMapResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::deleteMapResponse>(Arena*);
template<> ::grpcIFrontEnd::getAllClientsUUIDRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getAllClientsUUIDRequest>(Arena*);
template<> ::grpcIFrontEnd::getAllClientsUUIDResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getAllClientsUUIDResponse>(Arena*);
template<> ::grpcIFrontEnd::getAllMapsUUIDRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getAllMapsUUIDRequest>(Arena*);
template<> ::grpcIFrontEnd::getAllMapsUUIDResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getAllMapsUUIDResponse>(Arena*);
template<> ::grpcIFrontEnd::getCameraParametersRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getCameraParametersRequest>(Arena*);
template<> ::grpcIFrontEnd::getCameraParametersResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getCameraParametersResponse>(Arena*);
template<> ::grpcIFrontEnd::getClientInfoForMapRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getClientInfoForMapRequest>(Arena*);
template<> ::grpcIFrontEnd::getClientInfoForMapResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getClientInfoForMapResponse>(Arena*);
template<> ::grpcIFrontEnd::getClientMapUUIDRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getClientMapUUIDRequest>(Arena*);
template<> ::grpcIFrontEnd::getClientMapUUIDResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getClientMapUUIDResponse>(Arena*);
template<> ::grpcIFrontEnd::getClientPoseRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getClientPoseRequest>(Arena*);
template<> ::grpcIFrontEnd::getClientPoseResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getClientPoseResponse>(Arena*);
template<> ::grpcIFrontEnd::getDeviceInfoRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getDeviceInfoRequest>(Arena*);
template<> ::grpcIFrontEnd::getDeviceInfoResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getDeviceInfoResponse>(Arena*);
template<> ::grpcIFrontEnd::getMapInfoRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapInfoRequest>(Arena*);
template<> ::grpcIFrontEnd::getMapInfoResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapInfoResponse>(Arena*);
template<> ::grpcIFrontEnd::getMapProcessingDataRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapProcessingDataRequest>(Arena*);
template<> ::grpcIFrontEnd::getMapProcessingDataResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapProcessingDataResponse>(Arena*);
template<> ::grpcIFrontEnd::getMapProcessingStatusRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapProcessingStatusRequest>(Arena*);
template<> ::grpcIFrontEnd::getMapProcessingStatusResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapProcessingStatusResponse>(Arena*);
template<> ::grpcIFrontEnd::getMapRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::getMapRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMapRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::getMappingDataRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMappingDataRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::getMappingDataRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getMappingDataRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::getPointCloudRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getPointCloudRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::getPointCloudRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getPointCloudRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::getProcessingModeRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::getProcessingModeRequest>(Arena*);
template<> ::grpcIFrontEnd::getProcessingModeResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::getProcessingModeResponse>(Arena*);
template<> ::grpcIFrontEnd::imageProcessRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::imageProcessRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::imageProcessRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::imageProcessRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::init_grpc0Request* Arena::CreateMaybeMessage<::grpcIFrontEnd::init_grpc0Request>(Arena*);
template<> ::grpcIFrontEnd::init_grpc0Response* Arena::CreateMaybeMessage<::grpcIFrontEnd::init_grpc0Response>(Arena*);
template<> ::grpcIFrontEnd::init_grpc1Request* Arena::CreateMaybeMessage<::grpcIFrontEnd::init_grpc1Request>(Arena*);
template<> ::grpcIFrontEnd::init_grpc1Response* Arena::CreateMaybeMessage<::grpcIFrontEnd::init_grpc1Response>(Arena*);
template<> ::grpcIFrontEnd::registerClientRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::registerClientRequest>(Arena*);
template<> ::grpcIFrontEnd::registerClientResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::registerClientResponse>(Arena*);
template<> ::grpcIFrontEnd::requestMapProcessingRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::requestMapProcessingRequest>(Arena*);
template<> ::grpcIFrontEnd::requestMapProcessingResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::requestMapProcessingResponse>(Arena*);
template<> ::grpcIFrontEnd::setCameraParameters_grpc0Request* Arena::CreateMaybeMessage<::grpcIFrontEnd::setCameraParameters_grpc0Request>(Arena*);
template<> ::grpcIFrontEnd::setCameraParameters_grpc0Response* Arena::CreateMaybeMessage<::grpcIFrontEnd::setCameraParameters_grpc0Response>(Arena*);
template<> ::grpcIFrontEnd::setCameraParameters_grpc1Request* Arena::CreateMaybeMessage<::grpcIFrontEnd::setCameraParameters_grpc1Request>(Arena*);
template<> ::grpcIFrontEnd::setCameraParameters_grpc1Response* Arena::CreateMaybeMessage<::grpcIFrontEnd::setCameraParameters_grpc1Response>(Arena*);
template<> ::grpcIFrontEnd::setMapRequestRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::setMapRequestRequest>(Arena*);
template<> ::grpcIFrontEnd::setMapRequestResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::setMapRequestResponse>(Arena*);
template<> ::grpcIFrontEnd::setRectificationParametersRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::setRectificationParametersRequest>(Arena*);
template<> ::grpcIFrontEnd::setRectificationParametersResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::setRectificationParametersResponse>(Arena*);
template<> ::grpcIFrontEnd::startRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::startRequest>(Arena*);
template<> ::grpcIFrontEnd::startResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::startResponse>(Arena*);
template<> ::grpcIFrontEnd::stopRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::stopRequest>(Arena*);
template<> ::grpcIFrontEnd::stopResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::stopResponse>(Arena*);
template<> ::grpcIFrontEnd::unregisterClientRequest* Arena::CreateMaybeMessage<::grpcIFrontEnd::unregisterClientRequest>(Arena*);
template<> ::grpcIFrontEnd::unregisterClientResponse* Arena::CreateMaybeMessage<::grpcIFrontEnd::unregisterClientResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIFrontEnd {

// ===================================================================

class registerClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.registerClientRequest) */ {
 public:
  inline registerClientRequest() : registerClientRequest(nullptr) {}
  ~registerClientRequest() override;
  explicit PROTOBUF_CONSTEXPR registerClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  registerClientRequest(const registerClientRequest& from);
  registerClientRequest(registerClientRequest&& from) noexcept
    : registerClientRequest() {
    *this = ::std::move(from);
  }

  inline registerClientRequest& operator=(const registerClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerClientRequest& operator=(registerClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registerClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const registerClientRequest* internal_default_instance() {
    return reinterpret_cast<const registerClientRequest*>(
               &_registerClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(registerClientRequest& a, registerClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(registerClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registerClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<registerClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const registerClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const registerClientRequest& from) {
    registerClientRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.registerClientRequest";
  }
  protected:
  explicit registerClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kDeviceInfoFieldNumber = 3,
    kWorldElementUUIDFieldNumber = 4,
    kClientUUIDFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // bytes deviceInfo = 3;
  void clear_deviceinfo();
  const std::string& deviceinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceinfo();
  PROTOBUF_NODISCARD std::string* release_deviceinfo();
  void set_allocated_deviceinfo(std::string* deviceinfo);
  private:
  const std::string& _internal_deviceinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceinfo(const std::string& value);
  std::string* _internal_mutable_deviceinfo();
  public:

  // string worldElementUUID = 4;
  void clear_worldelementuuid();
  const std::string& worldelementuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldelementuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldelementuuid();
  PROTOBUF_NODISCARD std::string* release_worldelementuuid();
  void set_allocated_worldelementuuid(std::string* worldelementuuid);
  private:
  const std::string& _internal_worldelementuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldelementuuid(const std::string& value);
  std::string* _internal_mutable_worldelementuuid();
  public:

  // string clientUUID = 5;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.registerClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceinfo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldelementuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class registerClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.registerClientResponse) */ {
 public:
  inline registerClientResponse() : registerClientResponse(nullptr) {}
  ~registerClientResponse() override;
  explicit PROTOBUF_CONSTEXPR registerClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  registerClientResponse(const registerClientResponse& from);
  registerClientResponse(registerClientResponse&& from) noexcept
    : registerClientResponse() {
    *this = ::std::move(from);
  }

  inline registerClientResponse& operator=(const registerClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerClientResponse& operator=(registerClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registerClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const registerClientResponse* internal_default_instance() {
    return reinterpret_cast<const registerClientResponse*>(
               &_registerClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(registerClientResponse& a, registerClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(registerClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registerClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<registerClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const registerClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const registerClientResponse& from) {
    registerClientResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.registerClientResponse";
  }
  protected:
  explicit registerClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // string clientUUID = 1;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.registerClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class unregisterClientRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.unregisterClientRequest) */ {
 public:
  inline unregisterClientRequest() : unregisterClientRequest(nullptr) {}
  ~unregisterClientRequest() override;
  explicit PROTOBUF_CONSTEXPR unregisterClientRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  unregisterClientRequest(const unregisterClientRequest& from);
  unregisterClientRequest(unregisterClientRequest&& from) noexcept
    : unregisterClientRequest() {
    *this = ::std::move(from);
  }

  inline unregisterClientRequest& operator=(const unregisterClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline unregisterClientRequest& operator=(unregisterClientRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const unregisterClientRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const unregisterClientRequest* internal_default_instance() {
    return reinterpret_cast<const unregisterClientRequest*>(
               &_unregisterClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(unregisterClientRequest& a, unregisterClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(unregisterClientRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unregisterClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  unregisterClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<unregisterClientRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const unregisterClientRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const unregisterClientRequest& from) {
    unregisterClientRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unregisterClientRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.unregisterClientRequest";
  }
  protected:
  explicit unregisterClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.unregisterClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class unregisterClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.unregisterClientResponse) */ {
 public:
  inline unregisterClientResponse() : unregisterClientResponse(nullptr) {}
  ~unregisterClientResponse() override;
  explicit PROTOBUF_CONSTEXPR unregisterClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  unregisterClientResponse(const unregisterClientResponse& from);
  unregisterClientResponse(unregisterClientResponse&& from) noexcept
    : unregisterClientResponse() {
    *this = ::std::move(from);
  }

  inline unregisterClientResponse& operator=(const unregisterClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline unregisterClientResponse& operator=(unregisterClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const unregisterClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const unregisterClientResponse* internal_default_instance() {
    return reinterpret_cast<const unregisterClientResponse*>(
               &_unregisterClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(unregisterClientResponse& a, unregisterClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(unregisterClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unregisterClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  unregisterClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<unregisterClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const unregisterClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const unregisterClientResponse& from) {
    unregisterClientResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unregisterClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.unregisterClientResponse";
  }
  protected:
  explicit unregisterClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.unregisterClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getAllClientsUUIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getAllClientsUUIDRequest) */ {
 public:
  inline getAllClientsUUIDRequest() : getAllClientsUUIDRequest(nullptr) {}
  ~getAllClientsUUIDRequest() override;
  explicit PROTOBUF_CONSTEXPR getAllClientsUUIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllClientsUUIDRequest(const getAllClientsUUIDRequest& from);
  getAllClientsUUIDRequest(getAllClientsUUIDRequest&& from) noexcept
    : getAllClientsUUIDRequest() {
    *this = ::std::move(from);
  }

  inline getAllClientsUUIDRequest& operator=(const getAllClientsUUIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllClientsUUIDRequest& operator=(getAllClientsUUIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllClientsUUIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllClientsUUIDRequest* internal_default_instance() {
    return reinterpret_cast<const getAllClientsUUIDRequest*>(
               &_getAllClientsUUIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getAllClientsUUIDRequest& a, getAllClientsUUIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllClientsUUIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllClientsUUIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getAllClientsUUIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getAllClientsUUIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllClientsUUIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getAllClientsUUIDRequest& from) {
    getAllClientsUUIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllClientsUUIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getAllClientsUUIDRequest";
  }
  protected:
  explicit getAllClientsUUIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDListFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // bytes clientUUIDList = 3;
  void clear_clientuuidlist();
  const std::string& clientuuidlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuidlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuidlist();
  PROTOBUF_NODISCARD std::string* release_clientuuidlist();
  void set_allocated_clientuuidlist(std::string* clientuuidlist);
  private:
  const std::string& _internal_clientuuidlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuidlist(const std::string& value);
  std::string* _internal_mutable_clientuuidlist();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getAllClientsUUIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuidlist_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getAllClientsUUIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getAllClientsUUIDResponse) */ {
 public:
  inline getAllClientsUUIDResponse() : getAllClientsUUIDResponse(nullptr) {}
  ~getAllClientsUUIDResponse() override;
  explicit PROTOBUF_CONSTEXPR getAllClientsUUIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllClientsUUIDResponse(const getAllClientsUUIDResponse& from);
  getAllClientsUUIDResponse(getAllClientsUUIDResponse&& from) noexcept
    : getAllClientsUUIDResponse() {
    *this = ::std::move(from);
  }

  inline getAllClientsUUIDResponse& operator=(const getAllClientsUUIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllClientsUUIDResponse& operator=(getAllClientsUUIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllClientsUUIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllClientsUUIDResponse* internal_default_instance() {
    return reinterpret_cast<const getAllClientsUUIDResponse*>(
               &_getAllClientsUUIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getAllClientsUUIDResponse& a, getAllClientsUUIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllClientsUUIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllClientsUUIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getAllClientsUUIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getAllClientsUUIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllClientsUUIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getAllClientsUUIDResponse& from) {
    getAllClientsUUIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllClientsUUIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getAllClientsUUIDResponse";
  }
  protected:
  explicit getAllClientsUUIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientUUIDListFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes clientUUIDList = 1;
  void clear_clientuuidlist();
  const std::string& clientuuidlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuidlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuidlist();
  PROTOBUF_NODISCARD std::string* release_clientuuidlist();
  void set_allocated_clientuuidlist(std::string* clientuuidlist);
  private:
  const std::string& _internal_clientuuidlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuidlist(const std::string& value);
  std::string* _internal_mutable_clientuuidlist();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getAllClientsUUIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuidlist_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getDeviceInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getDeviceInfoRequest) */ {
 public:
  inline getDeviceInfoRequest() : getDeviceInfoRequest(nullptr) {}
  ~getDeviceInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR getDeviceInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDeviceInfoRequest(const getDeviceInfoRequest& from);
  getDeviceInfoRequest(getDeviceInfoRequest&& from) noexcept
    : getDeviceInfoRequest() {
    *this = ::std::move(from);
  }

  inline getDeviceInfoRequest& operator=(const getDeviceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDeviceInfoRequest& operator=(getDeviceInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDeviceInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDeviceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const getDeviceInfoRequest*>(
               &_getDeviceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(getDeviceInfoRequest& a, getDeviceInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getDeviceInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDeviceInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getDeviceInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getDeviceInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDeviceInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getDeviceInfoRequest& from) {
    getDeviceInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDeviceInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getDeviceInfoRequest";
  }
  protected:
  explicit getDeviceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kDeviceInfoFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes deviceInfo = 4;
  void clear_deviceinfo();
  const std::string& deviceinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceinfo();
  PROTOBUF_NODISCARD std::string* release_deviceinfo();
  void set_allocated_deviceinfo(std::string* deviceinfo);
  private:
  const std::string& _internal_deviceinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceinfo(const std::string& value);
  std::string* _internal_mutable_deviceinfo();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getDeviceInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceinfo_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getDeviceInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getDeviceInfoResponse) */ {
 public:
  inline getDeviceInfoResponse() : getDeviceInfoResponse(nullptr) {}
  ~getDeviceInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR getDeviceInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDeviceInfoResponse(const getDeviceInfoResponse& from);
  getDeviceInfoResponse(getDeviceInfoResponse&& from) noexcept
    : getDeviceInfoResponse() {
    *this = ::std::move(from);
  }

  inline getDeviceInfoResponse& operator=(const getDeviceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDeviceInfoResponse& operator=(getDeviceInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDeviceInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDeviceInfoResponse* internal_default_instance() {
    return reinterpret_cast<const getDeviceInfoResponse*>(
               &_getDeviceInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(getDeviceInfoResponse& a, getDeviceInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDeviceInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDeviceInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getDeviceInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getDeviceInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDeviceInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getDeviceInfoResponse& from) {
    getDeviceInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDeviceInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getDeviceInfoResponse";
  }
  protected:
  explicit getDeviceInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceInfoFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes deviceInfo = 1;
  void clear_deviceinfo();
  const std::string& deviceinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceinfo();
  PROTOBUF_NODISCARD std::string* release_deviceinfo();
  void set_allocated_deviceinfo(std::string* deviceinfo);
  private:
  const std::string& _internal_deviceinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceinfo(const std::string& value);
  std::string* _internal_mutable_deviceinfo();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getDeviceInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceinfo_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.init_grpc0Request) */ {
 public:
  inline init_grpc0Request() : init_grpc0Request(nullptr) {}
  ~init_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc0Request(const init_grpc0Request& from);
  init_grpc0Request(init_grpc0Request&& from) noexcept
    : init_grpc0Request() {
    *this = ::std::move(from);
  }

  inline init_grpc0Request& operator=(const init_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc0Request& operator=(init_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc0Request*>(
               &_init_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(init_grpc0Request& a, init_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc0Request& from) {
    init_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.init_grpc0Request";
  }
  protected:
  explicit init_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.init_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.init_grpc0Response) */ {
 public:
  inline init_grpc0Response() : init_grpc0Response(nullptr) {}
  ~init_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc0Response(const init_grpc0Response& from);
  init_grpc0Response(init_grpc0Response&& from) noexcept
    : init_grpc0Response() {
    *this = ::std::move(from);
  }

  inline init_grpc0Response& operator=(const init_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc0Response& operator=(init_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc0Response*>(
               &_init_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(init_grpc0Response& a, init_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc0Response& from) {
    init_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.init_grpc0Response";
  }
  protected:
  explicit init_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.init_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.init_grpc1Request) */ {
 public:
  inline init_grpc1Request() : init_grpc1Request(nullptr) {}
  ~init_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc1Request(const init_grpc1Request& from);
  init_grpc1Request(init_grpc1Request&& from) noexcept
    : init_grpc1Request() {
    *this = ::std::move(from);
  }

  inline init_grpc1Request& operator=(const init_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc1Request& operator=(init_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc1Request*>(
               &_init_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(init_grpc1Request& a, init_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc1Request& from) {
    init_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.init_grpc1Request";
  }
  protected:
  explicit init_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kPipelineModeFieldNumber = 4,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // sint32 pipelineMode = 4;
  void clear_pipelinemode();
  int32_t pipelinemode() const;
  void set_pipelinemode(int32_t value);
  private:
  int32_t _internal_pipelinemode() const;
  void _internal_set_pipelinemode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.init_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    int32_t pipelinemode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.init_grpc1Response) */ {
 public:
  inline init_grpc1Response() : init_grpc1Response(nullptr) {}
  ~init_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc1Response(const init_grpc1Response& from);
  init_grpc1Response(init_grpc1Response&& from) noexcept
    : init_grpc1Response() {
    *this = ::std::move(from);
  }

  inline init_grpc1Response& operator=(const init_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc1Response& operator=(init_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc1Response*>(
               &_init_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(init_grpc1Response& a, init_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc1Response& from) {
    init_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.init_grpc1Response";
  }
  protected:
  explicit init_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.init_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class startRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.startRequest) */ {
 public:
  inline startRequest() : startRequest(nullptr) {}
  ~startRequest() override;
  explicit PROTOBUF_CONSTEXPR startRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startRequest(const startRequest& from);
  startRequest(startRequest&& from) noexcept
    : startRequest() {
    *this = ::std::move(from);
  }

  inline startRequest& operator=(const startRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline startRequest& operator=(startRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const startRequest* internal_default_instance() {
    return reinterpret_cast<const startRequest*>(
               &_startRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(startRequest& a, startRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(startRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  startRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<startRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const startRequest& from) {
    startRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.startRequest";
  }
  protected:
  explicit startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.startRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class startResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  ~startResponse() override;
  explicit PROTOBUF_CONSTEXPR startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const startResponse& from) {
    startResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class stopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.stopRequest) */ {
 public:
  inline stopRequest() : stopRequest(nullptr) {}
  ~stopRequest() override;
  explicit PROTOBUF_CONSTEXPR stopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopRequest(const stopRequest& from);
  stopRequest(stopRequest&& from) noexcept
    : stopRequest() {
    *this = ::std::move(from);
  }

  inline stopRequest& operator=(const stopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopRequest& operator=(stopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopRequest* internal_default_instance() {
    return reinterpret_cast<const stopRequest*>(
               &_stopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(stopRequest& a, stopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(stopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stopRequest& from) {
    stopRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.stopRequest";
  }
  protected:
  explicit stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.stopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  ~stopResponse() override;
  explicit PROTOBUF_CONSTEXPR stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stopResponse& from) {
    stopResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getProcessingModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getProcessingModeRequest) */ {
 public:
  inline getProcessingModeRequest() : getProcessingModeRequest(nullptr) {}
  ~getProcessingModeRequest() override;
  explicit PROTOBUF_CONSTEXPR getProcessingModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getProcessingModeRequest(const getProcessingModeRequest& from);
  getProcessingModeRequest(getProcessingModeRequest&& from) noexcept
    : getProcessingModeRequest() {
    *this = ::std::move(from);
  }

  inline getProcessingModeRequest& operator=(const getProcessingModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getProcessingModeRequest& operator=(getProcessingModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getProcessingModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getProcessingModeRequest* internal_default_instance() {
    return reinterpret_cast<const getProcessingModeRequest*>(
               &_getProcessingModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(getProcessingModeRequest& a, getProcessingModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getProcessingModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getProcessingModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getProcessingModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getProcessingModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getProcessingModeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getProcessingModeRequest& from) {
    getProcessingModeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getProcessingModeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getProcessingModeRequest";
  }
  protected:
  explicit getProcessingModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kPipelineModeFieldNumber = 4,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // sint32 pipelineMode = 4;
  void clear_pipelinemode();
  int32_t pipelinemode() const;
  void set_pipelinemode(int32_t value);
  private:
  int32_t _internal_pipelinemode() const;
  void _internal_set_pipelinemode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getProcessingModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    int32_t grpcservercompressionformat_;
    int32_t pipelinemode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getProcessingModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getProcessingModeResponse) */ {
 public:
  inline getProcessingModeResponse() : getProcessingModeResponse(nullptr) {}
  ~getProcessingModeResponse() override;
  explicit PROTOBUF_CONSTEXPR getProcessingModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getProcessingModeResponse(const getProcessingModeResponse& from);
  getProcessingModeResponse(getProcessingModeResponse&& from) noexcept
    : getProcessingModeResponse() {
    *this = ::std::move(from);
  }

  inline getProcessingModeResponse& operator=(const getProcessingModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getProcessingModeResponse& operator=(getProcessingModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getProcessingModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getProcessingModeResponse* internal_default_instance() {
    return reinterpret_cast<const getProcessingModeResponse*>(
               &_getProcessingModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(getProcessingModeResponse& a, getProcessingModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getProcessingModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getProcessingModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getProcessingModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getProcessingModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getProcessingModeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getProcessingModeResponse& from) {
    getProcessingModeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getProcessingModeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getProcessingModeResponse";
  }
  protected:
  explicit getProcessingModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPipelineModeFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // sint32 pipelineMode = 1;
  void clear_pipelinemode();
  int32_t pipelinemode() const;
  void set_pipelinemode(int32_t value);
  private:
  int32_t _internal_pipelinemode() const;
  void _internal_set_pipelinemode(int32_t value);
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getProcessingModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t pipelinemode_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setCameraParameters_grpc0Request) */ {
 public:
  inline setCameraParameters_grpc0Request() : setCameraParameters_grpc0Request(nullptr) {}
  ~setCameraParameters_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc0Request(const setCameraParameters_grpc0Request& from);
  setCameraParameters_grpc0Request(setCameraParameters_grpc0Request&& from) noexcept
    : setCameraParameters_grpc0Request() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc0Request& operator=(const setCameraParameters_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc0Request& operator=(setCameraParameters_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc0Request*>(
               &_setCameraParameters_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(setCameraParameters_grpc0Request& a, setCameraParameters_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc0Request& from) {
    setCameraParameters_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setCameraParameters_grpc0Request";
  }
  protected:
  explicit setCameraParameters_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kCameraParamsFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes cameraParams = 4;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setCameraParameters_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setCameraParameters_grpc0Response) */ {
 public:
  inline setCameraParameters_grpc0Response() : setCameraParameters_grpc0Response(nullptr) {}
  ~setCameraParameters_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc0Response(const setCameraParameters_grpc0Response& from);
  setCameraParameters_grpc0Response(setCameraParameters_grpc0Response&& from) noexcept
    : setCameraParameters_grpc0Response() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc0Response& operator=(const setCameraParameters_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc0Response& operator=(setCameraParameters_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc0Response*>(
               &_setCameraParameters_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(setCameraParameters_grpc0Response& a, setCameraParameters_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc0Response& from) {
    setCameraParameters_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setCameraParameters_grpc0Response";
  }
  protected:
  explicit setCameraParameters_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setCameraParameters_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setCameraParameters_grpc1Request) */ {
 public:
  inline setCameraParameters_grpc1Request() : setCameraParameters_grpc1Request(nullptr) {}
  ~setCameraParameters_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc1Request(const setCameraParameters_grpc1Request& from);
  setCameraParameters_grpc1Request(setCameraParameters_grpc1Request&& from) noexcept
    : setCameraParameters_grpc1Request() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc1Request& operator=(const setCameraParameters_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc1Request& operator=(setCameraParameters_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc1Request*>(
               &_setCameraParameters_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(setCameraParameters_grpc1Request& a, setCameraParameters_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc1Request& from) {
    setCameraParameters_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setCameraParameters_grpc1Request";
  }
  protected:
  explicit setCameraParameters_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kCameraParams1FieldNumber = 4,
    kCameraParams2FieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes cameraParams1 = 4;
  void clear_cameraparams1();
  const std::string& cameraparams1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams1();
  PROTOBUF_NODISCARD std::string* release_cameraparams1();
  void set_allocated_cameraparams1(std::string* cameraparams1);
  private:
  const std::string& _internal_cameraparams1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams1(const std::string& value);
  std::string* _internal_mutable_cameraparams1();
  public:

  // bytes cameraParams2 = 5;
  void clear_cameraparams2();
  const std::string& cameraparams2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams2();
  PROTOBUF_NODISCARD std::string* release_cameraparams2();
  void set_allocated_cameraparams2(std::string* cameraparams2);
  private:
  const std::string& _internal_cameraparams2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams2(const std::string& value);
  std::string* _internal_mutable_cameraparams2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setCameraParameters_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams2_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setCameraParameters_grpc1Response) */ {
 public:
  inline setCameraParameters_grpc1Response() : setCameraParameters_grpc1Response(nullptr) {}
  ~setCameraParameters_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc1Response(const setCameraParameters_grpc1Response& from);
  setCameraParameters_grpc1Response(setCameraParameters_grpc1Response&& from) noexcept
    : setCameraParameters_grpc1Response() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc1Response& operator=(const setCameraParameters_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc1Response& operator=(setCameraParameters_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc1Response*>(
               &_setCameraParameters_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(setCameraParameters_grpc1Response& a, setCameraParameters_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc1Response& from) {
    setCameraParameters_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setCameraParameters_grpc1Response";
  }
  protected:
  explicit setCameraParameters_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setCameraParameters_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setRectificationParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setRectificationParametersRequest) */ {
 public:
  inline setRectificationParametersRequest() : setRectificationParametersRequest(nullptr) {}
  ~setRectificationParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setRectificationParametersRequest(const setRectificationParametersRequest& from);
  setRectificationParametersRequest(setRectificationParametersRequest&& from) noexcept
    : setRectificationParametersRequest() {
    *this = ::std::move(from);
  }

  inline setRectificationParametersRequest& operator=(const setRectificationParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setRectificationParametersRequest& operator=(setRectificationParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setRectificationParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setRectificationParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setRectificationParametersRequest*>(
               &_setRectificationParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(setRectificationParametersRequest& a, setRectificationParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setRectificationParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setRectificationParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setRectificationParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setRectificationParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setRectificationParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setRectificationParametersRequest& from) {
    setRectificationParametersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setRectificationParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setRectificationParametersRequest";
  }
  protected:
  explicit setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kRectCam1FieldNumber = 4,
    kRectCam2FieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes rectCam1 = 4;
  void clear_rectcam1();
  const std::string& rectcam1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectcam1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectcam1();
  PROTOBUF_NODISCARD std::string* release_rectcam1();
  void set_allocated_rectcam1(std::string* rectcam1);
  private:
  const std::string& _internal_rectcam1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectcam1(const std::string& value);
  std::string* _internal_mutable_rectcam1();
  public:

  // bytes rectCam2 = 5;
  void clear_rectcam2();
  const std::string& rectcam2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectcam2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectcam2();
  PROTOBUF_NODISCARD std::string* release_rectcam2();
  void set_allocated_rectcam2(std::string* rectcam2);
  private:
  const std::string& _internal_rectcam2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectcam2(const std::string& value);
  std::string* _internal_mutable_rectcam2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setRectificationParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectcam1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectcam2_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setRectificationParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setRectificationParametersResponse) */ {
 public:
  inline setRectificationParametersResponse() : setRectificationParametersResponse(nullptr) {}
  ~setRectificationParametersResponse() override;
  explicit PROTOBUF_CONSTEXPR setRectificationParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setRectificationParametersResponse(const setRectificationParametersResponse& from);
  setRectificationParametersResponse(setRectificationParametersResponse&& from) noexcept
    : setRectificationParametersResponse() {
    *this = ::std::move(from);
  }

  inline setRectificationParametersResponse& operator=(const setRectificationParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setRectificationParametersResponse& operator=(setRectificationParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setRectificationParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setRectificationParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setRectificationParametersResponse*>(
               &_setRectificationParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(setRectificationParametersResponse& a, setRectificationParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setRectificationParametersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setRectificationParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setRectificationParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setRectificationParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setRectificationParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setRectificationParametersResponse& from) {
    setRectificationParametersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setRectificationParametersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setRectificationParametersResponse";
  }
  protected:
  explicit setRectificationParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setRectificationParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getCameraParametersRequest) */ {
 public:
  inline getCameraParametersRequest() : getCameraParametersRequest(nullptr) {}
  ~getCameraParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR getCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParametersRequest(const getCameraParametersRequest& from);
  getCameraParametersRequest(getCameraParametersRequest&& from) noexcept
    : getCameraParametersRequest() {
    *this = ::std::move(from);
  }

  inline getCameraParametersRequest& operator=(const getCameraParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParametersRequest& operator=(getCameraParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParametersRequest* internal_default_instance() {
    return reinterpret_cast<const getCameraParametersRequest*>(
               &_getCameraParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(getCameraParametersRequest& a, getCameraParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getCameraParametersRequest& from) {
    getCameraParametersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getCameraParametersRequest";
  }
  protected:
  explicit getCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kCameraParamsFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes cameraParams = 4;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getCameraParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getCameraParametersResponse) */ {
 public:
  inline getCameraParametersResponse() : getCameraParametersResponse(nullptr) {}
  ~getCameraParametersResponse() override;
  explicit PROTOBUF_CONSTEXPR getCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParametersResponse(const getCameraParametersResponse& from);
  getCameraParametersResponse(getCameraParametersResponse&& from) noexcept
    : getCameraParametersResponse() {
    *this = ::std::move(from);
  }

  inline getCameraParametersResponse& operator=(const getCameraParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParametersResponse& operator=(getCameraParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getCameraParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getCameraParametersResponse*>(
               &_getCameraParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(getCameraParametersResponse& a, getCameraParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParametersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getCameraParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getCameraParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getCameraParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getCameraParametersResponse& from) {
    getCameraParametersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParametersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getCameraParametersResponse";
  }
  protected:
  explicit getCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParamsFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes cameraParams = 1;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getCameraParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class imageProcessRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.imageProcessRequestRequest) */ {
 public:
  inline imageProcessRequestRequest() : imageProcessRequestRequest(nullptr) {}
  ~imageProcessRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR imageProcessRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  imageProcessRequestRequest(const imageProcessRequestRequest& from);
  imageProcessRequestRequest(imageProcessRequestRequest&& from) noexcept
    : imageProcessRequestRequest() {
    *this = ::std::move(from);
  }

  inline imageProcessRequestRequest& operator=(const imageProcessRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline imageProcessRequestRequest& operator=(imageProcessRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const imageProcessRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const imageProcessRequestRequest* internal_default_instance() {
    return reinterpret_cast<const imageProcessRequestRequest*>(
               &_imageProcessRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(imageProcessRequestRequest& a, imageProcessRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(imageProcessRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(imageProcessRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  imageProcessRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<imageProcessRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const imageProcessRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const imageProcessRequestRequest& from) {
    imageProcessRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imageProcessRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.imageProcessRequestRequest";
  }
  protected:
  explicit imageProcessRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kImagesFieldNumber = 4,
    kPosesFieldNumber = 5,
    kWorldTransformFieldNumber = 7,
    kTimestampFieldNumber = 8,
    kTransform3DFieldNumber = 10,
    kConfidenceFieldNumber = 11,
    kDetectedObjectsFieldNumber = 13,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kFixedPoseFieldNumber = 6,
    kTransform3DStatusFieldNumber = 9,
    kMappingStatusFieldNumber = 12,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes images = 4;
  void clear_images();
  const std::string& images() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_images(ArgT0&& arg0, ArgT... args);
  std::string* mutable_images();
  PROTOBUF_NODISCARD std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 5;
  void clear_poses();
  const std::string& poses() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poses(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poses();
  PROTOBUF_NODISCARD std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes worldTransform = 7;
  void clear_worldtransform();
  const std::string& worldtransform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldtransform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldtransform();
  PROTOBUF_NODISCARD std::string* release_worldtransform();
  void set_allocated_worldtransform(std::string* worldtransform);
  private:
  const std::string& _internal_worldtransform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldtransform(const std::string& value);
  std::string* _internal_mutable_worldtransform();
  public:

  // bytes timestamp = 8;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // bytes transform3D = 10;
  void clear_transform3d();
  const std::string& transform3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3d();
  PROTOBUF_NODISCARD std::string* release_transform3d();
  void set_allocated_transform3d(std::string* transform3d);
  private:
  const std::string& _internal_transform3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3d(const std::string& value);
  std::string* _internal_mutable_transform3d();
  public:

  // bytes confidence = 11;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // bytes detectedObjects = 13;
  void clear_detectedobjects();
  const std::string& detectedobjects() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detectedobjects(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detectedobjects();
  PROTOBUF_NODISCARD std::string* release_detectedobjects();
  void set_allocated_detectedobjects(std::string* detectedobjects);
  private:
  const std::string& _internal_detectedobjects() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detectedobjects(const std::string& value);
  std::string* _internal_mutable_detectedobjects();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // bool fixedPose = 6;
  void clear_fixedpose();
  bool fixedpose() const;
  void set_fixedpose(bool value);
  private:
  bool _internal_fixedpose() const;
  void _internal_set_fixedpose(bool value);
  public:

  // sint32 transform3DStatus = 9;
  void clear_transform3dstatus();
  int32_t transform3dstatus() const;
  void set_transform3dstatus(int32_t value);
  private:
  int32_t _internal_transform3dstatus() const;
  void _internal_set_transform3dstatus(int32_t value);
  public:

  // sint32 mappingStatus = 12;
  void clear_mappingstatus();
  int32_t mappingstatus() const;
  void set_mappingstatus(int32_t value);
  private:
  int32_t _internal_mappingstatus() const;
  void _internal_set_mappingstatus(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.imageProcessRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldtransform_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detectedobjects_;
    int32_t grpcservercompressionformat_;
    bool fixedpose_;
    int32_t transform3dstatus_;
    int32_t mappingstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class imageProcessRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.imageProcessRequestResponse) */ {
 public:
  inline imageProcessRequestResponse() : imageProcessRequestResponse(nullptr) {}
  ~imageProcessRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR imageProcessRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  imageProcessRequestResponse(const imageProcessRequestResponse& from);
  imageProcessRequestResponse(imageProcessRequestResponse&& from) noexcept
    : imageProcessRequestResponse() {
    *this = ::std::move(from);
  }

  inline imageProcessRequestResponse& operator=(const imageProcessRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline imageProcessRequestResponse& operator=(imageProcessRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const imageProcessRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const imageProcessRequestResponse* internal_default_instance() {
    return reinterpret_cast<const imageProcessRequestResponse*>(
               &_imageProcessRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(imageProcessRequestResponse& a, imageProcessRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(imageProcessRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(imageProcessRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  imageProcessRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<imageProcessRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const imageProcessRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const imageProcessRequestResponse& from) {
    imageProcessRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imageProcessRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.imageProcessRequestResponse";
  }
  protected:
  explicit imageProcessRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransform3DFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kDetectedObjectsFieldNumber = 5,
    kTransform3DStatusFieldNumber = 1,
    kMappingStatusFieldNumber = 4,
    kXpcfGrpcReturnValueFieldNumber = 6,
  };
  // bytes transform3D = 2;
  void clear_transform3d();
  const std::string& transform3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3d();
  PROTOBUF_NODISCARD std::string* release_transform3d();
  void set_allocated_transform3d(std::string* transform3d);
  private:
  const std::string& _internal_transform3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3d(const std::string& value);
  std::string* _internal_mutable_transform3d();
  public:

  // bytes confidence = 3;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // bytes detectedObjects = 5;
  void clear_detectedobjects();
  const std::string& detectedobjects() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detectedobjects(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detectedobjects();
  PROTOBUF_NODISCARD std::string* release_detectedobjects();
  void set_allocated_detectedobjects(std::string* detectedobjects);
  private:
  const std::string& _internal_detectedobjects() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detectedobjects(const std::string& value);
  std::string* _internal_mutable_detectedobjects();
  public:

  // sint32 transform3DStatus = 1;
  void clear_transform3dstatus();
  int32_t transform3dstatus() const;
  void set_transform3dstatus(int32_t value);
  private:
  int32_t _internal_transform3dstatus() const;
  void _internal_set_transform3dstatus(int32_t value);
  public:

  // sint32 mappingStatus = 4;
  void clear_mappingstatus();
  int32_t mappingstatus() const;
  void set_mappingstatus(int32_t value);
  private:
  int32_t _internal_mappingstatus() const;
  void _internal_set_mappingstatus(int32_t value);
  public:

  // sint32 xpcfGrpcReturnValue = 6;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.imageProcessRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detectedobjects_;
    int32_t transform3dstatus_;
    int32_t mappingstatus_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMappingDataRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMappingDataRequestRequest) */ {
 public:
  inline getMappingDataRequestRequest() : getMappingDataRequestRequest(nullptr) {}
  ~getMappingDataRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR getMappingDataRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMappingDataRequestRequest(const getMappingDataRequestRequest& from);
  getMappingDataRequestRequest(getMappingDataRequestRequest&& from) noexcept
    : getMappingDataRequestRequest() {
    *this = ::std::move(from);
  }

  inline getMappingDataRequestRequest& operator=(const getMappingDataRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMappingDataRequestRequest& operator=(getMappingDataRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMappingDataRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMappingDataRequestRequest* internal_default_instance() {
    return reinterpret_cast<const getMappingDataRequestRequest*>(
               &_getMappingDataRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(getMappingDataRequestRequest& a, getMappingDataRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMappingDataRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMappingDataRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMappingDataRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMappingDataRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMappingDataRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMappingDataRequestRequest& from) {
    getMappingDataRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMappingDataRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMappingDataRequestRequest";
  }
  protected:
  explicit getMappingDataRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kOutputPointCloudsFieldNumber = 4,
    kKeyframePosesFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes outputPointClouds = 4;
  void clear_outputpointclouds();
  const std::string& outputpointclouds() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpointclouds(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpointclouds();
  PROTOBUF_NODISCARD std::string* release_outputpointclouds();
  void set_allocated_outputpointclouds(std::string* outputpointclouds);
  private:
  const std::string& _internal_outputpointclouds() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpointclouds(const std::string& value);
  std::string* _internal_mutable_outputpointclouds();
  public:

  // bytes keyframePoses = 5;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMappingDataRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointclouds_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMappingDataRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMappingDataRequestResponse) */ {
 public:
  inline getMappingDataRequestResponse() : getMappingDataRequestResponse(nullptr) {}
  ~getMappingDataRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR getMappingDataRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMappingDataRequestResponse(const getMappingDataRequestResponse& from);
  getMappingDataRequestResponse(getMappingDataRequestResponse&& from) noexcept
    : getMappingDataRequestResponse() {
    *this = ::std::move(from);
  }

  inline getMappingDataRequestResponse& operator=(const getMappingDataRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMappingDataRequestResponse& operator=(getMappingDataRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMappingDataRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMappingDataRequestResponse* internal_default_instance() {
    return reinterpret_cast<const getMappingDataRequestResponse*>(
               &_getMappingDataRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(getMappingDataRequestResponse& a, getMappingDataRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMappingDataRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMappingDataRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMappingDataRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMappingDataRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMappingDataRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMappingDataRequestResponse& from) {
    getMappingDataRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMappingDataRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMappingDataRequestResponse";
  }
  protected:
  explicit getMappingDataRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPointCloudsFieldNumber = 1,
    kKeyframePosesFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes outputPointClouds = 1;
  void clear_outputpointclouds();
  const std::string& outputpointclouds() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpointclouds(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpointclouds();
  PROTOBUF_NODISCARD std::string* release_outputpointclouds();
  void set_allocated_outputpointclouds(std::string* outputpointclouds);
  private:
  const std::string& _internal_outputpointclouds() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpointclouds(const std::string& value);
  std::string* _internal_mutable_outputpointclouds();
  public:

  // bytes keyframePoses = 2;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMappingDataRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointclouds_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getClientPoseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getClientPoseRequest) */ {
 public:
  inline getClientPoseRequest() : getClientPoseRequest(nullptr) {}
  ~getClientPoseRequest() override;
  explicit PROTOBUF_CONSTEXPR getClientPoseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getClientPoseRequest(const getClientPoseRequest& from);
  getClientPoseRequest(getClientPoseRequest&& from) noexcept
    : getClientPoseRequest() {
    *this = ::std::move(from);
  }

  inline getClientPoseRequest& operator=(const getClientPoseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getClientPoseRequest& operator=(getClientPoseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getClientPoseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getClientPoseRequest* internal_default_instance() {
    return reinterpret_cast<const getClientPoseRequest*>(
               &_getClientPoseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(getClientPoseRequest& a, getClientPoseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getClientPoseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getClientPoseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getClientPoseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getClientPoseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getClientPoseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getClientPoseRequest& from) {
    getClientPoseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getClientPoseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getClientPoseRequest";
  }
  protected:
  explicit getClientPoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kTransform3DFieldNumber = 6,
    kConfidenceFieldNumber = 7,
    kPoseFieldNumber = 8,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kPoseTypeFieldNumber = 4,
    kTransform3DStatusFieldNumber = 5,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // bytes transform3D = 6;
  void clear_transform3d();
  const std::string& transform3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3d();
  PROTOBUF_NODISCARD std::string* release_transform3d();
  void set_allocated_transform3d(std::string* transform3d);
  private:
  const std::string& _internal_transform3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3d(const std::string& value);
  std::string* _internal_mutable_transform3d();
  public:

  // bytes confidence = 7;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // bytes pose = 8;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // sint32 poseType = 4;
  void clear_posetype();
  int32_t posetype() const;
  void set_posetype(int32_t value);
  private:
  int32_t _internal_posetype() const;
  void _internal_set_posetype(int32_t value);
  public:

  // sint32 transform3DStatus = 5;
  void clear_transform3dstatus();
  int32_t transform3dstatus() const;
  void set_transform3dstatus(int32_t value);
  private:
  int32_t _internal_transform3dstatus() const;
  void _internal_set_transform3dstatus(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getClientPoseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    int32_t grpcservercompressionformat_;
    int32_t posetype_;
    int32_t transform3dstatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getClientPoseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getClientPoseResponse) */ {
 public:
  inline getClientPoseResponse() : getClientPoseResponse(nullptr) {}
  ~getClientPoseResponse() override;
  explicit PROTOBUF_CONSTEXPR getClientPoseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getClientPoseResponse(const getClientPoseResponse& from);
  getClientPoseResponse(getClientPoseResponse&& from) noexcept
    : getClientPoseResponse() {
    *this = ::std::move(from);
  }

  inline getClientPoseResponse& operator=(const getClientPoseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getClientPoseResponse& operator=(getClientPoseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getClientPoseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getClientPoseResponse* internal_default_instance() {
    return reinterpret_cast<const getClientPoseResponse*>(
               &_getClientPoseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(getClientPoseResponse& a, getClientPoseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getClientPoseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getClientPoseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getClientPoseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getClientPoseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getClientPoseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getClientPoseResponse& from) {
    getClientPoseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getClientPoseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getClientPoseResponse";
  }
  protected:
  explicit getClientPoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransform3DFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kPoseFieldNumber = 4,
    kTransform3DStatusFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 5,
  };
  // bytes transform3D = 2;
  void clear_transform3d();
  const std::string& transform3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform3d();
  PROTOBUF_NODISCARD std::string* release_transform3d();
  void set_allocated_transform3d(std::string* transform3d);
  private:
  const std::string& _internal_transform3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform3d(const std::string& value);
  std::string* _internal_mutable_transform3d();
  public:

  // bytes confidence = 3;
  void clear_confidence();
  const std::string& confidence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_confidence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_confidence();
  PROTOBUF_NODISCARD std::string* release_confidence();
  void set_allocated_confidence(std::string* confidence);
  private:
  const std::string& _internal_confidence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confidence(const std::string& value);
  std::string* _internal_mutable_confidence();
  public:

  // bytes pose = 4;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // sint32 transform3DStatus = 1;
  void clear_transform3dstatus();
  int32_t transform3dstatus() const;
  void set_transform3dstatus(int32_t value);
  private:
  int32_t _internal_transform3dstatus() const;
  void _internal_set_transform3dstatus(int32_t value);
  public:

  // sint32 xpcfGrpcReturnValue = 5;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getClientPoseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confidence_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    int32_t transform3dstatus_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class createMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.createMapRequest) */ {
 public:
  inline createMapRequest() : createMapRequest(nullptr) {}
  ~createMapRequest() override;
  explicit PROTOBUF_CONSTEXPR createMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  createMapRequest(const createMapRequest& from);
  createMapRequest(createMapRequest&& from) noexcept
    : createMapRequest() {
    *this = ::std::move(from);
  }

  inline createMapRequest& operator=(const createMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline createMapRequest& operator=(createMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const createMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const createMapRequest* internal_default_instance() {
    return reinterpret_cast<const createMapRequest*>(
               &_createMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(createMapRequest& a, createMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(createMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(createMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  createMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<createMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const createMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const createMapRequest& from) {
    createMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.createMapRequest";
  }
  protected:
  explicit createMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kMapUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string mapUUID = 3;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.createMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class createMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.createMapResponse) */ {
 public:
  inline createMapResponse() : createMapResponse(nullptr) {}
  ~createMapResponse() override;
  explicit PROTOBUF_CONSTEXPR createMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  createMapResponse(const createMapResponse& from);
  createMapResponse(createMapResponse&& from) noexcept
    : createMapResponse() {
    *this = ::std::move(from);
  }

  inline createMapResponse& operator=(const createMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline createMapResponse& operator=(createMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const createMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const createMapResponse* internal_default_instance() {
    return reinterpret_cast<const createMapResponse*>(
               &_createMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(createMapResponse& a, createMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(createMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(createMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  createMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<createMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const createMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const createMapResponse& from) {
    createMapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.createMapResponse";
  }
  protected:
  explicit createMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.createMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class deleteMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.deleteMapRequest) */ {
 public:
  inline deleteMapRequest() : deleteMapRequest(nullptr) {}
  ~deleteMapRequest() override;
  explicit PROTOBUF_CONSTEXPR deleteMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteMapRequest(const deleteMapRequest& from);
  deleteMapRequest(deleteMapRequest&& from) noexcept
    : deleteMapRequest() {
    *this = ::std::move(from);
  }

  inline deleteMapRequest& operator=(const deleteMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteMapRequest& operator=(deleteMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteMapRequest* internal_default_instance() {
    return reinterpret_cast<const deleteMapRequest*>(
               &_deleteMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(deleteMapRequest& a, deleteMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const deleteMapRequest& from) {
    deleteMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.deleteMapRequest";
  }
  protected:
  explicit deleteMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kMapUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string mapUUID = 3;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.deleteMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class deleteMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.deleteMapResponse) */ {
 public:
  inline deleteMapResponse() : deleteMapResponse(nullptr) {}
  ~deleteMapResponse() override;
  explicit PROTOBUF_CONSTEXPR deleteMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteMapResponse(const deleteMapResponse& from);
  deleteMapResponse(deleteMapResponse&& from) noexcept
    : deleteMapResponse() {
    *this = ::std::move(from);
  }

  inline deleteMapResponse& operator=(const deleteMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteMapResponse& operator=(deleteMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteMapResponse* internal_default_instance() {
    return reinterpret_cast<const deleteMapResponse*>(
               &_deleteMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(deleteMapResponse& a, deleteMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const deleteMapResponse& from) {
    deleteMapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.deleteMapResponse";
  }
  protected:
  explicit deleteMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.deleteMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getAllMapsUUIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getAllMapsUUIDRequest) */ {
 public:
  inline getAllMapsUUIDRequest() : getAllMapsUUIDRequest(nullptr) {}
  ~getAllMapsUUIDRequest() override;
  explicit PROTOBUF_CONSTEXPR getAllMapsUUIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllMapsUUIDRequest(const getAllMapsUUIDRequest& from);
  getAllMapsUUIDRequest(getAllMapsUUIDRequest&& from) noexcept
    : getAllMapsUUIDRequest() {
    *this = ::std::move(from);
  }

  inline getAllMapsUUIDRequest& operator=(const getAllMapsUUIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllMapsUUIDRequest& operator=(getAllMapsUUIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllMapsUUIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllMapsUUIDRequest* internal_default_instance() {
    return reinterpret_cast<const getAllMapsUUIDRequest*>(
               &_getAllMapsUUIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(getAllMapsUUIDRequest& a, getAllMapsUUIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllMapsUUIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllMapsUUIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getAllMapsUUIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getAllMapsUUIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllMapsUUIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getAllMapsUUIDRequest& from) {
    getAllMapsUUIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllMapsUUIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getAllMapsUUIDRequest";
  }
  protected:
  explicit getAllMapsUUIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kMapUUIDListFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // bytes mapUUIDList = 3;
  void clear_mapuuidlist();
  const std::string& mapuuidlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuidlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuidlist();
  PROTOBUF_NODISCARD std::string* release_mapuuidlist();
  void set_allocated_mapuuidlist(std::string* mapuuidlist);
  private:
  const std::string& _internal_mapuuidlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuidlist(const std::string& value);
  std::string* _internal_mutable_mapuuidlist();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getAllMapsUUIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuidlist_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getAllMapsUUIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getAllMapsUUIDResponse) */ {
 public:
  inline getAllMapsUUIDResponse() : getAllMapsUUIDResponse(nullptr) {}
  ~getAllMapsUUIDResponse() override;
  explicit PROTOBUF_CONSTEXPR getAllMapsUUIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllMapsUUIDResponse(const getAllMapsUUIDResponse& from);
  getAllMapsUUIDResponse(getAllMapsUUIDResponse&& from) noexcept
    : getAllMapsUUIDResponse() {
    *this = ::std::move(from);
  }

  inline getAllMapsUUIDResponse& operator=(const getAllMapsUUIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllMapsUUIDResponse& operator=(getAllMapsUUIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllMapsUUIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllMapsUUIDResponse* internal_default_instance() {
    return reinterpret_cast<const getAllMapsUUIDResponse*>(
               &_getAllMapsUUIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(getAllMapsUUIDResponse& a, getAllMapsUUIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllMapsUUIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllMapsUUIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getAllMapsUUIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getAllMapsUUIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllMapsUUIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getAllMapsUUIDResponse& from) {
    getAllMapsUUIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllMapsUUIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getAllMapsUUIDResponse";
  }
  protected:
  explicit getAllMapsUUIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDListFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes mapUUIDList = 1;
  void clear_mapuuidlist();
  const std::string& mapuuidlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuidlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuidlist();
  PROTOBUF_NODISCARD std::string* release_mapuuidlist();
  void set_allocated_mapuuidlist(std::string* mapuuidlist);
  private:
  const std::string& _internal_mapuuidlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuidlist(const std::string& value);
  std::string* _internal_mutable_mapuuidlist();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getAllMapsUUIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuidlist_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getClientMapUUIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getClientMapUUIDRequest) */ {
 public:
  inline getClientMapUUIDRequest() : getClientMapUUIDRequest(nullptr) {}
  ~getClientMapUUIDRequest() override;
  explicit PROTOBUF_CONSTEXPR getClientMapUUIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getClientMapUUIDRequest(const getClientMapUUIDRequest& from);
  getClientMapUUIDRequest(getClientMapUUIDRequest&& from) noexcept
    : getClientMapUUIDRequest() {
    *this = ::std::move(from);
  }

  inline getClientMapUUIDRequest& operator=(const getClientMapUUIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getClientMapUUIDRequest& operator=(getClientMapUUIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getClientMapUUIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getClientMapUUIDRequest* internal_default_instance() {
    return reinterpret_cast<const getClientMapUUIDRequest*>(
               &_getClientMapUUIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(getClientMapUUIDRequest& a, getClientMapUUIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getClientMapUUIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getClientMapUUIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getClientMapUUIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getClientMapUUIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getClientMapUUIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getClientMapUUIDRequest& from) {
    getClientMapUUIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getClientMapUUIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getClientMapUUIDRequest";
  }
  protected:
  explicit getClientMapUUIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kClientUUIDFieldNumber = 3,
    kMapUUIDFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string clientUUID = 3;
  void clear_clientuuid();
  const std::string& clientuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientuuid();
  PROTOBUF_NODISCARD std::string* release_clientuuid();
  void set_allocated_clientuuid(std::string* clientuuid);
  private:
  const std::string& _internal_clientuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientuuid(const std::string& value);
  std::string* _internal_mutable_clientuuid();
  public:

  // string mapUUID = 4;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getClientMapUUIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getClientMapUUIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getClientMapUUIDResponse) */ {
 public:
  inline getClientMapUUIDResponse() : getClientMapUUIDResponse(nullptr) {}
  ~getClientMapUUIDResponse() override;
  explicit PROTOBUF_CONSTEXPR getClientMapUUIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getClientMapUUIDResponse(const getClientMapUUIDResponse& from);
  getClientMapUUIDResponse(getClientMapUUIDResponse&& from) noexcept
    : getClientMapUUIDResponse() {
    *this = ::std::move(from);
  }

  inline getClientMapUUIDResponse& operator=(const getClientMapUUIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getClientMapUUIDResponse& operator=(getClientMapUUIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getClientMapUUIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getClientMapUUIDResponse* internal_default_instance() {
    return reinterpret_cast<const getClientMapUUIDResponse*>(
               &_getClientMapUUIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(getClientMapUUIDResponse& a, getClientMapUUIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getClientMapUUIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getClientMapUUIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getClientMapUUIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getClientMapUUIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getClientMapUUIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getClientMapUUIDResponse& from) {
    getClientMapUUIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getClientMapUUIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getClientMapUUIDResponse";
  }
  protected:
  explicit getClientMapUUIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // string mapUUID = 1;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getClientMapUUIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getClientInfoForMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getClientInfoForMapRequest) */ {
 public:
  inline getClientInfoForMapRequest() : getClientInfoForMapRequest(nullptr) {}
  ~getClientInfoForMapRequest() override;
  explicit PROTOBUF_CONSTEXPR getClientInfoForMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getClientInfoForMapRequest(const getClientInfoForMapRequest& from);
  getClientInfoForMapRequest(getClientInfoForMapRequest&& from) noexcept
    : getClientInfoForMapRequest() {
    *this = ::std::move(from);
  }

  inline getClientInfoForMapRequest& operator=(const getClientInfoForMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getClientInfoForMapRequest& operator=(getClientInfoForMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getClientInfoForMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getClientInfoForMapRequest* internal_default_instance() {
    return reinterpret_cast<const getClientInfoForMapRequest*>(
               &_getClientInfoForMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(getClientInfoForMapRequest& a, getClientInfoForMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getClientInfoForMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getClientInfoForMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getClientInfoForMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getClientInfoForMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getClientInfoForMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getClientInfoForMapRequest& from) {
    getClientInfoForMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getClientInfoForMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getClientInfoForMapRequest";
  }
  protected:
  explicit getClientInfoForMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kMapUUIDFieldNumber = 3,
    kClientInfoListFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string mapUUID = 3;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes clientInfoList = 4;
  void clear_clientinfolist();
  const std::string& clientinfolist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientinfolist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientinfolist();
  PROTOBUF_NODISCARD std::string* release_clientinfolist();
  void set_allocated_clientinfolist(std::string* clientinfolist);
  private:
  const std::string& _internal_clientinfolist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientinfolist(const std::string& value);
  std::string* _internal_mutable_clientinfolist();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getClientInfoForMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientinfolist_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getClientInfoForMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getClientInfoForMapResponse) */ {
 public:
  inline getClientInfoForMapResponse() : getClientInfoForMapResponse(nullptr) {}
  ~getClientInfoForMapResponse() override;
  explicit PROTOBUF_CONSTEXPR getClientInfoForMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getClientInfoForMapResponse(const getClientInfoForMapResponse& from);
  getClientInfoForMapResponse(getClientInfoForMapResponse&& from) noexcept
    : getClientInfoForMapResponse() {
    *this = ::std::move(from);
  }

  inline getClientInfoForMapResponse& operator=(const getClientInfoForMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getClientInfoForMapResponse& operator=(getClientInfoForMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getClientInfoForMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getClientInfoForMapResponse* internal_default_instance() {
    return reinterpret_cast<const getClientInfoForMapResponse*>(
               &_getClientInfoForMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(getClientInfoForMapResponse& a, getClientInfoForMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getClientInfoForMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getClientInfoForMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getClientInfoForMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getClientInfoForMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getClientInfoForMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getClientInfoForMapResponse& from) {
    getClientInfoForMapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getClientInfoForMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getClientInfoForMapResponse";
  }
  protected:
  explicit getClientInfoForMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientInfoListFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes clientInfoList = 1;
  void clear_clientinfolist();
  const std::string& clientinfolist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientinfolist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientinfolist();
  PROTOBUF_NODISCARD std::string* release_clientinfolist();
  void set_allocated_clientinfolist(std::string* clientinfolist);
  private:
  const std::string& _internal_clientinfolist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientinfolist(const std::string& value);
  std::string* _internal_mutable_clientinfolist();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getClientInfoForMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientinfolist_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapRequestRequest) */ {
 public:
  inline getMapRequestRequest() : getMapRequestRequest(nullptr) {}
  ~getMapRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR getMapRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequestRequest(const getMapRequestRequest& from);
  getMapRequestRequest(getMapRequestRequest&& from) noexcept
    : getMapRequestRequest() {
    *this = ::std::move(from);
  }

  inline getMapRequestRequest& operator=(const getMapRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequestRequest& operator=(getMapRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequestRequest* internal_default_instance() {
    return reinterpret_cast<const getMapRequestRequest*>(
               &_getMapRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(getMapRequestRequest& a, getMapRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapRequestRequest& from) {
    getMapRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapRequestRequest";
  }
  protected:
  explicit getMapRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kMapUUIDFieldNumber = 3,
    kMapDatastructureFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kWithKeyframeImagesFieldNumber = 4,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string mapUUID = 3;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes mapDatastructure = 5;
  void clear_mapdatastructure();
  const std::string& mapdatastructure() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapdatastructure(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapdatastructure();
  PROTOBUF_NODISCARD std::string* release_mapdatastructure();
  void set_allocated_mapdatastructure(std::string* mapdatastructure);
  private:
  const std::string& _internal_mapdatastructure() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapdatastructure(const std::string& value);
  std::string* _internal_mutable_mapdatastructure();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // bool withKeyframeImages = 4;
  void clear_withkeyframeimages();
  bool withkeyframeimages() const;
  void set_withkeyframeimages(bool value);
  private:
  bool _internal_withkeyframeimages() const;
  void _internal_set_withkeyframeimages(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapdatastructure_;
    int32_t grpcservercompressionformat_;
    bool withkeyframeimages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapRequestResponse) */ {
 public:
  inline getMapRequestResponse() : getMapRequestResponse(nullptr) {}
  ~getMapRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR getMapRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequestResponse(const getMapRequestResponse& from);
  getMapRequestResponse(getMapRequestResponse&& from) noexcept
    : getMapRequestResponse() {
    *this = ::std::move(from);
  }

  inline getMapRequestResponse& operator=(const getMapRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequestResponse& operator=(getMapRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequestResponse* internal_default_instance() {
    return reinterpret_cast<const getMapRequestResponse*>(
               &_getMapRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(getMapRequestResponse& a, getMapRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapRequestResponse& from) {
    getMapRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapRequestResponse";
  }
  protected:
  explicit getMapRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapDatastructureFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes mapDatastructure = 1;
  void clear_mapdatastructure();
  const std::string& mapdatastructure() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapdatastructure(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapdatastructure();
  PROTOBUF_NODISCARD std::string* release_mapdatastructure();
  void set_allocated_mapdatastructure(std::string* mapdatastructure);
  private:
  const std::string& _internal_mapdatastructure() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapdatastructure(const std::string& value);
  std::string* _internal_mutable_mapdatastructure();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapdatastructure_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setMapRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setMapRequestRequest) */ {
 public:
  inline setMapRequestRequest() : setMapRequestRequest(nullptr) {}
  ~setMapRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR setMapRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapRequestRequest(const setMapRequestRequest& from);
  setMapRequestRequest(setMapRequestRequest&& from) noexcept
    : setMapRequestRequest() {
    *this = ::std::move(from);
  }

  inline setMapRequestRequest& operator=(const setMapRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapRequestRequest& operator=(setMapRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapRequestRequest* internal_default_instance() {
    return reinterpret_cast<const setMapRequestRequest*>(
               &_setMapRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(setMapRequestRequest& a, setMapRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setMapRequestRequest& from) {
    setMapRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setMapRequestRequest";
  }
  protected:
  explicit setMapRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kMapUUIDFieldNumber = 3,
    kMapDatastructureFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string mapUUID = 3;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes mapDatastructure = 4;
  void clear_mapdatastructure();
  const std::string& mapdatastructure() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapdatastructure(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapdatastructure();
  PROTOBUF_NODISCARD std::string* release_mapdatastructure();
  void set_allocated_mapdatastructure(std::string* mapdatastructure);
  private:
  const std::string& _internal_mapdatastructure() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapdatastructure(const std::string& value);
  std::string* _internal_mutable_mapdatastructure();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setMapRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapdatastructure_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class setMapRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.setMapRequestResponse) */ {
 public:
  inline setMapRequestResponse() : setMapRequestResponse(nullptr) {}
  ~setMapRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR setMapRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapRequestResponse(const setMapRequestResponse& from);
  setMapRequestResponse(setMapRequestResponse&& from) noexcept
    : setMapRequestResponse() {
    *this = ::std::move(from);
  }

  inline setMapRequestResponse& operator=(const setMapRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapRequestResponse& operator=(setMapRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapRequestResponse* internal_default_instance() {
    return reinterpret_cast<const setMapRequestResponse*>(
               &_setMapRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(setMapRequestResponse& a, setMapRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setMapRequestResponse& from) {
    setMapRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.setMapRequestResponse";
  }
  protected:
  explicit setMapRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.setMapRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getPointCloudRequestRequest) */ {
 public:
  inline getPointCloudRequestRequest() : getPointCloudRequestRequest(nullptr) {}
  ~getPointCloudRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR getPointCloudRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequestRequest(const getPointCloudRequestRequest& from);
  getPointCloudRequestRequest(getPointCloudRequestRequest&& from) noexcept
    : getPointCloudRequestRequest() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequestRequest& operator=(const getPointCloudRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequestRequest& operator=(getPointCloudRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequestRequest* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequestRequest*>(
               &_getPointCloudRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(getPointCloudRequestRequest& a, getPointCloudRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getPointCloudRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getPointCloudRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getPointCloudRequestRequest& from) {
    getPointCloudRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getPointCloudRequestRequest";
  }
  protected:
  explicit getPointCloudRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kMapUUIDFieldNumber = 3,
    kPointCloudFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string mapUUID = 3;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes pointCloud = 4;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getPointCloudRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getPointCloudRequestResponse) */ {
 public:
  inline getPointCloudRequestResponse() : getPointCloudRequestResponse(nullptr) {}
  ~getPointCloudRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR getPointCloudRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequestResponse(const getPointCloudRequestResponse& from);
  getPointCloudRequestResponse(getPointCloudRequestResponse&& from) noexcept
    : getPointCloudRequestResponse() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequestResponse& operator=(const getPointCloudRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequestResponse& operator=(getPointCloudRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequestResponse* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequestResponse*>(
               &_getPointCloudRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(getPointCloudRequestResponse& a, getPointCloudRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getPointCloudRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getPointCloudRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getPointCloudRequestResponse& from) {
    getPointCloudRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getPointCloudRequestResponse";
  }
  protected:
  explicit getPointCloudRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pointCloud = 1;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getPointCloudRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapInfoRequest) */ {
 public:
  inline getMapInfoRequest() : getMapInfoRequest(nullptr) {}
  ~getMapInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR getMapInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapInfoRequest(const getMapInfoRequest& from);
  getMapInfoRequest(getMapInfoRequest&& from) noexcept
    : getMapInfoRequest() {
    *this = ::std::move(from);
  }

  inline getMapInfoRequest& operator=(const getMapInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapInfoRequest& operator=(getMapInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapInfoRequest* internal_default_instance() {
    return reinterpret_cast<const getMapInfoRequest*>(
               &_getMapInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(getMapInfoRequest& a, getMapInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapInfoRequest& from) {
    getMapInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapInfoRequest";
  }
  protected:
  explicit getMapInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kMapUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kDescriptorTypeFieldNumber = 4,
    kMapSupportedTypesFieldNumber = 5,
    kDataSizeFieldNumber = 6,
    kAreImageSavedFieldNumber = 7,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string mapUUID = 3;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // sint32 descriptorType = 4;
  void clear_descriptortype();
  int32_t descriptortype() const;
  void set_descriptortype(int32_t value);
  private:
  int32_t _internal_descriptortype() const;
  void _internal_set_descriptortype(int32_t value);
  public:

  // uint32 mapSupportedTypes = 5;
  void clear_mapsupportedtypes();
  uint32_t mapsupportedtypes() const;
  void set_mapsupportedtypes(uint32_t value);
  private:
  uint32_t _internal_mapsupportedtypes() const;
  void _internal_set_mapsupportedtypes(uint32_t value);
  public:

  // uint32 dataSize = 6;
  void clear_datasize();
  uint32_t datasize() const;
  void set_datasize(uint32_t value);
  private:
  uint32_t _internal_datasize() const;
  void _internal_set_datasize(uint32_t value);
  public:

  // bool areImageSaved = 7;
  void clear_areimagesaved();
  bool areimagesaved() const;
  void set_areimagesaved(bool value);
  private:
  bool _internal_areimagesaved() const;
  void _internal_set_areimagesaved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    int32_t grpcservercompressionformat_;
    int32_t descriptortype_;
    uint32_t mapsupportedtypes_;
    uint32_t datasize_;
    bool areimagesaved_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapInfoResponse) */ {
 public:
  inline getMapInfoResponse() : getMapInfoResponse(nullptr) {}
  ~getMapInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR getMapInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapInfoResponse(const getMapInfoResponse& from);
  getMapInfoResponse(getMapInfoResponse&& from) noexcept
    : getMapInfoResponse() {
    *this = ::std::move(from);
  }

  inline getMapInfoResponse& operator=(const getMapInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapInfoResponse& operator=(getMapInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapInfoResponse* internal_default_instance() {
    return reinterpret_cast<const getMapInfoResponse*>(
               &_getMapInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(getMapInfoResponse& a, getMapInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapInfoResponse& from) {
    getMapInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapInfoResponse";
  }
  protected:
  explicit getMapInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorTypeFieldNumber = 1,
    kMapSupportedTypesFieldNumber = 2,
    kDataSizeFieldNumber = 3,
    kAreImageSavedFieldNumber = 4,
    kXpcfGrpcReturnValueFieldNumber = 5,
  };
  // sint32 descriptorType = 1;
  void clear_descriptortype();
  int32_t descriptortype() const;
  void set_descriptortype(int32_t value);
  private:
  int32_t _internal_descriptortype() const;
  void _internal_set_descriptortype(int32_t value);
  public:

  // uint32 mapSupportedTypes = 2;
  void clear_mapsupportedtypes();
  uint32_t mapsupportedtypes() const;
  void set_mapsupportedtypes(uint32_t value);
  private:
  uint32_t _internal_mapsupportedtypes() const;
  void _internal_set_mapsupportedtypes(uint32_t value);
  public:

  // uint32 dataSize = 3;
  void clear_datasize();
  uint32_t datasize() const;
  void set_datasize(uint32_t value);
  private:
  uint32_t _internal_datasize() const;
  void _internal_set_datasize(uint32_t value);
  public:

  // bool areImageSaved = 4;
  void clear_areimagesaved();
  bool areimagesaved() const;
  void set_areimagesaved(bool value);
  private:
  bool _internal_areimagesaved() const;
  void _internal_set_areimagesaved(bool value);
  public:

  // sint32 xpcfGrpcReturnValue = 5;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t descriptortype_;
    uint32_t mapsupportedtypes_;
    uint32_t datasize_;
    bool areimagesaved_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class requestMapProcessingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.requestMapProcessingRequest) */ {
 public:
  inline requestMapProcessingRequest() : requestMapProcessingRequest(nullptr) {}
  ~requestMapProcessingRequest() override;
  explicit PROTOBUF_CONSTEXPR requestMapProcessingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  requestMapProcessingRequest(const requestMapProcessingRequest& from);
  requestMapProcessingRequest(requestMapProcessingRequest&& from) noexcept
    : requestMapProcessingRequest() {
    *this = ::std::move(from);
  }

  inline requestMapProcessingRequest& operator=(const requestMapProcessingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline requestMapProcessingRequest& operator=(requestMapProcessingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const requestMapProcessingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const requestMapProcessingRequest* internal_default_instance() {
    return reinterpret_cast<const requestMapProcessingRequest*>(
               &_requestMapProcessingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(requestMapProcessingRequest& a, requestMapProcessingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(requestMapProcessingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(requestMapProcessingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  requestMapProcessingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<requestMapProcessingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const requestMapProcessingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const requestMapProcessingRequest& from) {
    requestMapProcessingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestMapProcessingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.requestMapProcessingRequest";
  }
  protected:
  explicit requestMapProcessingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kMapUUIDFieldNumber = 3,
    kResultMapUUIDFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kProcessingTypeFieldNumber = 5,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string mapUUID = 3;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // string resultMapUUID = 4;
  void clear_resultmapuuid();
  const std::string& resultmapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resultmapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resultmapuuid();
  PROTOBUF_NODISCARD std::string* release_resultmapuuid();
  void set_allocated_resultmapuuid(std::string* resultmapuuid);
  private:
  const std::string& _internal_resultmapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resultmapuuid(const std::string& value);
  std::string* _internal_mutable_resultmapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // sint32 processingType = 5;
  void clear_processingtype();
  int32_t processingtype() const;
  void set_processingtype(int32_t value);
  private:
  int32_t _internal_processingtype() const;
  void _internal_set_processingtype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.requestMapProcessingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultmapuuid_;
    int32_t grpcservercompressionformat_;
    int32_t processingtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class requestMapProcessingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.requestMapProcessingResponse) */ {
 public:
  inline requestMapProcessingResponse() : requestMapProcessingResponse(nullptr) {}
  ~requestMapProcessingResponse() override;
  explicit PROTOBUF_CONSTEXPR requestMapProcessingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  requestMapProcessingResponse(const requestMapProcessingResponse& from);
  requestMapProcessingResponse(requestMapProcessingResponse&& from) noexcept
    : requestMapProcessingResponse() {
    *this = ::std::move(from);
  }

  inline requestMapProcessingResponse& operator=(const requestMapProcessingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline requestMapProcessingResponse& operator=(requestMapProcessingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const requestMapProcessingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const requestMapProcessingResponse* internal_default_instance() {
    return reinterpret_cast<const requestMapProcessingResponse*>(
               &_requestMapProcessingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(requestMapProcessingResponse& a, requestMapProcessingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(requestMapProcessingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(requestMapProcessingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  requestMapProcessingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<requestMapProcessingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const requestMapProcessingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const requestMapProcessingResponse& from) {
    requestMapProcessingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestMapProcessingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.requestMapProcessingResponse";
  }
  protected:
  explicit requestMapProcessingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.requestMapProcessingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapProcessingStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapProcessingStatusRequest) */ {
 public:
  inline getMapProcessingStatusRequest() : getMapProcessingStatusRequest(nullptr) {}
  ~getMapProcessingStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR getMapProcessingStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapProcessingStatusRequest(const getMapProcessingStatusRequest& from);
  getMapProcessingStatusRequest(getMapProcessingStatusRequest&& from) noexcept
    : getMapProcessingStatusRequest() {
    *this = ::std::move(from);
  }

  inline getMapProcessingStatusRequest& operator=(const getMapProcessingStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapProcessingStatusRequest& operator=(getMapProcessingStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapProcessingStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapProcessingStatusRequest* internal_default_instance() {
    return reinterpret_cast<const getMapProcessingStatusRequest*>(
               &_getMapProcessingStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(getMapProcessingStatusRequest& a, getMapProcessingStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapProcessingStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapProcessingStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapProcessingStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapProcessingStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapProcessingStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapProcessingStatusRequest& from) {
    getMapProcessingStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapProcessingStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapProcessingStatusRequest";
  }
  protected:
  explicit getMapProcessingStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kResultMapUUIDFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kStatusFieldNumber = 4,
    kProgressFieldNumber = 5,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string resultMapUUID = 3;
  void clear_resultmapuuid();
  const std::string& resultmapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resultmapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resultmapuuid();
  PROTOBUF_NODISCARD std::string* release_resultmapuuid();
  void set_allocated_resultmapuuid(std::string* resultmapuuid);
  private:
  const std::string& _internal_resultmapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resultmapuuid(const std::string& value);
  std::string* _internal_mutable_resultmapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // sint32 status = 4;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // float progress = 5;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapProcessingStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultmapuuid_;
    int32_t grpcservercompressionformat_;
    int32_t status_;
    float progress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapProcessingStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapProcessingStatusResponse) */ {
 public:
  inline getMapProcessingStatusResponse() : getMapProcessingStatusResponse(nullptr) {}
  ~getMapProcessingStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR getMapProcessingStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapProcessingStatusResponse(const getMapProcessingStatusResponse& from);
  getMapProcessingStatusResponse(getMapProcessingStatusResponse&& from) noexcept
    : getMapProcessingStatusResponse() {
    *this = ::std::move(from);
  }

  inline getMapProcessingStatusResponse& operator=(const getMapProcessingStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapProcessingStatusResponse& operator=(getMapProcessingStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapProcessingStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapProcessingStatusResponse* internal_default_instance() {
    return reinterpret_cast<const getMapProcessingStatusResponse*>(
               &_getMapProcessingStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(getMapProcessingStatusResponse& a, getMapProcessingStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapProcessingStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapProcessingStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapProcessingStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapProcessingStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapProcessingStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapProcessingStatusResponse& from) {
    getMapProcessingStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapProcessingStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapProcessingStatusResponse";
  }
  protected:
  explicit getMapProcessingStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kProgressFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // sint32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // float progress = 2;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapProcessingStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t status_;
    float progress_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapProcessingDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapProcessingDataRequest) */ {
 public:
  inline getMapProcessingDataRequest() : getMapProcessingDataRequest(nullptr) {}
  ~getMapProcessingDataRequest() override;
  explicit PROTOBUF_CONSTEXPR getMapProcessingDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapProcessingDataRequest(const getMapProcessingDataRequest& from);
  getMapProcessingDataRequest(getMapProcessingDataRequest&& from) noexcept
    : getMapProcessingDataRequest() {
    *this = ::std::move(from);
  }

  inline getMapProcessingDataRequest& operator=(const getMapProcessingDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapProcessingDataRequest& operator=(getMapProcessingDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapProcessingDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapProcessingDataRequest* internal_default_instance() {
    return reinterpret_cast<const getMapProcessingDataRequest*>(
               &_getMapProcessingDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(getMapProcessingDataRequest& a, getMapProcessingDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapProcessingDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapProcessingDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapProcessingDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapProcessingDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapProcessingDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapProcessingDataRequest& from) {
    getMapProcessingDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapProcessingDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapProcessingDataRequest";
  }
  protected:
  explicit getMapProcessingDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 2,
    kResultMapUUIDFieldNumber = 3,
    kPointCloudFieldNumber = 4,
    kKeyframePosesFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accesstoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accesstoken();
  PROTOBUF_NODISCARD std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string resultMapUUID = 3;
  void clear_resultmapuuid();
  const std::string& resultmapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resultmapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resultmapuuid();
  PROTOBUF_NODISCARD std::string* release_resultmapuuid();
  void set_allocated_resultmapuuid(std::string* resultmapuuid);
  private:
  const std::string& _internal_resultmapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resultmapuuid(const std::string& value);
  std::string* _internal_mutable_resultmapuuid();
  public:

  // bytes pointCloud = 4;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // bytes keyframePoses = 5;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapProcessingDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultmapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// -------------------------------------------------------------------

class getMapProcessingDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIFrontEnd.getMapProcessingDataResponse) */ {
 public:
  inline getMapProcessingDataResponse() : getMapProcessingDataResponse(nullptr) {}
  ~getMapProcessingDataResponse() override;
  explicit PROTOBUF_CONSTEXPR getMapProcessingDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapProcessingDataResponse(const getMapProcessingDataResponse& from);
  getMapProcessingDataResponse(getMapProcessingDataResponse&& from) noexcept
    : getMapProcessingDataResponse() {
    *this = ::std::move(from);
  }

  inline getMapProcessingDataResponse& operator=(const getMapProcessingDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapProcessingDataResponse& operator=(getMapProcessingDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapProcessingDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapProcessingDataResponse* internal_default_instance() {
    return reinterpret_cast<const getMapProcessingDataResponse*>(
               &_getMapProcessingDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(getMapProcessingDataResponse& a, getMapProcessingDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapProcessingDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapProcessingDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapProcessingDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapProcessingDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapProcessingDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapProcessingDataResponse& from) {
    getMapProcessingDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapProcessingDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIFrontEnd.getMapProcessingDataResponse";
  }
  protected:
  explicit getMapProcessingDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
    kKeyframePosesFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes pointCloud = 1;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // bytes keyframePoses = 2;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIFrontEnd.getMapProcessingDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIFrontEndService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// registerClientRequest

// int32 grpcServerCompressionFormat = 1;
inline void registerClientRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t registerClientRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t registerClientRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void registerClientRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void registerClientRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void registerClientRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& registerClientRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registerClientRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientRequest.accessToken)
}
inline std::string* registerClientRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.registerClientRequest.accessToken)
  return _s;
}
inline const std::string& registerClientRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void registerClientRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* registerClientRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* registerClientRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.registerClientRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void registerClientRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.registerClientRequest.accessToken)
}

// bytes deviceInfo = 3;
inline void registerClientRequest::clear_deviceinfo() {
  _impl_.deviceinfo_.ClearToEmpty();
}
inline const std::string& registerClientRequest::deviceinfo() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientRequest.deviceInfo)
  return _internal_deviceinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registerClientRequest::set_deviceinfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceinfo_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientRequest.deviceInfo)
}
inline std::string* registerClientRequest::mutable_deviceinfo() {
  std::string* _s = _internal_mutable_deviceinfo();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.registerClientRequest.deviceInfo)
  return _s;
}
inline const std::string& registerClientRequest::_internal_deviceinfo() const {
  return _impl_.deviceinfo_.Get();
}
inline void registerClientRequest::_internal_set_deviceinfo(const std::string& value) {
  
  _impl_.deviceinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* registerClientRequest::_internal_mutable_deviceinfo() {
  
  return _impl_.deviceinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* registerClientRequest::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.registerClientRequest.deviceInfo)
  return _impl_.deviceinfo_.Release();
}
inline void registerClientRequest::set_allocated_deviceinfo(std::string* deviceinfo) {
  if (deviceinfo != nullptr) {
    
  } else {
    
  }
  _impl_.deviceinfo_.SetAllocated(deviceinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceinfo_.IsDefault()) {
    _impl_.deviceinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.registerClientRequest.deviceInfo)
}

// string worldElementUUID = 4;
inline void registerClientRequest::clear_worldelementuuid() {
  _impl_.worldelementuuid_.ClearToEmpty();
}
inline const std::string& registerClientRequest::worldelementuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientRequest.worldElementUUID)
  return _internal_worldelementuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registerClientRequest::set_worldelementuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldelementuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientRequest.worldElementUUID)
}
inline std::string* registerClientRequest::mutable_worldelementuuid() {
  std::string* _s = _internal_mutable_worldelementuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.registerClientRequest.worldElementUUID)
  return _s;
}
inline const std::string& registerClientRequest::_internal_worldelementuuid() const {
  return _impl_.worldelementuuid_.Get();
}
inline void registerClientRequest::_internal_set_worldelementuuid(const std::string& value) {
  
  _impl_.worldelementuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* registerClientRequest::_internal_mutable_worldelementuuid() {
  
  return _impl_.worldelementuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* registerClientRequest::release_worldelementuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.registerClientRequest.worldElementUUID)
  return _impl_.worldelementuuid_.Release();
}
inline void registerClientRequest::set_allocated_worldelementuuid(std::string* worldelementuuid) {
  if (worldelementuuid != nullptr) {
    
  } else {
    
  }
  _impl_.worldelementuuid_.SetAllocated(worldelementuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldelementuuid_.IsDefault()) {
    _impl_.worldelementuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.registerClientRequest.worldElementUUID)
}

// string clientUUID = 5;
inline void registerClientRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& registerClientRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registerClientRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientRequest.clientUUID)
}
inline std::string* registerClientRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.registerClientRequest.clientUUID)
  return _s;
}
inline const std::string& registerClientRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void registerClientRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* registerClientRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* registerClientRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.registerClientRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void registerClientRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.registerClientRequest.clientUUID)
}

// -------------------------------------------------------------------

// registerClientResponse

// string clientUUID = 1;
inline void registerClientResponse::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& registerClientResponse::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientResponse.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registerClientResponse::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientResponse.clientUUID)
}
inline std::string* registerClientResponse::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.registerClientResponse.clientUUID)
  return _s;
}
inline const std::string& registerClientResponse::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void registerClientResponse::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* registerClientResponse::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* registerClientResponse::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.registerClientResponse.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void registerClientResponse::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.registerClientResponse.clientUUID)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void registerClientResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t registerClientResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t registerClientResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.registerClientResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void registerClientResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void registerClientResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.registerClientResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// unregisterClientRequest

// int32 grpcServerCompressionFormat = 1;
inline void unregisterClientRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t unregisterClientRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t unregisterClientRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.unregisterClientRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void unregisterClientRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void unregisterClientRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.unregisterClientRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void unregisterClientRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& unregisterClientRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.unregisterClientRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void unregisterClientRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.unregisterClientRequest.accessToken)
}
inline std::string* unregisterClientRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.unregisterClientRequest.accessToken)
  return _s;
}
inline const std::string& unregisterClientRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void unregisterClientRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* unregisterClientRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* unregisterClientRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.unregisterClientRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void unregisterClientRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.unregisterClientRequest.accessToken)
}

// string clientUUID = 3;
inline void unregisterClientRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& unregisterClientRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.unregisterClientRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void unregisterClientRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.unregisterClientRequest.clientUUID)
}
inline std::string* unregisterClientRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.unregisterClientRequest.clientUUID)
  return _s;
}
inline const std::string& unregisterClientRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void unregisterClientRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* unregisterClientRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* unregisterClientRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.unregisterClientRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void unregisterClientRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.unregisterClientRequest.clientUUID)
}

// -------------------------------------------------------------------

// unregisterClientResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void unregisterClientResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t unregisterClientResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t unregisterClientResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.unregisterClientResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void unregisterClientResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void unregisterClientResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.unregisterClientResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getAllClientsUUIDRequest

// int32 grpcServerCompressionFormat = 1;
inline void getAllClientsUUIDRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getAllClientsUUIDRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getAllClientsUUIDRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllClientsUUIDRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getAllClientsUUIDRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getAllClientsUUIDRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllClientsUUIDRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getAllClientsUUIDRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getAllClientsUUIDRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllClientsUUIDRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllClientsUUIDRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllClientsUUIDRequest.accessToken)
}
inline std::string* getAllClientsUUIDRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getAllClientsUUIDRequest.accessToken)
  return _s;
}
inline const std::string& getAllClientsUUIDRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getAllClientsUUIDRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getAllClientsUUIDRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getAllClientsUUIDRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getAllClientsUUIDRequest.accessToken)
}

// bytes clientUUIDList = 3;
inline void getAllClientsUUIDRequest::clear_clientuuidlist() {
  _impl_.clientuuidlist_.ClearToEmpty();
}
inline const std::string& getAllClientsUUIDRequest::clientuuidlist() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllClientsUUIDRequest.clientUUIDList)
  return _internal_clientuuidlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllClientsUUIDRequest::set_clientuuidlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuidlist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllClientsUUIDRequest.clientUUIDList)
}
inline std::string* getAllClientsUUIDRequest::mutable_clientuuidlist() {
  std::string* _s = _internal_mutable_clientuuidlist();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getAllClientsUUIDRequest.clientUUIDList)
  return _s;
}
inline const std::string& getAllClientsUUIDRequest::_internal_clientuuidlist() const {
  return _impl_.clientuuidlist_.Get();
}
inline void getAllClientsUUIDRequest::_internal_set_clientuuidlist(const std::string& value) {
  
  _impl_.clientuuidlist_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDRequest::_internal_mutable_clientuuidlist() {
  
  return _impl_.clientuuidlist_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDRequest::release_clientuuidlist() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getAllClientsUUIDRequest.clientUUIDList)
  return _impl_.clientuuidlist_.Release();
}
inline void getAllClientsUUIDRequest::set_allocated_clientuuidlist(std::string* clientuuidlist) {
  if (clientuuidlist != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuidlist_.SetAllocated(clientuuidlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuidlist_.IsDefault()) {
    _impl_.clientuuidlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getAllClientsUUIDRequest.clientUUIDList)
}

// -------------------------------------------------------------------

// getAllClientsUUIDResponse

// bytes clientUUIDList = 1;
inline void getAllClientsUUIDResponse::clear_clientuuidlist() {
  _impl_.clientuuidlist_.ClearToEmpty();
}
inline const std::string& getAllClientsUUIDResponse::clientuuidlist() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllClientsUUIDResponse.clientUUIDList)
  return _internal_clientuuidlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllClientsUUIDResponse::set_clientuuidlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuidlist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllClientsUUIDResponse.clientUUIDList)
}
inline std::string* getAllClientsUUIDResponse::mutable_clientuuidlist() {
  std::string* _s = _internal_mutable_clientuuidlist();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getAllClientsUUIDResponse.clientUUIDList)
  return _s;
}
inline const std::string& getAllClientsUUIDResponse::_internal_clientuuidlist() const {
  return _impl_.clientuuidlist_.Get();
}
inline void getAllClientsUUIDResponse::_internal_set_clientuuidlist(const std::string& value) {
  
  _impl_.clientuuidlist_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDResponse::_internal_mutable_clientuuidlist() {
  
  return _impl_.clientuuidlist_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllClientsUUIDResponse::release_clientuuidlist() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getAllClientsUUIDResponse.clientUUIDList)
  return _impl_.clientuuidlist_.Release();
}
inline void getAllClientsUUIDResponse::set_allocated_clientuuidlist(std::string* clientuuidlist) {
  if (clientuuidlist != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuidlist_.SetAllocated(clientuuidlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuidlist_.IsDefault()) {
    _impl_.clientuuidlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getAllClientsUUIDResponse.clientUUIDList)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getAllClientsUUIDResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getAllClientsUUIDResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getAllClientsUUIDResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllClientsUUIDResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getAllClientsUUIDResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getAllClientsUUIDResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllClientsUUIDResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDeviceInfoRequest

// int32 grpcServerCompressionFormat = 1;
inline void getDeviceInfoRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getDeviceInfoRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getDeviceInfoRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getDeviceInfoRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getDeviceInfoRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getDeviceInfoRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getDeviceInfoRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getDeviceInfoRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getDeviceInfoRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getDeviceInfoRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDeviceInfoRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getDeviceInfoRequest.accessToken)
}
inline std::string* getDeviceInfoRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getDeviceInfoRequest.accessToken)
  return _s;
}
inline const std::string& getDeviceInfoRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getDeviceInfoRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getDeviceInfoRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getDeviceInfoRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getDeviceInfoRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getDeviceInfoRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getDeviceInfoRequest.accessToken)
}

// string clientUUID = 3;
inline void getDeviceInfoRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& getDeviceInfoRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getDeviceInfoRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDeviceInfoRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getDeviceInfoRequest.clientUUID)
}
inline std::string* getDeviceInfoRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getDeviceInfoRequest.clientUUID)
  return _s;
}
inline const std::string& getDeviceInfoRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void getDeviceInfoRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getDeviceInfoRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getDeviceInfoRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getDeviceInfoRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void getDeviceInfoRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getDeviceInfoRequest.clientUUID)
}

// bytes deviceInfo = 4;
inline void getDeviceInfoRequest::clear_deviceinfo() {
  _impl_.deviceinfo_.ClearToEmpty();
}
inline const std::string& getDeviceInfoRequest::deviceinfo() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getDeviceInfoRequest.deviceInfo)
  return _internal_deviceinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDeviceInfoRequest::set_deviceinfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceinfo_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getDeviceInfoRequest.deviceInfo)
}
inline std::string* getDeviceInfoRequest::mutable_deviceinfo() {
  std::string* _s = _internal_mutable_deviceinfo();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getDeviceInfoRequest.deviceInfo)
  return _s;
}
inline const std::string& getDeviceInfoRequest::_internal_deviceinfo() const {
  return _impl_.deviceinfo_.Get();
}
inline void getDeviceInfoRequest::_internal_set_deviceinfo(const std::string& value) {
  
  _impl_.deviceinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* getDeviceInfoRequest::_internal_mutable_deviceinfo() {
  
  return _impl_.deviceinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* getDeviceInfoRequest::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getDeviceInfoRequest.deviceInfo)
  return _impl_.deviceinfo_.Release();
}
inline void getDeviceInfoRequest::set_allocated_deviceinfo(std::string* deviceinfo) {
  if (deviceinfo != nullptr) {
    
  } else {
    
  }
  _impl_.deviceinfo_.SetAllocated(deviceinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceinfo_.IsDefault()) {
    _impl_.deviceinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getDeviceInfoRequest.deviceInfo)
}

// -------------------------------------------------------------------

// getDeviceInfoResponse

// bytes deviceInfo = 1;
inline void getDeviceInfoResponse::clear_deviceinfo() {
  _impl_.deviceinfo_.ClearToEmpty();
}
inline const std::string& getDeviceInfoResponse::deviceinfo() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getDeviceInfoResponse.deviceInfo)
  return _internal_deviceinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDeviceInfoResponse::set_deviceinfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.deviceinfo_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getDeviceInfoResponse.deviceInfo)
}
inline std::string* getDeviceInfoResponse::mutable_deviceinfo() {
  std::string* _s = _internal_mutable_deviceinfo();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getDeviceInfoResponse.deviceInfo)
  return _s;
}
inline const std::string& getDeviceInfoResponse::_internal_deviceinfo() const {
  return _impl_.deviceinfo_.Get();
}
inline void getDeviceInfoResponse::_internal_set_deviceinfo(const std::string& value) {
  
  _impl_.deviceinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* getDeviceInfoResponse::_internal_mutable_deviceinfo() {
  
  return _impl_.deviceinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* getDeviceInfoResponse::release_deviceinfo() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getDeviceInfoResponse.deviceInfo)
  return _impl_.deviceinfo_.Release();
}
inline void getDeviceInfoResponse::set_allocated_deviceinfo(std::string* deviceinfo) {
  if (deviceinfo != nullptr) {
    
  } else {
    
  }
  _impl_.deviceinfo_.SetAllocated(deviceinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.deviceinfo_.IsDefault()) {
    _impl_.deviceinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getDeviceInfoResponse.deviceInfo)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getDeviceInfoResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getDeviceInfoResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getDeviceInfoResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getDeviceInfoResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDeviceInfoResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getDeviceInfoResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getDeviceInfoResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// init_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc0Request.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void init_grpc0Request::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& init_grpc0Request::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc0Request.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc0Request::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc0Request.accessToken)
}
inline std::string* init_grpc0Request::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.init_grpc0Request.accessToken)
  return _s;
}
inline const std::string& init_grpc0Request::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void init_grpc0Request::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc0Request::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc0Request::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.init_grpc0Request.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void init_grpc0Request::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.init_grpc0Request.accessToken)
}

// string clientUUID = 3;
inline void init_grpc0Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& init_grpc0Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc0Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc0Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc0Request.clientUUID)
}
inline std::string* init_grpc0Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.init_grpc0Request.clientUUID)
  return _s;
}
inline const std::string& init_grpc0Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void init_grpc0Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc0Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc0Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.init_grpc0Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void init_grpc0Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.init_grpc0Request.clientUUID)
}

// -------------------------------------------------------------------

// init_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// init_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc1Request.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void init_grpc1Request::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& init_grpc1Request::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc1Request.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc1Request::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc1Request.accessToken)
}
inline std::string* init_grpc1Request::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.init_grpc1Request.accessToken)
  return _s;
}
inline const std::string& init_grpc1Request::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void init_grpc1Request::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc1Request::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc1Request::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.init_grpc1Request.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void init_grpc1Request::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.init_grpc1Request.accessToken)
}

// string clientUUID = 3;
inline void init_grpc1Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& init_grpc1Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc1Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc1Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc1Request.clientUUID)
}
inline std::string* init_grpc1Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.init_grpc1Request.clientUUID)
  return _s;
}
inline const std::string& init_grpc1Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void init_grpc1Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc1Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc1Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.init_grpc1Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void init_grpc1Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.init_grpc1Request.clientUUID)
}

// sint32 pipelineMode = 4;
inline void init_grpc1Request::clear_pipelinemode() {
  _impl_.pipelinemode_ = 0;
}
inline int32_t init_grpc1Request::_internal_pipelinemode() const {
  return _impl_.pipelinemode_;
}
inline int32_t init_grpc1Request::pipelinemode() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc1Request.pipelineMode)
  return _internal_pipelinemode();
}
inline void init_grpc1Request::_internal_set_pipelinemode(int32_t value) {
  
  _impl_.pipelinemode_ = value;
}
inline void init_grpc1Request::set_pipelinemode(int32_t value) {
  _internal_set_pipelinemode(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc1Request.pipelineMode)
}

// -------------------------------------------------------------------

// init_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.init_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.init_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// startRequest

// int32 grpcServerCompressionFormat = 1;
inline void startRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t startRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t startRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.startRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void startRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void startRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.startRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void startRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& startRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.startRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void startRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.startRequest.accessToken)
}
inline std::string* startRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.startRequest.accessToken)
  return _s;
}
inline const std::string& startRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void startRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* startRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* startRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.startRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void startRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.startRequest.accessToken)
}

// string clientUUID = 3;
inline void startRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& startRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.startRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void startRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.startRequest.clientUUID)
}
inline std::string* startRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.startRequest.clientUUID)
  return _s;
}
inline const std::string& startRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void startRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* startRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* startRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.startRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void startRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.startRequest.clientUUID)
}

// -------------------------------------------------------------------

// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t startResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopRequest

// int32 grpcServerCompressionFormat = 1;
inline void stopRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t stopRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t stopRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.stopRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void stopRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void stopRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.stopRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void stopRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& stopRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.stopRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void stopRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.stopRequest.accessToken)
}
inline std::string* stopRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.stopRequest.accessToken)
  return _s;
}
inline const std::string& stopRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void stopRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* stopRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* stopRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.stopRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void stopRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.stopRequest.accessToken)
}

// string clientUUID = 3;
inline void stopRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& stopRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.stopRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void stopRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.stopRequest.clientUUID)
}
inline std::string* stopRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.stopRequest.clientUUID)
  return _s;
}
inline const std::string& stopRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void stopRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* stopRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* stopRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.stopRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void stopRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.stopRequest.clientUUID)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getProcessingModeRequest

// int32 grpcServerCompressionFormat = 1;
inline void getProcessingModeRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getProcessingModeRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getProcessingModeRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getProcessingModeRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getProcessingModeRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getProcessingModeRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getProcessingModeRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getProcessingModeRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeRequest.accessToken)
}
inline std::string* getProcessingModeRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getProcessingModeRequest.accessToken)
  return _s;
}
inline const std::string& getProcessingModeRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getProcessingModeRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getProcessingModeRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getProcessingModeRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getProcessingModeRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getProcessingModeRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getProcessingModeRequest.accessToken)
}

// string clientUUID = 3;
inline void getProcessingModeRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& getProcessingModeRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getProcessingModeRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeRequest.clientUUID)
}
inline std::string* getProcessingModeRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getProcessingModeRequest.clientUUID)
  return _s;
}
inline const std::string& getProcessingModeRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void getProcessingModeRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getProcessingModeRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getProcessingModeRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getProcessingModeRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void getProcessingModeRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getProcessingModeRequest.clientUUID)
}

// sint32 pipelineMode = 4;
inline void getProcessingModeRequest::clear_pipelinemode() {
  _impl_.pipelinemode_ = 0;
}
inline int32_t getProcessingModeRequest::_internal_pipelinemode() const {
  return _impl_.pipelinemode_;
}
inline int32_t getProcessingModeRequest::pipelinemode() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeRequest.pipelineMode)
  return _internal_pipelinemode();
}
inline void getProcessingModeRequest::_internal_set_pipelinemode(int32_t value) {
  
  _impl_.pipelinemode_ = value;
}
inline void getProcessingModeRequest::set_pipelinemode(int32_t value) {
  _internal_set_pipelinemode(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeRequest.pipelineMode)
}

// -------------------------------------------------------------------

// getProcessingModeResponse

// sint32 pipelineMode = 1;
inline void getProcessingModeResponse::clear_pipelinemode() {
  _impl_.pipelinemode_ = 0;
}
inline int32_t getProcessingModeResponse::_internal_pipelinemode() const {
  return _impl_.pipelinemode_;
}
inline int32_t getProcessingModeResponse::pipelinemode() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeResponse.pipelineMode)
  return _internal_pipelinemode();
}
inline void getProcessingModeResponse::_internal_set_pipelinemode(int32_t value) {
  
  _impl_.pipelinemode_ = value;
}
inline void getProcessingModeResponse::set_pipelinemode(int32_t value) {
  _internal_set_pipelinemode(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeResponse.pipelineMode)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getProcessingModeResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getProcessingModeResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getProcessingModeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getProcessingModeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getProcessingModeResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getProcessingModeResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getProcessingModeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void setCameraParameters_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setCameraParameters_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setCameraParameters_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setCameraParameters_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setCameraParameters_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc0Request.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void setCameraParameters_grpc0Request::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc0Request::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc0Request.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc0Request::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc0Request.accessToken)
}
inline std::string* setCameraParameters_grpc0Request::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc0Request.accessToken)
  return _s;
}
inline const std::string& setCameraParameters_grpc0Request::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void setCameraParameters_grpc0Request::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc0Request.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void setCameraParameters_grpc0Request::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc0Request.accessToken)
}

// string clientUUID = 3;
inline void setCameraParameters_grpc0Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc0Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc0Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc0Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc0Request.clientUUID)
}
inline std::string* setCameraParameters_grpc0Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc0Request.clientUUID)
  return _s;
}
inline const std::string& setCameraParameters_grpc0Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void setCameraParameters_grpc0Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc0Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void setCameraParameters_grpc0Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc0Request.clientUUID)
}

// bytes cameraParams = 4;
inline void setCameraParameters_grpc0Request::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc0Request::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc0Request::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
}
inline std::string* setCameraParameters_grpc0Request::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
  return _s;
}
inline const std::string& setCameraParameters_grpc0Request::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void setCameraParameters_grpc0Request::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void setCameraParameters_grpc0Request::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc0Request.cameraParams)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void setCameraParameters_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setCameraParameters_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setCameraParameters_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setCameraParameters_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setCameraParameters_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void setCameraParameters_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setCameraParameters_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setCameraParameters_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setCameraParameters_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setCameraParameters_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Request.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void setCameraParameters_grpc1Request::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc1Request::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Request.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc1Request::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Request.accessToken)
}
inline std::string* setCameraParameters_grpc1Request::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc1Request.accessToken)
  return _s;
}
inline const std::string& setCameraParameters_grpc1Request::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void setCameraParameters_grpc1Request::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc1Request.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void setCameraParameters_grpc1Request::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc1Request.accessToken)
}

// string clientUUID = 3;
inline void setCameraParameters_grpc1Request::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc1Request::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Request.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc1Request::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Request.clientUUID)
}
inline std::string* setCameraParameters_grpc1Request::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc1Request.clientUUID)
  return _s;
}
inline const std::string& setCameraParameters_grpc1Request::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void setCameraParameters_grpc1Request::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc1Request.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void setCameraParameters_grpc1Request::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc1Request.clientUUID)
}

// bytes cameraParams1 = 4;
inline void setCameraParameters_grpc1Request::clear_cameraparams1() {
  _impl_.cameraparams1_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc1Request::cameraparams1() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
  return _internal_cameraparams1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc1Request::set_cameraparams1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
}
inline std::string* setCameraParameters_grpc1Request::mutable_cameraparams1() {
  std::string* _s = _internal_mutable_cameraparams1();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
  return _s;
}
inline const std::string& setCameraParameters_grpc1Request::_internal_cameraparams1() const {
  return _impl_.cameraparams1_.Get();
}
inline void setCameraParameters_grpc1Request::_internal_set_cameraparams1(const std::string& value) {
  
  _impl_.cameraparams1_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::_internal_mutable_cameraparams1() {
  
  return _impl_.cameraparams1_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::release_cameraparams1() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
  return _impl_.cameraparams1_.Release();
}
inline void setCameraParameters_grpc1Request::set_allocated_cameraparams1(std::string* cameraparams1) {
  if (cameraparams1 != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams1_.SetAllocated(cameraparams1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams1_.IsDefault()) {
    _impl_.cameraparams1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams1)
}

// bytes cameraParams2 = 5;
inline void setCameraParameters_grpc1Request::clear_cameraparams2() {
  _impl_.cameraparams2_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc1Request::cameraparams2() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
  return _internal_cameraparams2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc1Request::set_cameraparams2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
}
inline std::string* setCameraParameters_grpc1Request::mutable_cameraparams2() {
  std::string* _s = _internal_mutable_cameraparams2();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
  return _s;
}
inline const std::string& setCameraParameters_grpc1Request::_internal_cameraparams2() const {
  return _impl_.cameraparams2_.Get();
}
inline void setCameraParameters_grpc1Request::_internal_set_cameraparams2(const std::string& value) {
  
  _impl_.cameraparams2_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::_internal_mutable_cameraparams2() {
  
  return _impl_.cameraparams2_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::release_cameraparams2() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
  return _impl_.cameraparams2_.Release();
}
inline void setCameraParameters_grpc1Request::set_allocated_cameraparams2(std::string* cameraparams2) {
  if (cameraparams2 != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams2_.SetAllocated(cameraparams2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams2_.IsDefault()) {
    _impl_.cameraparams2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setCameraParameters_grpc1Request.cameraParams2)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void setCameraParameters_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setCameraParameters_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setCameraParameters_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setCameraParameters_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setCameraParameters_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setCameraParameters_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setCameraParameters_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setRectificationParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void setRectificationParametersRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setRectificationParametersRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setRectificationParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setRectificationParametersRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setRectificationParametersRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void setRectificationParametersRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersRequest.accessToken)
}
inline std::string* setRectificationParametersRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setRectificationParametersRequest.accessToken)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void setRectificationParametersRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setRectificationParametersRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void setRectificationParametersRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setRectificationParametersRequest.accessToken)
}

// string clientUUID = 3;
inline void setRectificationParametersRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersRequest.clientUUID)
}
inline std::string* setRectificationParametersRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setRectificationParametersRequest.clientUUID)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void setRectificationParametersRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setRectificationParametersRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void setRectificationParametersRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setRectificationParametersRequest.clientUUID)
}

// bytes rectCam1 = 4;
inline void setRectificationParametersRequest::clear_rectcam1() {
  _impl_.rectcam1_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectcam1() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
  return _internal_rectcam1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_rectcam1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rectcam1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
}
inline std::string* setRectificationParametersRequest::mutable_rectcam1() {
  std::string* _s = _internal_mutable_rectcam1();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_rectcam1() const {
  return _impl_.rectcam1_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectcam1(const std::string& value) {
  
  _impl_.rectcam1_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectcam1() {
  
  return _impl_.rectcam1_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_rectcam1() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
  return _impl_.rectcam1_.Release();
}
inline void setRectificationParametersRequest::set_allocated_rectcam1(std::string* rectcam1) {
  if (rectcam1 != nullptr) {
    
  } else {
    
  }
  _impl_.rectcam1_.SetAllocated(rectcam1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rectcam1_.IsDefault()) {
    _impl_.rectcam1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setRectificationParametersRequest.rectCam1)
}

// bytes rectCam2 = 5;
inline void setRectificationParametersRequest::clear_rectcam2() {
  _impl_.rectcam2_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectcam2() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
  return _internal_rectcam2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_rectcam2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rectcam2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
}
inline std::string* setRectificationParametersRequest::mutable_rectcam2() {
  std::string* _s = _internal_mutable_rectcam2();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_rectcam2() const {
  return _impl_.rectcam2_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectcam2(const std::string& value) {
  
  _impl_.rectcam2_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectcam2() {
  
  return _impl_.rectcam2_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_rectcam2() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
  return _impl_.rectcam2_.Release();
}
inline void setRectificationParametersRequest::set_allocated_rectcam2(std::string* rectcam2) {
  if (rectcam2 != nullptr) {
    
  } else {
    
  }
  _impl_.rectcam2_.SetAllocated(rectcam2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rectcam2_.IsDefault()) {
    _impl_.rectcam2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setRectificationParametersRequest.rectCam2)
}

// -------------------------------------------------------------------

// setRectificationParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setRectificationParametersResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setRectificationParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setRectificationParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setRectificationParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setRectificationParametersResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setRectificationParametersResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setRectificationParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getCameraParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void getCameraParametersRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getCameraParametersRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getCameraParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getCameraParametersRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getCameraParametersRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getCameraParametersRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getCameraParametersRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersRequest.accessToken)
}
inline std::string* getCameraParametersRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getCameraParametersRequest.accessToken)
  return _s;
}
inline const std::string& getCameraParametersRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getCameraParametersRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getCameraParametersRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getCameraParametersRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getCameraParametersRequest.accessToken)
}

// string clientUUID = 3;
inline void getCameraParametersRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& getCameraParametersRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersRequest.clientUUID)
}
inline std::string* getCameraParametersRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getCameraParametersRequest.clientUUID)
  return _s;
}
inline const std::string& getCameraParametersRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void getCameraParametersRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getCameraParametersRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void getCameraParametersRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getCameraParametersRequest.clientUUID)
}

// bytes cameraParams = 4;
inline void getCameraParametersRequest::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& getCameraParametersRequest::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersRequest::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
}
inline std::string* getCameraParametersRequest::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
  return _s;
}
inline const std::string& getCameraParametersRequest::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void getCameraParametersRequest::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersRequest::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void getCameraParametersRequest::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getCameraParametersRequest.cameraParams)
}

// -------------------------------------------------------------------

// getCameraParametersResponse

// bytes cameraParams = 1;
inline void getCameraParametersResponse::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& getCameraParametersResponse::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getCameraParametersResponse::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
}
inline std::string* getCameraParametersResponse::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
  return _s;
}
inline const std::string& getCameraParametersResponse::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void getCameraParametersResponse::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* getCameraParametersResponse::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* getCameraParametersResponse::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void getCameraParametersResponse::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getCameraParametersResponse.cameraParams)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getCameraParametersResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getCameraParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getCameraParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getCameraParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getCameraParametersResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getCameraParametersResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getCameraParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// imageProcessRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void imageProcessRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t imageProcessRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t imageProcessRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void imageProcessRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void imageProcessRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void imageProcessRequestRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& imageProcessRequestRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.accessToken)
}
inline std::string* imageProcessRequestRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestRequest.accessToken)
  return _s;
}
inline const std::string& imageProcessRequestRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void imageProcessRequestRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void imageProcessRequestRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestRequest.accessToken)
}

// string clientUUID = 3;
inline void imageProcessRequestRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& imageProcessRequestRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.clientUUID)
}
inline std::string* imageProcessRequestRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestRequest.clientUUID)
  return _s;
}
inline const std::string& imageProcessRequestRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void imageProcessRequestRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void imageProcessRequestRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestRequest.clientUUID)
}

// bytes images = 4;
inline void imageProcessRequestRequest::clear_images() {
  _impl_.images_.ClearToEmpty();
}
inline const std::string& imageProcessRequestRequest::images() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.images)
  return _internal_images();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestRequest::set_images(ArgT0&& arg0, ArgT... args) {
 
 _impl_.images_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.images)
}
inline std::string* imageProcessRequestRequest::mutable_images() {
  std::string* _s = _internal_mutable_images();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestRequest.images)
  return _s;
}
inline const std::string& imageProcessRequestRequest::_internal_images() const {
  return _impl_.images_.Get();
}
inline void imageProcessRequestRequest::_internal_set_images(const std::string& value) {
  
  _impl_.images_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::_internal_mutable_images() {
  
  return _impl_.images_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::release_images() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestRequest.images)
  return _impl_.images_.Release();
}
inline void imageProcessRequestRequest::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  _impl_.images_.SetAllocated(images, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.images_.IsDefault()) {
    _impl_.images_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestRequest.images)
}

// bytes poses = 5;
inline void imageProcessRequestRequest::clear_poses() {
  _impl_.poses_.ClearToEmpty();
}
inline const std::string& imageProcessRequestRequest::poses() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.poses)
  return _internal_poses();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestRequest::set_poses(ArgT0&& arg0, ArgT... args) {
 
 _impl_.poses_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.poses)
}
inline std::string* imageProcessRequestRequest::mutable_poses() {
  std::string* _s = _internal_mutable_poses();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestRequest.poses)
  return _s;
}
inline const std::string& imageProcessRequestRequest::_internal_poses() const {
  return _impl_.poses_.Get();
}
inline void imageProcessRequestRequest::_internal_set_poses(const std::string& value) {
  
  _impl_.poses_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::_internal_mutable_poses() {
  
  return _impl_.poses_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestRequest.poses)
  return _impl_.poses_.Release();
}
inline void imageProcessRequestRequest::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  _impl_.poses_.SetAllocated(poses, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.poses_.IsDefault()) {
    _impl_.poses_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestRequest.poses)
}

// bool fixedPose = 6;
inline void imageProcessRequestRequest::clear_fixedpose() {
  _impl_.fixedpose_ = false;
}
inline bool imageProcessRequestRequest::_internal_fixedpose() const {
  return _impl_.fixedpose_;
}
inline bool imageProcessRequestRequest::fixedpose() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.fixedPose)
  return _internal_fixedpose();
}
inline void imageProcessRequestRequest::_internal_set_fixedpose(bool value) {
  
  _impl_.fixedpose_ = value;
}
inline void imageProcessRequestRequest::set_fixedpose(bool value) {
  _internal_set_fixedpose(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.fixedPose)
}

// bytes worldTransform = 7;
inline void imageProcessRequestRequest::clear_worldtransform() {
  _impl_.worldtransform_.ClearToEmpty();
}
inline const std::string& imageProcessRequestRequest::worldtransform() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.worldTransform)
  return _internal_worldtransform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestRequest::set_worldtransform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldtransform_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.worldTransform)
}
inline std::string* imageProcessRequestRequest::mutable_worldtransform() {
  std::string* _s = _internal_mutable_worldtransform();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestRequest.worldTransform)
  return _s;
}
inline const std::string& imageProcessRequestRequest::_internal_worldtransform() const {
  return _impl_.worldtransform_.Get();
}
inline void imageProcessRequestRequest::_internal_set_worldtransform(const std::string& value) {
  
  _impl_.worldtransform_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::_internal_mutable_worldtransform() {
  
  return _impl_.worldtransform_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::release_worldtransform() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestRequest.worldTransform)
  return _impl_.worldtransform_.Release();
}
inline void imageProcessRequestRequest::set_allocated_worldtransform(std::string* worldtransform) {
  if (worldtransform != nullptr) {
    
  } else {
    
  }
  _impl_.worldtransform_.SetAllocated(worldtransform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldtransform_.IsDefault()) {
    _impl_.worldtransform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestRequest.worldTransform)
}

// bytes timestamp = 8;
inline void imageProcessRequestRequest::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& imageProcessRequestRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestRequest::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timestamp_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.timestamp)
}
inline std::string* imageProcessRequestRequest::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestRequest.timestamp)
  return _s;
}
inline const std::string& imageProcessRequestRequest::_internal_timestamp() const {
  return _impl_.timestamp_.Get();
}
inline void imageProcessRequestRequest::_internal_set_timestamp(const std::string& value) {
  
  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::_internal_mutable_timestamp() {
  
  return _impl_.timestamp_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestRequest.timestamp)
  return _impl_.timestamp_.Release();
}
inline void imageProcessRequestRequest::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  _impl_.timestamp_.SetAllocated(timestamp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestRequest.timestamp)
}

// sint32 transform3DStatus = 9;
inline void imageProcessRequestRequest::clear_transform3dstatus() {
  _impl_.transform3dstatus_ = 0;
}
inline int32_t imageProcessRequestRequest::_internal_transform3dstatus() const {
  return _impl_.transform3dstatus_;
}
inline int32_t imageProcessRequestRequest::transform3dstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.transform3DStatus)
  return _internal_transform3dstatus();
}
inline void imageProcessRequestRequest::_internal_set_transform3dstatus(int32_t value) {
  
  _impl_.transform3dstatus_ = value;
}
inline void imageProcessRequestRequest::set_transform3dstatus(int32_t value) {
  _internal_set_transform3dstatus(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.transform3DStatus)
}

// bytes transform3D = 10;
inline void imageProcessRequestRequest::clear_transform3d() {
  _impl_.transform3d_.ClearToEmpty();
}
inline const std::string& imageProcessRequestRequest::transform3d() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.transform3D)
  return _internal_transform3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestRequest::set_transform3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.transform3D)
}
inline std::string* imageProcessRequestRequest::mutable_transform3d() {
  std::string* _s = _internal_mutable_transform3d();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestRequest.transform3D)
  return _s;
}
inline const std::string& imageProcessRequestRequest::_internal_transform3d() const {
  return _impl_.transform3d_.Get();
}
inline void imageProcessRequestRequest::_internal_set_transform3d(const std::string& value) {
  
  _impl_.transform3d_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::_internal_mutable_transform3d() {
  
  return _impl_.transform3d_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::release_transform3d() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestRequest.transform3D)
  return _impl_.transform3d_.Release();
}
inline void imageProcessRequestRequest::set_allocated_transform3d(std::string* transform3d) {
  if (transform3d != nullptr) {
    
  } else {
    
  }
  _impl_.transform3d_.SetAllocated(transform3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3d_.IsDefault()) {
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestRequest.transform3D)
}

// bytes confidence = 11;
inline void imageProcessRequestRequest::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& imageProcessRequestRequest::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestRequest::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.confidence)
}
inline std::string* imageProcessRequestRequest::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestRequest.confidence)
  return _s;
}
inline const std::string& imageProcessRequestRequest::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void imageProcessRequestRequest::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestRequest.confidence)
  return _impl_.confidence_.Release();
}
inline void imageProcessRequestRequest::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestRequest.confidence)
}

// sint32 mappingStatus = 12;
inline void imageProcessRequestRequest::clear_mappingstatus() {
  _impl_.mappingstatus_ = 0;
}
inline int32_t imageProcessRequestRequest::_internal_mappingstatus() const {
  return _impl_.mappingstatus_;
}
inline int32_t imageProcessRequestRequest::mappingstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.mappingStatus)
  return _internal_mappingstatus();
}
inline void imageProcessRequestRequest::_internal_set_mappingstatus(int32_t value) {
  
  _impl_.mappingstatus_ = value;
}
inline void imageProcessRequestRequest::set_mappingstatus(int32_t value) {
  _internal_set_mappingstatus(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.mappingStatus)
}

// bytes detectedObjects = 13;
inline void imageProcessRequestRequest::clear_detectedobjects() {
  _impl_.detectedobjects_.ClearToEmpty();
}
inline const std::string& imageProcessRequestRequest::detectedobjects() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestRequest.detectedObjects)
  return _internal_detectedobjects();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestRequest::set_detectedobjects(ArgT0&& arg0, ArgT... args) {
 
 _impl_.detectedobjects_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestRequest.detectedObjects)
}
inline std::string* imageProcessRequestRequest::mutable_detectedobjects() {
  std::string* _s = _internal_mutable_detectedobjects();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestRequest.detectedObjects)
  return _s;
}
inline const std::string& imageProcessRequestRequest::_internal_detectedobjects() const {
  return _impl_.detectedobjects_.Get();
}
inline void imageProcessRequestRequest::_internal_set_detectedobjects(const std::string& value) {
  
  _impl_.detectedobjects_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::_internal_mutable_detectedobjects() {
  
  return _impl_.detectedobjects_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestRequest::release_detectedobjects() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestRequest.detectedObjects)
  return _impl_.detectedobjects_.Release();
}
inline void imageProcessRequestRequest::set_allocated_detectedobjects(std::string* detectedobjects) {
  if (detectedobjects != nullptr) {
    
  } else {
    
  }
  _impl_.detectedobjects_.SetAllocated(detectedobjects, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detectedobjects_.IsDefault()) {
    _impl_.detectedobjects_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestRequest.detectedObjects)
}

// -------------------------------------------------------------------

// imageProcessRequestResponse

// sint32 transform3DStatus = 1;
inline void imageProcessRequestResponse::clear_transform3dstatus() {
  _impl_.transform3dstatus_ = 0;
}
inline int32_t imageProcessRequestResponse::_internal_transform3dstatus() const {
  return _impl_.transform3dstatus_;
}
inline int32_t imageProcessRequestResponse::transform3dstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestResponse.transform3DStatus)
  return _internal_transform3dstatus();
}
inline void imageProcessRequestResponse::_internal_set_transform3dstatus(int32_t value) {
  
  _impl_.transform3dstatus_ = value;
}
inline void imageProcessRequestResponse::set_transform3dstatus(int32_t value) {
  _internal_set_transform3dstatus(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestResponse.transform3DStatus)
}

// bytes transform3D = 2;
inline void imageProcessRequestResponse::clear_transform3d() {
  _impl_.transform3d_.ClearToEmpty();
}
inline const std::string& imageProcessRequestResponse::transform3d() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestResponse.transform3D)
  return _internal_transform3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestResponse::set_transform3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestResponse.transform3D)
}
inline std::string* imageProcessRequestResponse::mutable_transform3d() {
  std::string* _s = _internal_mutable_transform3d();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestResponse.transform3D)
  return _s;
}
inline const std::string& imageProcessRequestResponse::_internal_transform3d() const {
  return _impl_.transform3d_.Get();
}
inline void imageProcessRequestResponse::_internal_set_transform3d(const std::string& value) {
  
  _impl_.transform3d_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestResponse::_internal_mutable_transform3d() {
  
  return _impl_.transform3d_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestResponse::release_transform3d() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestResponse.transform3D)
  return _impl_.transform3d_.Release();
}
inline void imageProcessRequestResponse::set_allocated_transform3d(std::string* transform3d) {
  if (transform3d != nullptr) {
    
  } else {
    
  }
  _impl_.transform3d_.SetAllocated(transform3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3d_.IsDefault()) {
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestResponse.transform3D)
}

// bytes confidence = 3;
inline void imageProcessRequestResponse::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& imageProcessRequestResponse::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestResponse.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestResponse::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestResponse.confidence)
}
inline std::string* imageProcessRequestResponse::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestResponse.confidence)
  return _s;
}
inline const std::string& imageProcessRequestResponse::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void imageProcessRequestResponse::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestResponse::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestResponse::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestResponse.confidence)
  return _impl_.confidence_.Release();
}
inline void imageProcessRequestResponse::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestResponse.confidence)
}

// sint32 mappingStatus = 4;
inline void imageProcessRequestResponse::clear_mappingstatus() {
  _impl_.mappingstatus_ = 0;
}
inline int32_t imageProcessRequestResponse::_internal_mappingstatus() const {
  return _impl_.mappingstatus_;
}
inline int32_t imageProcessRequestResponse::mappingstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestResponse.mappingStatus)
  return _internal_mappingstatus();
}
inline void imageProcessRequestResponse::_internal_set_mappingstatus(int32_t value) {
  
  _impl_.mappingstatus_ = value;
}
inline void imageProcessRequestResponse::set_mappingstatus(int32_t value) {
  _internal_set_mappingstatus(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestResponse.mappingStatus)
}

// bytes detectedObjects = 5;
inline void imageProcessRequestResponse::clear_detectedobjects() {
  _impl_.detectedobjects_.ClearToEmpty();
}
inline const std::string& imageProcessRequestResponse::detectedobjects() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestResponse.detectedObjects)
  return _internal_detectedobjects();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void imageProcessRequestResponse::set_detectedobjects(ArgT0&& arg0, ArgT... args) {
 
 _impl_.detectedobjects_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestResponse.detectedObjects)
}
inline std::string* imageProcessRequestResponse::mutable_detectedobjects() {
  std::string* _s = _internal_mutable_detectedobjects();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.imageProcessRequestResponse.detectedObjects)
  return _s;
}
inline const std::string& imageProcessRequestResponse::_internal_detectedobjects() const {
  return _impl_.detectedobjects_.Get();
}
inline void imageProcessRequestResponse::_internal_set_detectedobjects(const std::string& value) {
  
  _impl_.detectedobjects_.Set(value, GetArenaForAllocation());
}
inline std::string* imageProcessRequestResponse::_internal_mutable_detectedobjects() {
  
  return _impl_.detectedobjects_.Mutable(GetArenaForAllocation());
}
inline std::string* imageProcessRequestResponse::release_detectedobjects() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.imageProcessRequestResponse.detectedObjects)
  return _impl_.detectedobjects_.Release();
}
inline void imageProcessRequestResponse::set_allocated_detectedobjects(std::string* detectedobjects) {
  if (detectedobjects != nullptr) {
    
  } else {
    
  }
  _impl_.detectedobjects_.SetAllocated(detectedobjects, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.detectedobjects_.IsDefault()) {
    _impl_.detectedobjects_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.imageProcessRequestResponse.detectedObjects)
}

// sint32 xpcfGrpcReturnValue = 6;
inline void imageProcessRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t imageProcessRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t imageProcessRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.imageProcessRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void imageProcessRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void imageProcessRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.imageProcessRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMappingDataRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMappingDataRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMappingDataRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMappingDataRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMappingDataRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMappingDataRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getMappingDataRequestRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestRequest.accessToken)
}
inline std::string* getMappingDataRequestRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestRequest.accessToken)
  return _s;
}
inline const std::string& getMappingDataRequestRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getMappingDataRequestRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getMappingDataRequestRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestRequest.accessToken)
}

// string clientUUID = 3;
inline void getMappingDataRequestRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestRequest.clientUUID)
}
inline std::string* getMappingDataRequestRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestRequest.clientUUID)
  return _s;
}
inline const std::string& getMappingDataRequestRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void getMappingDataRequestRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void getMappingDataRequestRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestRequest.clientUUID)
}

// bytes outputPointClouds = 4;
inline void getMappingDataRequestRequest::clear_outputpointclouds() {
  _impl_.outputpointclouds_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestRequest::outputpointclouds() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
  return _internal_outputpointclouds();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestRequest::set_outputpointclouds(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpointclouds_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
}
inline std::string* getMappingDataRequestRequest::mutable_outputpointclouds() {
  std::string* _s = _internal_mutable_outputpointclouds();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
  return _s;
}
inline const std::string& getMappingDataRequestRequest::_internal_outputpointclouds() const {
  return _impl_.outputpointclouds_.Get();
}
inline void getMappingDataRequestRequest::_internal_set_outputpointclouds(const std::string& value) {
  
  _impl_.outputpointclouds_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::_internal_mutable_outputpointclouds() {
  
  return _impl_.outputpointclouds_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::release_outputpointclouds() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
  return _impl_.outputpointclouds_.Release();
}
inline void getMappingDataRequestRequest::set_allocated_outputpointclouds(std::string* outputpointclouds) {
  if (outputpointclouds != nullptr) {
    
  } else {
    
  }
  _impl_.outputpointclouds_.SetAllocated(outputpointclouds, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpointclouds_.IsDefault()) {
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestRequest.outputPointClouds)
}

// bytes keyframePoses = 5;
inline void getMappingDataRequestRequest::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestRequest::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestRequest::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
}
inline std::string* getMappingDataRequestRequest::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
  return _s;
}
inline const std::string& getMappingDataRequestRequest::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getMappingDataRequestRequest::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestRequest::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getMappingDataRequestRequest::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestRequest.keyframePoses)
}

// -------------------------------------------------------------------

// getMappingDataRequestResponse

// bytes outputPointClouds = 1;
inline void getMappingDataRequestResponse::clear_outputpointclouds() {
  _impl_.outputpointclouds_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestResponse::outputpointclouds() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
  return _internal_outputpointclouds();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestResponse::set_outputpointclouds(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpointclouds_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
}
inline std::string* getMappingDataRequestResponse::mutable_outputpointclouds() {
  std::string* _s = _internal_mutable_outputpointclouds();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
  return _s;
}
inline const std::string& getMappingDataRequestResponse::_internal_outputpointclouds() const {
  return _impl_.outputpointclouds_.Get();
}
inline void getMappingDataRequestResponse::_internal_set_outputpointclouds(const std::string& value) {
  
  _impl_.outputpointclouds_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestResponse::_internal_mutable_outputpointclouds() {
  
  return _impl_.outputpointclouds_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestResponse::release_outputpointclouds() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
  return _impl_.outputpointclouds_.Release();
}
inline void getMappingDataRequestResponse::set_allocated_outputpointclouds(std::string* outputpointclouds) {
  if (outputpointclouds != nullptr) {
    
  } else {
    
  }
  _impl_.outputpointclouds_.SetAllocated(outputpointclouds, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpointclouds_.IsDefault()) {
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestResponse.outputPointClouds)
}

// bytes keyframePoses = 2;
inline void getMappingDataRequestResponse::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getMappingDataRequestResponse::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMappingDataRequestResponse::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
}
inline std::string* getMappingDataRequestResponse::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
  return _s;
}
inline const std::string& getMappingDataRequestResponse::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getMappingDataRequestResponse::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getMappingDataRequestResponse::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getMappingDataRequestResponse::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getMappingDataRequestResponse::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMappingDataRequestResponse.keyframePoses)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getMappingDataRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMappingDataRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMappingDataRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMappingDataRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMappingDataRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMappingDataRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMappingDataRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getClientPoseRequest

// int32 grpcServerCompressionFormat = 1;
inline void getClientPoseRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getClientPoseRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getClientPoseRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getClientPoseRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getClientPoseRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getClientPoseRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getClientPoseRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientPoseRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseRequest.accessToken)
}
inline std::string* getClientPoseRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientPoseRequest.accessToken)
  return _s;
}
inline const std::string& getClientPoseRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getClientPoseRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientPoseRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getClientPoseRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientPoseRequest.accessToken)
}

// string clientUUID = 3;
inline void getClientPoseRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& getClientPoseRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientPoseRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseRequest.clientUUID)
}
inline std::string* getClientPoseRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientPoseRequest.clientUUID)
  return _s;
}
inline const std::string& getClientPoseRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void getClientPoseRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientPoseRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void getClientPoseRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientPoseRequest.clientUUID)
}

// sint32 poseType = 4;
inline void getClientPoseRequest::clear_posetype() {
  _impl_.posetype_ = 0;
}
inline int32_t getClientPoseRequest::_internal_posetype() const {
  return _impl_.posetype_;
}
inline int32_t getClientPoseRequest::posetype() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseRequest.poseType)
  return _internal_posetype();
}
inline void getClientPoseRequest::_internal_set_posetype(int32_t value) {
  
  _impl_.posetype_ = value;
}
inline void getClientPoseRequest::set_posetype(int32_t value) {
  _internal_set_posetype(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseRequest.poseType)
}

// sint32 transform3DStatus = 5;
inline void getClientPoseRequest::clear_transform3dstatus() {
  _impl_.transform3dstatus_ = 0;
}
inline int32_t getClientPoseRequest::_internal_transform3dstatus() const {
  return _impl_.transform3dstatus_;
}
inline int32_t getClientPoseRequest::transform3dstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseRequest.transform3DStatus)
  return _internal_transform3dstatus();
}
inline void getClientPoseRequest::_internal_set_transform3dstatus(int32_t value) {
  
  _impl_.transform3dstatus_ = value;
}
inline void getClientPoseRequest::set_transform3dstatus(int32_t value) {
  _internal_set_transform3dstatus(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseRequest.transform3DStatus)
}

// bytes transform3D = 6;
inline void getClientPoseRequest::clear_transform3d() {
  _impl_.transform3d_.ClearToEmpty();
}
inline const std::string& getClientPoseRequest::transform3d() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseRequest.transform3D)
  return _internal_transform3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientPoseRequest::set_transform3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseRequest.transform3D)
}
inline std::string* getClientPoseRequest::mutable_transform3d() {
  std::string* _s = _internal_mutable_transform3d();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientPoseRequest.transform3D)
  return _s;
}
inline const std::string& getClientPoseRequest::_internal_transform3d() const {
  return _impl_.transform3d_.Get();
}
inline void getClientPoseRequest::_internal_set_transform3d(const std::string& value) {
  
  _impl_.transform3d_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::_internal_mutable_transform3d() {
  
  return _impl_.transform3d_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::release_transform3d() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientPoseRequest.transform3D)
  return _impl_.transform3d_.Release();
}
inline void getClientPoseRequest::set_allocated_transform3d(std::string* transform3d) {
  if (transform3d != nullptr) {
    
  } else {
    
  }
  _impl_.transform3d_.SetAllocated(transform3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3d_.IsDefault()) {
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientPoseRequest.transform3D)
}

// bytes confidence = 7;
inline void getClientPoseRequest::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& getClientPoseRequest::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseRequest.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientPoseRequest::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseRequest.confidence)
}
inline std::string* getClientPoseRequest::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientPoseRequest.confidence)
  return _s;
}
inline const std::string& getClientPoseRequest::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void getClientPoseRequest::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientPoseRequest.confidence)
  return _impl_.confidence_.Release();
}
inline void getClientPoseRequest::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientPoseRequest.confidence)
}

// bytes pose = 8;
inline void getClientPoseRequest::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& getClientPoseRequest::pose() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseRequest.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientPoseRequest::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseRequest.pose)
}
inline std::string* getClientPoseRequest::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientPoseRequest.pose)
  return _s;
}
inline const std::string& getClientPoseRequest::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void getClientPoseRequest::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientPoseRequest::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientPoseRequest.pose)
  return _impl_.pose_.Release();
}
inline void getClientPoseRequest::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientPoseRequest.pose)
}

// -------------------------------------------------------------------

// getClientPoseResponse

// sint32 transform3DStatus = 1;
inline void getClientPoseResponse::clear_transform3dstatus() {
  _impl_.transform3dstatus_ = 0;
}
inline int32_t getClientPoseResponse::_internal_transform3dstatus() const {
  return _impl_.transform3dstatus_;
}
inline int32_t getClientPoseResponse::transform3dstatus() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseResponse.transform3DStatus)
  return _internal_transform3dstatus();
}
inline void getClientPoseResponse::_internal_set_transform3dstatus(int32_t value) {
  
  _impl_.transform3dstatus_ = value;
}
inline void getClientPoseResponse::set_transform3dstatus(int32_t value) {
  _internal_set_transform3dstatus(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseResponse.transform3DStatus)
}

// bytes transform3D = 2;
inline void getClientPoseResponse::clear_transform3d() {
  _impl_.transform3d_.ClearToEmpty();
}
inline const std::string& getClientPoseResponse::transform3d() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseResponse.transform3D)
  return _internal_transform3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientPoseResponse::set_transform3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseResponse.transform3D)
}
inline std::string* getClientPoseResponse::mutable_transform3d() {
  std::string* _s = _internal_mutable_transform3d();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientPoseResponse.transform3D)
  return _s;
}
inline const std::string& getClientPoseResponse::_internal_transform3d() const {
  return _impl_.transform3d_.Get();
}
inline void getClientPoseResponse::_internal_set_transform3d(const std::string& value) {
  
  _impl_.transform3d_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientPoseResponse::_internal_mutable_transform3d() {
  
  return _impl_.transform3d_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientPoseResponse::release_transform3d() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientPoseResponse.transform3D)
  return _impl_.transform3d_.Release();
}
inline void getClientPoseResponse::set_allocated_transform3d(std::string* transform3d) {
  if (transform3d != nullptr) {
    
  } else {
    
  }
  _impl_.transform3d_.SetAllocated(transform3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform3d_.IsDefault()) {
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientPoseResponse.transform3D)
}

// bytes confidence = 3;
inline void getClientPoseResponse::clear_confidence() {
  _impl_.confidence_.ClearToEmpty();
}
inline const std::string& getClientPoseResponse::confidence() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseResponse.confidence)
  return _internal_confidence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientPoseResponse::set_confidence(ArgT0&& arg0, ArgT... args) {
 
 _impl_.confidence_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseResponse.confidence)
}
inline std::string* getClientPoseResponse::mutable_confidence() {
  std::string* _s = _internal_mutable_confidence();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientPoseResponse.confidence)
  return _s;
}
inline const std::string& getClientPoseResponse::_internal_confidence() const {
  return _impl_.confidence_.Get();
}
inline void getClientPoseResponse::_internal_set_confidence(const std::string& value) {
  
  _impl_.confidence_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientPoseResponse::_internal_mutable_confidence() {
  
  return _impl_.confidence_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientPoseResponse::release_confidence() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientPoseResponse.confidence)
  return _impl_.confidence_.Release();
}
inline void getClientPoseResponse::set_allocated_confidence(std::string* confidence) {
  if (confidence != nullptr) {
    
  } else {
    
  }
  _impl_.confidence_.SetAllocated(confidence, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.confidence_.IsDefault()) {
    _impl_.confidence_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientPoseResponse.confidence)
}

// bytes pose = 4;
inline void getClientPoseResponse::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& getClientPoseResponse::pose() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseResponse.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientPoseResponse::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseResponse.pose)
}
inline std::string* getClientPoseResponse::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientPoseResponse.pose)
  return _s;
}
inline const std::string& getClientPoseResponse::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void getClientPoseResponse::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientPoseResponse::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientPoseResponse::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientPoseResponse.pose)
  return _impl_.pose_.Release();
}
inline void getClientPoseResponse::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientPoseResponse.pose)
}

// sint32 xpcfGrpcReturnValue = 5;
inline void getClientPoseResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getClientPoseResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getClientPoseResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientPoseResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getClientPoseResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getClientPoseResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientPoseResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// createMapRequest

// int32 grpcServerCompressionFormat = 1;
inline void createMapRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t createMapRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t createMapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.createMapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void createMapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void createMapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.createMapRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void createMapRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& createMapRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.createMapRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void createMapRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.createMapRequest.accessToken)
}
inline std::string* createMapRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.createMapRequest.accessToken)
  return _s;
}
inline const std::string& createMapRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void createMapRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* createMapRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* createMapRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.createMapRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void createMapRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.createMapRequest.accessToken)
}

// string mapUUID = 3;
inline void createMapRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& createMapRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.createMapRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void createMapRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.createMapRequest.mapUUID)
}
inline std::string* createMapRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.createMapRequest.mapUUID)
  return _s;
}
inline const std::string& createMapRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void createMapRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* createMapRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* createMapRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.createMapRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void createMapRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.createMapRequest.mapUUID)
}

// -------------------------------------------------------------------

// createMapResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void createMapResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t createMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t createMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.createMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void createMapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void createMapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.createMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// deleteMapRequest

// int32 grpcServerCompressionFormat = 1;
inline void deleteMapRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t deleteMapRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t deleteMapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.deleteMapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void deleteMapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void deleteMapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.deleteMapRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void deleteMapRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& deleteMapRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.deleteMapRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void deleteMapRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.deleteMapRequest.accessToken)
}
inline std::string* deleteMapRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.deleteMapRequest.accessToken)
  return _s;
}
inline const std::string& deleteMapRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void deleteMapRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* deleteMapRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* deleteMapRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.deleteMapRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void deleteMapRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.deleteMapRequest.accessToken)
}

// string mapUUID = 3;
inline void deleteMapRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& deleteMapRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.deleteMapRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void deleteMapRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.deleteMapRequest.mapUUID)
}
inline std::string* deleteMapRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.deleteMapRequest.mapUUID)
  return _s;
}
inline const std::string& deleteMapRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void deleteMapRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* deleteMapRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* deleteMapRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.deleteMapRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void deleteMapRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.deleteMapRequest.mapUUID)
}

// -------------------------------------------------------------------

// deleteMapResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void deleteMapResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t deleteMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t deleteMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.deleteMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void deleteMapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void deleteMapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.deleteMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getAllMapsUUIDRequest

// int32 grpcServerCompressionFormat = 1;
inline void getAllMapsUUIDRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getAllMapsUUIDRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getAllMapsUUIDRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllMapsUUIDRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getAllMapsUUIDRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getAllMapsUUIDRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllMapsUUIDRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getAllMapsUUIDRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getAllMapsUUIDRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllMapsUUIDRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllMapsUUIDRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllMapsUUIDRequest.accessToken)
}
inline std::string* getAllMapsUUIDRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getAllMapsUUIDRequest.accessToken)
  return _s;
}
inline const std::string& getAllMapsUUIDRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getAllMapsUUIDRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllMapsUUIDRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllMapsUUIDRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getAllMapsUUIDRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getAllMapsUUIDRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getAllMapsUUIDRequest.accessToken)
}

// bytes mapUUIDList = 3;
inline void getAllMapsUUIDRequest::clear_mapuuidlist() {
  _impl_.mapuuidlist_.ClearToEmpty();
}
inline const std::string& getAllMapsUUIDRequest::mapuuidlist() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllMapsUUIDRequest.mapUUIDList)
  return _internal_mapuuidlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllMapsUUIDRequest::set_mapuuidlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuidlist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllMapsUUIDRequest.mapUUIDList)
}
inline std::string* getAllMapsUUIDRequest::mutable_mapuuidlist() {
  std::string* _s = _internal_mutable_mapuuidlist();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getAllMapsUUIDRequest.mapUUIDList)
  return _s;
}
inline const std::string& getAllMapsUUIDRequest::_internal_mapuuidlist() const {
  return _impl_.mapuuidlist_.Get();
}
inline void getAllMapsUUIDRequest::_internal_set_mapuuidlist(const std::string& value) {
  
  _impl_.mapuuidlist_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllMapsUUIDRequest::_internal_mutable_mapuuidlist() {
  
  return _impl_.mapuuidlist_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllMapsUUIDRequest::release_mapuuidlist() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getAllMapsUUIDRequest.mapUUIDList)
  return _impl_.mapuuidlist_.Release();
}
inline void getAllMapsUUIDRequest::set_allocated_mapuuidlist(std::string* mapuuidlist) {
  if (mapuuidlist != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuidlist_.SetAllocated(mapuuidlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuidlist_.IsDefault()) {
    _impl_.mapuuidlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getAllMapsUUIDRequest.mapUUIDList)
}

// -------------------------------------------------------------------

// getAllMapsUUIDResponse

// bytes mapUUIDList = 1;
inline void getAllMapsUUIDResponse::clear_mapuuidlist() {
  _impl_.mapuuidlist_.ClearToEmpty();
}
inline const std::string& getAllMapsUUIDResponse::mapuuidlist() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllMapsUUIDResponse.mapUUIDList)
  return _internal_mapuuidlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllMapsUUIDResponse::set_mapuuidlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuidlist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllMapsUUIDResponse.mapUUIDList)
}
inline std::string* getAllMapsUUIDResponse::mutable_mapuuidlist() {
  std::string* _s = _internal_mutable_mapuuidlist();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getAllMapsUUIDResponse.mapUUIDList)
  return _s;
}
inline const std::string& getAllMapsUUIDResponse::_internal_mapuuidlist() const {
  return _impl_.mapuuidlist_.Get();
}
inline void getAllMapsUUIDResponse::_internal_set_mapuuidlist(const std::string& value) {
  
  _impl_.mapuuidlist_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllMapsUUIDResponse::_internal_mutable_mapuuidlist() {
  
  return _impl_.mapuuidlist_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllMapsUUIDResponse::release_mapuuidlist() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getAllMapsUUIDResponse.mapUUIDList)
  return _impl_.mapuuidlist_.Release();
}
inline void getAllMapsUUIDResponse::set_allocated_mapuuidlist(std::string* mapuuidlist) {
  if (mapuuidlist != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuidlist_.SetAllocated(mapuuidlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuidlist_.IsDefault()) {
    _impl_.mapuuidlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getAllMapsUUIDResponse.mapUUIDList)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getAllMapsUUIDResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getAllMapsUUIDResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getAllMapsUUIDResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getAllMapsUUIDResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getAllMapsUUIDResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getAllMapsUUIDResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getAllMapsUUIDResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getClientMapUUIDRequest

// int32 grpcServerCompressionFormat = 1;
inline void getClientMapUUIDRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getClientMapUUIDRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getClientMapUUIDRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientMapUUIDRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getClientMapUUIDRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getClientMapUUIDRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientMapUUIDRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getClientMapUUIDRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getClientMapUUIDRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientMapUUIDRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientMapUUIDRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientMapUUIDRequest.accessToken)
}
inline std::string* getClientMapUUIDRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientMapUUIDRequest.accessToken)
  return _s;
}
inline const std::string& getClientMapUUIDRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getClientMapUUIDRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientMapUUIDRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientMapUUIDRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientMapUUIDRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getClientMapUUIDRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientMapUUIDRequest.accessToken)
}

// string clientUUID = 3;
inline void getClientMapUUIDRequest::clear_clientuuid() {
  _impl_.clientuuid_.ClearToEmpty();
}
inline const std::string& getClientMapUUIDRequest::clientuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientMapUUIDRequest.clientUUID)
  return _internal_clientuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientMapUUIDRequest::set_clientuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientMapUUIDRequest.clientUUID)
}
inline std::string* getClientMapUUIDRequest::mutable_clientuuid() {
  std::string* _s = _internal_mutable_clientuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientMapUUIDRequest.clientUUID)
  return _s;
}
inline const std::string& getClientMapUUIDRequest::_internal_clientuuid() const {
  return _impl_.clientuuid_.Get();
}
inline void getClientMapUUIDRequest::_internal_set_clientuuid(const std::string& value) {
  
  _impl_.clientuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientMapUUIDRequest::_internal_mutable_clientuuid() {
  
  return _impl_.clientuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientMapUUIDRequest::release_clientuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientMapUUIDRequest.clientUUID)
  return _impl_.clientuuid_.Release();
}
inline void getClientMapUUIDRequest::set_allocated_clientuuid(std::string* clientuuid) {
  if (clientuuid != nullptr) {
    
  } else {
    
  }
  _impl_.clientuuid_.SetAllocated(clientuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientuuid_.IsDefault()) {
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientMapUUIDRequest.clientUUID)
}

// string mapUUID = 4;
inline void getClientMapUUIDRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getClientMapUUIDRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientMapUUIDRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientMapUUIDRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientMapUUIDRequest.mapUUID)
}
inline std::string* getClientMapUUIDRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientMapUUIDRequest.mapUUID)
  return _s;
}
inline const std::string& getClientMapUUIDRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getClientMapUUIDRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientMapUUIDRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientMapUUIDRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientMapUUIDRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getClientMapUUIDRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientMapUUIDRequest.mapUUID)
}

// -------------------------------------------------------------------

// getClientMapUUIDResponse

// string mapUUID = 1;
inline void getClientMapUUIDResponse::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getClientMapUUIDResponse::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientMapUUIDResponse.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientMapUUIDResponse::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientMapUUIDResponse.mapUUID)
}
inline std::string* getClientMapUUIDResponse::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientMapUUIDResponse.mapUUID)
  return _s;
}
inline const std::string& getClientMapUUIDResponse::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getClientMapUUIDResponse::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientMapUUIDResponse::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientMapUUIDResponse::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientMapUUIDResponse.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getClientMapUUIDResponse::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientMapUUIDResponse.mapUUID)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getClientMapUUIDResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getClientMapUUIDResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getClientMapUUIDResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientMapUUIDResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getClientMapUUIDResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getClientMapUUIDResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientMapUUIDResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getClientInfoForMapRequest

// int32 grpcServerCompressionFormat = 1;
inline void getClientInfoForMapRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getClientInfoForMapRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getClientInfoForMapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientInfoForMapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getClientInfoForMapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getClientInfoForMapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientInfoForMapRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getClientInfoForMapRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getClientInfoForMapRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientInfoForMapRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientInfoForMapRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientInfoForMapRequest.accessToken)
}
inline std::string* getClientInfoForMapRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientInfoForMapRequest.accessToken)
  return _s;
}
inline const std::string& getClientInfoForMapRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getClientInfoForMapRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientInfoForMapRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientInfoForMapRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientInfoForMapRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getClientInfoForMapRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientInfoForMapRequest.accessToken)
}

// string mapUUID = 3;
inline void getClientInfoForMapRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getClientInfoForMapRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientInfoForMapRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientInfoForMapRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientInfoForMapRequest.mapUUID)
}
inline std::string* getClientInfoForMapRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientInfoForMapRequest.mapUUID)
  return _s;
}
inline const std::string& getClientInfoForMapRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getClientInfoForMapRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientInfoForMapRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientInfoForMapRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientInfoForMapRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getClientInfoForMapRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientInfoForMapRequest.mapUUID)
}

// bytes clientInfoList = 4;
inline void getClientInfoForMapRequest::clear_clientinfolist() {
  _impl_.clientinfolist_.ClearToEmpty();
}
inline const std::string& getClientInfoForMapRequest::clientinfolist() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientInfoForMapRequest.clientInfoList)
  return _internal_clientinfolist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientInfoForMapRequest::set_clientinfolist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientinfolist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientInfoForMapRequest.clientInfoList)
}
inline std::string* getClientInfoForMapRequest::mutable_clientinfolist() {
  std::string* _s = _internal_mutable_clientinfolist();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientInfoForMapRequest.clientInfoList)
  return _s;
}
inline const std::string& getClientInfoForMapRequest::_internal_clientinfolist() const {
  return _impl_.clientinfolist_.Get();
}
inline void getClientInfoForMapRequest::_internal_set_clientinfolist(const std::string& value) {
  
  _impl_.clientinfolist_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientInfoForMapRequest::_internal_mutable_clientinfolist() {
  
  return _impl_.clientinfolist_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientInfoForMapRequest::release_clientinfolist() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientInfoForMapRequest.clientInfoList)
  return _impl_.clientinfolist_.Release();
}
inline void getClientInfoForMapRequest::set_allocated_clientinfolist(std::string* clientinfolist) {
  if (clientinfolist != nullptr) {
    
  } else {
    
  }
  _impl_.clientinfolist_.SetAllocated(clientinfolist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientinfolist_.IsDefault()) {
    _impl_.clientinfolist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientInfoForMapRequest.clientInfoList)
}

// -------------------------------------------------------------------

// getClientInfoForMapResponse

// bytes clientInfoList = 1;
inline void getClientInfoForMapResponse::clear_clientinfolist() {
  _impl_.clientinfolist_.ClearToEmpty();
}
inline const std::string& getClientInfoForMapResponse::clientinfolist() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientInfoForMapResponse.clientInfoList)
  return _internal_clientinfolist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getClientInfoForMapResponse::set_clientinfolist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientinfolist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientInfoForMapResponse.clientInfoList)
}
inline std::string* getClientInfoForMapResponse::mutable_clientinfolist() {
  std::string* _s = _internal_mutable_clientinfolist();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getClientInfoForMapResponse.clientInfoList)
  return _s;
}
inline const std::string& getClientInfoForMapResponse::_internal_clientinfolist() const {
  return _impl_.clientinfolist_.Get();
}
inline void getClientInfoForMapResponse::_internal_set_clientinfolist(const std::string& value) {
  
  _impl_.clientinfolist_.Set(value, GetArenaForAllocation());
}
inline std::string* getClientInfoForMapResponse::_internal_mutable_clientinfolist() {
  
  return _impl_.clientinfolist_.Mutable(GetArenaForAllocation());
}
inline std::string* getClientInfoForMapResponse::release_clientinfolist() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getClientInfoForMapResponse.clientInfoList)
  return _impl_.clientinfolist_.Release();
}
inline void getClientInfoForMapResponse::set_allocated_clientinfolist(std::string* clientinfolist) {
  if (clientinfolist != nullptr) {
    
  } else {
    
  }
  _impl_.clientinfolist_.SetAllocated(clientinfolist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientinfolist_.IsDefault()) {
    _impl_.clientinfolist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getClientInfoForMapResponse.clientInfoList)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getClientInfoForMapResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getClientInfoForMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getClientInfoForMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getClientInfoForMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getClientInfoForMapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getClientInfoForMapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getClientInfoForMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMapRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMapRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMapRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMapRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMapRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMapRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getMapRequestRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getMapRequestRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestRequest.accessToken)
}
inline std::string* getMapRequestRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapRequestRequest.accessToken)
  return _s;
}
inline const std::string& getMapRequestRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getMapRequestRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapRequestRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getMapRequestRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapRequestRequest.accessToken)
}

// string mapUUID = 3;
inline void getMapRequestRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getMapRequestRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestRequest.mapUUID)
}
inline std::string* getMapRequestRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapRequestRequest.mapUUID)
  return _s;
}
inline const std::string& getMapRequestRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getMapRequestRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapRequestRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getMapRequestRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapRequestRequest.mapUUID)
}

// bool withKeyframeImages = 4;
inline void getMapRequestRequest::clear_withkeyframeimages() {
  _impl_.withkeyframeimages_ = false;
}
inline bool getMapRequestRequest::_internal_withkeyframeimages() const {
  return _impl_.withkeyframeimages_;
}
inline bool getMapRequestRequest::withkeyframeimages() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestRequest.withKeyframeImages)
  return _internal_withkeyframeimages();
}
inline void getMapRequestRequest::_internal_set_withkeyframeimages(bool value) {
  
  _impl_.withkeyframeimages_ = value;
}
inline void getMapRequestRequest::set_withkeyframeimages(bool value) {
  _internal_set_withkeyframeimages(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestRequest.withKeyframeImages)
}

// bytes mapDatastructure = 5;
inline void getMapRequestRequest::clear_mapdatastructure() {
  _impl_.mapdatastructure_.ClearToEmpty();
}
inline const std::string& getMapRequestRequest::mapdatastructure() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestRequest.mapDatastructure)
  return _internal_mapdatastructure();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestRequest::set_mapdatastructure(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapdatastructure_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestRequest.mapDatastructure)
}
inline std::string* getMapRequestRequest::mutable_mapdatastructure() {
  std::string* _s = _internal_mutable_mapdatastructure();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapRequestRequest.mapDatastructure)
  return _s;
}
inline const std::string& getMapRequestRequest::_internal_mapdatastructure() const {
  return _impl_.mapdatastructure_.Get();
}
inline void getMapRequestRequest::_internal_set_mapdatastructure(const std::string& value) {
  
  _impl_.mapdatastructure_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::_internal_mutable_mapdatastructure() {
  
  return _impl_.mapdatastructure_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::release_mapdatastructure() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapRequestRequest.mapDatastructure)
  return _impl_.mapdatastructure_.Release();
}
inline void getMapRequestRequest::set_allocated_mapdatastructure(std::string* mapdatastructure) {
  if (mapdatastructure != nullptr) {
    
  } else {
    
  }
  _impl_.mapdatastructure_.SetAllocated(mapdatastructure, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapdatastructure_.IsDefault()) {
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapRequestRequest.mapDatastructure)
}

// -------------------------------------------------------------------

// getMapRequestResponse

// bytes mapDatastructure = 1;
inline void getMapRequestResponse::clear_mapdatastructure() {
  _impl_.mapdatastructure_.ClearToEmpty();
}
inline const std::string& getMapRequestResponse::mapdatastructure() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestResponse.mapDatastructure)
  return _internal_mapdatastructure();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestResponse::set_mapdatastructure(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapdatastructure_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestResponse.mapDatastructure)
}
inline std::string* getMapRequestResponse::mutable_mapdatastructure() {
  std::string* _s = _internal_mutable_mapdatastructure();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapRequestResponse.mapDatastructure)
  return _s;
}
inline const std::string& getMapRequestResponse::_internal_mapdatastructure() const {
  return _impl_.mapdatastructure_.Get();
}
inline void getMapRequestResponse::_internal_set_mapdatastructure(const std::string& value) {
  
  _impl_.mapdatastructure_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestResponse::_internal_mutable_mapdatastructure() {
  
  return _impl_.mapdatastructure_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestResponse::release_mapdatastructure() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapRequestResponse.mapDatastructure)
  return _impl_.mapdatastructure_.Release();
}
inline void getMapRequestResponse::set_allocated_mapdatastructure(std::string* mapdatastructure) {
  if (mapdatastructure != nullptr) {
    
  } else {
    
  }
  _impl_.mapdatastructure_.SetAllocated(mapdatastructure, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapdatastructure_.IsDefault()) {
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapRequestResponse.mapDatastructure)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getMapRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMapRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMapRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMapRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMapRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setMapRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void setMapRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setMapRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setMapRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setMapRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setMapRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setMapRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setMapRequestRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void setMapRequestRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& setMapRequestRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setMapRequestRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setMapRequestRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setMapRequestRequest.accessToken)
}
inline std::string* setMapRequestRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setMapRequestRequest.accessToken)
  return _s;
}
inline const std::string& setMapRequestRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void setMapRequestRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setMapRequestRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void setMapRequestRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setMapRequestRequest.accessToken)
}

// string mapUUID = 3;
inline void setMapRequestRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& setMapRequestRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setMapRequestRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setMapRequestRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setMapRequestRequest.mapUUID)
}
inline std::string* setMapRequestRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setMapRequestRequest.mapUUID)
  return _s;
}
inline const std::string& setMapRequestRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void setMapRequestRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setMapRequestRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void setMapRequestRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setMapRequestRequest.mapUUID)
}

// bytes mapDatastructure = 4;
inline void setMapRequestRequest::clear_mapdatastructure() {
  _impl_.mapdatastructure_.ClearToEmpty();
}
inline const std::string& setMapRequestRequest::mapdatastructure() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setMapRequestRequest.mapDatastructure)
  return _internal_mapdatastructure();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setMapRequestRequest::set_mapdatastructure(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapdatastructure_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setMapRequestRequest.mapDatastructure)
}
inline std::string* setMapRequestRequest::mutable_mapdatastructure() {
  std::string* _s = _internal_mutable_mapdatastructure();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.setMapRequestRequest.mapDatastructure)
  return _s;
}
inline const std::string& setMapRequestRequest::_internal_mapdatastructure() const {
  return _impl_.mapdatastructure_.Get();
}
inline void setMapRequestRequest::_internal_set_mapdatastructure(const std::string& value) {
  
  _impl_.mapdatastructure_.Set(value, GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::_internal_mutable_mapdatastructure() {
  
  return _impl_.mapdatastructure_.Mutable(GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::release_mapdatastructure() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.setMapRequestRequest.mapDatastructure)
  return _impl_.mapdatastructure_.Release();
}
inline void setMapRequestRequest::set_allocated_mapdatastructure(std::string* mapdatastructure) {
  if (mapdatastructure != nullptr) {
    
  } else {
    
  }
  _impl_.mapdatastructure_.SetAllocated(mapdatastructure, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapdatastructure_.IsDefault()) {
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.setMapRequestRequest.mapDatastructure)
}

// -------------------------------------------------------------------

// setMapRequestResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setMapRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setMapRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setMapRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.setMapRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setMapRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setMapRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.setMapRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPointCloudRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void getPointCloudRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getPointCloudRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getPointCloudRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getPointCloudRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getPointCloudRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getPointCloudRequestRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getPointCloudRequestRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequestRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestRequest.accessToken)
}
inline std::string* getPointCloudRequestRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getPointCloudRequestRequest.accessToken)
  return _s;
}
inline const std::string& getPointCloudRequestRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getPointCloudRequestRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getPointCloudRequestRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getPointCloudRequestRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getPointCloudRequestRequest.accessToken)
}

// string mapUUID = 3;
inline void getPointCloudRequestRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getPointCloudRequestRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequestRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestRequest.mapUUID)
}
inline std::string* getPointCloudRequestRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getPointCloudRequestRequest.mapUUID)
  return _s;
}
inline const std::string& getPointCloudRequestRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getPointCloudRequestRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getPointCloudRequestRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getPointCloudRequestRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getPointCloudRequestRequest.mapUUID)
}

// bytes pointCloud = 4;
inline void getPointCloudRequestRequest::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudRequestRequest::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequestRequest::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
}
inline std::string* getPointCloudRequestRequest::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
  return _s;
}
inline const std::string& getPointCloudRequestRequest::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getPointCloudRequestRequest::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getPointCloudRequestRequest::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getPointCloudRequestRequest.pointCloud)
}

// -------------------------------------------------------------------

// getPointCloudRequestResponse

// bytes pointCloud = 1;
inline void getPointCloudRequestResponse::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudRequestResponse::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequestResponse::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
}
inline std::string* getPointCloudRequestResponse::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
  return _s;
}
inline const std::string& getPointCloudRequestResponse::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getPointCloudRequestResponse::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequestResponse::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequestResponse::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getPointCloudRequestResponse::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getPointCloudRequestResponse.pointCloud)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getPointCloudRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getPointCloudRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getPointCloudRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getPointCloudRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getPointCloudRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getPointCloudRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getPointCloudRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMapInfoRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMapInfoRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMapInfoRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMapInfoRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMapInfoRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMapInfoRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getMapInfoRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getMapInfoRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapInfoRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoRequest.accessToken)
}
inline std::string* getMapInfoRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapInfoRequest.accessToken)
  return _s;
}
inline const std::string& getMapInfoRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getMapInfoRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapInfoRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapInfoRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapInfoRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getMapInfoRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapInfoRequest.accessToken)
}

// string mapUUID = 3;
inline void getMapInfoRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getMapInfoRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapInfoRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoRequest.mapUUID)
}
inline std::string* getMapInfoRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapInfoRequest.mapUUID)
  return _s;
}
inline const std::string& getMapInfoRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getMapInfoRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapInfoRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapInfoRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapInfoRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getMapInfoRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapInfoRequest.mapUUID)
}

// sint32 descriptorType = 4;
inline void getMapInfoRequest::clear_descriptortype() {
  _impl_.descriptortype_ = 0;
}
inline int32_t getMapInfoRequest::_internal_descriptortype() const {
  return _impl_.descriptortype_;
}
inline int32_t getMapInfoRequest::descriptortype() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoRequest.descriptorType)
  return _internal_descriptortype();
}
inline void getMapInfoRequest::_internal_set_descriptortype(int32_t value) {
  
  _impl_.descriptortype_ = value;
}
inline void getMapInfoRequest::set_descriptortype(int32_t value) {
  _internal_set_descriptortype(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoRequest.descriptorType)
}

// uint32 mapSupportedTypes = 5;
inline void getMapInfoRequest::clear_mapsupportedtypes() {
  _impl_.mapsupportedtypes_ = 0u;
}
inline uint32_t getMapInfoRequest::_internal_mapsupportedtypes() const {
  return _impl_.mapsupportedtypes_;
}
inline uint32_t getMapInfoRequest::mapsupportedtypes() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoRequest.mapSupportedTypes)
  return _internal_mapsupportedtypes();
}
inline void getMapInfoRequest::_internal_set_mapsupportedtypes(uint32_t value) {
  
  _impl_.mapsupportedtypes_ = value;
}
inline void getMapInfoRequest::set_mapsupportedtypes(uint32_t value) {
  _internal_set_mapsupportedtypes(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoRequest.mapSupportedTypes)
}

// uint32 dataSize = 6;
inline void getMapInfoRequest::clear_datasize() {
  _impl_.datasize_ = 0u;
}
inline uint32_t getMapInfoRequest::_internal_datasize() const {
  return _impl_.datasize_;
}
inline uint32_t getMapInfoRequest::datasize() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoRequest.dataSize)
  return _internal_datasize();
}
inline void getMapInfoRequest::_internal_set_datasize(uint32_t value) {
  
  _impl_.datasize_ = value;
}
inline void getMapInfoRequest::set_datasize(uint32_t value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoRequest.dataSize)
}

// bool areImageSaved = 7;
inline void getMapInfoRequest::clear_areimagesaved() {
  _impl_.areimagesaved_ = false;
}
inline bool getMapInfoRequest::_internal_areimagesaved() const {
  return _impl_.areimagesaved_;
}
inline bool getMapInfoRequest::areimagesaved() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoRequest.areImageSaved)
  return _internal_areimagesaved();
}
inline void getMapInfoRequest::_internal_set_areimagesaved(bool value) {
  
  _impl_.areimagesaved_ = value;
}
inline void getMapInfoRequest::set_areimagesaved(bool value) {
  _internal_set_areimagesaved(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoRequest.areImageSaved)
}

// -------------------------------------------------------------------

// getMapInfoResponse

// sint32 descriptorType = 1;
inline void getMapInfoResponse::clear_descriptortype() {
  _impl_.descriptortype_ = 0;
}
inline int32_t getMapInfoResponse::_internal_descriptortype() const {
  return _impl_.descriptortype_;
}
inline int32_t getMapInfoResponse::descriptortype() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoResponse.descriptorType)
  return _internal_descriptortype();
}
inline void getMapInfoResponse::_internal_set_descriptortype(int32_t value) {
  
  _impl_.descriptortype_ = value;
}
inline void getMapInfoResponse::set_descriptortype(int32_t value) {
  _internal_set_descriptortype(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoResponse.descriptorType)
}

// uint32 mapSupportedTypes = 2;
inline void getMapInfoResponse::clear_mapsupportedtypes() {
  _impl_.mapsupportedtypes_ = 0u;
}
inline uint32_t getMapInfoResponse::_internal_mapsupportedtypes() const {
  return _impl_.mapsupportedtypes_;
}
inline uint32_t getMapInfoResponse::mapsupportedtypes() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoResponse.mapSupportedTypes)
  return _internal_mapsupportedtypes();
}
inline void getMapInfoResponse::_internal_set_mapsupportedtypes(uint32_t value) {
  
  _impl_.mapsupportedtypes_ = value;
}
inline void getMapInfoResponse::set_mapsupportedtypes(uint32_t value) {
  _internal_set_mapsupportedtypes(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoResponse.mapSupportedTypes)
}

// uint32 dataSize = 3;
inline void getMapInfoResponse::clear_datasize() {
  _impl_.datasize_ = 0u;
}
inline uint32_t getMapInfoResponse::_internal_datasize() const {
  return _impl_.datasize_;
}
inline uint32_t getMapInfoResponse::datasize() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoResponse.dataSize)
  return _internal_datasize();
}
inline void getMapInfoResponse::_internal_set_datasize(uint32_t value) {
  
  _impl_.datasize_ = value;
}
inline void getMapInfoResponse::set_datasize(uint32_t value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoResponse.dataSize)
}

// bool areImageSaved = 4;
inline void getMapInfoResponse::clear_areimagesaved() {
  _impl_.areimagesaved_ = false;
}
inline bool getMapInfoResponse::_internal_areimagesaved() const {
  return _impl_.areimagesaved_;
}
inline bool getMapInfoResponse::areimagesaved() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoResponse.areImageSaved)
  return _internal_areimagesaved();
}
inline void getMapInfoResponse::_internal_set_areimagesaved(bool value) {
  
  _impl_.areimagesaved_ = value;
}
inline void getMapInfoResponse::set_areimagesaved(bool value) {
  _internal_set_areimagesaved(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoResponse.areImageSaved)
}

// sint32 xpcfGrpcReturnValue = 5;
inline void getMapInfoResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMapInfoResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMapInfoResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapInfoResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMapInfoResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMapInfoResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapInfoResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// requestMapProcessingRequest

// int32 grpcServerCompressionFormat = 1;
inline void requestMapProcessingRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t requestMapProcessingRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t requestMapProcessingRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.requestMapProcessingRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void requestMapProcessingRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void requestMapProcessingRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.requestMapProcessingRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void requestMapProcessingRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& requestMapProcessingRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.requestMapProcessingRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void requestMapProcessingRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.requestMapProcessingRequest.accessToken)
}
inline std::string* requestMapProcessingRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.requestMapProcessingRequest.accessToken)
  return _s;
}
inline const std::string& requestMapProcessingRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void requestMapProcessingRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* requestMapProcessingRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* requestMapProcessingRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.requestMapProcessingRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void requestMapProcessingRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.requestMapProcessingRequest.accessToken)
}

// string mapUUID = 3;
inline void requestMapProcessingRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& requestMapProcessingRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.requestMapProcessingRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void requestMapProcessingRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.requestMapProcessingRequest.mapUUID)
}
inline std::string* requestMapProcessingRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.requestMapProcessingRequest.mapUUID)
  return _s;
}
inline const std::string& requestMapProcessingRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void requestMapProcessingRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* requestMapProcessingRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* requestMapProcessingRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.requestMapProcessingRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void requestMapProcessingRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.requestMapProcessingRequest.mapUUID)
}

// string resultMapUUID = 4;
inline void requestMapProcessingRequest::clear_resultmapuuid() {
  _impl_.resultmapuuid_.ClearToEmpty();
}
inline const std::string& requestMapProcessingRequest::resultmapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.requestMapProcessingRequest.resultMapUUID)
  return _internal_resultmapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void requestMapProcessingRequest::set_resultmapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resultmapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.requestMapProcessingRequest.resultMapUUID)
}
inline std::string* requestMapProcessingRequest::mutable_resultmapuuid() {
  std::string* _s = _internal_mutable_resultmapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.requestMapProcessingRequest.resultMapUUID)
  return _s;
}
inline const std::string& requestMapProcessingRequest::_internal_resultmapuuid() const {
  return _impl_.resultmapuuid_.Get();
}
inline void requestMapProcessingRequest::_internal_set_resultmapuuid(const std::string& value) {
  
  _impl_.resultmapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* requestMapProcessingRequest::_internal_mutable_resultmapuuid() {
  
  return _impl_.resultmapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* requestMapProcessingRequest::release_resultmapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.requestMapProcessingRequest.resultMapUUID)
  return _impl_.resultmapuuid_.Release();
}
inline void requestMapProcessingRequest::set_allocated_resultmapuuid(std::string* resultmapuuid) {
  if (resultmapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.resultmapuuid_.SetAllocated(resultmapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resultmapuuid_.IsDefault()) {
    _impl_.resultmapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.requestMapProcessingRequest.resultMapUUID)
}

// sint32 processingType = 5;
inline void requestMapProcessingRequest::clear_processingtype() {
  _impl_.processingtype_ = 0;
}
inline int32_t requestMapProcessingRequest::_internal_processingtype() const {
  return _impl_.processingtype_;
}
inline int32_t requestMapProcessingRequest::processingtype() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.requestMapProcessingRequest.processingType)
  return _internal_processingtype();
}
inline void requestMapProcessingRequest::_internal_set_processingtype(int32_t value) {
  
  _impl_.processingtype_ = value;
}
inline void requestMapProcessingRequest::set_processingtype(int32_t value) {
  _internal_set_processingtype(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.requestMapProcessingRequest.processingType)
}

// -------------------------------------------------------------------

// requestMapProcessingResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void requestMapProcessingResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t requestMapProcessingResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t requestMapProcessingResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.requestMapProcessingResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void requestMapProcessingResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void requestMapProcessingResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.requestMapProcessingResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMapProcessingStatusRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMapProcessingStatusRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMapProcessingStatusRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMapProcessingStatusRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingStatusRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMapProcessingStatusRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMapProcessingStatusRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingStatusRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getMapProcessingStatusRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getMapProcessingStatusRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingStatusRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapProcessingStatusRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingStatusRequest.accessToken)
}
inline std::string* getMapProcessingStatusRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapProcessingStatusRequest.accessToken)
  return _s;
}
inline const std::string& getMapProcessingStatusRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getMapProcessingStatusRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapProcessingStatusRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapProcessingStatusRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapProcessingStatusRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getMapProcessingStatusRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapProcessingStatusRequest.accessToken)
}

// string resultMapUUID = 3;
inline void getMapProcessingStatusRequest::clear_resultmapuuid() {
  _impl_.resultmapuuid_.ClearToEmpty();
}
inline const std::string& getMapProcessingStatusRequest::resultmapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingStatusRequest.resultMapUUID)
  return _internal_resultmapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapProcessingStatusRequest::set_resultmapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resultmapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingStatusRequest.resultMapUUID)
}
inline std::string* getMapProcessingStatusRequest::mutable_resultmapuuid() {
  std::string* _s = _internal_mutable_resultmapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapProcessingStatusRequest.resultMapUUID)
  return _s;
}
inline const std::string& getMapProcessingStatusRequest::_internal_resultmapuuid() const {
  return _impl_.resultmapuuid_.Get();
}
inline void getMapProcessingStatusRequest::_internal_set_resultmapuuid(const std::string& value) {
  
  _impl_.resultmapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapProcessingStatusRequest::_internal_mutable_resultmapuuid() {
  
  return _impl_.resultmapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapProcessingStatusRequest::release_resultmapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapProcessingStatusRequest.resultMapUUID)
  return _impl_.resultmapuuid_.Release();
}
inline void getMapProcessingStatusRequest::set_allocated_resultmapuuid(std::string* resultmapuuid) {
  if (resultmapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.resultmapuuid_.SetAllocated(resultmapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resultmapuuid_.IsDefault()) {
    _impl_.resultmapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapProcessingStatusRequest.resultMapUUID)
}

// sint32 status = 4;
inline void getMapProcessingStatusRequest::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t getMapProcessingStatusRequest::_internal_status() const {
  return _impl_.status_;
}
inline int32_t getMapProcessingStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingStatusRequest.status)
  return _internal_status();
}
inline void getMapProcessingStatusRequest::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void getMapProcessingStatusRequest::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingStatusRequest.status)
}

// float progress = 5;
inline void getMapProcessingStatusRequest::clear_progress() {
  _impl_.progress_ = 0;
}
inline float getMapProcessingStatusRequest::_internal_progress() const {
  return _impl_.progress_;
}
inline float getMapProcessingStatusRequest::progress() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingStatusRequest.progress)
  return _internal_progress();
}
inline void getMapProcessingStatusRequest::_internal_set_progress(float value) {
  
  _impl_.progress_ = value;
}
inline void getMapProcessingStatusRequest::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingStatusRequest.progress)
}

// -------------------------------------------------------------------

// getMapProcessingStatusResponse

// sint32 status = 1;
inline void getMapProcessingStatusResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t getMapProcessingStatusResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t getMapProcessingStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingStatusResponse.status)
  return _internal_status();
}
inline void getMapProcessingStatusResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void getMapProcessingStatusResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingStatusResponse.status)
}

// float progress = 2;
inline void getMapProcessingStatusResponse::clear_progress() {
  _impl_.progress_ = 0;
}
inline float getMapProcessingStatusResponse::_internal_progress() const {
  return _impl_.progress_;
}
inline float getMapProcessingStatusResponse::progress() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingStatusResponse.progress)
  return _internal_progress();
}
inline void getMapProcessingStatusResponse::_internal_set_progress(float value) {
  
  _impl_.progress_ = value;
}
inline void getMapProcessingStatusResponse::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingStatusResponse.progress)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getMapProcessingStatusResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMapProcessingStatusResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMapProcessingStatusResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingStatusResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMapProcessingStatusResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMapProcessingStatusResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingStatusResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMapProcessingDataRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMapProcessingDataRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMapProcessingDataRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMapProcessingDataRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingDataRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMapProcessingDataRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMapProcessingDataRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingDataRequest.grpcServerCompressionFormat)
}

// string accessToken = 2;
inline void getMapProcessingDataRequest::clear_accesstoken() {
  _impl_.accesstoken_.ClearToEmpty();
}
inline const std::string& getMapProcessingDataRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingDataRequest.accessToken)
  return _internal_accesstoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapProcessingDataRequest::set_accesstoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.accesstoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingDataRequest.accessToken)
}
inline std::string* getMapProcessingDataRequest::mutable_accesstoken() {
  std::string* _s = _internal_mutable_accesstoken();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapProcessingDataRequest.accessToken)
  return _s;
}
inline const std::string& getMapProcessingDataRequest::_internal_accesstoken() const {
  return _impl_.accesstoken_.Get();
}
inline void getMapProcessingDataRequest::_internal_set_accesstoken(const std::string& value) {
  
  _impl_.accesstoken_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapProcessingDataRequest::_internal_mutable_accesstoken() {
  
  return _impl_.accesstoken_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapProcessingDataRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapProcessingDataRequest.accessToken)
  return _impl_.accesstoken_.Release();
}
inline void getMapProcessingDataRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  _impl_.accesstoken_.SetAllocated(accesstoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accesstoken_.IsDefault()) {
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapProcessingDataRequest.accessToken)
}

// string resultMapUUID = 3;
inline void getMapProcessingDataRequest::clear_resultmapuuid() {
  _impl_.resultmapuuid_.ClearToEmpty();
}
inline const std::string& getMapProcessingDataRequest::resultmapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingDataRequest.resultMapUUID)
  return _internal_resultmapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapProcessingDataRequest::set_resultmapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resultmapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingDataRequest.resultMapUUID)
}
inline std::string* getMapProcessingDataRequest::mutable_resultmapuuid() {
  std::string* _s = _internal_mutable_resultmapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapProcessingDataRequest.resultMapUUID)
  return _s;
}
inline const std::string& getMapProcessingDataRequest::_internal_resultmapuuid() const {
  return _impl_.resultmapuuid_.Get();
}
inline void getMapProcessingDataRequest::_internal_set_resultmapuuid(const std::string& value) {
  
  _impl_.resultmapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapProcessingDataRequest::_internal_mutable_resultmapuuid() {
  
  return _impl_.resultmapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapProcessingDataRequest::release_resultmapuuid() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapProcessingDataRequest.resultMapUUID)
  return _impl_.resultmapuuid_.Release();
}
inline void getMapProcessingDataRequest::set_allocated_resultmapuuid(std::string* resultmapuuid) {
  if (resultmapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.resultmapuuid_.SetAllocated(resultmapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resultmapuuid_.IsDefault()) {
    _impl_.resultmapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapProcessingDataRequest.resultMapUUID)
}

// bytes pointCloud = 4;
inline void getMapProcessingDataRequest::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getMapProcessingDataRequest::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingDataRequest.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapProcessingDataRequest::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingDataRequest.pointCloud)
}
inline std::string* getMapProcessingDataRequest::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapProcessingDataRequest.pointCloud)
  return _s;
}
inline const std::string& getMapProcessingDataRequest::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getMapProcessingDataRequest::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapProcessingDataRequest::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapProcessingDataRequest::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapProcessingDataRequest.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getMapProcessingDataRequest::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapProcessingDataRequest.pointCloud)
}

// bytes keyframePoses = 5;
inline void getMapProcessingDataRequest::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getMapProcessingDataRequest::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingDataRequest.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapProcessingDataRequest::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingDataRequest.keyframePoses)
}
inline std::string* getMapProcessingDataRequest::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapProcessingDataRequest.keyframePoses)
  return _s;
}
inline const std::string& getMapProcessingDataRequest::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getMapProcessingDataRequest::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapProcessingDataRequest::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapProcessingDataRequest::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapProcessingDataRequest.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getMapProcessingDataRequest::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapProcessingDataRequest.keyframePoses)
}

// -------------------------------------------------------------------

// getMapProcessingDataResponse

// bytes pointCloud = 1;
inline void getMapProcessingDataResponse::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getMapProcessingDataResponse::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingDataResponse.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapProcessingDataResponse::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingDataResponse.pointCloud)
}
inline std::string* getMapProcessingDataResponse::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapProcessingDataResponse.pointCloud)
  return _s;
}
inline const std::string& getMapProcessingDataResponse::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getMapProcessingDataResponse::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapProcessingDataResponse::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapProcessingDataResponse::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapProcessingDataResponse.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getMapProcessingDataResponse::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapProcessingDataResponse.pointCloud)
}

// bytes keyframePoses = 2;
inline void getMapProcessingDataResponse::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getMapProcessingDataResponse::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingDataResponse.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapProcessingDataResponse::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingDataResponse.keyframePoses)
}
inline std::string* getMapProcessingDataResponse::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIFrontEnd.getMapProcessingDataResponse.keyframePoses)
  return _s;
}
inline const std::string& getMapProcessingDataResponse::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getMapProcessingDataResponse::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapProcessingDataResponse::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapProcessingDataResponse::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIFrontEnd.getMapProcessingDataResponse.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getMapProcessingDataResponse::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIFrontEnd.getMapProcessingDataResponse.keyframePoses)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getMapProcessingDataResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMapProcessingDataResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMapProcessingDataResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIFrontEnd.getMapProcessingDataResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMapProcessingDataResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMapProcessingDataResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIFrontEnd.getMapProcessingDataResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIFrontEnd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIFrontEndService_2eproto
