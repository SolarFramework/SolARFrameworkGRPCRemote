// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIWorldGraphManagerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIWorldGraphManagerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIWorldGraphManagerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIWorldGraphManagerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIWorldGraphManagerService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIWorldGraphManagerService_2eproto;
namespace grpcIWorldGraphManager {
class addTrackableRequest;
struct addTrackableRequestDefaultTypeInternal;
extern addTrackableRequestDefaultTypeInternal _addTrackableRequest_default_instance_;
class addTrackableResponse;
struct addTrackableResponseDefaultTypeInternal;
extern addTrackableResponseDefaultTypeInternal _addTrackableResponse_default_instance_;
class addWorldAnchorRequest;
struct addWorldAnchorRequestDefaultTypeInternal;
extern addWorldAnchorRequestDefaultTypeInternal _addWorldAnchorRequest_default_instance_;
class addWorldAnchorResponse;
struct addWorldAnchorResponseDefaultTypeInternal;
extern addWorldAnchorResponseDefaultTypeInternal _addWorldAnchorResponse_default_instance_;
class addWorldLinkRequest;
struct addWorldLinkRequestDefaultTypeInternal;
extern addWorldLinkRequestDefaultTypeInternal _addWorldLinkRequest_default_instance_;
class addWorldLinkResponse;
struct addWorldLinkResponseDefaultTypeInternal;
extern addWorldLinkResponseDefaultTypeInternal _addWorldLinkResponse_default_instance_;
class deleteFileRequest;
struct deleteFileRequestDefaultTypeInternal;
extern deleteFileRequestDefaultTypeInternal _deleteFileRequest_default_instance_;
class deleteFileResponse;
struct deleteFileResponseDefaultTypeInternal;
extern deleteFileResponseDefaultTypeInternal _deleteFileResponse_default_instance_;
class getRelocalizationInformationRequest;
struct getRelocalizationInformationRequestDefaultTypeInternal;
extern getRelocalizationInformationRequestDefaultTypeInternal _getRelocalizationInformationRequest_default_instance_;
class getRelocalizationInformationResponse;
struct getRelocalizationInformationResponseDefaultTypeInternal;
extern getRelocalizationInformationResponseDefaultTypeInternal _getRelocalizationInformationResponse_default_instance_;
class getTrackableRequest;
struct getTrackableRequestDefaultTypeInternal;
extern getTrackableRequestDefaultTypeInternal _getTrackableRequest_default_instance_;
class getTrackableResponse;
struct getTrackableResponseDefaultTypeInternal;
extern getTrackableResponseDefaultTypeInternal _getTrackableResponse_default_instance_;
class getTrackablesRequest;
struct getTrackablesRequestDefaultTypeInternal;
extern getTrackablesRequestDefaultTypeInternal _getTrackablesRequest_default_instance_;
class getTrackablesResponse;
struct getTrackablesResponseDefaultTypeInternal;
extern getTrackablesResponseDefaultTypeInternal _getTrackablesResponse_default_instance_;
class getWorldAnchorRequest;
struct getWorldAnchorRequestDefaultTypeInternal;
extern getWorldAnchorRequestDefaultTypeInternal _getWorldAnchorRequest_default_instance_;
class getWorldAnchorResponse;
struct getWorldAnchorResponseDefaultTypeInternal;
extern getWorldAnchorResponseDefaultTypeInternal _getWorldAnchorResponse_default_instance_;
class getWorldAnchorsRequest;
struct getWorldAnchorsRequestDefaultTypeInternal;
extern getWorldAnchorsRequestDefaultTypeInternal _getWorldAnchorsRequest_default_instance_;
class getWorldAnchorsResponse;
struct getWorldAnchorsResponseDefaultTypeInternal;
extern getWorldAnchorsResponseDefaultTypeInternal _getWorldAnchorsResponse_default_instance_;
class getWorldElementByKeyRequest;
struct getWorldElementByKeyRequestDefaultTypeInternal;
extern getWorldElementByKeyRequestDefaultTypeInternal _getWorldElementByKeyRequest_default_instance_;
class getWorldElementByKeyResponse;
struct getWorldElementByKeyResponseDefaultTypeInternal;
extern getWorldElementByKeyResponseDefaultTypeInternal _getWorldElementByKeyResponse_default_instance_;
class getWorldElementByKeyValueRequest;
struct getWorldElementByKeyValueRequestDefaultTypeInternal;
extern getWorldElementByKeyValueRequestDefaultTypeInternal _getWorldElementByKeyValueRequest_default_instance_;
class getWorldElementByKeyValueResponse;
struct getWorldElementByKeyValueResponseDefaultTypeInternal;
extern getWorldElementByKeyValueResponseDefaultTypeInternal _getWorldElementByKeyValueResponse_default_instance_;
class getWorldElementRequest;
struct getWorldElementRequestDefaultTypeInternal;
extern getWorldElementRequestDefaultTypeInternal _getWorldElementRequest_default_instance_;
class getWorldElementResponse;
struct getWorldElementResponseDefaultTypeInternal;
extern getWorldElementResponseDefaultTypeInternal _getWorldElementResponse_default_instance_;
class getWorldElementsRequest;
struct getWorldElementsRequestDefaultTypeInternal;
extern getWorldElementsRequestDefaultTypeInternal _getWorldElementsRequest_default_instance_;
class getWorldElementsResponse;
struct getWorldElementsResponseDefaultTypeInternal;
extern getWorldElementsResponseDefaultTypeInternal _getWorldElementsResponse_default_instance_;
class getWorldLink_grpc0Request;
struct getWorldLink_grpc0RequestDefaultTypeInternal;
extern getWorldLink_grpc0RequestDefaultTypeInternal _getWorldLink_grpc0Request_default_instance_;
class getWorldLink_grpc0Response;
struct getWorldLink_grpc0ResponseDefaultTypeInternal;
extern getWorldLink_grpc0ResponseDefaultTypeInternal _getWorldLink_grpc0Response_default_instance_;
class getWorldLink_grpc1Request;
struct getWorldLink_grpc1RequestDefaultTypeInternal;
extern getWorldLink_grpc1RequestDefaultTypeInternal _getWorldLink_grpc1Request_default_instance_;
class getWorldLink_grpc1Response;
struct getWorldLink_grpc1ResponseDefaultTypeInternal;
extern getWorldLink_grpc1ResponseDefaultTypeInternal _getWorldLink_grpc1Response_default_instance_;
class getWorldLinksRequest;
struct getWorldLinksRequestDefaultTypeInternal;
extern getWorldLinksRequestDefaultTypeInternal _getWorldLinksRequest_default_instance_;
class getWorldLinksResponse;
struct getWorldLinksResponseDefaultTypeInternal;
extern getWorldLinksResponseDefaultTypeInternal _getWorldLinksResponse_default_instance_;
class loadFromFileRequest;
struct loadFromFileRequestDefaultTypeInternal;
extern loadFromFileRequestDefaultTypeInternal _loadFromFileRequest_default_instance_;
class loadFromFileResponse;
struct loadFromFileResponseDefaultTypeInternal;
extern loadFromFileResponseDefaultTypeInternal _loadFromFileResponse_default_instance_;
class modifyTrackableRequest;
struct modifyTrackableRequestDefaultTypeInternal;
extern modifyTrackableRequestDefaultTypeInternal _modifyTrackableRequest_default_instance_;
class modifyTrackableResponse;
struct modifyTrackableResponseDefaultTypeInternal;
extern modifyTrackableResponseDefaultTypeInternal _modifyTrackableResponse_default_instance_;
class modifyWorldAnchorRequest;
struct modifyWorldAnchorRequestDefaultTypeInternal;
extern modifyWorldAnchorRequestDefaultTypeInternal _modifyWorldAnchorRequest_default_instance_;
class modifyWorldAnchorResponse;
struct modifyWorldAnchorResponseDefaultTypeInternal;
extern modifyWorldAnchorResponseDefaultTypeInternal _modifyWorldAnchorResponse_default_instance_;
class modifyWorldLinkRequest;
struct modifyWorldLinkRequestDefaultTypeInternal;
extern modifyWorldLinkRequestDefaultTypeInternal _modifyWorldLinkRequest_default_instance_;
class modifyWorldLinkResponse;
struct modifyWorldLinkResponseDefaultTypeInternal;
extern modifyWorldLinkResponseDefaultTypeInternal _modifyWorldLinkResponse_default_instance_;
class removeTrackableRequest;
struct removeTrackableRequestDefaultTypeInternal;
extern removeTrackableRequestDefaultTypeInternal _removeTrackableRequest_default_instance_;
class removeTrackableResponse;
struct removeTrackableResponseDefaultTypeInternal;
extern removeTrackableResponseDefaultTypeInternal _removeTrackableResponse_default_instance_;
class removeWorldAnchorRequest;
struct removeWorldAnchorRequestDefaultTypeInternal;
extern removeWorldAnchorRequestDefaultTypeInternal _removeWorldAnchorRequest_default_instance_;
class removeWorldAnchorResponse;
struct removeWorldAnchorResponseDefaultTypeInternal;
extern removeWorldAnchorResponseDefaultTypeInternal _removeWorldAnchorResponse_default_instance_;
class removeWorldLink_grpc0Request;
struct removeWorldLink_grpc0RequestDefaultTypeInternal;
extern removeWorldLink_grpc0RequestDefaultTypeInternal _removeWorldLink_grpc0Request_default_instance_;
class removeWorldLink_grpc0Response;
struct removeWorldLink_grpc0ResponseDefaultTypeInternal;
extern removeWorldLink_grpc0ResponseDefaultTypeInternal _removeWorldLink_grpc0Response_default_instance_;
class removeWorldLink_grpc1Request;
struct removeWorldLink_grpc1RequestDefaultTypeInternal;
extern removeWorldLink_grpc1RequestDefaultTypeInternal _removeWorldLink_grpc1Request_default_instance_;
class removeWorldLink_grpc1Response;
struct removeWorldLink_grpc1ResponseDefaultTypeInternal;
extern removeWorldLink_grpc1ResponseDefaultTypeInternal _removeWorldLink_grpc1Response_default_instance_;
class saveToFileRequest;
struct saveToFileRequestDefaultTypeInternal;
extern saveToFileRequestDefaultTypeInternal _saveToFileRequest_default_instance_;
class saveToFileResponse;
struct saveToFileResponseDefaultTypeInternal;
extern saveToFileResponseDefaultTypeInternal _saveToFileResponse_default_instance_;
}  // namespace grpcIWorldGraphManager
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIWorldGraphManager::addTrackableRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::addTrackableRequest>(Arena*);
template<> ::grpcIWorldGraphManager::addTrackableResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::addTrackableResponse>(Arena*);
template<> ::grpcIWorldGraphManager::addWorldAnchorRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::addWorldAnchorRequest>(Arena*);
template<> ::grpcIWorldGraphManager::addWorldAnchorResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::addWorldAnchorResponse>(Arena*);
template<> ::grpcIWorldGraphManager::addWorldLinkRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::addWorldLinkRequest>(Arena*);
template<> ::grpcIWorldGraphManager::addWorldLinkResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::addWorldLinkResponse>(Arena*);
template<> ::grpcIWorldGraphManager::deleteFileRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::deleteFileRequest>(Arena*);
template<> ::grpcIWorldGraphManager::deleteFileResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::deleteFileResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getRelocalizationInformationRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getRelocalizationInformationRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getRelocalizationInformationResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getRelocalizationInformationResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getTrackableRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getTrackableRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getTrackableResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getTrackableResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getTrackablesRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getTrackablesRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getTrackablesResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getTrackablesResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldAnchorRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldAnchorRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldAnchorResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldAnchorResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldAnchorsRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldAnchorsRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldAnchorsResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldAnchorsResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldElementByKeyRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldElementByKeyRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldElementByKeyResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldElementByKeyResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldElementByKeyValueRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldElementRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldElementRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldElementResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldElementResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldElementsRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldElementsRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldElementsResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldElementsResponse>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldLink_grpc0Request* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldLink_grpc0Request>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldLink_grpc0Response* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldLink_grpc0Response>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldLink_grpc1Request* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldLink_grpc1Request>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldLink_grpc1Response* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldLink_grpc1Response>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldLinksRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldLinksRequest>(Arena*);
template<> ::grpcIWorldGraphManager::getWorldLinksResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::getWorldLinksResponse>(Arena*);
template<> ::grpcIWorldGraphManager::loadFromFileRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::loadFromFileRequest>(Arena*);
template<> ::grpcIWorldGraphManager::loadFromFileResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::loadFromFileResponse>(Arena*);
template<> ::grpcIWorldGraphManager::modifyTrackableRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::modifyTrackableRequest>(Arena*);
template<> ::grpcIWorldGraphManager::modifyTrackableResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::modifyTrackableResponse>(Arena*);
template<> ::grpcIWorldGraphManager::modifyWorldAnchorRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::modifyWorldAnchorRequest>(Arena*);
template<> ::grpcIWorldGraphManager::modifyWorldAnchorResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::modifyWorldAnchorResponse>(Arena*);
template<> ::grpcIWorldGraphManager::modifyWorldLinkRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::modifyWorldLinkRequest>(Arena*);
template<> ::grpcIWorldGraphManager::modifyWorldLinkResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::modifyWorldLinkResponse>(Arena*);
template<> ::grpcIWorldGraphManager::removeTrackableRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::removeTrackableRequest>(Arena*);
template<> ::grpcIWorldGraphManager::removeTrackableResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::removeTrackableResponse>(Arena*);
template<> ::grpcIWorldGraphManager::removeWorldAnchorRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::removeWorldAnchorRequest>(Arena*);
template<> ::grpcIWorldGraphManager::removeWorldAnchorResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::removeWorldAnchorResponse>(Arena*);
template<> ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::removeWorldLink_grpc0Request>(Arena*);
template<> ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::removeWorldLink_grpc0Response>(Arena*);
template<> ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::removeWorldLink_grpc1Request>(Arena*);
template<> ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::removeWorldLink_grpc1Response>(Arena*);
template<> ::grpcIWorldGraphManager::saveToFileRequest* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::saveToFileRequest>(Arena*);
template<> ::grpcIWorldGraphManager::saveToFileResponse* Arena::CreateMaybeMessage<::grpcIWorldGraphManager::saveToFileResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIWorldGraphManager {

// ===================================================================

class getRelocalizationInformationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getRelocalizationInformationRequest) */ {
 public:
  inline getRelocalizationInformationRequest() : getRelocalizationInformationRequest(nullptr) {}
  ~getRelocalizationInformationRequest() override;
  explicit PROTOBUF_CONSTEXPR getRelocalizationInformationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getRelocalizationInformationRequest(const getRelocalizationInformationRequest& from);
  getRelocalizationInformationRequest(getRelocalizationInformationRequest&& from) noexcept
    : getRelocalizationInformationRequest() {
    *this = ::std::move(from);
  }

  inline getRelocalizationInformationRequest& operator=(const getRelocalizationInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getRelocalizationInformationRequest& operator=(getRelocalizationInformationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getRelocalizationInformationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getRelocalizationInformationRequest* internal_default_instance() {
    return reinterpret_cast<const getRelocalizationInformationRequest*>(
               &_getRelocalizationInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(getRelocalizationInformationRequest& a, getRelocalizationInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getRelocalizationInformationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getRelocalizationInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getRelocalizationInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getRelocalizationInformationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getRelocalizationInformationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getRelocalizationInformationRequest& from) {
    getRelocalizationInformationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getRelocalizationInformationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getRelocalizationInformationRequest";
  }
  protected:
  explicit getRelocalizationInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 2,
    kTokenFieldNumber = 3,
    kCapabilityFieldNumber = 4,
    kRelocalizationInformationFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes uuids = 2;
  void clear_uuids();
  const std::string& uuids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuids();
  PROTOBUF_NODISCARD std::string* release_uuids();
  void set_allocated_uuids(std::string* uuids);
  private:
  const std::string& _internal_uuids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuids(const std::string& value);
  std::string* _internal_mutable_uuids();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // bytes capability = 4;
  void clear_capability();
  const std::string& capability() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_capability(ArgT0&& arg0, ArgT... args);
  std::string* mutable_capability();
  PROTOBUF_NODISCARD std::string* release_capability();
  void set_allocated_capability(std::string* capability);
  private:
  const std::string& _internal_capability() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_capability(const std::string& value);
  std::string* _internal_mutable_capability();
  public:

  // bytes relocalizationInformation = 5;
  void clear_relocalizationinformation();
  const std::string& relocalizationinformation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relocalizationinformation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relocalizationinformation();
  PROTOBUF_NODISCARD std::string* release_relocalizationinformation();
  void set_allocated_relocalizationinformation(std::string* relocalizationinformation);
  private:
  const std::string& _internal_relocalizationinformation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relocalizationinformation(const std::string& value);
  std::string* _internal_mutable_relocalizationinformation();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getRelocalizationInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr capability_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relocalizationinformation_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getRelocalizationInformationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getRelocalizationInformationResponse) */ {
 public:
  inline getRelocalizationInformationResponse() : getRelocalizationInformationResponse(nullptr) {}
  ~getRelocalizationInformationResponse() override;
  explicit PROTOBUF_CONSTEXPR getRelocalizationInformationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getRelocalizationInformationResponse(const getRelocalizationInformationResponse& from);
  getRelocalizationInformationResponse(getRelocalizationInformationResponse&& from) noexcept
    : getRelocalizationInformationResponse() {
    *this = ::std::move(from);
  }

  inline getRelocalizationInformationResponse& operator=(const getRelocalizationInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getRelocalizationInformationResponse& operator=(getRelocalizationInformationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getRelocalizationInformationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getRelocalizationInformationResponse* internal_default_instance() {
    return reinterpret_cast<const getRelocalizationInformationResponse*>(
               &_getRelocalizationInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(getRelocalizationInformationResponse& a, getRelocalizationInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getRelocalizationInformationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getRelocalizationInformationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getRelocalizationInformationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getRelocalizationInformationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getRelocalizationInformationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getRelocalizationInformationResponse& from) {
    getRelocalizationInformationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getRelocalizationInformationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getRelocalizationInformationResponse";
  }
  protected:
  explicit getRelocalizationInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelocalizationInformationFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes relocalizationInformation = 1;
  void clear_relocalizationinformation();
  const std::string& relocalizationinformation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relocalizationinformation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relocalizationinformation();
  PROTOBUF_NODISCARD std::string* release_relocalizationinformation();
  void set_allocated_relocalizationinformation(std::string* relocalizationinformation);
  private:
  const std::string& _internal_relocalizationinformation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relocalizationinformation(const std::string& value);
  std::string* _internal_mutable_relocalizationinformation();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getRelocalizationInformationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relocalizationinformation_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldElementRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldElementRequest) */ {
 public:
  inline getWorldElementRequest() : getWorldElementRequest(nullptr) {}
  ~getWorldElementRequest() override;
  explicit PROTOBUF_CONSTEXPR getWorldElementRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldElementRequest(const getWorldElementRequest& from);
  getWorldElementRequest(getWorldElementRequest&& from) noexcept
    : getWorldElementRequest() {
    *this = ::std::move(from);
  }

  inline getWorldElementRequest& operator=(const getWorldElementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldElementRequest& operator=(getWorldElementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldElementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldElementRequest* internal_default_instance() {
    return reinterpret_cast<const getWorldElementRequest*>(
               &_getWorldElementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(getWorldElementRequest& a, getWorldElementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldElementRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldElementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldElementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldElementRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldElementRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldElementRequest& from) {
    getWorldElementRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldElementRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldElementRequest";
  }
  protected:
  explicit getWorldElementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldElementIdFieldNumber = 2,
    kWorldElementFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes worldElementId = 2;
  void clear_worldelementid();
  const std::string& worldelementid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldelementid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldelementid();
  PROTOBUF_NODISCARD std::string* release_worldelementid();
  void set_allocated_worldelementid(std::string* worldelementid);
  private:
  const std::string& _internal_worldelementid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldelementid(const std::string& value);
  std::string* _internal_mutable_worldelementid();
  public:

  // bytes worldElement = 3;
  void clear_worldelement();
  const std::string& worldelement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldelement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldelement();
  PROTOBUF_NODISCARD std::string* release_worldelement();
  void set_allocated_worldelement(std::string* worldelement);
  private:
  const std::string& _internal_worldelement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldelement(const std::string& value);
  std::string* _internal_mutable_worldelement();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldElementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldelementid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldelement_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldElementResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldElementResponse) */ {
 public:
  inline getWorldElementResponse() : getWorldElementResponse(nullptr) {}
  ~getWorldElementResponse() override;
  explicit PROTOBUF_CONSTEXPR getWorldElementResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldElementResponse(const getWorldElementResponse& from);
  getWorldElementResponse(getWorldElementResponse&& from) noexcept
    : getWorldElementResponse() {
    *this = ::std::move(from);
  }

  inline getWorldElementResponse& operator=(const getWorldElementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldElementResponse& operator=(getWorldElementResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldElementResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldElementResponse* internal_default_instance() {
    return reinterpret_cast<const getWorldElementResponse*>(
               &_getWorldElementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(getWorldElementResponse& a, getWorldElementResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldElementResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldElementResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldElementResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldElementResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldElementResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldElementResponse& from) {
    getWorldElementResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldElementResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldElementResponse";
  }
  protected:
  explicit getWorldElementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldElementFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes worldElement = 1;
  void clear_worldelement();
  const std::string& worldelement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldelement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldelement();
  PROTOBUF_NODISCARD std::string* release_worldelement();
  void set_allocated_worldelement(std::string* worldelement);
  private:
  const std::string& _internal_worldelement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldelement(const std::string& value);
  std::string* _internal_mutable_worldelement();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldElementResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldelement_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldElementsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldElementsRequest) */ {
 public:
  inline getWorldElementsRequest() : getWorldElementsRequest(nullptr) {}
  ~getWorldElementsRequest() override;
  explicit PROTOBUF_CONSTEXPR getWorldElementsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldElementsRequest(const getWorldElementsRequest& from);
  getWorldElementsRequest(getWorldElementsRequest&& from) noexcept
    : getWorldElementsRequest() {
    *this = ::std::move(from);
  }

  inline getWorldElementsRequest& operator=(const getWorldElementsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldElementsRequest& operator=(getWorldElementsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldElementsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldElementsRequest* internal_default_instance() {
    return reinterpret_cast<const getWorldElementsRequest*>(
               &_getWorldElementsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getWorldElementsRequest& a, getWorldElementsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldElementsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldElementsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldElementsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldElementsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldElementsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldElementsRequest& from) {
    getWorldElementsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldElementsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldElementsRequest";
  }
  protected:
  explicit getWorldElementsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes vector = 2;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldElementsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldElementsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldElementsResponse) */ {
 public:
  inline getWorldElementsResponse() : getWorldElementsResponse(nullptr) {}
  ~getWorldElementsResponse() override;
  explicit PROTOBUF_CONSTEXPR getWorldElementsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldElementsResponse(const getWorldElementsResponse& from);
  getWorldElementsResponse(getWorldElementsResponse&& from) noexcept
    : getWorldElementsResponse() {
    *this = ::std::move(from);
  }

  inline getWorldElementsResponse& operator=(const getWorldElementsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldElementsResponse& operator=(getWorldElementsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldElementsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldElementsResponse* internal_default_instance() {
    return reinterpret_cast<const getWorldElementsResponse*>(
               &_getWorldElementsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getWorldElementsResponse& a, getWorldElementsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldElementsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldElementsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldElementsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldElementsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldElementsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldElementsResponse& from) {
    getWorldElementsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldElementsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldElementsResponse";
  }
  protected:
  explicit getWorldElementsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes vector = 1;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldElementsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldElementByKeyValueRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldElementByKeyValueRequest) */ {
 public:
  inline getWorldElementByKeyValueRequest() : getWorldElementByKeyValueRequest(nullptr) {}
  ~getWorldElementByKeyValueRequest() override;
  explicit PROTOBUF_CONSTEXPR getWorldElementByKeyValueRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldElementByKeyValueRequest(const getWorldElementByKeyValueRequest& from);
  getWorldElementByKeyValueRequest(getWorldElementByKeyValueRequest&& from) noexcept
    : getWorldElementByKeyValueRequest() {
    *this = ::std::move(from);
  }

  inline getWorldElementByKeyValueRequest& operator=(const getWorldElementByKeyValueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldElementByKeyValueRequest& operator=(getWorldElementByKeyValueRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldElementByKeyValueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldElementByKeyValueRequest* internal_default_instance() {
    return reinterpret_cast<const getWorldElementByKeyValueRequest*>(
               &_getWorldElementByKeyValueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(getWorldElementByKeyValueRequest& a, getWorldElementByKeyValueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldElementByKeyValueRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldElementByKeyValueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldElementByKeyValueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldElementByKeyValueRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldElementByKeyValueRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldElementByKeyValueRequest& from) {
    getWorldElementByKeyValueRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldElementByKeyValueRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldElementByKeyValueRequest";
  }
  protected:
  explicit getWorldElementByKeyValueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kVectorFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes vector = 4;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldElementByKeyValueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldElementByKeyValueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldElementByKeyValueResponse) */ {
 public:
  inline getWorldElementByKeyValueResponse() : getWorldElementByKeyValueResponse(nullptr) {}
  ~getWorldElementByKeyValueResponse() override;
  explicit PROTOBUF_CONSTEXPR getWorldElementByKeyValueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldElementByKeyValueResponse(const getWorldElementByKeyValueResponse& from);
  getWorldElementByKeyValueResponse(getWorldElementByKeyValueResponse&& from) noexcept
    : getWorldElementByKeyValueResponse() {
    *this = ::std::move(from);
  }

  inline getWorldElementByKeyValueResponse& operator=(const getWorldElementByKeyValueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldElementByKeyValueResponse& operator=(getWorldElementByKeyValueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldElementByKeyValueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldElementByKeyValueResponse* internal_default_instance() {
    return reinterpret_cast<const getWorldElementByKeyValueResponse*>(
               &_getWorldElementByKeyValueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(getWorldElementByKeyValueResponse& a, getWorldElementByKeyValueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldElementByKeyValueResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldElementByKeyValueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldElementByKeyValueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldElementByKeyValueResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldElementByKeyValueResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldElementByKeyValueResponse& from) {
    getWorldElementByKeyValueResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldElementByKeyValueResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldElementByKeyValueResponse";
  }
  protected:
  explicit getWorldElementByKeyValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes vector = 1;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldElementByKeyValueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldElementByKeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldElementByKeyRequest) */ {
 public:
  inline getWorldElementByKeyRequest() : getWorldElementByKeyRequest(nullptr) {}
  ~getWorldElementByKeyRequest() override;
  explicit PROTOBUF_CONSTEXPR getWorldElementByKeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldElementByKeyRequest(const getWorldElementByKeyRequest& from);
  getWorldElementByKeyRequest(getWorldElementByKeyRequest&& from) noexcept
    : getWorldElementByKeyRequest() {
    *this = ::std::move(from);
  }

  inline getWorldElementByKeyRequest& operator=(const getWorldElementByKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldElementByKeyRequest& operator=(getWorldElementByKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldElementByKeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldElementByKeyRequest* internal_default_instance() {
    return reinterpret_cast<const getWorldElementByKeyRequest*>(
               &_getWorldElementByKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(getWorldElementByKeyRequest& a, getWorldElementByKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldElementByKeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldElementByKeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldElementByKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldElementByKeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldElementByKeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldElementByKeyRequest& from) {
    getWorldElementByKeyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldElementByKeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldElementByKeyRequest";
  }
  protected:
  explicit getWorldElementByKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kVectorFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes vector = 3;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldElementByKeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldElementByKeyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldElementByKeyResponse) */ {
 public:
  inline getWorldElementByKeyResponse() : getWorldElementByKeyResponse(nullptr) {}
  ~getWorldElementByKeyResponse() override;
  explicit PROTOBUF_CONSTEXPR getWorldElementByKeyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldElementByKeyResponse(const getWorldElementByKeyResponse& from);
  getWorldElementByKeyResponse(getWorldElementByKeyResponse&& from) noexcept
    : getWorldElementByKeyResponse() {
    *this = ::std::move(from);
  }

  inline getWorldElementByKeyResponse& operator=(const getWorldElementByKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldElementByKeyResponse& operator=(getWorldElementByKeyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldElementByKeyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldElementByKeyResponse* internal_default_instance() {
    return reinterpret_cast<const getWorldElementByKeyResponse*>(
               &_getWorldElementByKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(getWorldElementByKeyResponse& a, getWorldElementByKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldElementByKeyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldElementByKeyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldElementByKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldElementByKeyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldElementByKeyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldElementByKeyResponse& from) {
    getWorldElementByKeyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldElementByKeyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldElementByKeyResponse";
  }
  protected:
  explicit getWorldElementByKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes vector = 1;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldElementByKeyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class addTrackableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.addTrackableRequest) */ {
 public:
  inline addTrackableRequest() : addTrackableRequest(nullptr) {}
  ~addTrackableRequest() override;
  explicit PROTOBUF_CONSTEXPR addTrackableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addTrackableRequest(const addTrackableRequest& from);
  addTrackableRequest(addTrackableRequest&& from) noexcept
    : addTrackableRequest() {
    *this = ::std::move(from);
  }

  inline addTrackableRequest& operator=(const addTrackableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addTrackableRequest& operator=(addTrackableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addTrackableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addTrackableRequest* internal_default_instance() {
    return reinterpret_cast<const addTrackableRequest*>(
               &_addTrackableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(addTrackableRequest& a, addTrackableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addTrackableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addTrackableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addTrackableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addTrackableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addTrackableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addTrackableRequest& from) {
    addTrackableRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addTrackableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.addTrackableRequest";
  }
  protected:
  explicit addTrackableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackableFieldNumber = 2,
    kIdFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes trackable = 2;
  void clear_trackable();
  const std::string& trackable() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackable(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackable();
  PROTOBUF_NODISCARD std::string* release_trackable();
  void set_allocated_trackable(std::string* trackable);
  private:
  const std::string& _internal_trackable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackable(const std::string& value);
  std::string* _internal_mutable_trackable();
  public:

  // bytes id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.addTrackableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class addTrackableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.addTrackableResponse) */ {
 public:
  inline addTrackableResponse() : addTrackableResponse(nullptr) {}
  ~addTrackableResponse() override;
  explicit PROTOBUF_CONSTEXPR addTrackableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addTrackableResponse(const addTrackableResponse& from);
  addTrackableResponse(addTrackableResponse&& from) noexcept
    : addTrackableResponse() {
    *this = ::std::move(from);
  }

  inline addTrackableResponse& operator=(const addTrackableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addTrackableResponse& operator=(addTrackableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addTrackableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addTrackableResponse* internal_default_instance() {
    return reinterpret_cast<const addTrackableResponse*>(
               &_addTrackableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(addTrackableResponse& a, addTrackableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addTrackableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addTrackableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addTrackableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addTrackableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addTrackableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addTrackableResponse& from) {
    addTrackableResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addTrackableResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.addTrackableResponse";
  }
  protected:
  explicit addTrackableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.addTrackableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getTrackableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getTrackableRequest) */ {
 public:
  inline getTrackableRequest() : getTrackableRequest(nullptr) {}
  ~getTrackableRequest() override;
  explicit PROTOBUF_CONSTEXPR getTrackableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTrackableRequest(const getTrackableRequest& from);
  getTrackableRequest(getTrackableRequest&& from) noexcept
    : getTrackableRequest() {
    *this = ::std::move(from);
  }

  inline getTrackableRequest& operator=(const getTrackableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTrackableRequest& operator=(getTrackableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getTrackableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTrackableRequest* internal_default_instance() {
    return reinterpret_cast<const getTrackableRequest*>(
               &_getTrackableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(getTrackableRequest& a, getTrackableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getTrackableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTrackableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getTrackableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getTrackableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getTrackableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getTrackableRequest& from) {
    getTrackableRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTrackableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getTrackableRequest";
  }
  protected:
  explicit getTrackableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackableIdFieldNumber = 2,
    kTrackableFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes trackableId = 2;
  void clear_trackableid();
  const std::string& trackableid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackableid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackableid();
  PROTOBUF_NODISCARD std::string* release_trackableid();
  void set_allocated_trackableid(std::string* trackableid);
  private:
  const std::string& _internal_trackableid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackableid(const std::string& value);
  std::string* _internal_mutable_trackableid();
  public:

  // bytes trackable = 3;
  void clear_trackable();
  const std::string& trackable() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackable(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackable();
  PROTOBUF_NODISCARD std::string* release_trackable();
  void set_allocated_trackable(std::string* trackable);
  private:
  const std::string& _internal_trackable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackable(const std::string& value);
  std::string* _internal_mutable_trackable();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getTrackableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackableid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackable_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getTrackableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getTrackableResponse) */ {
 public:
  inline getTrackableResponse() : getTrackableResponse(nullptr) {}
  ~getTrackableResponse() override;
  explicit PROTOBUF_CONSTEXPR getTrackableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTrackableResponse(const getTrackableResponse& from);
  getTrackableResponse(getTrackableResponse&& from) noexcept
    : getTrackableResponse() {
    *this = ::std::move(from);
  }

  inline getTrackableResponse& operator=(const getTrackableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTrackableResponse& operator=(getTrackableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getTrackableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTrackableResponse* internal_default_instance() {
    return reinterpret_cast<const getTrackableResponse*>(
               &_getTrackableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(getTrackableResponse& a, getTrackableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getTrackableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTrackableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getTrackableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getTrackableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getTrackableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getTrackableResponse& from) {
    getTrackableResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTrackableResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getTrackableResponse";
  }
  protected:
  explicit getTrackableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackableFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes trackable = 1;
  void clear_trackable();
  const std::string& trackable() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackable(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackable();
  PROTOBUF_NODISCARD std::string* release_trackable();
  void set_allocated_trackable(std::string* trackable);
  private:
  const std::string& _internal_trackable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackable(const std::string& value);
  std::string* _internal_mutable_trackable();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getTrackableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackable_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeTrackableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.removeTrackableRequest) */ {
 public:
  inline removeTrackableRequest() : removeTrackableRequest(nullptr) {}
  ~removeTrackableRequest() override;
  explicit PROTOBUF_CONSTEXPR removeTrackableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeTrackableRequest(const removeTrackableRequest& from);
  removeTrackableRequest(removeTrackableRequest&& from) noexcept
    : removeTrackableRequest() {
    *this = ::std::move(from);
  }

  inline removeTrackableRequest& operator=(const removeTrackableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeTrackableRequest& operator=(removeTrackableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeTrackableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeTrackableRequest* internal_default_instance() {
    return reinterpret_cast<const removeTrackableRequest*>(
               &_removeTrackableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(removeTrackableRequest& a, removeTrackableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(removeTrackableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeTrackableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeTrackableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeTrackableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeTrackableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const removeTrackableRequest& from) {
    removeTrackableRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeTrackableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.removeTrackableRequest";
  }
  protected:
  explicit removeTrackableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackableIdFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes trackableId = 2;
  void clear_trackableid();
  const std::string& trackableid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackableid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackableid();
  PROTOBUF_NODISCARD std::string* release_trackableid();
  void set_allocated_trackableid(std::string* trackableid);
  private:
  const std::string& _internal_trackableid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackableid(const std::string& value);
  std::string* _internal_mutable_trackableid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.removeTrackableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackableid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeTrackableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.removeTrackableResponse) */ {
 public:
  inline removeTrackableResponse() : removeTrackableResponse(nullptr) {}
  ~removeTrackableResponse() override;
  explicit PROTOBUF_CONSTEXPR removeTrackableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeTrackableResponse(const removeTrackableResponse& from);
  removeTrackableResponse(removeTrackableResponse&& from) noexcept
    : removeTrackableResponse() {
    *this = ::std::move(from);
  }

  inline removeTrackableResponse& operator=(const removeTrackableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeTrackableResponse& operator=(removeTrackableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeTrackableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeTrackableResponse* internal_default_instance() {
    return reinterpret_cast<const removeTrackableResponse*>(
               &_removeTrackableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(removeTrackableResponse& a, removeTrackableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(removeTrackableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeTrackableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeTrackableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeTrackableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeTrackableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const removeTrackableResponse& from) {
    removeTrackableResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeTrackableResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.removeTrackableResponse";
  }
  protected:
  explicit removeTrackableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.removeTrackableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getTrackablesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getTrackablesRequest) */ {
 public:
  inline getTrackablesRequest() : getTrackablesRequest(nullptr) {}
  ~getTrackablesRequest() override;
  explicit PROTOBUF_CONSTEXPR getTrackablesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTrackablesRequest(const getTrackablesRequest& from);
  getTrackablesRequest(getTrackablesRequest&& from) noexcept
    : getTrackablesRequest() {
    *this = ::std::move(from);
  }

  inline getTrackablesRequest& operator=(const getTrackablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTrackablesRequest& operator=(getTrackablesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getTrackablesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTrackablesRequest* internal_default_instance() {
    return reinterpret_cast<const getTrackablesRequest*>(
               &_getTrackablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(getTrackablesRequest& a, getTrackablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getTrackablesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTrackablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getTrackablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getTrackablesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getTrackablesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getTrackablesRequest& from) {
    getTrackablesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTrackablesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getTrackablesRequest";
  }
  protected:
  explicit getTrackablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes vector = 2;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getTrackablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getTrackablesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getTrackablesResponse) */ {
 public:
  inline getTrackablesResponse() : getTrackablesResponse(nullptr) {}
  ~getTrackablesResponse() override;
  explicit PROTOBUF_CONSTEXPR getTrackablesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getTrackablesResponse(const getTrackablesResponse& from);
  getTrackablesResponse(getTrackablesResponse&& from) noexcept
    : getTrackablesResponse() {
    *this = ::std::move(from);
  }

  inline getTrackablesResponse& operator=(const getTrackablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getTrackablesResponse& operator=(getTrackablesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getTrackablesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getTrackablesResponse* internal_default_instance() {
    return reinterpret_cast<const getTrackablesResponse*>(
               &_getTrackablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(getTrackablesResponse& a, getTrackablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getTrackablesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getTrackablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getTrackablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getTrackablesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getTrackablesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getTrackablesResponse& from) {
    getTrackablesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getTrackablesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getTrackablesResponse";
  }
  protected:
  explicit getTrackablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes vector = 1;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getTrackablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class modifyTrackableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.modifyTrackableRequest) */ {
 public:
  inline modifyTrackableRequest() : modifyTrackableRequest(nullptr) {}
  ~modifyTrackableRequest() override;
  explicit PROTOBUF_CONSTEXPR modifyTrackableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  modifyTrackableRequest(const modifyTrackableRequest& from);
  modifyTrackableRequest(modifyTrackableRequest&& from) noexcept
    : modifyTrackableRequest() {
    *this = ::std::move(from);
  }

  inline modifyTrackableRequest& operator=(const modifyTrackableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline modifyTrackableRequest& operator=(modifyTrackableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const modifyTrackableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const modifyTrackableRequest* internal_default_instance() {
    return reinterpret_cast<const modifyTrackableRequest*>(
               &_modifyTrackableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(modifyTrackableRequest& a, modifyTrackableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(modifyTrackableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(modifyTrackableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  modifyTrackableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<modifyTrackableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const modifyTrackableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const modifyTrackableRequest& from) {
    modifyTrackableRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(modifyTrackableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.modifyTrackableRequest";
  }
  protected:
  explicit modifyTrackableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackableFieldNumber = 2,
    kIdFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes trackable = 2;
  void clear_trackable();
  const std::string& trackable() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trackable(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trackable();
  PROTOBUF_NODISCARD std::string* release_trackable();
  void set_allocated_trackable(std::string* trackable);
  private:
  const std::string& _internal_trackable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trackable(const std::string& value);
  std::string* _internal_mutable_trackable();
  public:

  // bytes id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.modifyTrackableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trackable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class modifyTrackableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.modifyTrackableResponse) */ {
 public:
  inline modifyTrackableResponse() : modifyTrackableResponse(nullptr) {}
  ~modifyTrackableResponse() override;
  explicit PROTOBUF_CONSTEXPR modifyTrackableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  modifyTrackableResponse(const modifyTrackableResponse& from);
  modifyTrackableResponse(modifyTrackableResponse&& from) noexcept
    : modifyTrackableResponse() {
    *this = ::std::move(from);
  }

  inline modifyTrackableResponse& operator=(const modifyTrackableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline modifyTrackableResponse& operator=(modifyTrackableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const modifyTrackableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const modifyTrackableResponse* internal_default_instance() {
    return reinterpret_cast<const modifyTrackableResponse*>(
               &_modifyTrackableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(modifyTrackableResponse& a, modifyTrackableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(modifyTrackableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(modifyTrackableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  modifyTrackableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<modifyTrackableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const modifyTrackableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const modifyTrackableResponse& from) {
    modifyTrackableResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(modifyTrackableResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.modifyTrackableResponse";
  }
  protected:
  explicit modifyTrackableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.modifyTrackableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class addWorldAnchorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.addWorldAnchorRequest) */ {
 public:
  inline addWorldAnchorRequest() : addWorldAnchorRequest(nullptr) {}
  ~addWorldAnchorRequest() override;
  explicit PROTOBUF_CONSTEXPR addWorldAnchorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addWorldAnchorRequest(const addWorldAnchorRequest& from);
  addWorldAnchorRequest(addWorldAnchorRequest&& from) noexcept
    : addWorldAnchorRequest() {
    *this = ::std::move(from);
  }

  inline addWorldAnchorRequest& operator=(const addWorldAnchorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addWorldAnchorRequest& operator=(addWorldAnchorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addWorldAnchorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addWorldAnchorRequest* internal_default_instance() {
    return reinterpret_cast<const addWorldAnchorRequest*>(
               &_addWorldAnchorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(addWorldAnchorRequest& a, addWorldAnchorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addWorldAnchorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addWorldAnchorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addWorldAnchorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addWorldAnchorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addWorldAnchorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addWorldAnchorRequest& from) {
    addWorldAnchorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addWorldAnchorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.addWorldAnchorRequest";
  }
  protected:
  explicit addWorldAnchorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAnchorFieldNumber = 2,
    kIdFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes worldAnchor = 2;
  void clear_worldanchor();
  const std::string& worldanchor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldanchor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldanchor();
  PROTOBUF_NODISCARD std::string* release_worldanchor();
  void set_allocated_worldanchor(std::string* worldanchor);
  private:
  const std::string& _internal_worldanchor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldanchor(const std::string& value);
  std::string* _internal_mutable_worldanchor();
  public:

  // bytes id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.addWorldAnchorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldanchor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class addWorldAnchorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.addWorldAnchorResponse) */ {
 public:
  inline addWorldAnchorResponse() : addWorldAnchorResponse(nullptr) {}
  ~addWorldAnchorResponse() override;
  explicit PROTOBUF_CONSTEXPR addWorldAnchorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addWorldAnchorResponse(const addWorldAnchorResponse& from);
  addWorldAnchorResponse(addWorldAnchorResponse&& from) noexcept
    : addWorldAnchorResponse() {
    *this = ::std::move(from);
  }

  inline addWorldAnchorResponse& operator=(const addWorldAnchorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addWorldAnchorResponse& operator=(addWorldAnchorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addWorldAnchorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addWorldAnchorResponse* internal_default_instance() {
    return reinterpret_cast<const addWorldAnchorResponse*>(
               &_addWorldAnchorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(addWorldAnchorResponse& a, addWorldAnchorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addWorldAnchorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addWorldAnchorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addWorldAnchorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addWorldAnchorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addWorldAnchorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addWorldAnchorResponse& from) {
    addWorldAnchorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addWorldAnchorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.addWorldAnchorResponse";
  }
  protected:
  explicit addWorldAnchorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.addWorldAnchorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldAnchorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldAnchorRequest) */ {
 public:
  inline getWorldAnchorRequest() : getWorldAnchorRequest(nullptr) {}
  ~getWorldAnchorRequest() override;
  explicit PROTOBUF_CONSTEXPR getWorldAnchorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldAnchorRequest(const getWorldAnchorRequest& from);
  getWorldAnchorRequest(getWorldAnchorRequest&& from) noexcept
    : getWorldAnchorRequest() {
    *this = ::std::move(from);
  }

  inline getWorldAnchorRequest& operator=(const getWorldAnchorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldAnchorRequest& operator=(getWorldAnchorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldAnchorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldAnchorRequest* internal_default_instance() {
    return reinterpret_cast<const getWorldAnchorRequest*>(
               &_getWorldAnchorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(getWorldAnchorRequest& a, getWorldAnchorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldAnchorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldAnchorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldAnchorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldAnchorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldAnchorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldAnchorRequest& from) {
    getWorldAnchorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldAnchorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldAnchorRequest";
  }
  protected:
  explicit getWorldAnchorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAnchorIdFieldNumber = 2,
    kWorldAnchorFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes worldAnchorId = 2;
  void clear_worldanchorid();
  const std::string& worldanchorid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldanchorid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldanchorid();
  PROTOBUF_NODISCARD std::string* release_worldanchorid();
  void set_allocated_worldanchorid(std::string* worldanchorid);
  private:
  const std::string& _internal_worldanchorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldanchorid(const std::string& value);
  std::string* _internal_mutable_worldanchorid();
  public:

  // bytes worldAnchor = 3;
  void clear_worldanchor();
  const std::string& worldanchor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldanchor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldanchor();
  PROTOBUF_NODISCARD std::string* release_worldanchor();
  void set_allocated_worldanchor(std::string* worldanchor);
  private:
  const std::string& _internal_worldanchor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldanchor(const std::string& value);
  std::string* _internal_mutable_worldanchor();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldAnchorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldanchorid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldanchor_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldAnchorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldAnchorResponse) */ {
 public:
  inline getWorldAnchorResponse() : getWorldAnchorResponse(nullptr) {}
  ~getWorldAnchorResponse() override;
  explicit PROTOBUF_CONSTEXPR getWorldAnchorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldAnchorResponse(const getWorldAnchorResponse& from);
  getWorldAnchorResponse(getWorldAnchorResponse&& from) noexcept
    : getWorldAnchorResponse() {
    *this = ::std::move(from);
  }

  inline getWorldAnchorResponse& operator=(const getWorldAnchorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldAnchorResponse& operator=(getWorldAnchorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldAnchorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldAnchorResponse* internal_default_instance() {
    return reinterpret_cast<const getWorldAnchorResponse*>(
               &_getWorldAnchorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(getWorldAnchorResponse& a, getWorldAnchorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldAnchorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldAnchorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldAnchorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldAnchorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldAnchorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldAnchorResponse& from) {
    getWorldAnchorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldAnchorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldAnchorResponse";
  }
  protected:
  explicit getWorldAnchorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAnchorFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes worldAnchor = 1;
  void clear_worldanchor();
  const std::string& worldanchor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldanchor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldanchor();
  PROTOBUF_NODISCARD std::string* release_worldanchor();
  void set_allocated_worldanchor(std::string* worldanchor);
  private:
  const std::string& _internal_worldanchor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldanchor(const std::string& value);
  std::string* _internal_mutable_worldanchor();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldAnchorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldanchor_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeWorldAnchorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.removeWorldAnchorRequest) */ {
 public:
  inline removeWorldAnchorRequest() : removeWorldAnchorRequest(nullptr) {}
  ~removeWorldAnchorRequest() override;
  explicit PROTOBUF_CONSTEXPR removeWorldAnchorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeWorldAnchorRequest(const removeWorldAnchorRequest& from);
  removeWorldAnchorRequest(removeWorldAnchorRequest&& from) noexcept
    : removeWorldAnchorRequest() {
    *this = ::std::move(from);
  }

  inline removeWorldAnchorRequest& operator=(const removeWorldAnchorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeWorldAnchorRequest& operator=(removeWorldAnchorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeWorldAnchorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeWorldAnchorRequest* internal_default_instance() {
    return reinterpret_cast<const removeWorldAnchorRequest*>(
               &_removeWorldAnchorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(removeWorldAnchorRequest& a, removeWorldAnchorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(removeWorldAnchorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeWorldAnchorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeWorldAnchorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeWorldAnchorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeWorldAnchorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const removeWorldAnchorRequest& from) {
    removeWorldAnchorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeWorldAnchorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.removeWorldAnchorRequest";
  }
  protected:
  explicit removeWorldAnchorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAnchorIdFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes worldAnchorId = 2;
  void clear_worldanchorid();
  const std::string& worldanchorid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldanchorid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldanchorid();
  PROTOBUF_NODISCARD std::string* release_worldanchorid();
  void set_allocated_worldanchorid(std::string* worldanchorid);
  private:
  const std::string& _internal_worldanchorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldanchorid(const std::string& value);
  std::string* _internal_mutable_worldanchorid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.removeWorldAnchorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldanchorid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeWorldAnchorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.removeWorldAnchorResponse) */ {
 public:
  inline removeWorldAnchorResponse() : removeWorldAnchorResponse(nullptr) {}
  ~removeWorldAnchorResponse() override;
  explicit PROTOBUF_CONSTEXPR removeWorldAnchorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeWorldAnchorResponse(const removeWorldAnchorResponse& from);
  removeWorldAnchorResponse(removeWorldAnchorResponse&& from) noexcept
    : removeWorldAnchorResponse() {
    *this = ::std::move(from);
  }

  inline removeWorldAnchorResponse& operator=(const removeWorldAnchorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeWorldAnchorResponse& operator=(removeWorldAnchorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeWorldAnchorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeWorldAnchorResponse* internal_default_instance() {
    return reinterpret_cast<const removeWorldAnchorResponse*>(
               &_removeWorldAnchorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(removeWorldAnchorResponse& a, removeWorldAnchorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(removeWorldAnchorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeWorldAnchorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeWorldAnchorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeWorldAnchorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeWorldAnchorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const removeWorldAnchorResponse& from) {
    removeWorldAnchorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeWorldAnchorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.removeWorldAnchorResponse";
  }
  protected:
  explicit removeWorldAnchorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.removeWorldAnchorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldAnchorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldAnchorsRequest) */ {
 public:
  inline getWorldAnchorsRequest() : getWorldAnchorsRequest(nullptr) {}
  ~getWorldAnchorsRequest() override;
  explicit PROTOBUF_CONSTEXPR getWorldAnchorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldAnchorsRequest(const getWorldAnchorsRequest& from);
  getWorldAnchorsRequest(getWorldAnchorsRequest&& from) noexcept
    : getWorldAnchorsRequest() {
    *this = ::std::move(from);
  }

  inline getWorldAnchorsRequest& operator=(const getWorldAnchorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldAnchorsRequest& operator=(getWorldAnchorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldAnchorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldAnchorsRequest* internal_default_instance() {
    return reinterpret_cast<const getWorldAnchorsRequest*>(
               &_getWorldAnchorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(getWorldAnchorsRequest& a, getWorldAnchorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldAnchorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldAnchorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldAnchorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldAnchorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldAnchorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldAnchorsRequest& from) {
    getWorldAnchorsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldAnchorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldAnchorsRequest";
  }
  protected:
  explicit getWorldAnchorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes vector = 2;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldAnchorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldAnchorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldAnchorsResponse) */ {
 public:
  inline getWorldAnchorsResponse() : getWorldAnchorsResponse(nullptr) {}
  ~getWorldAnchorsResponse() override;
  explicit PROTOBUF_CONSTEXPR getWorldAnchorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldAnchorsResponse(const getWorldAnchorsResponse& from);
  getWorldAnchorsResponse(getWorldAnchorsResponse&& from) noexcept
    : getWorldAnchorsResponse() {
    *this = ::std::move(from);
  }

  inline getWorldAnchorsResponse& operator=(const getWorldAnchorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldAnchorsResponse& operator=(getWorldAnchorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldAnchorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldAnchorsResponse* internal_default_instance() {
    return reinterpret_cast<const getWorldAnchorsResponse*>(
               &_getWorldAnchorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(getWorldAnchorsResponse& a, getWorldAnchorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldAnchorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldAnchorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldAnchorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldAnchorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldAnchorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldAnchorsResponse& from) {
    getWorldAnchorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldAnchorsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldAnchorsResponse";
  }
  protected:
  explicit getWorldAnchorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes vector = 1;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldAnchorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class modifyWorldAnchorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.modifyWorldAnchorRequest) */ {
 public:
  inline modifyWorldAnchorRequest() : modifyWorldAnchorRequest(nullptr) {}
  ~modifyWorldAnchorRequest() override;
  explicit PROTOBUF_CONSTEXPR modifyWorldAnchorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  modifyWorldAnchorRequest(const modifyWorldAnchorRequest& from);
  modifyWorldAnchorRequest(modifyWorldAnchorRequest&& from) noexcept
    : modifyWorldAnchorRequest() {
    *this = ::std::move(from);
  }

  inline modifyWorldAnchorRequest& operator=(const modifyWorldAnchorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline modifyWorldAnchorRequest& operator=(modifyWorldAnchorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const modifyWorldAnchorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const modifyWorldAnchorRequest* internal_default_instance() {
    return reinterpret_cast<const modifyWorldAnchorRequest*>(
               &_modifyWorldAnchorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(modifyWorldAnchorRequest& a, modifyWorldAnchorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(modifyWorldAnchorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(modifyWorldAnchorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  modifyWorldAnchorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<modifyWorldAnchorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const modifyWorldAnchorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const modifyWorldAnchorRequest& from) {
    modifyWorldAnchorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(modifyWorldAnchorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.modifyWorldAnchorRequest";
  }
  protected:
  explicit modifyWorldAnchorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldAnchorFieldNumber = 2,
    kIdFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes worldAnchor = 2;
  void clear_worldanchor();
  const std::string& worldanchor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldanchor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldanchor();
  PROTOBUF_NODISCARD std::string* release_worldanchor();
  void set_allocated_worldanchor(std::string* worldanchor);
  private:
  const std::string& _internal_worldanchor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldanchor(const std::string& value);
  std::string* _internal_mutable_worldanchor();
  public:

  // bytes id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.modifyWorldAnchorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldanchor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class modifyWorldAnchorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.modifyWorldAnchorResponse) */ {
 public:
  inline modifyWorldAnchorResponse() : modifyWorldAnchorResponse(nullptr) {}
  ~modifyWorldAnchorResponse() override;
  explicit PROTOBUF_CONSTEXPR modifyWorldAnchorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  modifyWorldAnchorResponse(const modifyWorldAnchorResponse& from);
  modifyWorldAnchorResponse(modifyWorldAnchorResponse&& from) noexcept
    : modifyWorldAnchorResponse() {
    *this = ::std::move(from);
  }

  inline modifyWorldAnchorResponse& operator=(const modifyWorldAnchorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline modifyWorldAnchorResponse& operator=(modifyWorldAnchorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const modifyWorldAnchorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const modifyWorldAnchorResponse* internal_default_instance() {
    return reinterpret_cast<const modifyWorldAnchorResponse*>(
               &_modifyWorldAnchorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(modifyWorldAnchorResponse& a, modifyWorldAnchorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(modifyWorldAnchorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(modifyWorldAnchorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  modifyWorldAnchorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<modifyWorldAnchorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const modifyWorldAnchorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const modifyWorldAnchorResponse& from) {
    modifyWorldAnchorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(modifyWorldAnchorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.modifyWorldAnchorResponse";
  }
  protected:
  explicit modifyWorldAnchorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.modifyWorldAnchorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class addWorldLinkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.addWorldLinkRequest) */ {
 public:
  inline addWorldLinkRequest() : addWorldLinkRequest(nullptr) {}
  ~addWorldLinkRequest() override;
  explicit PROTOBUF_CONSTEXPR addWorldLinkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addWorldLinkRequest(const addWorldLinkRequest& from);
  addWorldLinkRequest(addWorldLinkRequest&& from) noexcept
    : addWorldLinkRequest() {
    *this = ::std::move(from);
  }

  inline addWorldLinkRequest& operator=(const addWorldLinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addWorldLinkRequest& operator=(addWorldLinkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addWorldLinkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addWorldLinkRequest* internal_default_instance() {
    return reinterpret_cast<const addWorldLinkRequest*>(
               &_addWorldLinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(addWorldLinkRequest& a, addWorldLinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addWorldLinkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addWorldLinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addWorldLinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addWorldLinkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addWorldLinkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addWorldLinkRequest& from) {
    addWorldLinkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addWorldLinkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.addWorldLinkRequest";
  }
  protected:
  explicit addWorldLinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldLinkFieldNumber = 2,
    kIdFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes worldLink = 2;
  void clear_worldlink();
  const std::string& worldlink() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldlink(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldlink();
  PROTOBUF_NODISCARD std::string* release_worldlink();
  void set_allocated_worldlink(std::string* worldlink);
  private:
  const std::string& _internal_worldlink() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldlink(const std::string& value);
  std::string* _internal_mutable_worldlink();
  public:

  // bytes id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.addWorldLinkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldlink_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class addWorldLinkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.addWorldLinkResponse) */ {
 public:
  inline addWorldLinkResponse() : addWorldLinkResponse(nullptr) {}
  ~addWorldLinkResponse() override;
  explicit PROTOBUF_CONSTEXPR addWorldLinkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addWorldLinkResponse(const addWorldLinkResponse& from);
  addWorldLinkResponse(addWorldLinkResponse&& from) noexcept
    : addWorldLinkResponse() {
    *this = ::std::move(from);
  }

  inline addWorldLinkResponse& operator=(const addWorldLinkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addWorldLinkResponse& operator=(addWorldLinkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addWorldLinkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addWorldLinkResponse* internal_default_instance() {
    return reinterpret_cast<const addWorldLinkResponse*>(
               &_addWorldLinkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(addWorldLinkResponse& a, addWorldLinkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addWorldLinkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addWorldLinkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addWorldLinkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addWorldLinkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addWorldLinkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const addWorldLinkResponse& from) {
    addWorldLinkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addWorldLinkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.addWorldLinkResponse";
  }
  protected:
  explicit addWorldLinkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.addWorldLinkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldLink_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldLink_grpc0Request) */ {
 public:
  inline getWorldLink_grpc0Request() : getWorldLink_grpc0Request(nullptr) {}
  ~getWorldLink_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR getWorldLink_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldLink_grpc0Request(const getWorldLink_grpc0Request& from);
  getWorldLink_grpc0Request(getWorldLink_grpc0Request&& from) noexcept
    : getWorldLink_grpc0Request() {
    *this = ::std::move(from);
  }

  inline getWorldLink_grpc0Request& operator=(const getWorldLink_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldLink_grpc0Request& operator=(getWorldLink_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldLink_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldLink_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const getWorldLink_grpc0Request*>(
               &_getWorldLink_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(getWorldLink_grpc0Request& a, getWorldLink_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldLink_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldLink_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldLink_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldLink_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldLink_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldLink_grpc0Request& from) {
    getWorldLink_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldLink_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldLink_grpc0Request";
  }
  protected:
  explicit getWorldLink_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentIdFieldNumber = 2,
    kChildIdFieldNumber = 3,
    kWorldLinkFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes parentId = 2;
  void clear_parentid();
  const std::string& parentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentid();
  PROTOBUF_NODISCARD std::string* release_parentid();
  void set_allocated_parentid(std::string* parentid);
  private:
  const std::string& _internal_parentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentid(const std::string& value);
  std::string* _internal_mutable_parentid();
  public:

  // bytes childId = 3;
  void clear_childid();
  const std::string& childid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_childid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_childid();
  PROTOBUF_NODISCARD std::string* release_childid();
  void set_allocated_childid(std::string* childid);
  private:
  const std::string& _internal_childid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_childid(const std::string& value);
  std::string* _internal_mutable_childid();
  public:

  // bytes worldLink = 4;
  void clear_worldlink();
  const std::string& worldlink() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldlink(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldlink();
  PROTOBUF_NODISCARD std::string* release_worldlink();
  void set_allocated_worldlink(std::string* worldlink);
  private:
  const std::string& _internal_worldlink() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldlink(const std::string& value);
  std::string* _internal_mutable_worldlink();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldLink_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr childid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldlink_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldLink_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldLink_grpc0Response) */ {
 public:
  inline getWorldLink_grpc0Response() : getWorldLink_grpc0Response(nullptr) {}
  ~getWorldLink_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR getWorldLink_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldLink_grpc0Response(const getWorldLink_grpc0Response& from);
  getWorldLink_grpc0Response(getWorldLink_grpc0Response&& from) noexcept
    : getWorldLink_grpc0Response() {
    *this = ::std::move(from);
  }

  inline getWorldLink_grpc0Response& operator=(const getWorldLink_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldLink_grpc0Response& operator=(getWorldLink_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldLink_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldLink_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const getWorldLink_grpc0Response*>(
               &_getWorldLink_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(getWorldLink_grpc0Response& a, getWorldLink_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldLink_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldLink_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldLink_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldLink_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldLink_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldLink_grpc0Response& from) {
    getWorldLink_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldLink_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldLink_grpc0Response";
  }
  protected:
  explicit getWorldLink_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldLinkFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes worldLink = 1;
  void clear_worldlink();
  const std::string& worldlink() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldlink(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldlink();
  PROTOBUF_NODISCARD std::string* release_worldlink();
  void set_allocated_worldlink(std::string* worldlink);
  private:
  const std::string& _internal_worldlink() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldlink(const std::string& value);
  std::string* _internal_mutable_worldlink();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldLink_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldlink_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldLink_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldLink_grpc1Request) */ {
 public:
  inline getWorldLink_grpc1Request() : getWorldLink_grpc1Request(nullptr) {}
  ~getWorldLink_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR getWorldLink_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldLink_grpc1Request(const getWorldLink_grpc1Request& from);
  getWorldLink_grpc1Request(getWorldLink_grpc1Request&& from) noexcept
    : getWorldLink_grpc1Request() {
    *this = ::std::move(from);
  }

  inline getWorldLink_grpc1Request& operator=(const getWorldLink_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldLink_grpc1Request& operator=(getWorldLink_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldLink_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldLink_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const getWorldLink_grpc1Request*>(
               &_getWorldLink_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(getWorldLink_grpc1Request& a, getWorldLink_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldLink_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldLink_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldLink_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldLink_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldLink_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldLink_grpc1Request& from) {
    getWorldLink_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldLink_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldLink_grpc1Request";
  }
  protected:
  explicit getWorldLink_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkIdFieldNumber = 2,
    kWorldLinkFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes linkId = 2;
  void clear_linkid();
  const std::string& linkid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_linkid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_linkid();
  PROTOBUF_NODISCARD std::string* release_linkid();
  void set_allocated_linkid(std::string* linkid);
  private:
  const std::string& _internal_linkid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_linkid(const std::string& value);
  std::string* _internal_mutable_linkid();
  public:

  // bytes worldLink = 3;
  void clear_worldlink();
  const std::string& worldlink() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldlink(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldlink();
  PROTOBUF_NODISCARD std::string* release_worldlink();
  void set_allocated_worldlink(std::string* worldlink);
  private:
  const std::string& _internal_worldlink() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldlink(const std::string& value);
  std::string* _internal_mutable_worldlink();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldLink_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linkid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldlink_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldLink_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldLink_grpc1Response) */ {
 public:
  inline getWorldLink_grpc1Response() : getWorldLink_grpc1Response(nullptr) {}
  ~getWorldLink_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR getWorldLink_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldLink_grpc1Response(const getWorldLink_grpc1Response& from);
  getWorldLink_grpc1Response(getWorldLink_grpc1Response&& from) noexcept
    : getWorldLink_grpc1Response() {
    *this = ::std::move(from);
  }

  inline getWorldLink_grpc1Response& operator=(const getWorldLink_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldLink_grpc1Response& operator=(getWorldLink_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldLink_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldLink_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const getWorldLink_grpc1Response*>(
               &_getWorldLink_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(getWorldLink_grpc1Response& a, getWorldLink_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldLink_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldLink_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldLink_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldLink_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldLink_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldLink_grpc1Response& from) {
    getWorldLink_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldLink_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldLink_grpc1Response";
  }
  protected:
  explicit getWorldLink_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldLinkFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes worldLink = 1;
  void clear_worldlink();
  const std::string& worldlink() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldlink(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldlink();
  PROTOBUF_NODISCARD std::string* release_worldlink();
  void set_allocated_worldlink(std::string* worldlink);
  private:
  const std::string& _internal_worldlink() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldlink(const std::string& value);
  std::string* _internal_mutable_worldlink();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldLink_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldlink_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeWorldLink_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.removeWorldLink_grpc0Request) */ {
 public:
  inline removeWorldLink_grpc0Request() : removeWorldLink_grpc0Request(nullptr) {}
  ~removeWorldLink_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR removeWorldLink_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeWorldLink_grpc0Request(const removeWorldLink_grpc0Request& from);
  removeWorldLink_grpc0Request(removeWorldLink_grpc0Request&& from) noexcept
    : removeWorldLink_grpc0Request() {
    *this = ::std::move(from);
  }

  inline removeWorldLink_grpc0Request& operator=(const removeWorldLink_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeWorldLink_grpc0Request& operator=(removeWorldLink_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeWorldLink_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeWorldLink_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const removeWorldLink_grpc0Request*>(
               &_removeWorldLink_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(removeWorldLink_grpc0Request& a, removeWorldLink_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(removeWorldLink_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeWorldLink_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeWorldLink_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeWorldLink_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeWorldLink_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const removeWorldLink_grpc0Request& from) {
    removeWorldLink_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeWorldLink_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.removeWorldLink_grpc0Request";
  }
  protected:
  explicit removeWorldLink_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentIdFieldNumber = 2,
    kChildIdFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes parentId = 2;
  void clear_parentid();
  const std::string& parentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentid();
  PROTOBUF_NODISCARD std::string* release_parentid();
  void set_allocated_parentid(std::string* parentid);
  private:
  const std::string& _internal_parentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentid(const std::string& value);
  std::string* _internal_mutable_parentid();
  public:

  // bytes childId = 3;
  void clear_childid();
  const std::string& childid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_childid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_childid();
  PROTOBUF_NODISCARD std::string* release_childid();
  void set_allocated_childid(std::string* childid);
  private:
  const std::string& _internal_childid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_childid(const std::string& value);
  std::string* _internal_mutable_childid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.removeWorldLink_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr childid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeWorldLink_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.removeWorldLink_grpc0Response) */ {
 public:
  inline removeWorldLink_grpc0Response() : removeWorldLink_grpc0Response(nullptr) {}
  ~removeWorldLink_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR removeWorldLink_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeWorldLink_grpc0Response(const removeWorldLink_grpc0Response& from);
  removeWorldLink_grpc0Response(removeWorldLink_grpc0Response&& from) noexcept
    : removeWorldLink_grpc0Response() {
    *this = ::std::move(from);
  }

  inline removeWorldLink_grpc0Response& operator=(const removeWorldLink_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeWorldLink_grpc0Response& operator=(removeWorldLink_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeWorldLink_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeWorldLink_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const removeWorldLink_grpc0Response*>(
               &_removeWorldLink_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(removeWorldLink_grpc0Response& a, removeWorldLink_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(removeWorldLink_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeWorldLink_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeWorldLink_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeWorldLink_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeWorldLink_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const removeWorldLink_grpc0Response& from) {
    removeWorldLink_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeWorldLink_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.removeWorldLink_grpc0Response";
  }
  protected:
  explicit removeWorldLink_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.removeWorldLink_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeWorldLink_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.removeWorldLink_grpc1Request) */ {
 public:
  inline removeWorldLink_grpc1Request() : removeWorldLink_grpc1Request(nullptr) {}
  ~removeWorldLink_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR removeWorldLink_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeWorldLink_grpc1Request(const removeWorldLink_grpc1Request& from);
  removeWorldLink_grpc1Request(removeWorldLink_grpc1Request&& from) noexcept
    : removeWorldLink_grpc1Request() {
    *this = ::std::move(from);
  }

  inline removeWorldLink_grpc1Request& operator=(const removeWorldLink_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeWorldLink_grpc1Request& operator=(removeWorldLink_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeWorldLink_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeWorldLink_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const removeWorldLink_grpc1Request*>(
               &_removeWorldLink_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(removeWorldLink_grpc1Request& a, removeWorldLink_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(removeWorldLink_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeWorldLink_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeWorldLink_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeWorldLink_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeWorldLink_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const removeWorldLink_grpc1Request& from) {
    removeWorldLink_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeWorldLink_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.removeWorldLink_grpc1Request";
  }
  protected:
  explicit removeWorldLink_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkIdFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes linkId = 2;
  void clear_linkid();
  const std::string& linkid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_linkid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_linkid();
  PROTOBUF_NODISCARD std::string* release_linkid();
  void set_allocated_linkid(std::string* linkid);
  private:
  const std::string& _internal_linkid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_linkid(const std::string& value);
  std::string* _internal_mutable_linkid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.removeWorldLink_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linkid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class removeWorldLink_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.removeWorldLink_grpc1Response) */ {
 public:
  inline removeWorldLink_grpc1Response() : removeWorldLink_grpc1Response(nullptr) {}
  ~removeWorldLink_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR removeWorldLink_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  removeWorldLink_grpc1Response(const removeWorldLink_grpc1Response& from);
  removeWorldLink_grpc1Response(removeWorldLink_grpc1Response&& from) noexcept
    : removeWorldLink_grpc1Response() {
    *this = ::std::move(from);
  }

  inline removeWorldLink_grpc1Response& operator=(const removeWorldLink_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline removeWorldLink_grpc1Response& operator=(removeWorldLink_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const removeWorldLink_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const removeWorldLink_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const removeWorldLink_grpc1Response*>(
               &_removeWorldLink_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(removeWorldLink_grpc1Response& a, removeWorldLink_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(removeWorldLink_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(removeWorldLink_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  removeWorldLink_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<removeWorldLink_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const removeWorldLink_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const removeWorldLink_grpc1Response& from) {
    removeWorldLink_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(removeWorldLink_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.removeWorldLink_grpc1Response";
  }
  protected:
  explicit removeWorldLink_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.removeWorldLink_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldLinksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldLinksRequest) */ {
 public:
  inline getWorldLinksRequest() : getWorldLinksRequest(nullptr) {}
  ~getWorldLinksRequest() override;
  explicit PROTOBUF_CONSTEXPR getWorldLinksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldLinksRequest(const getWorldLinksRequest& from);
  getWorldLinksRequest(getWorldLinksRequest&& from) noexcept
    : getWorldLinksRequest() {
    *this = ::std::move(from);
  }

  inline getWorldLinksRequest& operator=(const getWorldLinksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldLinksRequest& operator=(getWorldLinksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldLinksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldLinksRequest* internal_default_instance() {
    return reinterpret_cast<const getWorldLinksRequest*>(
               &_getWorldLinksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(getWorldLinksRequest& a, getWorldLinksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldLinksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldLinksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldLinksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldLinksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldLinksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldLinksRequest& from) {
    getWorldLinksRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldLinksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldLinksRequest";
  }
  protected:
  explicit getWorldLinksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes vector = 2;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldLinksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class getWorldLinksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.getWorldLinksResponse) */ {
 public:
  inline getWorldLinksResponse() : getWorldLinksResponse(nullptr) {}
  ~getWorldLinksResponse() override;
  explicit PROTOBUF_CONSTEXPR getWorldLinksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldLinksResponse(const getWorldLinksResponse& from);
  getWorldLinksResponse(getWorldLinksResponse&& from) noexcept
    : getWorldLinksResponse() {
    *this = ::std::move(from);
  }

  inline getWorldLinksResponse& operator=(const getWorldLinksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldLinksResponse& operator=(getWorldLinksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldLinksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldLinksResponse* internal_default_instance() {
    return reinterpret_cast<const getWorldLinksResponse*>(
               &_getWorldLinksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(getWorldLinksResponse& a, getWorldLinksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldLinksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldLinksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getWorldLinksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getWorldLinksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldLinksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getWorldLinksResponse& from) {
    getWorldLinksResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldLinksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.getWorldLinksResponse";
  }
  protected:
  explicit getWorldLinksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVectorFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes vector = 1;
  void clear_vector();
  const std::string& vector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vector();
  PROTOBUF_NODISCARD std::string* release_vector();
  void set_allocated_vector(std::string* vector);
  private:
  const std::string& _internal_vector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vector(const std::string& value);
  std::string* _internal_mutable_vector();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.getWorldLinksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vector_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class modifyWorldLinkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.modifyWorldLinkRequest) */ {
 public:
  inline modifyWorldLinkRequest() : modifyWorldLinkRequest(nullptr) {}
  ~modifyWorldLinkRequest() override;
  explicit PROTOBUF_CONSTEXPR modifyWorldLinkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  modifyWorldLinkRequest(const modifyWorldLinkRequest& from);
  modifyWorldLinkRequest(modifyWorldLinkRequest&& from) noexcept
    : modifyWorldLinkRequest() {
    *this = ::std::move(from);
  }

  inline modifyWorldLinkRequest& operator=(const modifyWorldLinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline modifyWorldLinkRequest& operator=(modifyWorldLinkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const modifyWorldLinkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const modifyWorldLinkRequest* internal_default_instance() {
    return reinterpret_cast<const modifyWorldLinkRequest*>(
               &_modifyWorldLinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(modifyWorldLinkRequest& a, modifyWorldLinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(modifyWorldLinkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(modifyWorldLinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  modifyWorldLinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<modifyWorldLinkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const modifyWorldLinkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const modifyWorldLinkRequest& from) {
    modifyWorldLinkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(modifyWorldLinkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.modifyWorldLinkRequest";
  }
  protected:
  explicit modifyWorldLinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldLinkFieldNumber = 2,
    kIdFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes worldLink = 2;
  void clear_worldlink();
  const std::string& worldlink() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_worldlink(ArgT0&& arg0, ArgT... args);
  std::string* mutable_worldlink();
  PROTOBUF_NODISCARD std::string* release_worldlink();
  void set_allocated_worldlink(std::string* worldlink);
  private:
  const std::string& _internal_worldlink() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_worldlink(const std::string& value);
  std::string* _internal_mutable_worldlink();
  public:

  // bytes id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.modifyWorldLinkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldlink_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class modifyWorldLinkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.modifyWorldLinkResponse) */ {
 public:
  inline modifyWorldLinkResponse() : modifyWorldLinkResponse(nullptr) {}
  ~modifyWorldLinkResponse() override;
  explicit PROTOBUF_CONSTEXPR modifyWorldLinkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  modifyWorldLinkResponse(const modifyWorldLinkResponse& from);
  modifyWorldLinkResponse(modifyWorldLinkResponse&& from) noexcept
    : modifyWorldLinkResponse() {
    *this = ::std::move(from);
  }

  inline modifyWorldLinkResponse& operator=(const modifyWorldLinkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline modifyWorldLinkResponse& operator=(modifyWorldLinkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const modifyWorldLinkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const modifyWorldLinkResponse* internal_default_instance() {
    return reinterpret_cast<const modifyWorldLinkResponse*>(
               &_modifyWorldLinkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(modifyWorldLinkResponse& a, modifyWorldLinkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(modifyWorldLinkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(modifyWorldLinkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  modifyWorldLinkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<modifyWorldLinkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const modifyWorldLinkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const modifyWorldLinkResponse& from) {
    modifyWorldLinkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(modifyWorldLinkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.modifyWorldLinkResponse";
  }
  protected:
  explicit modifyWorldLinkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.modifyWorldLinkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.saveToFileRequest) */ {
 public:
  inline saveToFileRequest() : saveToFileRequest(nullptr) {}
  ~saveToFileRequest() override;
  explicit PROTOBUF_CONSTEXPR saveToFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileRequest(const saveToFileRequest& from);
  saveToFileRequest(saveToFileRequest&& from) noexcept
    : saveToFileRequest() {
    *this = ::std::move(from);
  }

  inline saveToFileRequest& operator=(const saveToFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileRequest& operator=(saveToFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const saveToFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileRequest* internal_default_instance() {
    return reinterpret_cast<const saveToFileRequest*>(
               &_saveToFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(saveToFileRequest& a, saveToFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  saveToFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<saveToFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const saveToFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const saveToFileRequest& from) {
    saveToFileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.saveToFileRequest";
  }
  protected:
  explicit saveToFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.saveToFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class saveToFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.saveToFileResponse) */ {
 public:
  inline saveToFileResponse() : saveToFileResponse(nullptr) {}
  ~saveToFileResponse() override;
  explicit PROTOBUF_CONSTEXPR saveToFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  saveToFileResponse(const saveToFileResponse& from);
  saveToFileResponse(saveToFileResponse&& from) noexcept
    : saveToFileResponse() {
    *this = ::std::move(from);
  }

  inline saveToFileResponse& operator=(const saveToFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline saveToFileResponse& operator=(saveToFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const saveToFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const saveToFileResponse* internal_default_instance() {
    return reinterpret_cast<const saveToFileResponse*>(
               &_saveToFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(saveToFileResponse& a, saveToFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(saveToFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(saveToFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  saveToFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<saveToFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const saveToFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const saveToFileResponse& from) {
    saveToFileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(saveToFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.saveToFileResponse";
  }
  protected:
  explicit saveToFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.saveToFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.loadFromFileRequest) */ {
 public:
  inline loadFromFileRequest() : loadFromFileRequest(nullptr) {}
  ~loadFromFileRequest() override;
  explicit PROTOBUF_CONSTEXPR loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileRequest(const loadFromFileRequest& from);
  loadFromFileRequest(loadFromFileRequest&& from) noexcept
    : loadFromFileRequest() {
    *this = ::std::move(from);
  }

  inline loadFromFileRequest& operator=(const loadFromFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileRequest& operator=(loadFromFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadFromFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileRequest* internal_default_instance() {
    return reinterpret_cast<const loadFromFileRequest*>(
               &_loadFromFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(loadFromFileRequest& a, loadFromFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  loadFromFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<loadFromFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadFromFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const loadFromFileRequest& from) {
    loadFromFileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.loadFromFileRequest";
  }
  protected:
  explicit loadFromFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.loadFromFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class loadFromFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.loadFromFileResponse) */ {
 public:
  inline loadFromFileResponse() : loadFromFileResponse(nullptr) {}
  ~loadFromFileResponse() override;
  explicit PROTOBUF_CONSTEXPR loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loadFromFileResponse(const loadFromFileResponse& from);
  loadFromFileResponse(loadFromFileResponse&& from) noexcept
    : loadFromFileResponse() {
    *this = ::std::move(from);
  }

  inline loadFromFileResponse& operator=(const loadFromFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadFromFileResponse& operator=(loadFromFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loadFromFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const loadFromFileResponse* internal_default_instance() {
    return reinterpret_cast<const loadFromFileResponse*>(
               &_loadFromFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(loadFromFileResponse& a, loadFromFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(loadFromFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loadFromFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  loadFromFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<loadFromFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loadFromFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const loadFromFileResponse& from) {
    loadFromFileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadFromFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.loadFromFileResponse";
  }
  protected:
  explicit loadFromFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.loadFromFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class deleteFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.deleteFileRequest) */ {
 public:
  inline deleteFileRequest() : deleteFileRequest(nullptr) {}
  ~deleteFileRequest() override;
  explicit PROTOBUF_CONSTEXPR deleteFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteFileRequest(const deleteFileRequest& from);
  deleteFileRequest(deleteFileRequest&& from) noexcept
    : deleteFileRequest() {
    *this = ::std::move(from);
  }

  inline deleteFileRequest& operator=(const deleteFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteFileRequest& operator=(deleteFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteFileRequest* internal_default_instance() {
    return reinterpret_cast<const deleteFileRequest*>(
               &_deleteFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(deleteFileRequest& a, deleteFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const deleteFileRequest& from) {
    deleteFileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.deleteFileRequest";
  }
  protected:
  explicit deleteFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.deleteFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// -------------------------------------------------------------------

class deleteFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIWorldGraphManager.deleteFileResponse) */ {
 public:
  inline deleteFileResponse() : deleteFileResponse(nullptr) {}
  ~deleteFileResponse() override;
  explicit PROTOBUF_CONSTEXPR deleteFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteFileResponse(const deleteFileResponse& from);
  deleteFileResponse(deleteFileResponse&& from) noexcept
    : deleteFileResponse() {
    *this = ::std::move(from);
  }

  inline deleteFileResponse& operator=(const deleteFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteFileResponse& operator=(deleteFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteFileResponse* internal_default_instance() {
    return reinterpret_cast<const deleteFileResponse*>(
               &_deleteFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(deleteFileResponse& a, deleteFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const deleteFileResponse& from) {
    deleteFileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIWorldGraphManager.deleteFileResponse";
  }
  protected:
  explicit deleteFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIWorldGraphManager.deleteFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIWorldGraphManagerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// getRelocalizationInformationRequest

// int32 grpcServerCompressionFormat = 1;
inline void getRelocalizationInformationRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getRelocalizationInformationRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getRelocalizationInformationRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getRelocalizationInformationRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getRelocalizationInformationRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getRelocalizationInformationRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getRelocalizationInformationRequest.grpcServerCompressionFormat)
}

// bytes uuids = 2;
inline void getRelocalizationInformationRequest::clear_uuids() {
  _impl_.uuids_.ClearToEmpty();
}
inline const std::string& getRelocalizationInformationRequest::uuids() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getRelocalizationInformationRequest.uuids)
  return _internal_uuids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getRelocalizationInformationRequest::set_uuids(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuids_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getRelocalizationInformationRequest.uuids)
}
inline std::string* getRelocalizationInformationRequest::mutable_uuids() {
  std::string* _s = _internal_mutable_uuids();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getRelocalizationInformationRequest.uuids)
  return _s;
}
inline const std::string& getRelocalizationInformationRequest::_internal_uuids() const {
  return _impl_.uuids_.Get();
}
inline void getRelocalizationInformationRequest::_internal_set_uuids(const std::string& value) {
  
  _impl_.uuids_.Set(value, GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationRequest::_internal_mutable_uuids() {
  
  return _impl_.uuids_.Mutable(GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationRequest::release_uuids() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getRelocalizationInformationRequest.uuids)
  return _impl_.uuids_.Release();
}
inline void getRelocalizationInformationRequest::set_allocated_uuids(std::string* uuids) {
  if (uuids != nullptr) {
    
  } else {
    
  }
  _impl_.uuids_.SetAllocated(uuids, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuids_.IsDefault()) {
    _impl_.uuids_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getRelocalizationInformationRequest.uuids)
}

// string token = 3;
inline void getRelocalizationInformationRequest::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& getRelocalizationInformationRequest::token() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getRelocalizationInformationRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getRelocalizationInformationRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getRelocalizationInformationRequest.token)
}
inline std::string* getRelocalizationInformationRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getRelocalizationInformationRequest.token)
  return _s;
}
inline const std::string& getRelocalizationInformationRequest::_internal_token() const {
  return _impl_.token_.Get();
}
inline void getRelocalizationInformationRequest::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationRequest::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationRequest::release_token() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getRelocalizationInformationRequest.token)
  return _impl_.token_.Release();
}
inline void getRelocalizationInformationRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getRelocalizationInformationRequest.token)
}

// bytes capability = 4;
inline void getRelocalizationInformationRequest::clear_capability() {
  _impl_.capability_.ClearToEmpty();
}
inline const std::string& getRelocalizationInformationRequest::capability() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getRelocalizationInformationRequest.capability)
  return _internal_capability();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getRelocalizationInformationRequest::set_capability(ArgT0&& arg0, ArgT... args) {
 
 _impl_.capability_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getRelocalizationInformationRequest.capability)
}
inline std::string* getRelocalizationInformationRequest::mutable_capability() {
  std::string* _s = _internal_mutable_capability();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getRelocalizationInformationRequest.capability)
  return _s;
}
inline const std::string& getRelocalizationInformationRequest::_internal_capability() const {
  return _impl_.capability_.Get();
}
inline void getRelocalizationInformationRequest::_internal_set_capability(const std::string& value) {
  
  _impl_.capability_.Set(value, GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationRequest::_internal_mutable_capability() {
  
  return _impl_.capability_.Mutable(GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationRequest::release_capability() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getRelocalizationInformationRequest.capability)
  return _impl_.capability_.Release();
}
inline void getRelocalizationInformationRequest::set_allocated_capability(std::string* capability) {
  if (capability != nullptr) {
    
  } else {
    
  }
  _impl_.capability_.SetAllocated(capability, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.capability_.IsDefault()) {
    _impl_.capability_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getRelocalizationInformationRequest.capability)
}

// bytes relocalizationInformation = 5;
inline void getRelocalizationInformationRequest::clear_relocalizationinformation() {
  _impl_.relocalizationinformation_.ClearToEmpty();
}
inline const std::string& getRelocalizationInformationRequest::relocalizationinformation() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getRelocalizationInformationRequest.relocalizationInformation)
  return _internal_relocalizationinformation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getRelocalizationInformationRequest::set_relocalizationinformation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relocalizationinformation_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getRelocalizationInformationRequest.relocalizationInformation)
}
inline std::string* getRelocalizationInformationRequest::mutable_relocalizationinformation() {
  std::string* _s = _internal_mutable_relocalizationinformation();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getRelocalizationInformationRequest.relocalizationInformation)
  return _s;
}
inline const std::string& getRelocalizationInformationRequest::_internal_relocalizationinformation() const {
  return _impl_.relocalizationinformation_.Get();
}
inline void getRelocalizationInformationRequest::_internal_set_relocalizationinformation(const std::string& value) {
  
  _impl_.relocalizationinformation_.Set(value, GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationRequest::_internal_mutable_relocalizationinformation() {
  
  return _impl_.relocalizationinformation_.Mutable(GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationRequest::release_relocalizationinformation() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getRelocalizationInformationRequest.relocalizationInformation)
  return _impl_.relocalizationinformation_.Release();
}
inline void getRelocalizationInformationRequest::set_allocated_relocalizationinformation(std::string* relocalizationinformation) {
  if (relocalizationinformation != nullptr) {
    
  } else {
    
  }
  _impl_.relocalizationinformation_.SetAllocated(relocalizationinformation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relocalizationinformation_.IsDefault()) {
    _impl_.relocalizationinformation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getRelocalizationInformationRequest.relocalizationInformation)
}

// -------------------------------------------------------------------

// getRelocalizationInformationResponse

// bytes relocalizationInformation = 1;
inline void getRelocalizationInformationResponse::clear_relocalizationinformation() {
  _impl_.relocalizationinformation_.ClearToEmpty();
}
inline const std::string& getRelocalizationInformationResponse::relocalizationinformation() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getRelocalizationInformationResponse.relocalizationInformation)
  return _internal_relocalizationinformation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getRelocalizationInformationResponse::set_relocalizationinformation(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relocalizationinformation_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getRelocalizationInformationResponse.relocalizationInformation)
}
inline std::string* getRelocalizationInformationResponse::mutable_relocalizationinformation() {
  std::string* _s = _internal_mutable_relocalizationinformation();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getRelocalizationInformationResponse.relocalizationInformation)
  return _s;
}
inline const std::string& getRelocalizationInformationResponse::_internal_relocalizationinformation() const {
  return _impl_.relocalizationinformation_.Get();
}
inline void getRelocalizationInformationResponse::_internal_set_relocalizationinformation(const std::string& value) {
  
  _impl_.relocalizationinformation_.Set(value, GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationResponse::_internal_mutable_relocalizationinformation() {
  
  return _impl_.relocalizationinformation_.Mutable(GetArenaForAllocation());
}
inline std::string* getRelocalizationInformationResponse::release_relocalizationinformation() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getRelocalizationInformationResponse.relocalizationInformation)
  return _impl_.relocalizationinformation_.Release();
}
inline void getRelocalizationInformationResponse::set_allocated_relocalizationinformation(std::string* relocalizationinformation) {
  if (relocalizationinformation != nullptr) {
    
  } else {
    
  }
  _impl_.relocalizationinformation_.SetAllocated(relocalizationinformation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relocalizationinformation_.IsDefault()) {
    _impl_.relocalizationinformation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getRelocalizationInformationResponse.relocalizationInformation)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getRelocalizationInformationResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getRelocalizationInformationResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getRelocalizationInformationResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getRelocalizationInformationResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getRelocalizationInformationResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getRelocalizationInformationResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getRelocalizationInformationResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldElementRequest

// int32 grpcServerCompressionFormat = 1;
inline void getWorldElementRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getWorldElementRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getWorldElementRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getWorldElementRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getWorldElementRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementRequest.grpcServerCompressionFormat)
}

// bytes worldElementId = 2;
inline void getWorldElementRequest::clear_worldelementid() {
  _impl_.worldelementid_.ClearToEmpty();
}
inline const std::string& getWorldElementRequest::worldelementid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementRequest.worldElementId)
  return _internal_worldelementid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementRequest::set_worldelementid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldelementid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementRequest.worldElementId)
}
inline std::string* getWorldElementRequest::mutable_worldelementid() {
  std::string* _s = _internal_mutable_worldelementid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementRequest.worldElementId)
  return _s;
}
inline const std::string& getWorldElementRequest::_internal_worldelementid() const {
  return _impl_.worldelementid_.Get();
}
inline void getWorldElementRequest::_internal_set_worldelementid(const std::string& value) {
  
  _impl_.worldelementid_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementRequest::_internal_mutable_worldelementid() {
  
  return _impl_.worldelementid_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementRequest::release_worldelementid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementRequest.worldElementId)
  return _impl_.worldelementid_.Release();
}
inline void getWorldElementRequest::set_allocated_worldelementid(std::string* worldelementid) {
  if (worldelementid != nullptr) {
    
  } else {
    
  }
  _impl_.worldelementid_.SetAllocated(worldelementid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldelementid_.IsDefault()) {
    _impl_.worldelementid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementRequest.worldElementId)
}

// bytes worldElement = 3;
inline void getWorldElementRequest::clear_worldelement() {
  _impl_.worldelement_.ClearToEmpty();
}
inline const std::string& getWorldElementRequest::worldelement() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementRequest.worldElement)
  return _internal_worldelement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementRequest::set_worldelement(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldelement_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementRequest.worldElement)
}
inline std::string* getWorldElementRequest::mutable_worldelement() {
  std::string* _s = _internal_mutable_worldelement();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementRequest.worldElement)
  return _s;
}
inline const std::string& getWorldElementRequest::_internal_worldelement() const {
  return _impl_.worldelement_.Get();
}
inline void getWorldElementRequest::_internal_set_worldelement(const std::string& value) {
  
  _impl_.worldelement_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementRequest::_internal_mutable_worldelement() {
  
  return _impl_.worldelement_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementRequest::release_worldelement() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementRequest.worldElement)
  return _impl_.worldelement_.Release();
}
inline void getWorldElementRequest::set_allocated_worldelement(std::string* worldelement) {
  if (worldelement != nullptr) {
    
  } else {
    
  }
  _impl_.worldelement_.SetAllocated(worldelement, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldelement_.IsDefault()) {
    _impl_.worldelement_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementRequest.worldElement)
}

// -------------------------------------------------------------------

// getWorldElementResponse

// bytes worldElement = 1;
inline void getWorldElementResponse::clear_worldelement() {
  _impl_.worldelement_.ClearToEmpty();
}
inline const std::string& getWorldElementResponse::worldelement() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementResponse.worldElement)
  return _internal_worldelement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementResponse::set_worldelement(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldelement_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementResponse.worldElement)
}
inline std::string* getWorldElementResponse::mutable_worldelement() {
  std::string* _s = _internal_mutable_worldelement();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementResponse.worldElement)
  return _s;
}
inline const std::string& getWorldElementResponse::_internal_worldelement() const {
  return _impl_.worldelement_.Get();
}
inline void getWorldElementResponse::_internal_set_worldelement(const std::string& value) {
  
  _impl_.worldelement_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementResponse::_internal_mutable_worldelement() {
  
  return _impl_.worldelement_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementResponse::release_worldelement() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementResponse.worldElement)
  return _impl_.worldelement_.Release();
}
inline void getWorldElementResponse::set_allocated_worldelement(std::string* worldelement) {
  if (worldelement != nullptr) {
    
  } else {
    
  }
  _impl_.worldelement_.SetAllocated(worldelement, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldelement_.IsDefault()) {
    _impl_.worldelement_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementResponse.worldElement)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getWorldElementResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getWorldElementResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getWorldElementResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getWorldElementResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getWorldElementResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldElementsRequest

// int32 grpcServerCompressionFormat = 1;
inline void getWorldElementsRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getWorldElementsRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getWorldElementsRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementsRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getWorldElementsRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getWorldElementsRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementsRequest.grpcServerCompressionFormat)
}

// bytes vector = 2;
inline void getWorldElementsRequest::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldElementsRequest::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementsRequest.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementsRequest::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementsRequest.vector)
}
inline std::string* getWorldElementsRequest::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementsRequest.vector)
  return _s;
}
inline const std::string& getWorldElementsRequest::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldElementsRequest::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementsRequest::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementsRequest::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementsRequest.vector)
  return _impl_.vector_.Release();
}
inline void getWorldElementsRequest::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementsRequest.vector)
}

// -------------------------------------------------------------------

// getWorldElementsResponse

// bytes vector = 1;
inline void getWorldElementsResponse::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldElementsResponse::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementsResponse.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementsResponse::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementsResponse.vector)
}
inline std::string* getWorldElementsResponse::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementsResponse.vector)
  return _s;
}
inline const std::string& getWorldElementsResponse::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldElementsResponse::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementsResponse::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementsResponse::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementsResponse.vector)
  return _impl_.vector_.Release();
}
inline void getWorldElementsResponse::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementsResponse.vector)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getWorldElementsResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getWorldElementsResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getWorldElementsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getWorldElementsResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getWorldElementsResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldElementByKeyValueRequest

// int32 grpcServerCompressionFormat = 1;
inline void getWorldElementByKeyValueRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getWorldElementByKeyValueRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getWorldElementByKeyValueRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getWorldElementByKeyValueRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getWorldElementByKeyValueRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.grpcServerCompressionFormat)
}

// string key = 2;
inline void getWorldElementByKeyValueRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& getWorldElementByKeyValueRequest::key() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementByKeyValueRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.key)
}
inline std::string* getWorldElementByKeyValueRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.key)
  return _s;
}
inline const std::string& getWorldElementByKeyValueRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void getWorldElementByKeyValueRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyValueRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyValueRequest::release_key() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.key)
  return _impl_.key_.Release();
}
inline void getWorldElementByKeyValueRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.key)
}

// string value = 3;
inline void getWorldElementByKeyValueRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& getWorldElementByKeyValueRequest::value() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementByKeyValueRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.value)
}
inline std::string* getWorldElementByKeyValueRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.value)
  return _s;
}
inline const std::string& getWorldElementByKeyValueRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void getWorldElementByKeyValueRequest::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyValueRequest::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyValueRequest::release_value() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.value)
  return _impl_.value_.Release();
}
inline void getWorldElementByKeyValueRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.value)
}

// bytes vector = 4;
inline void getWorldElementByKeyValueRequest::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldElementByKeyValueRequest::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementByKeyValueRequest::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.vector)
}
inline std::string* getWorldElementByKeyValueRequest::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.vector)
  return _s;
}
inline const std::string& getWorldElementByKeyValueRequest::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldElementByKeyValueRequest::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyValueRequest::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyValueRequest::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.vector)
  return _impl_.vector_.Release();
}
inline void getWorldElementByKeyValueRequest::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementByKeyValueRequest.vector)
}

// -------------------------------------------------------------------

// getWorldElementByKeyValueResponse

// bytes vector = 1;
inline void getWorldElementByKeyValueResponse::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldElementByKeyValueResponse::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyValueResponse.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementByKeyValueResponse::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyValueResponse.vector)
}
inline std::string* getWorldElementByKeyValueResponse::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementByKeyValueResponse.vector)
  return _s;
}
inline const std::string& getWorldElementByKeyValueResponse::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldElementByKeyValueResponse::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyValueResponse::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyValueResponse::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementByKeyValueResponse.vector)
  return _impl_.vector_.Release();
}
inline void getWorldElementByKeyValueResponse::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementByKeyValueResponse.vector)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getWorldElementByKeyValueResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getWorldElementByKeyValueResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getWorldElementByKeyValueResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyValueResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getWorldElementByKeyValueResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getWorldElementByKeyValueResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyValueResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldElementByKeyRequest

// int32 grpcServerCompressionFormat = 1;
inline void getWorldElementByKeyRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getWorldElementByKeyRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getWorldElementByKeyRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getWorldElementByKeyRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getWorldElementByKeyRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyRequest.grpcServerCompressionFormat)
}

// string key = 2;
inline void getWorldElementByKeyRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& getWorldElementByKeyRequest::key() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementByKeyRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyRequest.key)
}
inline std::string* getWorldElementByKeyRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementByKeyRequest.key)
  return _s;
}
inline const std::string& getWorldElementByKeyRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void getWorldElementByKeyRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyRequest::release_key() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementByKeyRequest.key)
  return _impl_.key_.Release();
}
inline void getWorldElementByKeyRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementByKeyRequest.key)
}

// bytes vector = 3;
inline void getWorldElementByKeyRequest::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldElementByKeyRequest::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyRequest.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementByKeyRequest::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyRequest.vector)
}
inline std::string* getWorldElementByKeyRequest::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementByKeyRequest.vector)
  return _s;
}
inline const std::string& getWorldElementByKeyRequest::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldElementByKeyRequest::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyRequest::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyRequest::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementByKeyRequest.vector)
  return _impl_.vector_.Release();
}
inline void getWorldElementByKeyRequest::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementByKeyRequest.vector)
}

// -------------------------------------------------------------------

// getWorldElementByKeyResponse

// bytes vector = 1;
inline void getWorldElementByKeyResponse::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldElementByKeyResponse::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyResponse.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldElementByKeyResponse::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyResponse.vector)
}
inline std::string* getWorldElementByKeyResponse::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldElementByKeyResponse.vector)
  return _s;
}
inline const std::string& getWorldElementByKeyResponse::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldElementByKeyResponse::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyResponse::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldElementByKeyResponse::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldElementByKeyResponse.vector)
  return _impl_.vector_.Release();
}
inline void getWorldElementByKeyResponse::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldElementByKeyResponse.vector)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getWorldElementByKeyResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getWorldElementByKeyResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getWorldElementByKeyResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldElementByKeyResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getWorldElementByKeyResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getWorldElementByKeyResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldElementByKeyResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addTrackableRequest

// int32 grpcServerCompressionFormat = 1;
inline void addTrackableRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t addTrackableRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t addTrackableRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addTrackableRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void addTrackableRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void addTrackableRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addTrackableRequest.grpcServerCompressionFormat)
}

// bytes trackable = 2;
inline void addTrackableRequest::clear_trackable() {
  _impl_.trackable_.ClearToEmpty();
}
inline const std::string& addTrackableRequest::trackable() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addTrackableRequest.trackable)
  return _internal_trackable();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addTrackableRequest::set_trackable(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trackable_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addTrackableRequest.trackable)
}
inline std::string* addTrackableRequest::mutable_trackable() {
  std::string* _s = _internal_mutable_trackable();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.addTrackableRequest.trackable)
  return _s;
}
inline const std::string& addTrackableRequest::_internal_trackable() const {
  return _impl_.trackable_.Get();
}
inline void addTrackableRequest::_internal_set_trackable(const std::string& value) {
  
  _impl_.trackable_.Set(value, GetArenaForAllocation());
}
inline std::string* addTrackableRequest::_internal_mutable_trackable() {
  
  return _impl_.trackable_.Mutable(GetArenaForAllocation());
}
inline std::string* addTrackableRequest::release_trackable() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.addTrackableRequest.trackable)
  return _impl_.trackable_.Release();
}
inline void addTrackableRequest::set_allocated_trackable(std::string* trackable) {
  if (trackable != nullptr) {
    
  } else {
    
  }
  _impl_.trackable_.SetAllocated(trackable, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trackable_.IsDefault()) {
    _impl_.trackable_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.addTrackableRequest.trackable)
}

// bytes id = 3;
inline void addTrackableRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& addTrackableRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addTrackableRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addTrackableRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addTrackableRequest.id)
}
inline std::string* addTrackableRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.addTrackableRequest.id)
  return _s;
}
inline const std::string& addTrackableRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void addTrackableRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* addTrackableRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* addTrackableRequest::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.addTrackableRequest.id)
  return _impl_.id_.Release();
}
inline void addTrackableRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.addTrackableRequest.id)
}

// -------------------------------------------------------------------

// addTrackableResponse

// bytes id = 1;
inline void addTrackableResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& addTrackableResponse::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addTrackableResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addTrackableResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addTrackableResponse.id)
}
inline std::string* addTrackableResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.addTrackableResponse.id)
  return _s;
}
inline const std::string& addTrackableResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void addTrackableResponse::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* addTrackableResponse::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* addTrackableResponse::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.addTrackableResponse.id)
  return _impl_.id_.Release();
}
inline void addTrackableResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.addTrackableResponse.id)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void addTrackableResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t addTrackableResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t addTrackableResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addTrackableResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addTrackableResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void addTrackableResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addTrackableResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getTrackableRequest

// int32 grpcServerCompressionFormat = 1;
inline void getTrackableRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getTrackableRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getTrackableRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getTrackableRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getTrackableRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getTrackableRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getTrackableRequest.grpcServerCompressionFormat)
}

// bytes trackableId = 2;
inline void getTrackableRequest::clear_trackableid() {
  _impl_.trackableid_.ClearToEmpty();
}
inline const std::string& getTrackableRequest::trackableid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getTrackableRequest.trackableId)
  return _internal_trackableid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getTrackableRequest::set_trackableid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trackableid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getTrackableRequest.trackableId)
}
inline std::string* getTrackableRequest::mutable_trackableid() {
  std::string* _s = _internal_mutable_trackableid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getTrackableRequest.trackableId)
  return _s;
}
inline const std::string& getTrackableRequest::_internal_trackableid() const {
  return _impl_.trackableid_.Get();
}
inline void getTrackableRequest::_internal_set_trackableid(const std::string& value) {
  
  _impl_.trackableid_.Set(value, GetArenaForAllocation());
}
inline std::string* getTrackableRequest::_internal_mutable_trackableid() {
  
  return _impl_.trackableid_.Mutable(GetArenaForAllocation());
}
inline std::string* getTrackableRequest::release_trackableid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getTrackableRequest.trackableId)
  return _impl_.trackableid_.Release();
}
inline void getTrackableRequest::set_allocated_trackableid(std::string* trackableid) {
  if (trackableid != nullptr) {
    
  } else {
    
  }
  _impl_.trackableid_.SetAllocated(trackableid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trackableid_.IsDefault()) {
    _impl_.trackableid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getTrackableRequest.trackableId)
}

// bytes trackable = 3;
inline void getTrackableRequest::clear_trackable() {
  _impl_.trackable_.ClearToEmpty();
}
inline const std::string& getTrackableRequest::trackable() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getTrackableRequest.trackable)
  return _internal_trackable();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getTrackableRequest::set_trackable(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trackable_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getTrackableRequest.trackable)
}
inline std::string* getTrackableRequest::mutable_trackable() {
  std::string* _s = _internal_mutable_trackable();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getTrackableRequest.trackable)
  return _s;
}
inline const std::string& getTrackableRequest::_internal_trackable() const {
  return _impl_.trackable_.Get();
}
inline void getTrackableRequest::_internal_set_trackable(const std::string& value) {
  
  _impl_.trackable_.Set(value, GetArenaForAllocation());
}
inline std::string* getTrackableRequest::_internal_mutable_trackable() {
  
  return _impl_.trackable_.Mutable(GetArenaForAllocation());
}
inline std::string* getTrackableRequest::release_trackable() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getTrackableRequest.trackable)
  return _impl_.trackable_.Release();
}
inline void getTrackableRequest::set_allocated_trackable(std::string* trackable) {
  if (trackable != nullptr) {
    
  } else {
    
  }
  _impl_.trackable_.SetAllocated(trackable, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trackable_.IsDefault()) {
    _impl_.trackable_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getTrackableRequest.trackable)
}

// -------------------------------------------------------------------

// getTrackableResponse

// bytes trackable = 1;
inline void getTrackableResponse::clear_trackable() {
  _impl_.trackable_.ClearToEmpty();
}
inline const std::string& getTrackableResponse::trackable() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getTrackableResponse.trackable)
  return _internal_trackable();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getTrackableResponse::set_trackable(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trackable_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getTrackableResponse.trackable)
}
inline std::string* getTrackableResponse::mutable_trackable() {
  std::string* _s = _internal_mutable_trackable();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getTrackableResponse.trackable)
  return _s;
}
inline const std::string& getTrackableResponse::_internal_trackable() const {
  return _impl_.trackable_.Get();
}
inline void getTrackableResponse::_internal_set_trackable(const std::string& value) {
  
  _impl_.trackable_.Set(value, GetArenaForAllocation());
}
inline std::string* getTrackableResponse::_internal_mutable_trackable() {
  
  return _impl_.trackable_.Mutable(GetArenaForAllocation());
}
inline std::string* getTrackableResponse::release_trackable() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getTrackableResponse.trackable)
  return _impl_.trackable_.Release();
}
inline void getTrackableResponse::set_allocated_trackable(std::string* trackable) {
  if (trackable != nullptr) {
    
  } else {
    
  }
  _impl_.trackable_.SetAllocated(trackable, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trackable_.IsDefault()) {
    _impl_.trackable_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getTrackableResponse.trackable)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getTrackableResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getTrackableResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getTrackableResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getTrackableResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getTrackableResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getTrackableResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getTrackableResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeTrackableRequest

// int32 grpcServerCompressionFormat = 1;
inline void removeTrackableRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t removeTrackableRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t removeTrackableRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeTrackableRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void removeTrackableRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void removeTrackableRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeTrackableRequest.grpcServerCompressionFormat)
}

// bytes trackableId = 2;
inline void removeTrackableRequest::clear_trackableid() {
  _impl_.trackableid_.ClearToEmpty();
}
inline const std::string& removeTrackableRequest::trackableid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeTrackableRequest.trackableId)
  return _internal_trackableid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void removeTrackableRequest::set_trackableid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trackableid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeTrackableRequest.trackableId)
}
inline std::string* removeTrackableRequest::mutable_trackableid() {
  std::string* _s = _internal_mutable_trackableid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.removeTrackableRequest.trackableId)
  return _s;
}
inline const std::string& removeTrackableRequest::_internal_trackableid() const {
  return _impl_.trackableid_.Get();
}
inline void removeTrackableRequest::_internal_set_trackableid(const std::string& value) {
  
  _impl_.trackableid_.Set(value, GetArenaForAllocation());
}
inline std::string* removeTrackableRequest::_internal_mutable_trackableid() {
  
  return _impl_.trackableid_.Mutable(GetArenaForAllocation());
}
inline std::string* removeTrackableRequest::release_trackableid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.removeTrackableRequest.trackableId)
  return _impl_.trackableid_.Release();
}
inline void removeTrackableRequest::set_allocated_trackableid(std::string* trackableid) {
  if (trackableid != nullptr) {
    
  } else {
    
  }
  _impl_.trackableid_.SetAllocated(trackableid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trackableid_.IsDefault()) {
    _impl_.trackableid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.removeTrackableRequest.trackableId)
}

// -------------------------------------------------------------------

// removeTrackableResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void removeTrackableResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t removeTrackableResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t removeTrackableResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeTrackableResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeTrackableResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void removeTrackableResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeTrackableResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getTrackablesRequest

// int32 grpcServerCompressionFormat = 1;
inline void getTrackablesRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getTrackablesRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getTrackablesRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getTrackablesRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getTrackablesRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getTrackablesRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getTrackablesRequest.grpcServerCompressionFormat)
}

// bytes vector = 2;
inline void getTrackablesRequest::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getTrackablesRequest::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getTrackablesRequest.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getTrackablesRequest::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getTrackablesRequest.vector)
}
inline std::string* getTrackablesRequest::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getTrackablesRequest.vector)
  return _s;
}
inline const std::string& getTrackablesRequest::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getTrackablesRequest::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getTrackablesRequest::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getTrackablesRequest::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getTrackablesRequest.vector)
  return _impl_.vector_.Release();
}
inline void getTrackablesRequest::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getTrackablesRequest.vector)
}

// -------------------------------------------------------------------

// getTrackablesResponse

// bytes vector = 1;
inline void getTrackablesResponse::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getTrackablesResponse::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getTrackablesResponse.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getTrackablesResponse::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getTrackablesResponse.vector)
}
inline std::string* getTrackablesResponse::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getTrackablesResponse.vector)
  return _s;
}
inline const std::string& getTrackablesResponse::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getTrackablesResponse::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getTrackablesResponse::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getTrackablesResponse::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getTrackablesResponse.vector)
  return _impl_.vector_.Release();
}
inline void getTrackablesResponse::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getTrackablesResponse.vector)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getTrackablesResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getTrackablesResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getTrackablesResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getTrackablesResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getTrackablesResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getTrackablesResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getTrackablesResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// modifyTrackableRequest

// int32 grpcServerCompressionFormat = 1;
inline void modifyTrackableRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t modifyTrackableRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t modifyTrackableRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyTrackableRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void modifyTrackableRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void modifyTrackableRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyTrackableRequest.grpcServerCompressionFormat)
}

// bytes trackable = 2;
inline void modifyTrackableRequest::clear_trackable() {
  _impl_.trackable_.ClearToEmpty();
}
inline const std::string& modifyTrackableRequest::trackable() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyTrackableRequest.trackable)
  return _internal_trackable();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void modifyTrackableRequest::set_trackable(ArgT0&& arg0, ArgT... args) {
 
 _impl_.trackable_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyTrackableRequest.trackable)
}
inline std::string* modifyTrackableRequest::mutable_trackable() {
  std::string* _s = _internal_mutable_trackable();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.modifyTrackableRequest.trackable)
  return _s;
}
inline const std::string& modifyTrackableRequest::_internal_trackable() const {
  return _impl_.trackable_.Get();
}
inline void modifyTrackableRequest::_internal_set_trackable(const std::string& value) {
  
  _impl_.trackable_.Set(value, GetArenaForAllocation());
}
inline std::string* modifyTrackableRequest::_internal_mutable_trackable() {
  
  return _impl_.trackable_.Mutable(GetArenaForAllocation());
}
inline std::string* modifyTrackableRequest::release_trackable() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.modifyTrackableRequest.trackable)
  return _impl_.trackable_.Release();
}
inline void modifyTrackableRequest::set_allocated_trackable(std::string* trackable) {
  if (trackable != nullptr) {
    
  } else {
    
  }
  _impl_.trackable_.SetAllocated(trackable, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trackable_.IsDefault()) {
    _impl_.trackable_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.modifyTrackableRequest.trackable)
}

// bytes id = 3;
inline void modifyTrackableRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& modifyTrackableRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyTrackableRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void modifyTrackableRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyTrackableRequest.id)
}
inline std::string* modifyTrackableRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.modifyTrackableRequest.id)
  return _s;
}
inline const std::string& modifyTrackableRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void modifyTrackableRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* modifyTrackableRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* modifyTrackableRequest::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.modifyTrackableRequest.id)
  return _impl_.id_.Release();
}
inline void modifyTrackableRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.modifyTrackableRequest.id)
}

// -------------------------------------------------------------------

// modifyTrackableResponse

// bytes id = 1;
inline void modifyTrackableResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& modifyTrackableResponse::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyTrackableResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void modifyTrackableResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyTrackableResponse.id)
}
inline std::string* modifyTrackableResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.modifyTrackableResponse.id)
  return _s;
}
inline const std::string& modifyTrackableResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void modifyTrackableResponse::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* modifyTrackableResponse::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* modifyTrackableResponse::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.modifyTrackableResponse.id)
  return _impl_.id_.Release();
}
inline void modifyTrackableResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.modifyTrackableResponse.id)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void modifyTrackableResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t modifyTrackableResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t modifyTrackableResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyTrackableResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void modifyTrackableResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void modifyTrackableResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyTrackableResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addWorldAnchorRequest

// int32 grpcServerCompressionFormat = 1;
inline void addWorldAnchorRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t addWorldAnchorRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t addWorldAnchorRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldAnchorRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void addWorldAnchorRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void addWorldAnchorRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldAnchorRequest.grpcServerCompressionFormat)
}

// bytes worldAnchor = 2;
inline void addWorldAnchorRequest::clear_worldanchor() {
  _impl_.worldanchor_.ClearToEmpty();
}
inline const std::string& addWorldAnchorRequest::worldanchor() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldAnchorRequest.worldAnchor)
  return _internal_worldanchor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addWorldAnchorRequest::set_worldanchor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldanchor_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldAnchorRequest.worldAnchor)
}
inline std::string* addWorldAnchorRequest::mutable_worldanchor() {
  std::string* _s = _internal_mutable_worldanchor();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.addWorldAnchorRequest.worldAnchor)
  return _s;
}
inline const std::string& addWorldAnchorRequest::_internal_worldanchor() const {
  return _impl_.worldanchor_.Get();
}
inline void addWorldAnchorRequest::_internal_set_worldanchor(const std::string& value) {
  
  _impl_.worldanchor_.Set(value, GetArenaForAllocation());
}
inline std::string* addWorldAnchorRequest::_internal_mutable_worldanchor() {
  
  return _impl_.worldanchor_.Mutable(GetArenaForAllocation());
}
inline std::string* addWorldAnchorRequest::release_worldanchor() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.addWorldAnchorRequest.worldAnchor)
  return _impl_.worldanchor_.Release();
}
inline void addWorldAnchorRequest::set_allocated_worldanchor(std::string* worldanchor) {
  if (worldanchor != nullptr) {
    
  } else {
    
  }
  _impl_.worldanchor_.SetAllocated(worldanchor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldanchor_.IsDefault()) {
    _impl_.worldanchor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.addWorldAnchorRequest.worldAnchor)
}

// bytes id = 3;
inline void addWorldAnchorRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& addWorldAnchorRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldAnchorRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addWorldAnchorRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldAnchorRequest.id)
}
inline std::string* addWorldAnchorRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.addWorldAnchorRequest.id)
  return _s;
}
inline const std::string& addWorldAnchorRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void addWorldAnchorRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* addWorldAnchorRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* addWorldAnchorRequest::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.addWorldAnchorRequest.id)
  return _impl_.id_.Release();
}
inline void addWorldAnchorRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.addWorldAnchorRequest.id)
}

// -------------------------------------------------------------------

// addWorldAnchorResponse

// bytes id = 1;
inline void addWorldAnchorResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& addWorldAnchorResponse::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldAnchorResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addWorldAnchorResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldAnchorResponse.id)
}
inline std::string* addWorldAnchorResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.addWorldAnchorResponse.id)
  return _s;
}
inline const std::string& addWorldAnchorResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void addWorldAnchorResponse::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* addWorldAnchorResponse::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* addWorldAnchorResponse::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.addWorldAnchorResponse.id)
  return _impl_.id_.Release();
}
inline void addWorldAnchorResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.addWorldAnchorResponse.id)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void addWorldAnchorResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t addWorldAnchorResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t addWorldAnchorResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldAnchorResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addWorldAnchorResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void addWorldAnchorResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldAnchorResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldAnchorRequest

// int32 grpcServerCompressionFormat = 1;
inline void getWorldAnchorRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getWorldAnchorRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getWorldAnchorRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldAnchorRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getWorldAnchorRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getWorldAnchorRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldAnchorRequest.grpcServerCompressionFormat)
}

// bytes worldAnchorId = 2;
inline void getWorldAnchorRequest::clear_worldanchorid() {
  _impl_.worldanchorid_.ClearToEmpty();
}
inline const std::string& getWorldAnchorRequest::worldanchorid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchorId)
  return _internal_worldanchorid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldAnchorRequest::set_worldanchorid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldanchorid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchorId)
}
inline std::string* getWorldAnchorRequest::mutable_worldanchorid() {
  std::string* _s = _internal_mutable_worldanchorid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchorId)
  return _s;
}
inline const std::string& getWorldAnchorRequest::_internal_worldanchorid() const {
  return _impl_.worldanchorid_.Get();
}
inline void getWorldAnchorRequest::_internal_set_worldanchorid(const std::string& value) {
  
  _impl_.worldanchorid_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldAnchorRequest::_internal_mutable_worldanchorid() {
  
  return _impl_.worldanchorid_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldAnchorRequest::release_worldanchorid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchorId)
  return _impl_.worldanchorid_.Release();
}
inline void getWorldAnchorRequest::set_allocated_worldanchorid(std::string* worldanchorid) {
  if (worldanchorid != nullptr) {
    
  } else {
    
  }
  _impl_.worldanchorid_.SetAllocated(worldanchorid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldanchorid_.IsDefault()) {
    _impl_.worldanchorid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchorId)
}

// bytes worldAnchor = 3;
inline void getWorldAnchorRequest::clear_worldanchor() {
  _impl_.worldanchor_.ClearToEmpty();
}
inline const std::string& getWorldAnchorRequest::worldanchor() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchor)
  return _internal_worldanchor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldAnchorRequest::set_worldanchor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldanchor_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchor)
}
inline std::string* getWorldAnchorRequest::mutable_worldanchor() {
  std::string* _s = _internal_mutable_worldanchor();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchor)
  return _s;
}
inline const std::string& getWorldAnchorRequest::_internal_worldanchor() const {
  return _impl_.worldanchor_.Get();
}
inline void getWorldAnchorRequest::_internal_set_worldanchor(const std::string& value) {
  
  _impl_.worldanchor_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldAnchorRequest::_internal_mutable_worldanchor() {
  
  return _impl_.worldanchor_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldAnchorRequest::release_worldanchor() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchor)
  return _impl_.worldanchor_.Release();
}
inline void getWorldAnchorRequest::set_allocated_worldanchor(std::string* worldanchor) {
  if (worldanchor != nullptr) {
    
  } else {
    
  }
  _impl_.worldanchor_.SetAllocated(worldanchor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldanchor_.IsDefault()) {
    _impl_.worldanchor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldAnchorRequest.worldAnchor)
}

// -------------------------------------------------------------------

// getWorldAnchorResponse

// bytes worldAnchor = 1;
inline void getWorldAnchorResponse::clear_worldanchor() {
  _impl_.worldanchor_.ClearToEmpty();
}
inline const std::string& getWorldAnchorResponse::worldanchor() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldAnchorResponse.worldAnchor)
  return _internal_worldanchor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldAnchorResponse::set_worldanchor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldanchor_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldAnchorResponse.worldAnchor)
}
inline std::string* getWorldAnchorResponse::mutable_worldanchor() {
  std::string* _s = _internal_mutable_worldanchor();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldAnchorResponse.worldAnchor)
  return _s;
}
inline const std::string& getWorldAnchorResponse::_internal_worldanchor() const {
  return _impl_.worldanchor_.Get();
}
inline void getWorldAnchorResponse::_internal_set_worldanchor(const std::string& value) {
  
  _impl_.worldanchor_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldAnchorResponse::_internal_mutable_worldanchor() {
  
  return _impl_.worldanchor_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldAnchorResponse::release_worldanchor() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldAnchorResponse.worldAnchor)
  return _impl_.worldanchor_.Release();
}
inline void getWorldAnchorResponse::set_allocated_worldanchor(std::string* worldanchor) {
  if (worldanchor != nullptr) {
    
  } else {
    
  }
  _impl_.worldanchor_.SetAllocated(worldanchor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldanchor_.IsDefault()) {
    _impl_.worldanchor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldAnchorResponse.worldAnchor)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getWorldAnchorResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getWorldAnchorResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getWorldAnchorResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldAnchorResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getWorldAnchorResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getWorldAnchorResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldAnchorResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeWorldAnchorRequest

// int32 grpcServerCompressionFormat = 1;
inline void removeWorldAnchorRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t removeWorldAnchorRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t removeWorldAnchorRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldAnchorRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void removeWorldAnchorRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void removeWorldAnchorRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldAnchorRequest.grpcServerCompressionFormat)
}

// bytes worldAnchorId = 2;
inline void removeWorldAnchorRequest::clear_worldanchorid() {
  _impl_.worldanchorid_.ClearToEmpty();
}
inline const std::string& removeWorldAnchorRequest::worldanchorid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldAnchorRequest.worldAnchorId)
  return _internal_worldanchorid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void removeWorldAnchorRequest::set_worldanchorid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldanchorid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldAnchorRequest.worldAnchorId)
}
inline std::string* removeWorldAnchorRequest::mutable_worldanchorid() {
  std::string* _s = _internal_mutable_worldanchorid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.removeWorldAnchorRequest.worldAnchorId)
  return _s;
}
inline const std::string& removeWorldAnchorRequest::_internal_worldanchorid() const {
  return _impl_.worldanchorid_.Get();
}
inline void removeWorldAnchorRequest::_internal_set_worldanchorid(const std::string& value) {
  
  _impl_.worldanchorid_.Set(value, GetArenaForAllocation());
}
inline std::string* removeWorldAnchorRequest::_internal_mutable_worldanchorid() {
  
  return _impl_.worldanchorid_.Mutable(GetArenaForAllocation());
}
inline std::string* removeWorldAnchorRequest::release_worldanchorid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.removeWorldAnchorRequest.worldAnchorId)
  return _impl_.worldanchorid_.Release();
}
inline void removeWorldAnchorRequest::set_allocated_worldanchorid(std::string* worldanchorid) {
  if (worldanchorid != nullptr) {
    
  } else {
    
  }
  _impl_.worldanchorid_.SetAllocated(worldanchorid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldanchorid_.IsDefault()) {
    _impl_.worldanchorid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.removeWorldAnchorRequest.worldAnchorId)
}

// -------------------------------------------------------------------

// removeWorldAnchorResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void removeWorldAnchorResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t removeWorldAnchorResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t removeWorldAnchorResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldAnchorResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeWorldAnchorResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void removeWorldAnchorResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldAnchorResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldAnchorsRequest

// int32 grpcServerCompressionFormat = 1;
inline void getWorldAnchorsRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getWorldAnchorsRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getWorldAnchorsRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldAnchorsRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getWorldAnchorsRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getWorldAnchorsRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldAnchorsRequest.grpcServerCompressionFormat)
}

// bytes vector = 2;
inline void getWorldAnchorsRequest::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldAnchorsRequest::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldAnchorsRequest.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldAnchorsRequest::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldAnchorsRequest.vector)
}
inline std::string* getWorldAnchorsRequest::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldAnchorsRequest.vector)
  return _s;
}
inline const std::string& getWorldAnchorsRequest::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldAnchorsRequest::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldAnchorsRequest::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldAnchorsRequest::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldAnchorsRequest.vector)
  return _impl_.vector_.Release();
}
inline void getWorldAnchorsRequest::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldAnchorsRequest.vector)
}

// -------------------------------------------------------------------

// getWorldAnchorsResponse

// bytes vector = 1;
inline void getWorldAnchorsResponse::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldAnchorsResponse::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldAnchorsResponse.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldAnchorsResponse::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldAnchorsResponse.vector)
}
inline std::string* getWorldAnchorsResponse::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldAnchorsResponse.vector)
  return _s;
}
inline const std::string& getWorldAnchorsResponse::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldAnchorsResponse::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldAnchorsResponse::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldAnchorsResponse::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldAnchorsResponse.vector)
  return _impl_.vector_.Release();
}
inline void getWorldAnchorsResponse::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldAnchorsResponse.vector)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getWorldAnchorsResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getWorldAnchorsResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getWorldAnchorsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldAnchorsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getWorldAnchorsResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getWorldAnchorsResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldAnchorsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// modifyWorldAnchorRequest

// int32 grpcServerCompressionFormat = 1;
inline void modifyWorldAnchorRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t modifyWorldAnchorRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t modifyWorldAnchorRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldAnchorRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void modifyWorldAnchorRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void modifyWorldAnchorRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldAnchorRequest.grpcServerCompressionFormat)
}

// bytes worldAnchor = 2;
inline void modifyWorldAnchorRequest::clear_worldanchor() {
  _impl_.worldanchor_.ClearToEmpty();
}
inline const std::string& modifyWorldAnchorRequest::worldanchor() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldAnchorRequest.worldAnchor)
  return _internal_worldanchor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void modifyWorldAnchorRequest::set_worldanchor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldanchor_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldAnchorRequest.worldAnchor)
}
inline std::string* modifyWorldAnchorRequest::mutable_worldanchor() {
  std::string* _s = _internal_mutable_worldanchor();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.modifyWorldAnchorRequest.worldAnchor)
  return _s;
}
inline const std::string& modifyWorldAnchorRequest::_internal_worldanchor() const {
  return _impl_.worldanchor_.Get();
}
inline void modifyWorldAnchorRequest::_internal_set_worldanchor(const std::string& value) {
  
  _impl_.worldanchor_.Set(value, GetArenaForAllocation());
}
inline std::string* modifyWorldAnchorRequest::_internal_mutable_worldanchor() {
  
  return _impl_.worldanchor_.Mutable(GetArenaForAllocation());
}
inline std::string* modifyWorldAnchorRequest::release_worldanchor() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.modifyWorldAnchorRequest.worldAnchor)
  return _impl_.worldanchor_.Release();
}
inline void modifyWorldAnchorRequest::set_allocated_worldanchor(std::string* worldanchor) {
  if (worldanchor != nullptr) {
    
  } else {
    
  }
  _impl_.worldanchor_.SetAllocated(worldanchor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldanchor_.IsDefault()) {
    _impl_.worldanchor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.modifyWorldAnchorRequest.worldAnchor)
}

// bytes id = 3;
inline void modifyWorldAnchorRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& modifyWorldAnchorRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldAnchorRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void modifyWorldAnchorRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldAnchorRequest.id)
}
inline std::string* modifyWorldAnchorRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.modifyWorldAnchorRequest.id)
  return _s;
}
inline const std::string& modifyWorldAnchorRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void modifyWorldAnchorRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* modifyWorldAnchorRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* modifyWorldAnchorRequest::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.modifyWorldAnchorRequest.id)
  return _impl_.id_.Release();
}
inline void modifyWorldAnchorRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.modifyWorldAnchorRequest.id)
}

// -------------------------------------------------------------------

// modifyWorldAnchorResponse

// bytes id = 1;
inline void modifyWorldAnchorResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& modifyWorldAnchorResponse::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldAnchorResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void modifyWorldAnchorResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldAnchorResponse.id)
}
inline std::string* modifyWorldAnchorResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.modifyWorldAnchorResponse.id)
  return _s;
}
inline const std::string& modifyWorldAnchorResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void modifyWorldAnchorResponse::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* modifyWorldAnchorResponse::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* modifyWorldAnchorResponse::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.modifyWorldAnchorResponse.id)
  return _impl_.id_.Release();
}
inline void modifyWorldAnchorResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.modifyWorldAnchorResponse.id)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void modifyWorldAnchorResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t modifyWorldAnchorResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t modifyWorldAnchorResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldAnchorResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void modifyWorldAnchorResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void modifyWorldAnchorResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldAnchorResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// addWorldLinkRequest

// int32 grpcServerCompressionFormat = 1;
inline void addWorldLinkRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t addWorldLinkRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t addWorldLinkRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldLinkRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void addWorldLinkRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void addWorldLinkRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldLinkRequest.grpcServerCompressionFormat)
}

// bytes worldLink = 2;
inline void addWorldLinkRequest::clear_worldlink() {
  _impl_.worldlink_.ClearToEmpty();
}
inline const std::string& addWorldLinkRequest::worldlink() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldLinkRequest.worldLink)
  return _internal_worldlink();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addWorldLinkRequest::set_worldlink(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldlink_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldLinkRequest.worldLink)
}
inline std::string* addWorldLinkRequest::mutable_worldlink() {
  std::string* _s = _internal_mutable_worldlink();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.addWorldLinkRequest.worldLink)
  return _s;
}
inline const std::string& addWorldLinkRequest::_internal_worldlink() const {
  return _impl_.worldlink_.Get();
}
inline void addWorldLinkRequest::_internal_set_worldlink(const std::string& value) {
  
  _impl_.worldlink_.Set(value, GetArenaForAllocation());
}
inline std::string* addWorldLinkRequest::_internal_mutable_worldlink() {
  
  return _impl_.worldlink_.Mutable(GetArenaForAllocation());
}
inline std::string* addWorldLinkRequest::release_worldlink() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.addWorldLinkRequest.worldLink)
  return _impl_.worldlink_.Release();
}
inline void addWorldLinkRequest::set_allocated_worldlink(std::string* worldlink) {
  if (worldlink != nullptr) {
    
  } else {
    
  }
  _impl_.worldlink_.SetAllocated(worldlink, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldlink_.IsDefault()) {
    _impl_.worldlink_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.addWorldLinkRequest.worldLink)
}

// bytes id = 3;
inline void addWorldLinkRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& addWorldLinkRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldLinkRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addWorldLinkRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldLinkRequest.id)
}
inline std::string* addWorldLinkRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.addWorldLinkRequest.id)
  return _s;
}
inline const std::string& addWorldLinkRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void addWorldLinkRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* addWorldLinkRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* addWorldLinkRequest::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.addWorldLinkRequest.id)
  return _impl_.id_.Release();
}
inline void addWorldLinkRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.addWorldLinkRequest.id)
}

// -------------------------------------------------------------------

// addWorldLinkResponse

// bytes id = 1;
inline void addWorldLinkResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& addWorldLinkResponse::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldLinkResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addWorldLinkResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldLinkResponse.id)
}
inline std::string* addWorldLinkResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.addWorldLinkResponse.id)
  return _s;
}
inline const std::string& addWorldLinkResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void addWorldLinkResponse::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* addWorldLinkResponse::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* addWorldLinkResponse::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.addWorldLinkResponse.id)
  return _impl_.id_.Release();
}
inline void addWorldLinkResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.addWorldLinkResponse.id)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void addWorldLinkResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t addWorldLinkResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t addWorldLinkResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.addWorldLinkResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addWorldLinkResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void addWorldLinkResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.addWorldLinkResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldLink_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void getWorldLink_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getWorldLink_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getWorldLink_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getWorldLink_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getWorldLink_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc0Request.grpcServerCompressionFormat)
}

// bytes parentId = 2;
inline void getWorldLink_grpc0Request::clear_parentid() {
  _impl_.parentid_.ClearToEmpty();
}
inline const std::string& getWorldLink_grpc0Request::parentid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc0Request.parentId)
  return _internal_parentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldLink_grpc0Request::set_parentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parentid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc0Request.parentId)
}
inline std::string* getWorldLink_grpc0Request::mutable_parentid() {
  std::string* _s = _internal_mutable_parentid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldLink_grpc0Request.parentId)
  return _s;
}
inline const std::string& getWorldLink_grpc0Request::_internal_parentid() const {
  return _impl_.parentid_.Get();
}
inline void getWorldLink_grpc0Request::_internal_set_parentid(const std::string& value) {
  
  _impl_.parentid_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc0Request::_internal_mutable_parentid() {
  
  return _impl_.parentid_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc0Request::release_parentid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldLink_grpc0Request.parentId)
  return _impl_.parentid_.Release();
}
inline void getWorldLink_grpc0Request::set_allocated_parentid(std::string* parentid) {
  if (parentid != nullptr) {
    
  } else {
    
  }
  _impl_.parentid_.SetAllocated(parentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parentid_.IsDefault()) {
    _impl_.parentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldLink_grpc0Request.parentId)
}

// bytes childId = 3;
inline void getWorldLink_grpc0Request::clear_childid() {
  _impl_.childid_.ClearToEmpty();
}
inline const std::string& getWorldLink_grpc0Request::childid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc0Request.childId)
  return _internal_childid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldLink_grpc0Request::set_childid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.childid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc0Request.childId)
}
inline std::string* getWorldLink_grpc0Request::mutable_childid() {
  std::string* _s = _internal_mutable_childid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldLink_grpc0Request.childId)
  return _s;
}
inline const std::string& getWorldLink_grpc0Request::_internal_childid() const {
  return _impl_.childid_.Get();
}
inline void getWorldLink_grpc0Request::_internal_set_childid(const std::string& value) {
  
  _impl_.childid_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc0Request::_internal_mutable_childid() {
  
  return _impl_.childid_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc0Request::release_childid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldLink_grpc0Request.childId)
  return _impl_.childid_.Release();
}
inline void getWorldLink_grpc0Request::set_allocated_childid(std::string* childid) {
  if (childid != nullptr) {
    
  } else {
    
  }
  _impl_.childid_.SetAllocated(childid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.childid_.IsDefault()) {
    _impl_.childid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldLink_grpc0Request.childId)
}

// bytes worldLink = 4;
inline void getWorldLink_grpc0Request::clear_worldlink() {
  _impl_.worldlink_.ClearToEmpty();
}
inline const std::string& getWorldLink_grpc0Request::worldlink() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc0Request.worldLink)
  return _internal_worldlink();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldLink_grpc0Request::set_worldlink(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldlink_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc0Request.worldLink)
}
inline std::string* getWorldLink_grpc0Request::mutable_worldlink() {
  std::string* _s = _internal_mutable_worldlink();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldLink_grpc0Request.worldLink)
  return _s;
}
inline const std::string& getWorldLink_grpc0Request::_internal_worldlink() const {
  return _impl_.worldlink_.Get();
}
inline void getWorldLink_grpc0Request::_internal_set_worldlink(const std::string& value) {
  
  _impl_.worldlink_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc0Request::_internal_mutable_worldlink() {
  
  return _impl_.worldlink_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc0Request::release_worldlink() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldLink_grpc0Request.worldLink)
  return _impl_.worldlink_.Release();
}
inline void getWorldLink_grpc0Request::set_allocated_worldlink(std::string* worldlink) {
  if (worldlink != nullptr) {
    
  } else {
    
  }
  _impl_.worldlink_.SetAllocated(worldlink, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldlink_.IsDefault()) {
    _impl_.worldlink_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldLink_grpc0Request.worldLink)
}

// -------------------------------------------------------------------

// getWorldLink_grpc0Response

// bytes worldLink = 1;
inline void getWorldLink_grpc0Response::clear_worldlink() {
  _impl_.worldlink_.ClearToEmpty();
}
inline const std::string& getWorldLink_grpc0Response::worldlink() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc0Response.worldLink)
  return _internal_worldlink();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldLink_grpc0Response::set_worldlink(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldlink_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc0Response.worldLink)
}
inline std::string* getWorldLink_grpc0Response::mutable_worldlink() {
  std::string* _s = _internal_mutable_worldlink();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldLink_grpc0Response.worldLink)
  return _s;
}
inline const std::string& getWorldLink_grpc0Response::_internal_worldlink() const {
  return _impl_.worldlink_.Get();
}
inline void getWorldLink_grpc0Response::_internal_set_worldlink(const std::string& value) {
  
  _impl_.worldlink_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc0Response::_internal_mutable_worldlink() {
  
  return _impl_.worldlink_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc0Response::release_worldlink() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldLink_grpc0Response.worldLink)
  return _impl_.worldlink_.Release();
}
inline void getWorldLink_grpc0Response::set_allocated_worldlink(std::string* worldlink) {
  if (worldlink != nullptr) {
    
  } else {
    
  }
  _impl_.worldlink_.SetAllocated(worldlink, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldlink_.IsDefault()) {
    _impl_.worldlink_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldLink_grpc0Response.worldLink)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getWorldLink_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getWorldLink_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getWorldLink_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getWorldLink_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getWorldLink_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldLink_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void getWorldLink_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getWorldLink_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getWorldLink_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getWorldLink_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getWorldLink_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc1Request.grpcServerCompressionFormat)
}

// bytes linkId = 2;
inline void getWorldLink_grpc1Request::clear_linkid() {
  _impl_.linkid_.ClearToEmpty();
}
inline const std::string& getWorldLink_grpc1Request::linkid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc1Request.linkId)
  return _internal_linkid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldLink_grpc1Request::set_linkid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.linkid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc1Request.linkId)
}
inline std::string* getWorldLink_grpc1Request::mutable_linkid() {
  std::string* _s = _internal_mutable_linkid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldLink_grpc1Request.linkId)
  return _s;
}
inline const std::string& getWorldLink_grpc1Request::_internal_linkid() const {
  return _impl_.linkid_.Get();
}
inline void getWorldLink_grpc1Request::_internal_set_linkid(const std::string& value) {
  
  _impl_.linkid_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc1Request::_internal_mutable_linkid() {
  
  return _impl_.linkid_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc1Request::release_linkid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldLink_grpc1Request.linkId)
  return _impl_.linkid_.Release();
}
inline void getWorldLink_grpc1Request::set_allocated_linkid(std::string* linkid) {
  if (linkid != nullptr) {
    
  } else {
    
  }
  _impl_.linkid_.SetAllocated(linkid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.linkid_.IsDefault()) {
    _impl_.linkid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldLink_grpc1Request.linkId)
}

// bytes worldLink = 3;
inline void getWorldLink_grpc1Request::clear_worldlink() {
  _impl_.worldlink_.ClearToEmpty();
}
inline const std::string& getWorldLink_grpc1Request::worldlink() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc1Request.worldLink)
  return _internal_worldlink();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldLink_grpc1Request::set_worldlink(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldlink_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc1Request.worldLink)
}
inline std::string* getWorldLink_grpc1Request::mutable_worldlink() {
  std::string* _s = _internal_mutable_worldlink();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldLink_grpc1Request.worldLink)
  return _s;
}
inline const std::string& getWorldLink_grpc1Request::_internal_worldlink() const {
  return _impl_.worldlink_.Get();
}
inline void getWorldLink_grpc1Request::_internal_set_worldlink(const std::string& value) {
  
  _impl_.worldlink_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc1Request::_internal_mutable_worldlink() {
  
  return _impl_.worldlink_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc1Request::release_worldlink() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldLink_grpc1Request.worldLink)
  return _impl_.worldlink_.Release();
}
inline void getWorldLink_grpc1Request::set_allocated_worldlink(std::string* worldlink) {
  if (worldlink != nullptr) {
    
  } else {
    
  }
  _impl_.worldlink_.SetAllocated(worldlink, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldlink_.IsDefault()) {
    _impl_.worldlink_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldLink_grpc1Request.worldLink)
}

// -------------------------------------------------------------------

// getWorldLink_grpc1Response

// bytes worldLink = 1;
inline void getWorldLink_grpc1Response::clear_worldlink() {
  _impl_.worldlink_.ClearToEmpty();
}
inline const std::string& getWorldLink_grpc1Response::worldlink() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc1Response.worldLink)
  return _internal_worldlink();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldLink_grpc1Response::set_worldlink(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldlink_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc1Response.worldLink)
}
inline std::string* getWorldLink_grpc1Response::mutable_worldlink() {
  std::string* _s = _internal_mutable_worldlink();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldLink_grpc1Response.worldLink)
  return _s;
}
inline const std::string& getWorldLink_grpc1Response::_internal_worldlink() const {
  return _impl_.worldlink_.Get();
}
inline void getWorldLink_grpc1Response::_internal_set_worldlink(const std::string& value) {
  
  _impl_.worldlink_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc1Response::_internal_mutable_worldlink() {
  
  return _impl_.worldlink_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldLink_grpc1Response::release_worldlink() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldLink_grpc1Response.worldLink)
  return _impl_.worldlink_.Release();
}
inline void getWorldLink_grpc1Response::set_allocated_worldlink(std::string* worldlink) {
  if (worldlink != nullptr) {
    
  } else {
    
  }
  _impl_.worldlink_.SetAllocated(worldlink, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldlink_.IsDefault()) {
    _impl_.worldlink_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldLink_grpc1Response.worldLink)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getWorldLink_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getWorldLink_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getWorldLink_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLink_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getWorldLink_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getWorldLink_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLink_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeWorldLink_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void removeWorldLink_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t removeWorldLink_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t removeWorldLink_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldLink_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void removeWorldLink_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void removeWorldLink_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldLink_grpc0Request.grpcServerCompressionFormat)
}

// bytes parentId = 2;
inline void removeWorldLink_grpc0Request::clear_parentid() {
  _impl_.parentid_.ClearToEmpty();
}
inline const std::string& removeWorldLink_grpc0Request::parentid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldLink_grpc0Request.parentId)
  return _internal_parentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void removeWorldLink_grpc0Request::set_parentid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parentid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldLink_grpc0Request.parentId)
}
inline std::string* removeWorldLink_grpc0Request::mutable_parentid() {
  std::string* _s = _internal_mutable_parentid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.removeWorldLink_grpc0Request.parentId)
  return _s;
}
inline const std::string& removeWorldLink_grpc0Request::_internal_parentid() const {
  return _impl_.parentid_.Get();
}
inline void removeWorldLink_grpc0Request::_internal_set_parentid(const std::string& value) {
  
  _impl_.parentid_.Set(value, GetArenaForAllocation());
}
inline std::string* removeWorldLink_grpc0Request::_internal_mutable_parentid() {
  
  return _impl_.parentid_.Mutable(GetArenaForAllocation());
}
inline std::string* removeWorldLink_grpc0Request::release_parentid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.removeWorldLink_grpc0Request.parentId)
  return _impl_.parentid_.Release();
}
inline void removeWorldLink_grpc0Request::set_allocated_parentid(std::string* parentid) {
  if (parentid != nullptr) {
    
  } else {
    
  }
  _impl_.parentid_.SetAllocated(parentid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parentid_.IsDefault()) {
    _impl_.parentid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.removeWorldLink_grpc0Request.parentId)
}

// bytes childId = 3;
inline void removeWorldLink_grpc0Request::clear_childid() {
  _impl_.childid_.ClearToEmpty();
}
inline const std::string& removeWorldLink_grpc0Request::childid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldLink_grpc0Request.childId)
  return _internal_childid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void removeWorldLink_grpc0Request::set_childid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.childid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldLink_grpc0Request.childId)
}
inline std::string* removeWorldLink_grpc0Request::mutable_childid() {
  std::string* _s = _internal_mutable_childid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.removeWorldLink_grpc0Request.childId)
  return _s;
}
inline const std::string& removeWorldLink_grpc0Request::_internal_childid() const {
  return _impl_.childid_.Get();
}
inline void removeWorldLink_grpc0Request::_internal_set_childid(const std::string& value) {
  
  _impl_.childid_.Set(value, GetArenaForAllocation());
}
inline std::string* removeWorldLink_grpc0Request::_internal_mutable_childid() {
  
  return _impl_.childid_.Mutable(GetArenaForAllocation());
}
inline std::string* removeWorldLink_grpc0Request::release_childid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.removeWorldLink_grpc0Request.childId)
  return _impl_.childid_.Release();
}
inline void removeWorldLink_grpc0Request::set_allocated_childid(std::string* childid) {
  if (childid != nullptr) {
    
  } else {
    
  }
  _impl_.childid_.SetAllocated(childid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.childid_.IsDefault()) {
    _impl_.childid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.removeWorldLink_grpc0Request.childId)
}

// -------------------------------------------------------------------

// removeWorldLink_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void removeWorldLink_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t removeWorldLink_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t removeWorldLink_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldLink_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeWorldLink_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void removeWorldLink_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldLink_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// removeWorldLink_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void removeWorldLink_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t removeWorldLink_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t removeWorldLink_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldLink_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void removeWorldLink_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void removeWorldLink_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldLink_grpc1Request.grpcServerCompressionFormat)
}

// bytes linkId = 2;
inline void removeWorldLink_grpc1Request::clear_linkid() {
  _impl_.linkid_.ClearToEmpty();
}
inline const std::string& removeWorldLink_grpc1Request::linkid() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldLink_grpc1Request.linkId)
  return _internal_linkid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void removeWorldLink_grpc1Request::set_linkid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.linkid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldLink_grpc1Request.linkId)
}
inline std::string* removeWorldLink_grpc1Request::mutable_linkid() {
  std::string* _s = _internal_mutable_linkid();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.removeWorldLink_grpc1Request.linkId)
  return _s;
}
inline const std::string& removeWorldLink_grpc1Request::_internal_linkid() const {
  return _impl_.linkid_.Get();
}
inline void removeWorldLink_grpc1Request::_internal_set_linkid(const std::string& value) {
  
  _impl_.linkid_.Set(value, GetArenaForAllocation());
}
inline std::string* removeWorldLink_grpc1Request::_internal_mutable_linkid() {
  
  return _impl_.linkid_.Mutable(GetArenaForAllocation());
}
inline std::string* removeWorldLink_grpc1Request::release_linkid() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.removeWorldLink_grpc1Request.linkId)
  return _impl_.linkid_.Release();
}
inline void removeWorldLink_grpc1Request::set_allocated_linkid(std::string* linkid) {
  if (linkid != nullptr) {
    
  } else {
    
  }
  _impl_.linkid_.SetAllocated(linkid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.linkid_.IsDefault()) {
    _impl_.linkid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.removeWorldLink_grpc1Request.linkId)
}

// -------------------------------------------------------------------

// removeWorldLink_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void removeWorldLink_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t removeWorldLink_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t removeWorldLink_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.removeWorldLink_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void removeWorldLink_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void removeWorldLink_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.removeWorldLink_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldLinksRequest

// int32 grpcServerCompressionFormat = 1;
inline void getWorldLinksRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getWorldLinksRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getWorldLinksRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLinksRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getWorldLinksRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getWorldLinksRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLinksRequest.grpcServerCompressionFormat)
}

// bytes vector = 2;
inline void getWorldLinksRequest::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldLinksRequest::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLinksRequest.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldLinksRequest::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLinksRequest.vector)
}
inline std::string* getWorldLinksRequest::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldLinksRequest.vector)
  return _s;
}
inline const std::string& getWorldLinksRequest::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldLinksRequest::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldLinksRequest::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldLinksRequest::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldLinksRequest.vector)
  return _impl_.vector_.Release();
}
inline void getWorldLinksRequest::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldLinksRequest.vector)
}

// -------------------------------------------------------------------

// getWorldLinksResponse

// bytes vector = 1;
inline void getWorldLinksResponse::clear_vector() {
  _impl_.vector_.ClearToEmpty();
}
inline const std::string& getWorldLinksResponse::vector() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLinksResponse.vector)
  return _internal_vector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldLinksResponse::set_vector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vector_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLinksResponse.vector)
}
inline std::string* getWorldLinksResponse::mutable_vector() {
  std::string* _s = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.getWorldLinksResponse.vector)
  return _s;
}
inline const std::string& getWorldLinksResponse::_internal_vector() const {
  return _impl_.vector_.Get();
}
inline void getWorldLinksResponse::_internal_set_vector(const std::string& value) {
  
  _impl_.vector_.Set(value, GetArenaForAllocation());
}
inline std::string* getWorldLinksResponse::_internal_mutable_vector() {
  
  return _impl_.vector_.Mutable(GetArenaForAllocation());
}
inline std::string* getWorldLinksResponse::release_vector() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.getWorldLinksResponse.vector)
  return _impl_.vector_.Release();
}
inline void getWorldLinksResponse::set_allocated_vector(std::string* vector) {
  if (vector != nullptr) {
    
  } else {
    
  }
  _impl_.vector_.SetAllocated(vector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vector_.IsDefault()) {
    _impl_.vector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.getWorldLinksResponse.vector)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getWorldLinksResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getWorldLinksResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getWorldLinksResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.getWorldLinksResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getWorldLinksResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getWorldLinksResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.getWorldLinksResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// modifyWorldLinkRequest

// int32 grpcServerCompressionFormat = 1;
inline void modifyWorldLinkRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t modifyWorldLinkRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t modifyWorldLinkRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldLinkRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void modifyWorldLinkRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void modifyWorldLinkRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldLinkRequest.grpcServerCompressionFormat)
}

// bytes worldLink = 2;
inline void modifyWorldLinkRequest::clear_worldlink() {
  _impl_.worldlink_.ClearToEmpty();
}
inline const std::string& modifyWorldLinkRequest::worldlink() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldLinkRequest.worldLink)
  return _internal_worldlink();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void modifyWorldLinkRequest::set_worldlink(ArgT0&& arg0, ArgT... args) {
 
 _impl_.worldlink_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldLinkRequest.worldLink)
}
inline std::string* modifyWorldLinkRequest::mutable_worldlink() {
  std::string* _s = _internal_mutable_worldlink();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.modifyWorldLinkRequest.worldLink)
  return _s;
}
inline const std::string& modifyWorldLinkRequest::_internal_worldlink() const {
  return _impl_.worldlink_.Get();
}
inline void modifyWorldLinkRequest::_internal_set_worldlink(const std::string& value) {
  
  _impl_.worldlink_.Set(value, GetArenaForAllocation());
}
inline std::string* modifyWorldLinkRequest::_internal_mutable_worldlink() {
  
  return _impl_.worldlink_.Mutable(GetArenaForAllocation());
}
inline std::string* modifyWorldLinkRequest::release_worldlink() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.modifyWorldLinkRequest.worldLink)
  return _impl_.worldlink_.Release();
}
inline void modifyWorldLinkRequest::set_allocated_worldlink(std::string* worldlink) {
  if (worldlink != nullptr) {
    
  } else {
    
  }
  _impl_.worldlink_.SetAllocated(worldlink, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.worldlink_.IsDefault()) {
    _impl_.worldlink_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.modifyWorldLinkRequest.worldLink)
}

// bytes id = 3;
inline void modifyWorldLinkRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& modifyWorldLinkRequest::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldLinkRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void modifyWorldLinkRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldLinkRequest.id)
}
inline std::string* modifyWorldLinkRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.modifyWorldLinkRequest.id)
  return _s;
}
inline const std::string& modifyWorldLinkRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void modifyWorldLinkRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* modifyWorldLinkRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* modifyWorldLinkRequest::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.modifyWorldLinkRequest.id)
  return _impl_.id_.Release();
}
inline void modifyWorldLinkRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.modifyWorldLinkRequest.id)
}

// -------------------------------------------------------------------

// modifyWorldLinkResponse

// bytes id = 1;
inline void modifyWorldLinkResponse::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& modifyWorldLinkResponse::id() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldLinkResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void modifyWorldLinkResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldLinkResponse.id)
}
inline std::string* modifyWorldLinkResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:grpcIWorldGraphManager.modifyWorldLinkResponse.id)
  return _s;
}
inline const std::string& modifyWorldLinkResponse::_internal_id() const {
  return _impl_.id_.Get();
}
inline void modifyWorldLinkResponse::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* modifyWorldLinkResponse::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* modifyWorldLinkResponse::release_id() {
  // @@protoc_insertion_point(field_release:grpcIWorldGraphManager.modifyWorldLinkResponse.id)
  return _impl_.id_.Release();
}
inline void modifyWorldLinkResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIWorldGraphManager.modifyWorldLinkResponse.id)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void modifyWorldLinkResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t modifyWorldLinkResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t modifyWorldLinkResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.modifyWorldLinkResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void modifyWorldLinkResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void modifyWorldLinkResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.modifyWorldLinkResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// saveToFileRequest

// int32 grpcServerCompressionFormat = 1;
inline void saveToFileRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t saveToFileRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t saveToFileRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.saveToFileRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void saveToFileRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void saveToFileRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.saveToFileRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// saveToFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void saveToFileResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t saveToFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t saveToFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.saveToFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void saveToFileResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void saveToFileResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.saveToFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// loadFromFileRequest

// int32 grpcServerCompressionFormat = 1;
inline void loadFromFileRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t loadFromFileRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t loadFromFileRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.loadFromFileRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void loadFromFileRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void loadFromFileRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.loadFromFileRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// loadFromFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void loadFromFileResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t loadFromFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t loadFromFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.loadFromFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void loadFromFileResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void loadFromFileResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.loadFromFileResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// deleteFileRequest

// int32 grpcServerCompressionFormat = 1;
inline void deleteFileRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t deleteFileRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t deleteFileRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.deleteFileRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void deleteFileRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void deleteFileRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.deleteFileRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// deleteFileResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void deleteFileResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t deleteFileResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t deleteFileResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIWorldGraphManager.deleteFileResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void deleteFileResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void deleteFileResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIWorldGraphManager.deleteFileResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIWorldGraphManager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIWorldGraphManagerService_2eproto
