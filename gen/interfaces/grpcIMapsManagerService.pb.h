// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMapsManagerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMapsManagerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMapsManagerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMapsManagerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMapsManagerService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMapsManagerService_2eproto;
namespace grpcIMapsManager {
class createMapRequest;
struct createMapRequestDefaultTypeInternal;
extern createMapRequestDefaultTypeInternal _createMapRequest_default_instance_;
class createMapResponse;
struct createMapResponseDefaultTypeInternal;
extern createMapResponseDefaultTypeInternal _createMapResponse_default_instance_;
class decreaseMapClientsRequest;
struct decreaseMapClientsRequestDefaultTypeInternal;
extern decreaseMapClientsRequestDefaultTypeInternal _decreaseMapClientsRequest_default_instance_;
class decreaseMapClientsResponse;
struct decreaseMapClientsResponseDefaultTypeInternal;
extern decreaseMapClientsResponseDefaultTypeInternal _decreaseMapClientsResponse_default_instance_;
class deleteMapRequest;
struct deleteMapRequestDefaultTypeInternal;
extern deleteMapRequestDefaultTypeInternal _deleteMapRequest_default_instance_;
class deleteMapResponse;
struct deleteMapResponseDefaultTypeInternal;
extern deleteMapResponseDefaultTypeInternal _deleteMapResponse_default_instance_;
class getAllMapsRequest;
struct getAllMapsRequestDefaultTypeInternal;
extern getAllMapsRequestDefaultTypeInternal _getAllMapsRequest_default_instance_;
class getAllMapsResponse;
struct getAllMapsResponseDefaultTypeInternal;
extern getAllMapsResponseDefaultTypeInternal _getAllMapsResponse_default_instance_;
class getDataForMapProcessingRequest;
struct getDataForMapProcessingRequestDefaultTypeInternal;
extern getDataForMapProcessingRequestDefaultTypeInternal _getDataForMapProcessingRequest_default_instance_;
class getDataForMapProcessingResponse;
struct getDataForMapProcessingResponseDefaultTypeInternal;
extern getDataForMapProcessingResponseDefaultTypeInternal _getDataForMapProcessingResponse_default_instance_;
class getMapRequestRequest;
struct getMapRequestRequestDefaultTypeInternal;
extern getMapRequestRequestDefaultTypeInternal _getMapRequestRequest_default_instance_;
class getMapRequestResponse;
struct getMapRequestResponseDefaultTypeInternal;
extern getMapRequestResponseDefaultTypeInternal _getMapRequestResponse_default_instance_;
class getPointCloudRequestRequest;
struct getPointCloudRequestRequestDefaultTypeInternal;
extern getPointCloudRequestRequestDefaultTypeInternal _getPointCloudRequestRequest_default_instance_;
class getPointCloudRequestResponse;
struct getPointCloudRequestResponseDefaultTypeInternal;
extern getPointCloudRequestResponseDefaultTypeInternal _getPointCloudRequestResponse_default_instance_;
class getStatusForMapProcessingRequest;
struct getStatusForMapProcessingRequestDefaultTypeInternal;
extern getStatusForMapProcessingRequestDefaultTypeInternal _getStatusForMapProcessingRequest_default_instance_;
class getStatusForMapProcessingResponse;
struct getStatusForMapProcessingResponseDefaultTypeInternal;
extern getStatusForMapProcessingResponseDefaultTypeInternal _getStatusForMapProcessingResponse_default_instance_;
class increaseMapClientsRequest;
struct increaseMapClientsRequestDefaultTypeInternal;
extern increaseMapClientsRequestDefaultTypeInternal _increaseMapClientsRequest_default_instance_;
class increaseMapClientsResponse;
struct increaseMapClientsResponseDefaultTypeInternal;
extern increaseMapClientsResponseDefaultTypeInternal _increaseMapClientsResponse_default_instance_;
class registerMapUpdateServiceRequest;
struct registerMapUpdateServiceRequestDefaultTypeInternal;
extern registerMapUpdateServiceRequestDefaultTypeInternal _registerMapUpdateServiceRequest_default_instance_;
class registerMapUpdateServiceResponse;
struct registerMapUpdateServiceResponseDefaultTypeInternal;
extern registerMapUpdateServiceResponseDefaultTypeInternal _registerMapUpdateServiceResponse_default_instance_;
class requestForMapProcessingRequest;
struct requestForMapProcessingRequestDefaultTypeInternal;
extern requestForMapProcessingRequestDefaultTypeInternal _requestForMapProcessingRequest_default_instance_;
class requestForMapProcessingResponse;
struct requestForMapProcessingResponseDefaultTypeInternal;
extern requestForMapProcessingResponseDefaultTypeInternal _requestForMapProcessingResponse_default_instance_;
class setMapRequestRequest;
struct setMapRequestRequestDefaultTypeInternal;
extern setMapRequestRequestDefaultTypeInternal _setMapRequestRequest_default_instance_;
class setMapRequestResponse;
struct setMapRequestResponseDefaultTypeInternal;
extern setMapRequestResponseDefaultTypeInternal _setMapRequestResponse_default_instance_;
class unregisterMapUpdateServiceRequest;
struct unregisterMapUpdateServiceRequestDefaultTypeInternal;
extern unregisterMapUpdateServiceRequestDefaultTypeInternal _unregisterMapUpdateServiceRequest_default_instance_;
class unregisterMapUpdateServiceResponse;
struct unregisterMapUpdateServiceResponseDefaultTypeInternal;
extern unregisterMapUpdateServiceResponseDefaultTypeInternal _unregisterMapUpdateServiceResponse_default_instance_;
}  // namespace grpcIMapsManager
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMapsManager::createMapRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::createMapRequest>(Arena*);
template<> ::grpcIMapsManager::createMapResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::createMapResponse>(Arena*);
template<> ::grpcIMapsManager::decreaseMapClientsRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::decreaseMapClientsRequest>(Arena*);
template<> ::grpcIMapsManager::decreaseMapClientsResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::decreaseMapClientsResponse>(Arena*);
template<> ::grpcIMapsManager::deleteMapRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::deleteMapRequest>(Arena*);
template<> ::grpcIMapsManager::deleteMapResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::deleteMapResponse>(Arena*);
template<> ::grpcIMapsManager::getAllMapsRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::getAllMapsRequest>(Arena*);
template<> ::grpcIMapsManager::getAllMapsResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::getAllMapsResponse>(Arena*);
template<> ::grpcIMapsManager::getDataForMapProcessingRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::getDataForMapProcessingRequest>(Arena*);
template<> ::grpcIMapsManager::getDataForMapProcessingResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::getDataForMapProcessingResponse>(Arena*);
template<> ::grpcIMapsManager::getMapRequestRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::getMapRequestRequest>(Arena*);
template<> ::grpcIMapsManager::getMapRequestResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::getMapRequestResponse>(Arena*);
template<> ::grpcIMapsManager::getPointCloudRequestRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::getPointCloudRequestRequest>(Arena*);
template<> ::grpcIMapsManager::getPointCloudRequestResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::getPointCloudRequestResponse>(Arena*);
template<> ::grpcIMapsManager::getStatusForMapProcessingRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::getStatusForMapProcessingRequest>(Arena*);
template<> ::grpcIMapsManager::getStatusForMapProcessingResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::getStatusForMapProcessingResponse>(Arena*);
template<> ::grpcIMapsManager::increaseMapClientsRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::increaseMapClientsRequest>(Arena*);
template<> ::grpcIMapsManager::increaseMapClientsResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::increaseMapClientsResponse>(Arena*);
template<> ::grpcIMapsManager::registerMapUpdateServiceRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::registerMapUpdateServiceRequest>(Arena*);
template<> ::grpcIMapsManager::registerMapUpdateServiceResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::registerMapUpdateServiceResponse>(Arena*);
template<> ::grpcIMapsManager::requestForMapProcessingRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::requestForMapProcessingRequest>(Arena*);
template<> ::grpcIMapsManager::requestForMapProcessingResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::requestForMapProcessingResponse>(Arena*);
template<> ::grpcIMapsManager::setMapRequestRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::setMapRequestRequest>(Arena*);
template<> ::grpcIMapsManager::setMapRequestResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::setMapRequestResponse>(Arena*);
template<> ::grpcIMapsManager::unregisterMapUpdateServiceRequest* Arena::CreateMaybeMessage<::grpcIMapsManager::unregisterMapUpdateServiceRequest>(Arena*);
template<> ::grpcIMapsManager::unregisterMapUpdateServiceResponse* Arena::CreateMaybeMessage<::grpcIMapsManager::unregisterMapUpdateServiceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMapsManager {

// ===================================================================

class createMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.createMapRequest) */ {
 public:
  inline createMapRequest() : createMapRequest(nullptr) {}
  ~createMapRequest() override;
  explicit PROTOBUF_CONSTEXPR createMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  createMapRequest(const createMapRequest& from);
  createMapRequest(createMapRequest&& from) noexcept
    : createMapRequest() {
    *this = ::std::move(from);
  }

  inline createMapRequest& operator=(const createMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline createMapRequest& operator=(createMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const createMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const createMapRequest* internal_default_instance() {
    return reinterpret_cast<const createMapRequest*>(
               &_createMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(createMapRequest& a, createMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(createMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(createMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  createMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<createMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const createMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const createMapRequest& from) {
    createMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.createMapRequest";
  }
  protected:
  explicit createMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.createMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class createMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.createMapResponse) */ {
 public:
  inline createMapResponse() : createMapResponse(nullptr) {}
  ~createMapResponse() override;
  explicit PROTOBUF_CONSTEXPR createMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  createMapResponse(const createMapResponse& from);
  createMapResponse(createMapResponse&& from) noexcept
    : createMapResponse() {
    *this = ::std::move(from);
  }

  inline createMapResponse& operator=(const createMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline createMapResponse& operator=(createMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const createMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const createMapResponse* internal_default_instance() {
    return reinterpret_cast<const createMapResponse*>(
               &_createMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(createMapResponse& a, createMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(createMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(createMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  createMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<createMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const createMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const createMapResponse& from) {
    createMapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.createMapResponse";
  }
  protected:
  explicit createMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.createMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class deleteMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.deleteMapRequest) */ {
 public:
  inline deleteMapRequest() : deleteMapRequest(nullptr) {}
  ~deleteMapRequest() override;
  explicit PROTOBUF_CONSTEXPR deleteMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteMapRequest(const deleteMapRequest& from);
  deleteMapRequest(deleteMapRequest&& from) noexcept
    : deleteMapRequest() {
    *this = ::std::move(from);
  }

  inline deleteMapRequest& operator=(const deleteMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteMapRequest& operator=(deleteMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteMapRequest* internal_default_instance() {
    return reinterpret_cast<const deleteMapRequest*>(
               &_deleteMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(deleteMapRequest& a, deleteMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const deleteMapRequest& from) {
    deleteMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.deleteMapRequest";
  }
  protected:
  explicit deleteMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.deleteMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class deleteMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.deleteMapResponse) */ {
 public:
  inline deleteMapResponse() : deleteMapResponse(nullptr) {}
  ~deleteMapResponse() override;
  explicit PROTOBUF_CONSTEXPR deleteMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteMapResponse(const deleteMapResponse& from);
  deleteMapResponse(deleteMapResponse&& from) noexcept
    : deleteMapResponse() {
    *this = ::std::move(from);
  }

  inline deleteMapResponse& operator=(const deleteMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteMapResponse& operator=(deleteMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteMapResponse* internal_default_instance() {
    return reinterpret_cast<const deleteMapResponse*>(
               &_deleteMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(deleteMapResponse& a, deleteMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const deleteMapResponse& from) {
    deleteMapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.deleteMapResponse";
  }
  protected:
  explicit deleteMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.deleteMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getAllMapsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getAllMapsRequest) */ {
 public:
  inline getAllMapsRequest() : getAllMapsRequest(nullptr) {}
  ~getAllMapsRequest() override;
  explicit PROTOBUF_CONSTEXPR getAllMapsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllMapsRequest(const getAllMapsRequest& from);
  getAllMapsRequest(getAllMapsRequest&& from) noexcept
    : getAllMapsRequest() {
    *this = ::std::move(from);
  }

  inline getAllMapsRequest& operator=(const getAllMapsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllMapsRequest& operator=(getAllMapsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllMapsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllMapsRequest* internal_default_instance() {
    return reinterpret_cast<const getAllMapsRequest*>(
               &_getAllMapsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getAllMapsRequest& a, getAllMapsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllMapsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllMapsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getAllMapsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getAllMapsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllMapsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getAllMapsRequest& from) {
    getAllMapsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllMapsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getAllMapsRequest";
  }
  protected:
  explicit getAllMapsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDListFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes mapUUIDList = 2;
  void clear_mapuuidlist();
  const std::string& mapuuidlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuidlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuidlist();
  PROTOBUF_NODISCARD std::string* release_mapuuidlist();
  void set_allocated_mapuuidlist(std::string* mapuuidlist);
  private:
  const std::string& _internal_mapuuidlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuidlist(const std::string& value);
  std::string* _internal_mutable_mapuuidlist();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getAllMapsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuidlist_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getAllMapsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getAllMapsResponse) */ {
 public:
  inline getAllMapsResponse() : getAllMapsResponse(nullptr) {}
  ~getAllMapsResponse() override;
  explicit PROTOBUF_CONSTEXPR getAllMapsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getAllMapsResponse(const getAllMapsResponse& from);
  getAllMapsResponse(getAllMapsResponse&& from) noexcept
    : getAllMapsResponse() {
    *this = ::std::move(from);
  }

  inline getAllMapsResponse& operator=(const getAllMapsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getAllMapsResponse& operator=(getAllMapsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getAllMapsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getAllMapsResponse* internal_default_instance() {
    return reinterpret_cast<const getAllMapsResponse*>(
               &_getAllMapsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(getAllMapsResponse& a, getAllMapsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getAllMapsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getAllMapsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getAllMapsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getAllMapsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getAllMapsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getAllMapsResponse& from) {
    getAllMapsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getAllMapsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getAllMapsResponse";
  }
  protected:
  explicit getAllMapsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDListFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes mapUUIDList = 1;
  void clear_mapuuidlist();
  const std::string& mapuuidlist() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuidlist(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuidlist();
  PROTOBUF_NODISCARD std::string* release_mapuuidlist();
  void set_allocated_mapuuidlist(std::string* mapuuidlist);
  private:
  const std::string& _internal_mapuuidlist() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuidlist(const std::string& value);
  std::string* _internal_mutable_mapuuidlist();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getAllMapsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuidlist_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class registerMapUpdateServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.registerMapUpdateServiceRequest) */ {
 public:
  inline registerMapUpdateServiceRequest() : registerMapUpdateServiceRequest(nullptr) {}
  ~registerMapUpdateServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR registerMapUpdateServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  registerMapUpdateServiceRequest(const registerMapUpdateServiceRequest& from);
  registerMapUpdateServiceRequest(registerMapUpdateServiceRequest&& from) noexcept
    : registerMapUpdateServiceRequest() {
    *this = ::std::move(from);
  }

  inline registerMapUpdateServiceRequest& operator=(const registerMapUpdateServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerMapUpdateServiceRequest& operator=(registerMapUpdateServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registerMapUpdateServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const registerMapUpdateServiceRequest* internal_default_instance() {
    return reinterpret_cast<const registerMapUpdateServiceRequest*>(
               &_registerMapUpdateServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(registerMapUpdateServiceRequest& a, registerMapUpdateServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(registerMapUpdateServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerMapUpdateServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registerMapUpdateServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<registerMapUpdateServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const registerMapUpdateServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const registerMapUpdateServiceRequest& from) {
    registerMapUpdateServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerMapUpdateServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.registerMapUpdateServiceRequest";
  }
  protected:
  explicit registerMapUpdateServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceURLFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string serviceURL = 2;
  void clear_serviceurl();
  const std::string& serviceurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serviceurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serviceurl();
  PROTOBUF_NODISCARD std::string* release_serviceurl();
  void set_allocated_serviceurl(std::string* serviceurl);
  private:
  const std::string& _internal_serviceurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serviceurl(const std::string& value);
  std::string* _internal_mutable_serviceurl();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.registerMapUpdateServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceurl_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class registerMapUpdateServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.registerMapUpdateServiceResponse) */ {
 public:
  inline registerMapUpdateServiceResponse() : registerMapUpdateServiceResponse(nullptr) {}
  ~registerMapUpdateServiceResponse() override;
  explicit PROTOBUF_CONSTEXPR registerMapUpdateServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  registerMapUpdateServiceResponse(const registerMapUpdateServiceResponse& from);
  registerMapUpdateServiceResponse(registerMapUpdateServiceResponse&& from) noexcept
    : registerMapUpdateServiceResponse() {
    *this = ::std::move(from);
  }

  inline registerMapUpdateServiceResponse& operator=(const registerMapUpdateServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline registerMapUpdateServiceResponse& operator=(registerMapUpdateServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const registerMapUpdateServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const registerMapUpdateServiceResponse* internal_default_instance() {
    return reinterpret_cast<const registerMapUpdateServiceResponse*>(
               &_registerMapUpdateServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(registerMapUpdateServiceResponse& a, registerMapUpdateServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(registerMapUpdateServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(registerMapUpdateServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  registerMapUpdateServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<registerMapUpdateServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const registerMapUpdateServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const registerMapUpdateServiceResponse& from) {
    registerMapUpdateServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerMapUpdateServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.registerMapUpdateServiceResponse";
  }
  protected:
  explicit registerMapUpdateServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.registerMapUpdateServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class unregisterMapUpdateServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.unregisterMapUpdateServiceRequest) */ {
 public:
  inline unregisterMapUpdateServiceRequest() : unregisterMapUpdateServiceRequest(nullptr) {}
  ~unregisterMapUpdateServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR unregisterMapUpdateServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  unregisterMapUpdateServiceRequest(const unregisterMapUpdateServiceRequest& from);
  unregisterMapUpdateServiceRequest(unregisterMapUpdateServiceRequest&& from) noexcept
    : unregisterMapUpdateServiceRequest() {
    *this = ::std::move(from);
  }

  inline unregisterMapUpdateServiceRequest& operator=(const unregisterMapUpdateServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline unregisterMapUpdateServiceRequest& operator=(unregisterMapUpdateServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const unregisterMapUpdateServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const unregisterMapUpdateServiceRequest* internal_default_instance() {
    return reinterpret_cast<const unregisterMapUpdateServiceRequest*>(
               &_unregisterMapUpdateServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(unregisterMapUpdateServiceRequest& a, unregisterMapUpdateServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(unregisterMapUpdateServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unregisterMapUpdateServiceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  unregisterMapUpdateServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<unregisterMapUpdateServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const unregisterMapUpdateServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const unregisterMapUpdateServiceRequest& from) {
    unregisterMapUpdateServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unregisterMapUpdateServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.unregisterMapUpdateServiceRequest";
  }
  protected:
  explicit unregisterMapUpdateServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceURLFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string serviceURL = 2;
  void clear_serviceurl();
  const std::string& serviceurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serviceurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serviceurl();
  PROTOBUF_NODISCARD std::string* release_serviceurl();
  void set_allocated_serviceurl(std::string* serviceurl);
  private:
  const std::string& _internal_serviceurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serviceurl(const std::string& value);
  std::string* _internal_mutable_serviceurl();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.unregisterMapUpdateServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceurl_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class unregisterMapUpdateServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.unregisterMapUpdateServiceResponse) */ {
 public:
  inline unregisterMapUpdateServiceResponse() : unregisterMapUpdateServiceResponse(nullptr) {}
  ~unregisterMapUpdateServiceResponse() override;
  explicit PROTOBUF_CONSTEXPR unregisterMapUpdateServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  unregisterMapUpdateServiceResponse(const unregisterMapUpdateServiceResponse& from);
  unregisterMapUpdateServiceResponse(unregisterMapUpdateServiceResponse&& from) noexcept
    : unregisterMapUpdateServiceResponse() {
    *this = ::std::move(from);
  }

  inline unregisterMapUpdateServiceResponse& operator=(const unregisterMapUpdateServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline unregisterMapUpdateServiceResponse& operator=(unregisterMapUpdateServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const unregisterMapUpdateServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const unregisterMapUpdateServiceResponse* internal_default_instance() {
    return reinterpret_cast<const unregisterMapUpdateServiceResponse*>(
               &_unregisterMapUpdateServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(unregisterMapUpdateServiceResponse& a, unregisterMapUpdateServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(unregisterMapUpdateServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(unregisterMapUpdateServiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  unregisterMapUpdateServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<unregisterMapUpdateServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const unregisterMapUpdateServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const unregisterMapUpdateServiceResponse& from) {
    unregisterMapUpdateServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unregisterMapUpdateServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.unregisterMapUpdateServiceResponse";
  }
  protected:
  explicit unregisterMapUpdateServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.unregisterMapUpdateServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class increaseMapClientsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.increaseMapClientsRequest) */ {
 public:
  inline increaseMapClientsRequest() : increaseMapClientsRequest(nullptr) {}
  ~increaseMapClientsRequest() override;
  explicit PROTOBUF_CONSTEXPR increaseMapClientsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  increaseMapClientsRequest(const increaseMapClientsRequest& from);
  increaseMapClientsRequest(increaseMapClientsRequest&& from) noexcept
    : increaseMapClientsRequest() {
    *this = ::std::move(from);
  }

  inline increaseMapClientsRequest& operator=(const increaseMapClientsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline increaseMapClientsRequest& operator=(increaseMapClientsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const increaseMapClientsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const increaseMapClientsRequest* internal_default_instance() {
    return reinterpret_cast<const increaseMapClientsRequest*>(
               &_increaseMapClientsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(increaseMapClientsRequest& a, increaseMapClientsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(increaseMapClientsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(increaseMapClientsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  increaseMapClientsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<increaseMapClientsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const increaseMapClientsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const increaseMapClientsRequest& from) {
    increaseMapClientsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(increaseMapClientsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.increaseMapClientsRequest";
  }
  protected:
  explicit increaseMapClientsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kServiceURLFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // string serviceURL = 3;
  void clear_serviceurl();
  const std::string& serviceurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serviceurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serviceurl();
  PROTOBUF_NODISCARD std::string* release_serviceurl();
  void set_allocated_serviceurl(std::string* serviceurl);
  private:
  const std::string& _internal_serviceurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serviceurl(const std::string& value);
  std::string* _internal_mutable_serviceurl();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.increaseMapClientsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceurl_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class increaseMapClientsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.increaseMapClientsResponse) */ {
 public:
  inline increaseMapClientsResponse() : increaseMapClientsResponse(nullptr) {}
  ~increaseMapClientsResponse() override;
  explicit PROTOBUF_CONSTEXPR increaseMapClientsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  increaseMapClientsResponse(const increaseMapClientsResponse& from);
  increaseMapClientsResponse(increaseMapClientsResponse&& from) noexcept
    : increaseMapClientsResponse() {
    *this = ::std::move(from);
  }

  inline increaseMapClientsResponse& operator=(const increaseMapClientsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline increaseMapClientsResponse& operator=(increaseMapClientsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const increaseMapClientsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const increaseMapClientsResponse* internal_default_instance() {
    return reinterpret_cast<const increaseMapClientsResponse*>(
               &_increaseMapClientsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(increaseMapClientsResponse& a, increaseMapClientsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(increaseMapClientsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(increaseMapClientsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  increaseMapClientsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<increaseMapClientsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const increaseMapClientsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const increaseMapClientsResponse& from) {
    increaseMapClientsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(increaseMapClientsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.increaseMapClientsResponse";
  }
  protected:
  explicit increaseMapClientsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceURLFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // string serviceURL = 1;
  void clear_serviceurl();
  const std::string& serviceurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serviceurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serviceurl();
  PROTOBUF_NODISCARD std::string* release_serviceurl();
  void set_allocated_serviceurl(std::string* serviceurl);
  private:
  const std::string& _internal_serviceurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serviceurl(const std::string& value);
  std::string* _internal_mutable_serviceurl();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.increaseMapClientsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceurl_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class decreaseMapClientsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.decreaseMapClientsRequest) */ {
 public:
  inline decreaseMapClientsRequest() : decreaseMapClientsRequest(nullptr) {}
  ~decreaseMapClientsRequest() override;
  explicit PROTOBUF_CONSTEXPR decreaseMapClientsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decreaseMapClientsRequest(const decreaseMapClientsRequest& from);
  decreaseMapClientsRequest(decreaseMapClientsRequest&& from) noexcept
    : decreaseMapClientsRequest() {
    *this = ::std::move(from);
  }

  inline decreaseMapClientsRequest& operator=(const decreaseMapClientsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline decreaseMapClientsRequest& operator=(decreaseMapClientsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decreaseMapClientsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const decreaseMapClientsRequest* internal_default_instance() {
    return reinterpret_cast<const decreaseMapClientsRequest*>(
               &_decreaseMapClientsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(decreaseMapClientsRequest& a, decreaseMapClientsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(decreaseMapClientsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decreaseMapClientsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  decreaseMapClientsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<decreaseMapClientsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decreaseMapClientsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const decreaseMapClientsRequest& from) {
    decreaseMapClientsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decreaseMapClientsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.decreaseMapClientsRequest";
  }
  protected:
  explicit decreaseMapClientsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.decreaseMapClientsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class decreaseMapClientsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.decreaseMapClientsResponse) */ {
 public:
  inline decreaseMapClientsResponse() : decreaseMapClientsResponse(nullptr) {}
  ~decreaseMapClientsResponse() override;
  explicit PROTOBUF_CONSTEXPR decreaseMapClientsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  decreaseMapClientsResponse(const decreaseMapClientsResponse& from);
  decreaseMapClientsResponse(decreaseMapClientsResponse&& from) noexcept
    : decreaseMapClientsResponse() {
    *this = ::std::move(from);
  }

  inline decreaseMapClientsResponse& operator=(const decreaseMapClientsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline decreaseMapClientsResponse& operator=(decreaseMapClientsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const decreaseMapClientsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const decreaseMapClientsResponse* internal_default_instance() {
    return reinterpret_cast<const decreaseMapClientsResponse*>(
               &_decreaseMapClientsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(decreaseMapClientsResponse& a, decreaseMapClientsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(decreaseMapClientsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(decreaseMapClientsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  decreaseMapClientsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<decreaseMapClientsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const decreaseMapClientsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const decreaseMapClientsResponse& from) {
    decreaseMapClientsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(decreaseMapClientsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.decreaseMapClientsResponse";
  }
  protected:
  explicit decreaseMapClientsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.decreaseMapClientsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getMapRequestRequest) */ {
 public:
  inline getMapRequestRequest() : getMapRequestRequest(nullptr) {}
  ~getMapRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR getMapRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequestRequest(const getMapRequestRequest& from);
  getMapRequestRequest(getMapRequestRequest&& from) noexcept
    : getMapRequestRequest() {
    *this = ::std::move(from);
  }

  inline getMapRequestRequest& operator=(const getMapRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequestRequest& operator=(getMapRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequestRequest* internal_default_instance() {
    return reinterpret_cast<const getMapRequestRequest*>(
               &_getMapRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(getMapRequestRequest& a, getMapRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapRequestRequest& from) {
    getMapRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getMapRequestRequest";
  }
  protected:
  explicit getMapRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kMapFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes map = 3;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getMapRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getMapRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getMapRequestResponse) */ {
 public:
  inline getMapRequestResponse() : getMapRequestResponse(nullptr) {}
  ~getMapRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR getMapRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMapRequestResponse(const getMapRequestResponse& from);
  getMapRequestResponse(getMapRequestResponse&& from) noexcept
    : getMapRequestResponse() {
    *this = ::std::move(from);
  }

  inline getMapRequestResponse& operator=(const getMapRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMapRequestResponse& operator=(getMapRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMapRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMapRequestResponse* internal_default_instance() {
    return reinterpret_cast<const getMapRequestResponse*>(
               &_getMapRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(getMapRequestResponse& a, getMapRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMapRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMapRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMapRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMapRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMapRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMapRequestResponse& from) {
    getMapRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMapRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getMapRequestResponse";
  }
  protected:
  explicit getMapRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes map = 1;
  void clear_map();
  const std::string& map() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map();
  PROTOBUF_NODISCARD std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getMapRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class setMapRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.setMapRequestRequest) */ {
 public:
  inline setMapRequestRequest() : setMapRequestRequest(nullptr) {}
  ~setMapRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR setMapRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapRequestRequest(const setMapRequestRequest& from);
  setMapRequestRequest(setMapRequestRequest&& from) noexcept
    : setMapRequestRequest() {
    *this = ::std::move(from);
  }

  inline setMapRequestRequest& operator=(const setMapRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapRequestRequest& operator=(setMapRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapRequestRequest* internal_default_instance() {
    return reinterpret_cast<const setMapRequestRequest*>(
               &_setMapRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(setMapRequestRequest& a, setMapRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setMapRequestRequest& from) {
    setMapRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.setMapRequestRequest";
  }
  protected:
  explicit setMapRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kMapDatastructureFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes mapDatastructure = 3;
  void clear_mapdatastructure();
  const std::string& mapdatastructure() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapdatastructure(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapdatastructure();
  PROTOBUF_NODISCARD std::string* release_mapdatastructure();
  void set_allocated_mapdatastructure(std::string* mapdatastructure);
  private:
  const std::string& _internal_mapdatastructure() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapdatastructure(const std::string& value);
  std::string* _internal_mutable_mapdatastructure();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.setMapRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapdatastructure_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class setMapRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.setMapRequestResponse) */ {
 public:
  inline setMapRequestResponse() : setMapRequestResponse(nullptr) {}
  ~setMapRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR setMapRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setMapRequestResponse(const setMapRequestResponse& from);
  setMapRequestResponse(setMapRequestResponse&& from) noexcept
    : setMapRequestResponse() {
    *this = ::std::move(from);
  }

  inline setMapRequestResponse& operator=(const setMapRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setMapRequestResponse& operator=(setMapRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setMapRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setMapRequestResponse* internal_default_instance() {
    return reinterpret_cast<const setMapRequestResponse*>(
               &_setMapRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(setMapRequestResponse& a, setMapRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setMapRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setMapRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setMapRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setMapRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setMapRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setMapRequestResponse& from) {
    setMapRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setMapRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.setMapRequestResponse";
  }
  protected:
  explicit setMapRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.setMapRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getPointCloudRequestRequest) */ {
 public:
  inline getPointCloudRequestRequest() : getPointCloudRequestRequest(nullptr) {}
  ~getPointCloudRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR getPointCloudRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequestRequest(const getPointCloudRequestRequest& from);
  getPointCloudRequestRequest(getPointCloudRequestRequest&& from) noexcept
    : getPointCloudRequestRequest() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequestRequest& operator=(const getPointCloudRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequestRequest& operator=(getPointCloudRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequestRequest* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequestRequest*>(
               &_getPointCloudRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(getPointCloudRequestRequest& a, getPointCloudRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getPointCloudRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getPointCloudRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getPointCloudRequestRequest& from) {
    getPointCloudRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getPointCloudRequestRequest";
  }
  protected:
  explicit getPointCloudRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kPointCloudFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes pointCloud = 3;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getPointCloudRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getPointCloudRequestResponse) */ {
 public:
  inline getPointCloudRequestResponse() : getPointCloudRequestResponse(nullptr) {}
  ~getPointCloudRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR getPointCloudRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequestResponse(const getPointCloudRequestResponse& from);
  getPointCloudRequestResponse(getPointCloudRequestResponse&& from) noexcept
    : getPointCloudRequestResponse() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequestResponse& operator=(const getPointCloudRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequestResponse& operator=(getPointCloudRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequestResponse* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequestResponse*>(
               &_getPointCloudRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(getPointCloudRequestResponse& a, getPointCloudRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getPointCloudRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getPointCloudRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getPointCloudRequestResponse& from) {
    getPointCloudRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getPointCloudRequestResponse";
  }
  protected:
  explicit getPointCloudRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pointCloud = 1;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getPointCloudRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class requestForMapProcessingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.requestForMapProcessingRequest) */ {
 public:
  inline requestForMapProcessingRequest() : requestForMapProcessingRequest(nullptr) {}
  ~requestForMapProcessingRequest() override;
  explicit PROTOBUF_CONSTEXPR requestForMapProcessingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  requestForMapProcessingRequest(const requestForMapProcessingRequest& from);
  requestForMapProcessingRequest(requestForMapProcessingRequest&& from) noexcept
    : requestForMapProcessingRequest() {
    *this = ::std::move(from);
  }

  inline requestForMapProcessingRequest& operator=(const requestForMapProcessingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline requestForMapProcessingRequest& operator=(requestForMapProcessingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const requestForMapProcessingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const requestForMapProcessingRequest* internal_default_instance() {
    return reinterpret_cast<const requestForMapProcessingRequest*>(
               &_requestForMapProcessingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(requestForMapProcessingRequest& a, requestForMapProcessingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(requestForMapProcessingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(requestForMapProcessingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  requestForMapProcessingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<requestForMapProcessingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const requestForMapProcessingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const requestForMapProcessingRequest& from) {
    requestForMapProcessingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestForMapProcessingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.requestForMapProcessingRequest";
  }
  protected:
  explicit requestForMapProcessingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kProcessingTypeFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes processingType = 3;
  void clear_processingtype();
  const std::string& processingtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_processingtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_processingtype();
  PROTOBUF_NODISCARD std::string* release_processingtype();
  void set_allocated_processingtype(std::string* processingtype);
  private:
  const std::string& _internal_processingtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_processingtype(const std::string& value);
  std::string* _internal_mutable_processingtype();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.requestForMapProcessingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processingtype_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class requestForMapProcessingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.requestForMapProcessingResponse) */ {
 public:
  inline requestForMapProcessingResponse() : requestForMapProcessingResponse(nullptr) {}
  ~requestForMapProcessingResponse() override;
  explicit PROTOBUF_CONSTEXPR requestForMapProcessingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  requestForMapProcessingResponse(const requestForMapProcessingResponse& from);
  requestForMapProcessingResponse(requestForMapProcessingResponse&& from) noexcept
    : requestForMapProcessingResponse() {
    *this = ::std::move(from);
  }

  inline requestForMapProcessingResponse& operator=(const requestForMapProcessingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline requestForMapProcessingResponse& operator=(requestForMapProcessingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const requestForMapProcessingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const requestForMapProcessingResponse* internal_default_instance() {
    return reinterpret_cast<const requestForMapProcessingResponse*>(
               &_requestForMapProcessingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(requestForMapProcessingResponse& a, requestForMapProcessingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(requestForMapProcessingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(requestForMapProcessingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  requestForMapProcessingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<requestForMapProcessingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const requestForMapProcessingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const requestForMapProcessingResponse& from) {
    requestForMapProcessingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(requestForMapProcessingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.requestForMapProcessingResponse";
  }
  protected:
  explicit requestForMapProcessingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.requestForMapProcessingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getStatusForMapProcessingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getStatusForMapProcessingRequest) */ {
 public:
  inline getStatusForMapProcessingRequest() : getStatusForMapProcessingRequest(nullptr) {}
  ~getStatusForMapProcessingRequest() override;
  explicit PROTOBUF_CONSTEXPR getStatusForMapProcessingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getStatusForMapProcessingRequest(const getStatusForMapProcessingRequest& from);
  getStatusForMapProcessingRequest(getStatusForMapProcessingRequest&& from) noexcept
    : getStatusForMapProcessingRequest() {
    *this = ::std::move(from);
  }

  inline getStatusForMapProcessingRequest& operator=(const getStatusForMapProcessingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getStatusForMapProcessingRequest& operator=(getStatusForMapProcessingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getStatusForMapProcessingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getStatusForMapProcessingRequest* internal_default_instance() {
    return reinterpret_cast<const getStatusForMapProcessingRequest*>(
               &_getStatusForMapProcessingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(getStatusForMapProcessingRequest& a, getStatusForMapProcessingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getStatusForMapProcessingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getStatusForMapProcessingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getStatusForMapProcessingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getStatusForMapProcessingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getStatusForMapProcessingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getStatusForMapProcessingRequest& from) {
    getStatusForMapProcessingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getStatusForMapProcessingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getStatusForMapProcessingRequest";
  }
  protected:
  explicit getStatusForMapProcessingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kStatusFieldNumber = 3,
    kResultingMapUUIDFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kProgressFieldNumber = 4,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes status = 3;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string resultingMapUUID = 5;
  void clear_resultingmapuuid();
  const std::string& resultingmapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resultingmapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resultingmapuuid();
  PROTOBUF_NODISCARD std::string* release_resultingmapuuid();
  void set_allocated_resultingmapuuid(std::string* resultingmapuuid);
  private:
  const std::string& _internal_resultingmapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resultingmapuuid(const std::string& value);
  std::string* _internal_mutable_resultingmapuuid();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // float progress = 4;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getStatusForMapProcessingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultingmapuuid_;
    int32_t grpcservercompressionformat_;
    float progress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getStatusForMapProcessingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getStatusForMapProcessingResponse) */ {
 public:
  inline getStatusForMapProcessingResponse() : getStatusForMapProcessingResponse(nullptr) {}
  ~getStatusForMapProcessingResponse() override;
  explicit PROTOBUF_CONSTEXPR getStatusForMapProcessingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getStatusForMapProcessingResponse(const getStatusForMapProcessingResponse& from);
  getStatusForMapProcessingResponse(getStatusForMapProcessingResponse&& from) noexcept
    : getStatusForMapProcessingResponse() {
    *this = ::std::move(from);
  }

  inline getStatusForMapProcessingResponse& operator=(const getStatusForMapProcessingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getStatusForMapProcessingResponse& operator=(getStatusForMapProcessingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getStatusForMapProcessingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getStatusForMapProcessingResponse* internal_default_instance() {
    return reinterpret_cast<const getStatusForMapProcessingResponse*>(
               &_getStatusForMapProcessingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(getStatusForMapProcessingResponse& a, getStatusForMapProcessingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getStatusForMapProcessingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getStatusForMapProcessingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getStatusForMapProcessingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getStatusForMapProcessingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getStatusForMapProcessingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getStatusForMapProcessingResponse& from) {
    getStatusForMapProcessingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getStatusForMapProcessingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getStatusForMapProcessingResponse";
  }
  protected:
  explicit getStatusForMapProcessingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kResultingMapUUIDFieldNumber = 3,
    kProgressFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string resultingMapUUID = 3;
  void clear_resultingmapuuid();
  const std::string& resultingmapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resultingmapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resultingmapuuid();
  PROTOBUF_NODISCARD std::string* release_resultingmapuuid();
  void set_allocated_resultingmapuuid(std::string* resultingmapuuid);
  private:
  const std::string& _internal_resultingmapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resultingmapuuid(const std::string& value);
  std::string* _internal_mutable_resultingmapuuid();
  public:

  // float progress = 2;
  void clear_progress();
  float progress() const;
  void set_progress(float value);
  private:
  float _internal_progress() const;
  void _internal_set_progress(float value);
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getStatusForMapProcessingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultingmapuuid_;
    float progress_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getDataForMapProcessingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getDataForMapProcessingRequest) */ {
 public:
  inline getDataForMapProcessingRequest() : getDataForMapProcessingRequest(nullptr) {}
  ~getDataForMapProcessingRequest() override;
  explicit PROTOBUF_CONSTEXPR getDataForMapProcessingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDataForMapProcessingRequest(const getDataForMapProcessingRequest& from);
  getDataForMapProcessingRequest(getDataForMapProcessingRequest&& from) noexcept
    : getDataForMapProcessingRequest() {
    *this = ::std::move(from);
  }

  inline getDataForMapProcessingRequest& operator=(const getDataForMapProcessingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDataForMapProcessingRequest& operator=(getDataForMapProcessingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDataForMapProcessingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDataForMapProcessingRequest* internal_default_instance() {
    return reinterpret_cast<const getDataForMapProcessingRequest*>(
               &_getDataForMapProcessingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(getDataForMapProcessingRequest& a, getDataForMapProcessingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getDataForMapProcessingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDataForMapProcessingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getDataForMapProcessingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getDataForMapProcessingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDataForMapProcessingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getDataForMapProcessingRequest& from) {
    getDataForMapProcessingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDataForMapProcessingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getDataForMapProcessingRequest";
  }
  protected:
  explicit getDataForMapProcessingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUUIDFieldNumber = 2,
    kPointCloudFieldNumber = 3,
    kKeyframePosesFieldNumber = 4,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string mapUUID = 2;
  void clear_mapuuid();
  const std::string& mapuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapuuid();
  PROTOBUF_NODISCARD std::string* release_mapuuid();
  void set_allocated_mapuuid(std::string* mapuuid);
  private:
  const std::string& _internal_mapuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapuuid(const std::string& value);
  std::string* _internal_mutable_mapuuid();
  public:

  // bytes pointCloud = 3;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // bytes keyframePoses = 4;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getDataForMapProcessingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// -------------------------------------------------------------------

class getDataForMapProcessingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapsManager.getDataForMapProcessingResponse) */ {
 public:
  inline getDataForMapProcessingResponse() : getDataForMapProcessingResponse(nullptr) {}
  ~getDataForMapProcessingResponse() override;
  explicit PROTOBUF_CONSTEXPR getDataForMapProcessingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDataForMapProcessingResponse(const getDataForMapProcessingResponse& from);
  getDataForMapProcessingResponse(getDataForMapProcessingResponse&& from) noexcept
    : getDataForMapProcessingResponse() {
    *this = ::std::move(from);
  }

  inline getDataForMapProcessingResponse& operator=(const getDataForMapProcessingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDataForMapProcessingResponse& operator=(getDataForMapProcessingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDataForMapProcessingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDataForMapProcessingResponse* internal_default_instance() {
    return reinterpret_cast<const getDataForMapProcessingResponse*>(
               &_getDataForMapProcessingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(getDataForMapProcessingResponse& a, getDataForMapProcessingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDataForMapProcessingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDataForMapProcessingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getDataForMapProcessingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getDataForMapProcessingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDataForMapProcessingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getDataForMapProcessingResponse& from) {
    getDataForMapProcessingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDataForMapProcessingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapsManager.getDataForMapProcessingResponse";
  }
  protected:
  explicit getDataForMapProcessingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
    kKeyframePosesFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes pointCloud = 1;
  void clear_pointcloud();
  const std::string& pointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pointcloud();
  PROTOBUF_NODISCARD std::string* release_pointcloud();
  void set_allocated_pointcloud(std::string* pointcloud);
  private:
  const std::string& _internal_pointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pointcloud(const std::string& value);
  std::string* _internal_mutable_pointcloud();
  public:

  // bytes keyframePoses = 2;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapsManager.getDataForMapProcessingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pointcloud_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMapsManagerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// createMapRequest

// int32 grpcServerCompressionFormat = 1;
inline void createMapRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t createMapRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t createMapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.createMapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void createMapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void createMapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.createMapRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void createMapRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& createMapRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.createMapRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void createMapRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.createMapRequest.mapUUID)
}
inline std::string* createMapRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.createMapRequest.mapUUID)
  return _s;
}
inline const std::string& createMapRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void createMapRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* createMapRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* createMapRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.createMapRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void createMapRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.createMapRequest.mapUUID)
}

// -------------------------------------------------------------------

// createMapResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void createMapResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t createMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t createMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.createMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void createMapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void createMapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.createMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// deleteMapRequest

// int32 grpcServerCompressionFormat = 1;
inline void deleteMapRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t deleteMapRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t deleteMapRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.deleteMapRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void deleteMapRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void deleteMapRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.deleteMapRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void deleteMapRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& deleteMapRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.deleteMapRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void deleteMapRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.deleteMapRequest.mapUUID)
}
inline std::string* deleteMapRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.deleteMapRequest.mapUUID)
  return _s;
}
inline const std::string& deleteMapRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void deleteMapRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* deleteMapRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* deleteMapRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.deleteMapRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void deleteMapRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.deleteMapRequest.mapUUID)
}

// -------------------------------------------------------------------

// deleteMapResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void deleteMapResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t deleteMapResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t deleteMapResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.deleteMapResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void deleteMapResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void deleteMapResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.deleteMapResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getAllMapsRequest

// int32 grpcServerCompressionFormat = 1;
inline void getAllMapsRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getAllMapsRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getAllMapsRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getAllMapsRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getAllMapsRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getAllMapsRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getAllMapsRequest.grpcServerCompressionFormat)
}

// bytes mapUUIDList = 2;
inline void getAllMapsRequest::clear_mapuuidlist() {
  _impl_.mapuuidlist_.ClearToEmpty();
}
inline const std::string& getAllMapsRequest::mapuuidlist() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getAllMapsRequest.mapUUIDList)
  return _internal_mapuuidlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllMapsRequest::set_mapuuidlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuidlist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getAllMapsRequest.mapUUIDList)
}
inline std::string* getAllMapsRequest::mutable_mapuuidlist() {
  std::string* _s = _internal_mutable_mapuuidlist();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getAllMapsRequest.mapUUIDList)
  return _s;
}
inline const std::string& getAllMapsRequest::_internal_mapuuidlist() const {
  return _impl_.mapuuidlist_.Get();
}
inline void getAllMapsRequest::_internal_set_mapuuidlist(const std::string& value) {
  
  _impl_.mapuuidlist_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllMapsRequest::_internal_mutable_mapuuidlist() {
  
  return _impl_.mapuuidlist_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllMapsRequest::release_mapuuidlist() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getAllMapsRequest.mapUUIDList)
  return _impl_.mapuuidlist_.Release();
}
inline void getAllMapsRequest::set_allocated_mapuuidlist(std::string* mapuuidlist) {
  if (mapuuidlist != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuidlist_.SetAllocated(mapuuidlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuidlist_.IsDefault()) {
    _impl_.mapuuidlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getAllMapsRequest.mapUUIDList)
}

// -------------------------------------------------------------------

// getAllMapsResponse

// bytes mapUUIDList = 1;
inline void getAllMapsResponse::clear_mapuuidlist() {
  _impl_.mapuuidlist_.ClearToEmpty();
}
inline const std::string& getAllMapsResponse::mapuuidlist() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getAllMapsResponse.mapUUIDList)
  return _internal_mapuuidlist();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getAllMapsResponse::set_mapuuidlist(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuidlist_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getAllMapsResponse.mapUUIDList)
}
inline std::string* getAllMapsResponse::mutable_mapuuidlist() {
  std::string* _s = _internal_mutable_mapuuidlist();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getAllMapsResponse.mapUUIDList)
  return _s;
}
inline const std::string& getAllMapsResponse::_internal_mapuuidlist() const {
  return _impl_.mapuuidlist_.Get();
}
inline void getAllMapsResponse::_internal_set_mapuuidlist(const std::string& value) {
  
  _impl_.mapuuidlist_.Set(value, GetArenaForAllocation());
}
inline std::string* getAllMapsResponse::_internal_mutable_mapuuidlist() {
  
  return _impl_.mapuuidlist_.Mutable(GetArenaForAllocation());
}
inline std::string* getAllMapsResponse::release_mapuuidlist() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getAllMapsResponse.mapUUIDList)
  return _impl_.mapuuidlist_.Release();
}
inline void getAllMapsResponse::set_allocated_mapuuidlist(std::string* mapuuidlist) {
  if (mapuuidlist != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuidlist_.SetAllocated(mapuuidlist, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuidlist_.IsDefault()) {
    _impl_.mapuuidlist_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getAllMapsResponse.mapUUIDList)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getAllMapsResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getAllMapsResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getAllMapsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getAllMapsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getAllMapsResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getAllMapsResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getAllMapsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// registerMapUpdateServiceRequest

// int32 grpcServerCompressionFormat = 1;
inline void registerMapUpdateServiceRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t registerMapUpdateServiceRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t registerMapUpdateServiceRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.registerMapUpdateServiceRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void registerMapUpdateServiceRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void registerMapUpdateServiceRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.registerMapUpdateServiceRequest.grpcServerCompressionFormat)
}

// string serviceURL = 2;
inline void registerMapUpdateServiceRequest::clear_serviceurl() {
  _impl_.serviceurl_.ClearToEmpty();
}
inline const std::string& registerMapUpdateServiceRequest::serviceurl() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.registerMapUpdateServiceRequest.serviceURL)
  return _internal_serviceurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void registerMapUpdateServiceRequest::set_serviceurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serviceurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.registerMapUpdateServiceRequest.serviceURL)
}
inline std::string* registerMapUpdateServiceRequest::mutable_serviceurl() {
  std::string* _s = _internal_mutable_serviceurl();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.registerMapUpdateServiceRequest.serviceURL)
  return _s;
}
inline const std::string& registerMapUpdateServiceRequest::_internal_serviceurl() const {
  return _impl_.serviceurl_.Get();
}
inline void registerMapUpdateServiceRequest::_internal_set_serviceurl(const std::string& value) {
  
  _impl_.serviceurl_.Set(value, GetArenaForAllocation());
}
inline std::string* registerMapUpdateServiceRequest::_internal_mutable_serviceurl() {
  
  return _impl_.serviceurl_.Mutable(GetArenaForAllocation());
}
inline std::string* registerMapUpdateServiceRequest::release_serviceurl() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.registerMapUpdateServiceRequest.serviceURL)
  return _impl_.serviceurl_.Release();
}
inline void registerMapUpdateServiceRequest::set_allocated_serviceurl(std::string* serviceurl) {
  if (serviceurl != nullptr) {
    
  } else {
    
  }
  _impl_.serviceurl_.SetAllocated(serviceurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serviceurl_.IsDefault()) {
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.registerMapUpdateServiceRequest.serviceURL)
}

// -------------------------------------------------------------------

// registerMapUpdateServiceResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void registerMapUpdateServiceResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t registerMapUpdateServiceResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t registerMapUpdateServiceResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.registerMapUpdateServiceResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void registerMapUpdateServiceResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void registerMapUpdateServiceResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.registerMapUpdateServiceResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// unregisterMapUpdateServiceRequest

// int32 grpcServerCompressionFormat = 1;
inline void unregisterMapUpdateServiceRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t unregisterMapUpdateServiceRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t unregisterMapUpdateServiceRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.unregisterMapUpdateServiceRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void unregisterMapUpdateServiceRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void unregisterMapUpdateServiceRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.unregisterMapUpdateServiceRequest.grpcServerCompressionFormat)
}

// string serviceURL = 2;
inline void unregisterMapUpdateServiceRequest::clear_serviceurl() {
  _impl_.serviceurl_.ClearToEmpty();
}
inline const std::string& unregisterMapUpdateServiceRequest::serviceurl() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.unregisterMapUpdateServiceRequest.serviceURL)
  return _internal_serviceurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void unregisterMapUpdateServiceRequest::set_serviceurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serviceurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.unregisterMapUpdateServiceRequest.serviceURL)
}
inline std::string* unregisterMapUpdateServiceRequest::mutable_serviceurl() {
  std::string* _s = _internal_mutable_serviceurl();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.unregisterMapUpdateServiceRequest.serviceURL)
  return _s;
}
inline const std::string& unregisterMapUpdateServiceRequest::_internal_serviceurl() const {
  return _impl_.serviceurl_.Get();
}
inline void unregisterMapUpdateServiceRequest::_internal_set_serviceurl(const std::string& value) {
  
  _impl_.serviceurl_.Set(value, GetArenaForAllocation());
}
inline std::string* unregisterMapUpdateServiceRequest::_internal_mutable_serviceurl() {
  
  return _impl_.serviceurl_.Mutable(GetArenaForAllocation());
}
inline std::string* unregisterMapUpdateServiceRequest::release_serviceurl() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.unregisterMapUpdateServiceRequest.serviceURL)
  return _impl_.serviceurl_.Release();
}
inline void unregisterMapUpdateServiceRequest::set_allocated_serviceurl(std::string* serviceurl) {
  if (serviceurl != nullptr) {
    
  } else {
    
  }
  _impl_.serviceurl_.SetAllocated(serviceurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serviceurl_.IsDefault()) {
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.unregisterMapUpdateServiceRequest.serviceURL)
}

// -------------------------------------------------------------------

// unregisterMapUpdateServiceResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void unregisterMapUpdateServiceResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t unregisterMapUpdateServiceResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t unregisterMapUpdateServiceResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.unregisterMapUpdateServiceResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void unregisterMapUpdateServiceResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void unregisterMapUpdateServiceResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.unregisterMapUpdateServiceResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// increaseMapClientsRequest

// int32 grpcServerCompressionFormat = 1;
inline void increaseMapClientsRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t increaseMapClientsRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t increaseMapClientsRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.increaseMapClientsRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void increaseMapClientsRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void increaseMapClientsRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.increaseMapClientsRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void increaseMapClientsRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& increaseMapClientsRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.increaseMapClientsRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void increaseMapClientsRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.increaseMapClientsRequest.mapUUID)
}
inline std::string* increaseMapClientsRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.increaseMapClientsRequest.mapUUID)
  return _s;
}
inline const std::string& increaseMapClientsRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void increaseMapClientsRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* increaseMapClientsRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* increaseMapClientsRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.increaseMapClientsRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void increaseMapClientsRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.increaseMapClientsRequest.mapUUID)
}

// string serviceURL = 3;
inline void increaseMapClientsRequest::clear_serviceurl() {
  _impl_.serviceurl_.ClearToEmpty();
}
inline const std::string& increaseMapClientsRequest::serviceurl() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.increaseMapClientsRequest.serviceURL)
  return _internal_serviceurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void increaseMapClientsRequest::set_serviceurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serviceurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.increaseMapClientsRequest.serviceURL)
}
inline std::string* increaseMapClientsRequest::mutable_serviceurl() {
  std::string* _s = _internal_mutable_serviceurl();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.increaseMapClientsRequest.serviceURL)
  return _s;
}
inline const std::string& increaseMapClientsRequest::_internal_serviceurl() const {
  return _impl_.serviceurl_.Get();
}
inline void increaseMapClientsRequest::_internal_set_serviceurl(const std::string& value) {
  
  _impl_.serviceurl_.Set(value, GetArenaForAllocation());
}
inline std::string* increaseMapClientsRequest::_internal_mutable_serviceurl() {
  
  return _impl_.serviceurl_.Mutable(GetArenaForAllocation());
}
inline std::string* increaseMapClientsRequest::release_serviceurl() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.increaseMapClientsRequest.serviceURL)
  return _impl_.serviceurl_.Release();
}
inline void increaseMapClientsRequest::set_allocated_serviceurl(std::string* serviceurl) {
  if (serviceurl != nullptr) {
    
  } else {
    
  }
  _impl_.serviceurl_.SetAllocated(serviceurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serviceurl_.IsDefault()) {
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.increaseMapClientsRequest.serviceURL)
}

// -------------------------------------------------------------------

// increaseMapClientsResponse

// string serviceURL = 1;
inline void increaseMapClientsResponse::clear_serviceurl() {
  _impl_.serviceurl_.ClearToEmpty();
}
inline const std::string& increaseMapClientsResponse::serviceurl() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.increaseMapClientsResponse.serviceURL)
  return _internal_serviceurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void increaseMapClientsResponse::set_serviceurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serviceurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.increaseMapClientsResponse.serviceURL)
}
inline std::string* increaseMapClientsResponse::mutable_serviceurl() {
  std::string* _s = _internal_mutable_serviceurl();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.increaseMapClientsResponse.serviceURL)
  return _s;
}
inline const std::string& increaseMapClientsResponse::_internal_serviceurl() const {
  return _impl_.serviceurl_.Get();
}
inline void increaseMapClientsResponse::_internal_set_serviceurl(const std::string& value) {
  
  _impl_.serviceurl_.Set(value, GetArenaForAllocation());
}
inline std::string* increaseMapClientsResponse::_internal_mutable_serviceurl() {
  
  return _impl_.serviceurl_.Mutable(GetArenaForAllocation());
}
inline std::string* increaseMapClientsResponse::release_serviceurl() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.increaseMapClientsResponse.serviceURL)
  return _impl_.serviceurl_.Release();
}
inline void increaseMapClientsResponse::set_allocated_serviceurl(std::string* serviceurl) {
  if (serviceurl != nullptr) {
    
  } else {
    
  }
  _impl_.serviceurl_.SetAllocated(serviceurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serviceurl_.IsDefault()) {
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.increaseMapClientsResponse.serviceURL)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void increaseMapClientsResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t increaseMapClientsResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t increaseMapClientsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.increaseMapClientsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void increaseMapClientsResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void increaseMapClientsResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.increaseMapClientsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// decreaseMapClientsRequest

// int32 grpcServerCompressionFormat = 1;
inline void decreaseMapClientsRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t decreaseMapClientsRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t decreaseMapClientsRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.decreaseMapClientsRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void decreaseMapClientsRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void decreaseMapClientsRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.decreaseMapClientsRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void decreaseMapClientsRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& decreaseMapClientsRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.decreaseMapClientsRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void decreaseMapClientsRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.decreaseMapClientsRequest.mapUUID)
}
inline std::string* decreaseMapClientsRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.decreaseMapClientsRequest.mapUUID)
  return _s;
}
inline const std::string& decreaseMapClientsRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void decreaseMapClientsRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* decreaseMapClientsRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* decreaseMapClientsRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.decreaseMapClientsRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void decreaseMapClientsRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.decreaseMapClientsRequest.mapUUID)
}

// -------------------------------------------------------------------

// decreaseMapClientsResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void decreaseMapClientsResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t decreaseMapClientsResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t decreaseMapClientsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.decreaseMapClientsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void decreaseMapClientsResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void decreaseMapClientsResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.decreaseMapClientsResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMapRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMapRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMapRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMapRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getMapRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMapRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMapRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getMapRequestRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void getMapRequestRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getMapRequestRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getMapRequestRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getMapRequestRequest.mapUUID)
}
inline std::string* getMapRequestRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getMapRequestRequest.mapUUID)
  return _s;
}
inline const std::string& getMapRequestRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getMapRequestRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getMapRequestRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getMapRequestRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getMapRequestRequest.mapUUID)
}

// bytes map = 3;
inline void getMapRequestRequest::clear_map() {
  _impl_.map_.ClearToEmpty();
}
inline const std::string& getMapRequestRequest::map() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getMapRequestRequest.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestRequest::set_map(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getMapRequestRequest.map)
}
inline std::string* getMapRequestRequest::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getMapRequestRequest.map)
  return _s;
}
inline const std::string& getMapRequestRequest::_internal_map() const {
  return _impl_.map_.Get();
}
inline void getMapRequestRequest::_internal_set_map(const std::string& value) {
  
  _impl_.map_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::_internal_mutable_map() {
  
  return _impl_.map_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestRequest::release_map() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getMapRequestRequest.map)
  return _impl_.map_.Release();
}
inline void getMapRequestRequest::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  _impl_.map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_.IsDefault()) {
    _impl_.map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getMapRequestRequest.map)
}

// -------------------------------------------------------------------

// getMapRequestResponse

// bytes map = 1;
inline void getMapRequestResponse::clear_map() {
  _impl_.map_.ClearToEmpty();
}
inline const std::string& getMapRequestResponse::map() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getMapRequestResponse.map)
  return _internal_map();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMapRequestResponse::set_map(ArgT0&& arg0, ArgT... args) {
 
 _impl_.map_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getMapRequestResponse.map)
}
inline std::string* getMapRequestResponse::mutable_map() {
  std::string* _s = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getMapRequestResponse.map)
  return _s;
}
inline const std::string& getMapRequestResponse::_internal_map() const {
  return _impl_.map_.Get();
}
inline void getMapRequestResponse::_internal_set_map(const std::string& value) {
  
  _impl_.map_.Set(value, GetArenaForAllocation());
}
inline std::string* getMapRequestResponse::_internal_mutable_map() {
  
  return _impl_.map_.Mutable(GetArenaForAllocation());
}
inline std::string* getMapRequestResponse::release_map() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getMapRequestResponse.map)
  return _impl_.map_.Release();
}
inline void getMapRequestResponse::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    
  } else {
    
  }
  _impl_.map_.SetAllocated(map, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_.IsDefault()) {
    _impl_.map_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getMapRequestResponse.map)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getMapRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMapRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMapRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getMapRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMapRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMapRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getMapRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setMapRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void setMapRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setMapRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setMapRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.setMapRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setMapRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setMapRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.setMapRequestRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void setMapRequestRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& setMapRequestRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.setMapRequestRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setMapRequestRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.setMapRequestRequest.mapUUID)
}
inline std::string* setMapRequestRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.setMapRequestRequest.mapUUID)
  return _s;
}
inline const std::string& setMapRequestRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void setMapRequestRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.setMapRequestRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void setMapRequestRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.setMapRequestRequest.mapUUID)
}

// bytes mapDatastructure = 3;
inline void setMapRequestRequest::clear_mapdatastructure() {
  _impl_.mapdatastructure_.ClearToEmpty();
}
inline const std::string& setMapRequestRequest::mapdatastructure() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.setMapRequestRequest.mapDatastructure)
  return _internal_mapdatastructure();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setMapRequestRequest::set_mapdatastructure(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapdatastructure_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.setMapRequestRequest.mapDatastructure)
}
inline std::string* setMapRequestRequest::mutable_mapdatastructure() {
  std::string* _s = _internal_mutable_mapdatastructure();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.setMapRequestRequest.mapDatastructure)
  return _s;
}
inline const std::string& setMapRequestRequest::_internal_mapdatastructure() const {
  return _impl_.mapdatastructure_.Get();
}
inline void setMapRequestRequest::_internal_set_mapdatastructure(const std::string& value) {
  
  _impl_.mapdatastructure_.Set(value, GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::_internal_mutable_mapdatastructure() {
  
  return _impl_.mapdatastructure_.Mutable(GetArenaForAllocation());
}
inline std::string* setMapRequestRequest::release_mapdatastructure() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.setMapRequestRequest.mapDatastructure)
  return _impl_.mapdatastructure_.Release();
}
inline void setMapRequestRequest::set_allocated_mapdatastructure(std::string* mapdatastructure) {
  if (mapdatastructure != nullptr) {
    
  } else {
    
  }
  _impl_.mapdatastructure_.SetAllocated(mapdatastructure, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapdatastructure_.IsDefault()) {
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.setMapRequestRequest.mapDatastructure)
}

// -------------------------------------------------------------------

// setMapRequestResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setMapRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setMapRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setMapRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.setMapRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setMapRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setMapRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.setMapRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPointCloudRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void getPointCloudRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getPointCloudRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getPointCloudRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getPointCloudRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getPointCloudRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getPointCloudRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getPointCloudRequestRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void getPointCloudRequestRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getPointCloudRequestRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getPointCloudRequestRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequestRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getPointCloudRequestRequest.mapUUID)
}
inline std::string* getPointCloudRequestRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getPointCloudRequestRequest.mapUUID)
  return _s;
}
inline const std::string& getPointCloudRequestRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getPointCloudRequestRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getPointCloudRequestRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getPointCloudRequestRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getPointCloudRequestRequest.mapUUID)
}

// bytes pointCloud = 3;
inline void getPointCloudRequestRequest::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudRequestRequest::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getPointCloudRequestRequest.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequestRequest::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getPointCloudRequestRequest.pointCloud)
}
inline std::string* getPointCloudRequestRequest::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getPointCloudRequestRequest.pointCloud)
  return _s;
}
inline const std::string& getPointCloudRequestRequest::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getPointCloudRequestRequest::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequestRequest::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getPointCloudRequestRequest.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getPointCloudRequestRequest::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getPointCloudRequestRequest.pointCloud)
}

// -------------------------------------------------------------------

// getPointCloudRequestResponse

// bytes pointCloud = 1;
inline void getPointCloudRequestResponse::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudRequestResponse::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getPointCloudRequestResponse.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequestResponse::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getPointCloudRequestResponse.pointCloud)
}
inline std::string* getPointCloudRequestResponse::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getPointCloudRequestResponse.pointCloud)
  return _s;
}
inline const std::string& getPointCloudRequestResponse::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getPointCloudRequestResponse::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequestResponse::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequestResponse::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getPointCloudRequestResponse.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getPointCloudRequestResponse::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getPointCloudRequestResponse.pointCloud)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getPointCloudRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getPointCloudRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getPointCloudRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getPointCloudRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getPointCloudRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getPointCloudRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getPointCloudRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// requestForMapProcessingRequest

// int32 grpcServerCompressionFormat = 1;
inline void requestForMapProcessingRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t requestForMapProcessingRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t requestForMapProcessingRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.requestForMapProcessingRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void requestForMapProcessingRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void requestForMapProcessingRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.requestForMapProcessingRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void requestForMapProcessingRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& requestForMapProcessingRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.requestForMapProcessingRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void requestForMapProcessingRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.requestForMapProcessingRequest.mapUUID)
}
inline std::string* requestForMapProcessingRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.requestForMapProcessingRequest.mapUUID)
  return _s;
}
inline const std::string& requestForMapProcessingRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void requestForMapProcessingRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* requestForMapProcessingRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* requestForMapProcessingRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.requestForMapProcessingRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void requestForMapProcessingRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.requestForMapProcessingRequest.mapUUID)
}

// bytes processingType = 3;
inline void requestForMapProcessingRequest::clear_processingtype() {
  _impl_.processingtype_.ClearToEmpty();
}
inline const std::string& requestForMapProcessingRequest::processingtype() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.requestForMapProcessingRequest.processingType)
  return _internal_processingtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void requestForMapProcessingRequest::set_processingtype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.processingtype_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.requestForMapProcessingRequest.processingType)
}
inline std::string* requestForMapProcessingRequest::mutable_processingtype() {
  std::string* _s = _internal_mutable_processingtype();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.requestForMapProcessingRequest.processingType)
  return _s;
}
inline const std::string& requestForMapProcessingRequest::_internal_processingtype() const {
  return _impl_.processingtype_.Get();
}
inline void requestForMapProcessingRequest::_internal_set_processingtype(const std::string& value) {
  
  _impl_.processingtype_.Set(value, GetArenaForAllocation());
}
inline std::string* requestForMapProcessingRequest::_internal_mutable_processingtype() {
  
  return _impl_.processingtype_.Mutable(GetArenaForAllocation());
}
inline std::string* requestForMapProcessingRequest::release_processingtype() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.requestForMapProcessingRequest.processingType)
  return _impl_.processingtype_.Release();
}
inline void requestForMapProcessingRequest::set_allocated_processingtype(std::string* processingtype) {
  if (processingtype != nullptr) {
    
  } else {
    
  }
  _impl_.processingtype_.SetAllocated(processingtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.processingtype_.IsDefault()) {
    _impl_.processingtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.requestForMapProcessingRequest.processingType)
}

// -------------------------------------------------------------------

// requestForMapProcessingResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void requestForMapProcessingResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t requestForMapProcessingResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t requestForMapProcessingResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.requestForMapProcessingResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void requestForMapProcessingResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void requestForMapProcessingResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.requestForMapProcessingResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getStatusForMapProcessingRequest

// int32 grpcServerCompressionFormat = 1;
inline void getStatusForMapProcessingRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getStatusForMapProcessingRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getStatusForMapProcessingRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getStatusForMapProcessingRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getStatusForMapProcessingRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getStatusForMapProcessingRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getStatusForMapProcessingRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void getStatusForMapProcessingRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getStatusForMapProcessingRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getStatusForMapProcessingRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getStatusForMapProcessingRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getStatusForMapProcessingRequest.mapUUID)
}
inline std::string* getStatusForMapProcessingRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getStatusForMapProcessingRequest.mapUUID)
  return _s;
}
inline const std::string& getStatusForMapProcessingRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getStatusForMapProcessingRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getStatusForMapProcessingRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getStatusForMapProcessingRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getStatusForMapProcessingRequest.mapUUID)
}

// bytes status = 3;
inline void getStatusForMapProcessingRequest::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& getStatusForMapProcessingRequest::status() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getStatusForMapProcessingRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getStatusForMapProcessingRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getStatusForMapProcessingRequest.status)
}
inline std::string* getStatusForMapProcessingRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getStatusForMapProcessingRequest.status)
  return _s;
}
inline const std::string& getStatusForMapProcessingRequest::_internal_status() const {
  return _impl_.status_.Get();
}
inline void getStatusForMapProcessingRequest::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingRequest::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingRequest::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getStatusForMapProcessingRequest.status)
  return _impl_.status_.Release();
}
inline void getStatusForMapProcessingRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getStatusForMapProcessingRequest.status)
}

// float progress = 4;
inline void getStatusForMapProcessingRequest::clear_progress() {
  _impl_.progress_ = 0;
}
inline float getStatusForMapProcessingRequest::_internal_progress() const {
  return _impl_.progress_;
}
inline float getStatusForMapProcessingRequest::progress() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getStatusForMapProcessingRequest.progress)
  return _internal_progress();
}
inline void getStatusForMapProcessingRequest::_internal_set_progress(float value) {
  
  _impl_.progress_ = value;
}
inline void getStatusForMapProcessingRequest::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getStatusForMapProcessingRequest.progress)
}

// string resultingMapUUID = 5;
inline void getStatusForMapProcessingRequest::clear_resultingmapuuid() {
  _impl_.resultingmapuuid_.ClearToEmpty();
}
inline const std::string& getStatusForMapProcessingRequest::resultingmapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getStatusForMapProcessingRequest.resultingMapUUID)
  return _internal_resultingmapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getStatusForMapProcessingRequest::set_resultingmapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resultingmapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getStatusForMapProcessingRequest.resultingMapUUID)
}
inline std::string* getStatusForMapProcessingRequest::mutable_resultingmapuuid() {
  std::string* _s = _internal_mutable_resultingmapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getStatusForMapProcessingRequest.resultingMapUUID)
  return _s;
}
inline const std::string& getStatusForMapProcessingRequest::_internal_resultingmapuuid() const {
  return _impl_.resultingmapuuid_.Get();
}
inline void getStatusForMapProcessingRequest::_internal_set_resultingmapuuid(const std::string& value) {
  
  _impl_.resultingmapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingRequest::_internal_mutable_resultingmapuuid() {
  
  return _impl_.resultingmapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingRequest::release_resultingmapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getStatusForMapProcessingRequest.resultingMapUUID)
  return _impl_.resultingmapuuid_.Release();
}
inline void getStatusForMapProcessingRequest::set_allocated_resultingmapuuid(std::string* resultingmapuuid) {
  if (resultingmapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.resultingmapuuid_.SetAllocated(resultingmapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resultingmapuuid_.IsDefault()) {
    _impl_.resultingmapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getStatusForMapProcessingRequest.resultingMapUUID)
}

// -------------------------------------------------------------------

// getStatusForMapProcessingResponse

// bytes status = 1;
inline void getStatusForMapProcessingResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& getStatusForMapProcessingResponse::status() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getStatusForMapProcessingResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getStatusForMapProcessingResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getStatusForMapProcessingResponse.status)
}
inline std::string* getStatusForMapProcessingResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getStatusForMapProcessingResponse.status)
  return _s;
}
inline const std::string& getStatusForMapProcessingResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void getStatusForMapProcessingResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingResponse::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getStatusForMapProcessingResponse.status)
  return _impl_.status_.Release();
}
inline void getStatusForMapProcessingResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getStatusForMapProcessingResponse.status)
}

// float progress = 2;
inline void getStatusForMapProcessingResponse::clear_progress() {
  _impl_.progress_ = 0;
}
inline float getStatusForMapProcessingResponse::_internal_progress() const {
  return _impl_.progress_;
}
inline float getStatusForMapProcessingResponse::progress() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getStatusForMapProcessingResponse.progress)
  return _internal_progress();
}
inline void getStatusForMapProcessingResponse::_internal_set_progress(float value) {
  
  _impl_.progress_ = value;
}
inline void getStatusForMapProcessingResponse::set_progress(float value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getStatusForMapProcessingResponse.progress)
}

// string resultingMapUUID = 3;
inline void getStatusForMapProcessingResponse::clear_resultingmapuuid() {
  _impl_.resultingmapuuid_.ClearToEmpty();
}
inline const std::string& getStatusForMapProcessingResponse::resultingmapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getStatusForMapProcessingResponse.resultingMapUUID)
  return _internal_resultingmapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getStatusForMapProcessingResponse::set_resultingmapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resultingmapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getStatusForMapProcessingResponse.resultingMapUUID)
}
inline std::string* getStatusForMapProcessingResponse::mutable_resultingmapuuid() {
  std::string* _s = _internal_mutable_resultingmapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getStatusForMapProcessingResponse.resultingMapUUID)
  return _s;
}
inline const std::string& getStatusForMapProcessingResponse::_internal_resultingmapuuid() const {
  return _impl_.resultingmapuuid_.Get();
}
inline void getStatusForMapProcessingResponse::_internal_set_resultingmapuuid(const std::string& value) {
  
  _impl_.resultingmapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingResponse::_internal_mutable_resultingmapuuid() {
  
  return _impl_.resultingmapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getStatusForMapProcessingResponse::release_resultingmapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getStatusForMapProcessingResponse.resultingMapUUID)
  return _impl_.resultingmapuuid_.Release();
}
inline void getStatusForMapProcessingResponse::set_allocated_resultingmapuuid(std::string* resultingmapuuid) {
  if (resultingmapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.resultingmapuuid_.SetAllocated(resultingmapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resultingmapuuid_.IsDefault()) {
    _impl_.resultingmapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getStatusForMapProcessingResponse.resultingMapUUID)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void getStatusForMapProcessingResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getStatusForMapProcessingResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getStatusForMapProcessingResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getStatusForMapProcessingResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getStatusForMapProcessingResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getStatusForMapProcessingResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getStatusForMapProcessingResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDataForMapProcessingRequest

// int32 grpcServerCompressionFormat = 1;
inline void getDataForMapProcessingRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getDataForMapProcessingRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getDataForMapProcessingRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getDataForMapProcessingRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getDataForMapProcessingRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getDataForMapProcessingRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getDataForMapProcessingRequest.grpcServerCompressionFormat)
}

// string mapUUID = 2;
inline void getDataForMapProcessingRequest::clear_mapuuid() {
  _impl_.mapuuid_.ClearToEmpty();
}
inline const std::string& getDataForMapProcessingRequest::mapuuid() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getDataForMapProcessingRequest.mapUUID)
  return _internal_mapuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDataForMapProcessingRequest::set_mapuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mapuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getDataForMapProcessingRequest.mapUUID)
}
inline std::string* getDataForMapProcessingRequest::mutable_mapuuid() {
  std::string* _s = _internal_mutable_mapuuid();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getDataForMapProcessingRequest.mapUUID)
  return _s;
}
inline const std::string& getDataForMapProcessingRequest::_internal_mapuuid() const {
  return _impl_.mapuuid_.Get();
}
inline void getDataForMapProcessingRequest::_internal_set_mapuuid(const std::string& value) {
  
  _impl_.mapuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingRequest::_internal_mutable_mapuuid() {
  
  return _impl_.mapuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingRequest::release_mapuuid() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getDataForMapProcessingRequest.mapUUID)
  return _impl_.mapuuid_.Release();
}
inline void getDataForMapProcessingRequest::set_allocated_mapuuid(std::string* mapuuid) {
  if (mapuuid != nullptr) {
    
  } else {
    
  }
  _impl_.mapuuid_.SetAllocated(mapuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mapuuid_.IsDefault()) {
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getDataForMapProcessingRequest.mapUUID)
}

// bytes pointCloud = 3;
inline void getDataForMapProcessingRequest::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getDataForMapProcessingRequest::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getDataForMapProcessingRequest.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDataForMapProcessingRequest::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getDataForMapProcessingRequest.pointCloud)
}
inline std::string* getDataForMapProcessingRequest::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getDataForMapProcessingRequest.pointCloud)
  return _s;
}
inline const std::string& getDataForMapProcessingRequest::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getDataForMapProcessingRequest::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingRequest::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingRequest::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getDataForMapProcessingRequest.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getDataForMapProcessingRequest::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getDataForMapProcessingRequest.pointCloud)
}

// bytes keyframePoses = 4;
inline void getDataForMapProcessingRequest::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getDataForMapProcessingRequest::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getDataForMapProcessingRequest.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDataForMapProcessingRequest::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getDataForMapProcessingRequest.keyframePoses)
}
inline std::string* getDataForMapProcessingRequest::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getDataForMapProcessingRequest.keyframePoses)
  return _s;
}
inline const std::string& getDataForMapProcessingRequest::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getDataForMapProcessingRequest::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingRequest::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingRequest::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getDataForMapProcessingRequest.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getDataForMapProcessingRequest::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getDataForMapProcessingRequest.keyframePoses)
}

// -------------------------------------------------------------------

// getDataForMapProcessingResponse

// bytes pointCloud = 1;
inline void getDataForMapProcessingResponse::clear_pointcloud() {
  _impl_.pointcloud_.ClearToEmpty();
}
inline const std::string& getDataForMapProcessingResponse::pointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getDataForMapProcessingResponse.pointCloud)
  return _internal_pointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDataForMapProcessingResponse::set_pointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getDataForMapProcessingResponse.pointCloud)
}
inline std::string* getDataForMapProcessingResponse::mutable_pointcloud() {
  std::string* _s = _internal_mutable_pointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getDataForMapProcessingResponse.pointCloud)
  return _s;
}
inline const std::string& getDataForMapProcessingResponse::_internal_pointcloud() const {
  return _impl_.pointcloud_.Get();
}
inline void getDataForMapProcessingResponse::_internal_set_pointcloud(const std::string& value) {
  
  _impl_.pointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingResponse::_internal_mutable_pointcloud() {
  
  return _impl_.pointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingResponse::release_pointcloud() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getDataForMapProcessingResponse.pointCloud)
  return _impl_.pointcloud_.Release();
}
inline void getDataForMapProcessingResponse::set_allocated_pointcloud(std::string* pointcloud) {
  if (pointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.pointcloud_.SetAllocated(pointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pointcloud_.IsDefault()) {
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getDataForMapProcessingResponse.pointCloud)
}

// bytes keyframePoses = 2;
inline void getDataForMapProcessingResponse::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getDataForMapProcessingResponse::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getDataForMapProcessingResponse.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDataForMapProcessingResponse::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getDataForMapProcessingResponse.keyframePoses)
}
inline std::string* getDataForMapProcessingResponse::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIMapsManager.getDataForMapProcessingResponse.keyframePoses)
  return _s;
}
inline const std::string& getDataForMapProcessingResponse::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getDataForMapProcessingResponse::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingResponse::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getDataForMapProcessingResponse::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIMapsManager.getDataForMapProcessingResponse.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getDataForMapProcessingResponse::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMapsManager.getDataForMapProcessingResponse.keyframePoses)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getDataForMapProcessingResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getDataForMapProcessingResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getDataForMapProcessingResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMapsManager.getDataForMapProcessingResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDataForMapProcessingResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getDataForMapProcessingResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMapsManager.getDataForMapProcessingResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMapsManager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMapsManagerService_2eproto
