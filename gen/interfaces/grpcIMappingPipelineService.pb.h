// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMappingPipelineService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMappingPipelineService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMappingPipelineService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMappingPipelineService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMappingPipelineService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMappingPipelineService_2eproto;
namespace grpcIMappingPipeline {
class getDataForVisualizationRequest;
struct getDataForVisualizationRequestDefaultTypeInternal;
extern getDataForVisualizationRequestDefaultTypeInternal _getDataForVisualizationRequest_default_instance_;
class getDataForVisualizationResponse;
struct getDataForVisualizationResponseDefaultTypeInternal;
extern getDataForVisualizationResponseDefaultTypeInternal _getDataForVisualizationResponse_default_instance_;
class init_grpc0Request;
struct init_grpc0RequestDefaultTypeInternal;
extern init_grpc0RequestDefaultTypeInternal _init_grpc0Request_default_instance_;
class init_grpc0Response;
struct init_grpc0ResponseDefaultTypeInternal;
extern init_grpc0ResponseDefaultTypeInternal _init_grpc0Response_default_instance_;
class init_grpc1Request;
struct init_grpc1RequestDefaultTypeInternal;
extern init_grpc1RequestDefaultTypeInternal _init_grpc1Request_default_instance_;
class init_grpc1Response;
struct init_grpc1ResponseDefaultTypeInternal;
extern init_grpc1ResponseDefaultTypeInternal _init_grpc1Response_default_instance_;
class mappingProcessRequest_grpc0Request;
struct mappingProcessRequest_grpc0RequestDefaultTypeInternal;
extern mappingProcessRequest_grpc0RequestDefaultTypeInternal _mappingProcessRequest_grpc0Request_default_instance_;
class mappingProcessRequest_grpc0Response;
struct mappingProcessRequest_grpc0ResponseDefaultTypeInternal;
extern mappingProcessRequest_grpc0ResponseDefaultTypeInternal _mappingProcessRequest_grpc0Response_default_instance_;
class mappingProcessRequest_grpc1Request;
struct mappingProcessRequest_grpc1RequestDefaultTypeInternal;
extern mappingProcessRequest_grpc1RequestDefaultTypeInternal _mappingProcessRequest_grpc1Request_default_instance_;
class mappingProcessRequest_grpc1Response;
struct mappingProcessRequest_grpc1ResponseDefaultTypeInternal;
extern mappingProcessRequest_grpc1ResponseDefaultTypeInternal _mappingProcessRequest_grpc1Response_default_instance_;
class mappingProcessRequest_grpc2Request;
struct mappingProcessRequest_grpc2RequestDefaultTypeInternal;
extern mappingProcessRequest_grpc2RequestDefaultTypeInternal _mappingProcessRequest_grpc2Request_default_instance_;
class mappingProcessRequest_grpc2Response;
struct mappingProcessRequest_grpc2ResponseDefaultTypeInternal;
extern mappingProcessRequest_grpc2ResponseDefaultTypeInternal _mappingProcessRequest_grpc2Response_default_instance_;
class set3DTransformSolARToWorldRequest;
struct set3DTransformSolARToWorldRequestDefaultTypeInternal;
extern set3DTransformSolARToWorldRequestDefaultTypeInternal _set3DTransformSolARToWorldRequest_default_instance_;
class set3DTransformSolARToWorldResponse;
struct set3DTransformSolARToWorldResponseDefaultTypeInternal;
extern set3DTransformSolARToWorldResponseDefaultTypeInternal _set3DTransformSolARToWorldResponse_default_instance_;
class setCameraParameters_grpc0Request;
struct setCameraParameters_grpc0RequestDefaultTypeInternal;
extern setCameraParameters_grpc0RequestDefaultTypeInternal _setCameraParameters_grpc0Request_default_instance_;
class setCameraParameters_grpc0Response;
struct setCameraParameters_grpc0ResponseDefaultTypeInternal;
extern setCameraParameters_grpc0ResponseDefaultTypeInternal _setCameraParameters_grpc0Response_default_instance_;
class setCameraParameters_grpc1Request;
struct setCameraParameters_grpc1RequestDefaultTypeInternal;
extern setCameraParameters_grpc1RequestDefaultTypeInternal _setCameraParameters_grpc1Request_default_instance_;
class setCameraParameters_grpc1Response;
struct setCameraParameters_grpc1ResponseDefaultTypeInternal;
extern setCameraParameters_grpc1ResponseDefaultTypeInternal _setCameraParameters_grpc1Response_default_instance_;
class setRectificationParametersRequest;
struct setRectificationParametersRequestDefaultTypeInternal;
extern setRectificationParametersRequestDefaultTypeInternal _setRectificationParametersRequest_default_instance_;
class setRectificationParametersResponse;
struct setRectificationParametersResponseDefaultTypeInternal;
extern setRectificationParametersResponseDefaultTypeInternal _setRectificationParametersResponse_default_instance_;
class startRequest;
struct startRequestDefaultTypeInternal;
extern startRequestDefaultTypeInternal _startRequest_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopRequest;
struct stopRequestDefaultTypeInternal;
extern stopRequestDefaultTypeInternal _stopRequest_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
}  // namespace grpcIMappingPipeline
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMappingPipeline::getDataForVisualizationRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::getDataForVisualizationRequest>(Arena*);
template<> ::grpcIMappingPipeline::getDataForVisualizationResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::getDataForVisualizationResponse>(Arena*);
template<> ::grpcIMappingPipeline::init_grpc0Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::init_grpc0Request>(Arena*);
template<> ::grpcIMappingPipeline::init_grpc0Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::init_grpc0Response>(Arena*);
template<> ::grpcIMappingPipeline::init_grpc1Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::init_grpc1Request>(Arena*);
template<> ::grpcIMappingPipeline::init_grpc1Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::init_grpc1Response>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc0Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc0Request>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc0Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc0Response>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc1Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc1Request>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc1Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc1Response>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc2Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc2Request>(Arena*);
template<> ::grpcIMappingPipeline::mappingProcessRequest_grpc2Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::mappingProcessRequest_grpc2Response>(Arena*);
template<> ::grpcIMappingPipeline::set3DTransformSolARToWorldRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::set3DTransformSolARToWorldRequest>(Arena*);
template<> ::grpcIMappingPipeline::set3DTransformSolARToWorldResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::set3DTransformSolARToWorldResponse>(Arena*);
template<> ::grpcIMappingPipeline::setCameraParameters_grpc0Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setCameraParameters_grpc0Request>(Arena*);
template<> ::grpcIMappingPipeline::setCameraParameters_grpc0Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setCameraParameters_grpc0Response>(Arena*);
template<> ::grpcIMappingPipeline::setCameraParameters_grpc1Request* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setCameraParameters_grpc1Request>(Arena*);
template<> ::grpcIMappingPipeline::setCameraParameters_grpc1Response* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setCameraParameters_grpc1Response>(Arena*);
template<> ::grpcIMappingPipeline::setRectificationParametersRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setRectificationParametersRequest>(Arena*);
template<> ::grpcIMappingPipeline::setRectificationParametersResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::setRectificationParametersResponse>(Arena*);
template<> ::grpcIMappingPipeline::startRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::startRequest>(Arena*);
template<> ::grpcIMappingPipeline::startResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::startResponse>(Arena*);
template<> ::grpcIMappingPipeline::stopRequest* Arena::CreateMaybeMessage<::grpcIMappingPipeline::stopRequest>(Arena*);
template<> ::grpcIMappingPipeline::stopResponse* Arena::CreateMaybeMessage<::grpcIMappingPipeline::stopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMappingPipeline {

// ===================================================================

class init_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.init_grpc0Request) */ {
 public:
  inline init_grpc0Request() : init_grpc0Request(nullptr) {}
  ~init_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc0Request(const init_grpc0Request& from);
  init_grpc0Request(init_grpc0Request&& from) noexcept
    : init_grpc0Request() {
    *this = ::std::move(from);
  }

  inline init_grpc0Request& operator=(const init_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc0Request& operator=(init_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc0Request*>(
               &_init_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(init_grpc0Request& a, init_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc0Request& from) {
    init_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.init_grpc0Request";
  }
  protected:
  explicit init_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.init_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.init_grpc0Response) */ {
 public:
  inline init_grpc0Response() : init_grpc0Response(nullptr) {}
  ~init_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc0Response(const init_grpc0Response& from);
  init_grpc0Response(init_grpc0Response&& from) noexcept
    : init_grpc0Response() {
    *this = ::std::move(from);
  }

  inline init_grpc0Response& operator=(const init_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc0Response& operator=(init_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc0Response*>(
               &_init_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(init_grpc0Response& a, init_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc0Response& from) {
    init_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.init_grpc0Response";
  }
  protected:
  explicit init_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.init_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class startRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.startRequest) */ {
 public:
  inline startRequest() : startRequest(nullptr) {}
  ~startRequest() override;
  explicit PROTOBUF_CONSTEXPR startRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startRequest(const startRequest& from);
  startRequest(startRequest&& from) noexcept
    : startRequest() {
    *this = ::std::move(from);
  }

  inline startRequest& operator=(const startRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline startRequest& operator=(startRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const startRequest* internal_default_instance() {
    return reinterpret_cast<const startRequest*>(
               &_startRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(startRequest& a, startRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(startRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  startRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<startRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const startRequest& from) {
    startRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.startRequest";
  }
  protected:
  explicit startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.startRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class startResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  ~startResponse() override;
  explicit PROTOBUF_CONSTEXPR startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const startResponse& from) {
    startResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class stopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.stopRequest) */ {
 public:
  inline stopRequest() : stopRequest(nullptr) {}
  ~stopRequest() override;
  explicit PROTOBUF_CONSTEXPR stopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopRequest(const stopRequest& from);
  stopRequest(stopRequest&& from) noexcept
    : stopRequest() {
    *this = ::std::move(from);
  }

  inline stopRequest& operator=(const stopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopRequest& operator=(stopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopRequest* internal_default_instance() {
    return reinterpret_cast<const stopRequest*>(
               &_stopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(stopRequest& a, stopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(stopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stopRequest& from) {
    stopRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.stopRequest";
  }
  protected:
  explicit stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.stopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  ~stopResponse() override;
  explicit PROTOBUF_CONSTEXPR stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stopResponse& from) {
    stopResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.init_grpc1Request) */ {
 public:
  inline init_grpc1Request() : init_grpc1Request(nullptr) {}
  ~init_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR init_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc1Request(const init_grpc1Request& from);
  init_grpc1Request(init_grpc1Request&& from) noexcept
    : init_grpc1Request() {
    *this = ::std::move(from);
  }

  inline init_grpc1Request& operator=(const init_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc1Request& operator=(init_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const init_grpc1Request*>(
               &_init_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(init_grpc1Request& a, init_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc1Request& from) {
    init_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.init_grpc1Request";
  }
  protected:
  explicit init_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelocalizationServiceURLFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // string relocalizationServiceURL = 2;
  void clear_relocalizationserviceurl();
  const std::string& relocalizationserviceurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relocalizationserviceurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relocalizationserviceurl();
  PROTOBUF_NODISCARD std::string* release_relocalizationserviceurl();
  void set_allocated_relocalizationserviceurl(std::string* relocalizationserviceurl);
  private:
  const std::string& _internal_relocalizationserviceurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relocalizationserviceurl(const std::string& value);
  std::string* _internal_mutable_relocalizationserviceurl();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.init_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relocalizationserviceurl_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class init_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.init_grpc1Response) */ {
 public:
  inline init_grpc1Response() : init_grpc1Response(nullptr) {}
  ~init_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR init_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  init_grpc1Response(const init_grpc1Response& from);
  init_grpc1Response(init_grpc1Response&& from) noexcept
    : init_grpc1Response() {
    *this = ::std::move(from);
  }

  inline init_grpc1Response& operator=(const init_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline init_grpc1Response& operator=(init_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const init_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const init_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const init_grpc1Response*>(
               &_init_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(init_grpc1Response& a, init_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(init_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(init_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  init_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<init_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const init_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const init_grpc1Response& from) {
    init_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(init_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.init_grpc1Response";
  }
  protected:
  explicit init_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.init_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setCameraParameters_grpc0Request) */ {
 public:
  inline setCameraParameters_grpc0Request() : setCameraParameters_grpc0Request(nullptr) {}
  ~setCameraParameters_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc0Request(const setCameraParameters_grpc0Request& from);
  setCameraParameters_grpc0Request(setCameraParameters_grpc0Request&& from) noexcept
    : setCameraParameters_grpc0Request() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc0Request& operator=(const setCameraParameters_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc0Request& operator=(setCameraParameters_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc0Request*>(
               &_setCameraParameters_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(setCameraParameters_grpc0Request& a, setCameraParameters_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc0Request& from) {
    setCameraParameters_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setCameraParameters_grpc0Request";
  }
  protected:
  explicit setCameraParameters_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParamsFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes cameraParams = 2;
  void clear_cameraparams();
  const std::string& cameraparams() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams();
  PROTOBUF_NODISCARD std::string* release_cameraparams();
  void set_allocated_cameraparams(std::string* cameraparams);
  private:
  const std::string& _internal_cameraparams() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams(const std::string& value);
  std::string* _internal_mutable_cameraparams();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setCameraParameters_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setCameraParameters_grpc0Response) */ {
 public:
  inline setCameraParameters_grpc0Response() : setCameraParameters_grpc0Response(nullptr) {}
  ~setCameraParameters_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc0Response(const setCameraParameters_grpc0Response& from);
  setCameraParameters_grpc0Response(setCameraParameters_grpc0Response&& from) noexcept
    : setCameraParameters_grpc0Response() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc0Response& operator=(const setCameraParameters_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc0Response& operator=(setCameraParameters_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc0Response*>(
               &_setCameraParameters_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(setCameraParameters_grpc0Response& a, setCameraParameters_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc0Response& from) {
    setCameraParameters_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setCameraParameters_grpc0Response";
  }
  protected:
  explicit setCameraParameters_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setCameraParameters_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setCameraParameters_grpc1Request) */ {
 public:
  inline setCameraParameters_grpc1Request() : setCameraParameters_grpc1Request(nullptr) {}
  ~setCameraParameters_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc1Request(const setCameraParameters_grpc1Request& from);
  setCameraParameters_grpc1Request(setCameraParameters_grpc1Request&& from) noexcept
    : setCameraParameters_grpc1Request() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc1Request& operator=(const setCameraParameters_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc1Request& operator=(setCameraParameters_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc1Request*>(
               &_setCameraParameters_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(setCameraParameters_grpc1Request& a, setCameraParameters_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc1Request& from) {
    setCameraParameters_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setCameraParameters_grpc1Request";
  }
  protected:
  explicit setCameraParameters_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParams1FieldNumber = 2,
    kCameraParams2FieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes cameraParams1 = 2;
  void clear_cameraparams1();
  const std::string& cameraparams1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams1();
  PROTOBUF_NODISCARD std::string* release_cameraparams1();
  void set_allocated_cameraparams1(std::string* cameraparams1);
  private:
  const std::string& _internal_cameraparams1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams1(const std::string& value);
  std::string* _internal_mutable_cameraparams1();
  public:

  // bytes cameraParams2 = 3;
  void clear_cameraparams2();
  const std::string& cameraparams2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cameraparams2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cameraparams2();
  PROTOBUF_NODISCARD std::string* release_cameraparams2();
  void set_allocated_cameraparams2(std::string* cameraparams2);
  private:
  const std::string& _internal_cameraparams2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameraparams2(const std::string& value);
  std::string* _internal_mutable_cameraparams2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setCameraParameters_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameraparams2_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setCameraParameters_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setCameraParameters_grpc1Response) */ {
 public:
  inline setCameraParameters_grpc1Response() : setCameraParameters_grpc1Response(nullptr) {}
  ~setCameraParameters_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR setCameraParameters_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setCameraParameters_grpc1Response(const setCameraParameters_grpc1Response& from);
  setCameraParameters_grpc1Response(setCameraParameters_grpc1Response&& from) noexcept
    : setCameraParameters_grpc1Response() {
    *this = ::std::move(from);
  }

  inline setCameraParameters_grpc1Response& operator=(const setCameraParameters_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline setCameraParameters_grpc1Response& operator=(setCameraParameters_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setCameraParameters_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const setCameraParameters_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const setCameraParameters_grpc1Response*>(
               &_setCameraParameters_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(setCameraParameters_grpc1Response& a, setCameraParameters_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(setCameraParameters_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setCameraParameters_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setCameraParameters_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setCameraParameters_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setCameraParameters_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setCameraParameters_grpc1Response& from) {
    setCameraParameters_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setCameraParameters_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setCameraParameters_grpc1Response";
  }
  protected:
  explicit setCameraParameters_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setCameraParameters_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setRectificationParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setRectificationParametersRequest) */ {
 public:
  inline setRectificationParametersRequest() : setRectificationParametersRequest(nullptr) {}
  ~setRectificationParametersRequest() override;
  explicit PROTOBUF_CONSTEXPR setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setRectificationParametersRequest(const setRectificationParametersRequest& from);
  setRectificationParametersRequest(setRectificationParametersRequest&& from) noexcept
    : setRectificationParametersRequest() {
    *this = ::std::move(from);
  }

  inline setRectificationParametersRequest& operator=(const setRectificationParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setRectificationParametersRequest& operator=(setRectificationParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setRectificationParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setRectificationParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setRectificationParametersRequest*>(
               &_setRectificationParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(setRectificationParametersRequest& a, setRectificationParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setRectificationParametersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setRectificationParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setRectificationParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setRectificationParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setRectificationParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setRectificationParametersRequest& from) {
    setRectificationParametersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setRectificationParametersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setRectificationParametersRequest";
  }
  protected:
  explicit setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectCam1FieldNumber = 2,
    kRectCam2FieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes rectCam1 = 2;
  void clear_rectcam1();
  const std::string& rectcam1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectcam1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectcam1();
  PROTOBUF_NODISCARD std::string* release_rectcam1();
  void set_allocated_rectcam1(std::string* rectcam1);
  private:
  const std::string& _internal_rectcam1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectcam1(const std::string& value);
  std::string* _internal_mutable_rectcam1();
  public:

  // bytes rectCam2 = 3;
  void clear_rectcam2();
  const std::string& rectcam2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rectcam2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rectcam2();
  PROTOBUF_NODISCARD std::string* release_rectcam2();
  void set_allocated_rectcam2(std::string* rectcam2);
  private:
  const std::string& _internal_rectcam2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rectcam2(const std::string& value);
  std::string* _internal_mutable_rectcam2();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setRectificationParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectcam1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rectcam2_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class setRectificationParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.setRectificationParametersResponse) */ {
 public:
  inline setRectificationParametersResponse() : setRectificationParametersResponse(nullptr) {}
  ~setRectificationParametersResponse() override;
  explicit PROTOBUF_CONSTEXPR setRectificationParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setRectificationParametersResponse(const setRectificationParametersResponse& from);
  setRectificationParametersResponse(setRectificationParametersResponse&& from) noexcept
    : setRectificationParametersResponse() {
    *this = ::std::move(from);
  }

  inline setRectificationParametersResponse& operator=(const setRectificationParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setRectificationParametersResponse& operator=(setRectificationParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setRectificationParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setRectificationParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setRectificationParametersResponse*>(
               &_setRectificationParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(setRectificationParametersResponse& a, setRectificationParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setRectificationParametersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setRectificationParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setRectificationParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setRectificationParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setRectificationParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const setRectificationParametersResponse& from) {
    setRectificationParametersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setRectificationParametersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.setRectificationParametersResponse";
  }
  protected:
  explicit setRectificationParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.setRectificationParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class set3DTransformSolARToWorldRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.set3DTransformSolARToWorldRequest) */ {
 public:
  inline set3DTransformSolARToWorldRequest() : set3DTransformSolARToWorldRequest(nullptr) {}
  ~set3DTransformSolARToWorldRequest() override;
  explicit PROTOBUF_CONSTEXPR set3DTransformSolARToWorldRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set3DTransformSolARToWorldRequest(const set3DTransformSolARToWorldRequest& from);
  set3DTransformSolARToWorldRequest(set3DTransformSolARToWorldRequest&& from) noexcept
    : set3DTransformSolARToWorldRequest() {
    *this = ::std::move(from);
  }

  inline set3DTransformSolARToWorldRequest& operator=(const set3DTransformSolARToWorldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline set3DTransformSolARToWorldRequest& operator=(set3DTransformSolARToWorldRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set3DTransformSolARToWorldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const set3DTransformSolARToWorldRequest* internal_default_instance() {
    return reinterpret_cast<const set3DTransformSolARToWorldRequest*>(
               &_set3DTransformSolARToWorldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(set3DTransformSolARToWorldRequest& a, set3DTransformSolARToWorldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(set3DTransformSolARToWorldRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set3DTransformSolARToWorldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  set3DTransformSolARToWorldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<set3DTransformSolARToWorldRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set3DTransformSolARToWorldRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const set3DTransformSolARToWorldRequest& from) {
    set3DTransformSolARToWorldRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set3DTransformSolARToWorldRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.set3DTransformSolARToWorldRequest";
  }
  protected:
  explicit set3DTransformSolARToWorldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes transform = 2;
  void clear_transform();
  const std::string& transform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform();
  PROTOBUF_NODISCARD std::string* release_transform();
  void set_allocated_transform(std::string* transform);
  private:
  const std::string& _internal_transform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform(const std::string& value);
  std::string* _internal_mutable_transform();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.set3DTransformSolARToWorldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class set3DTransformSolARToWorldResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.set3DTransformSolARToWorldResponse) */ {
 public:
  inline set3DTransformSolARToWorldResponse() : set3DTransformSolARToWorldResponse(nullptr) {}
  ~set3DTransformSolARToWorldResponse() override;
  explicit PROTOBUF_CONSTEXPR set3DTransformSolARToWorldResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  set3DTransformSolARToWorldResponse(const set3DTransformSolARToWorldResponse& from);
  set3DTransformSolARToWorldResponse(set3DTransformSolARToWorldResponse&& from) noexcept
    : set3DTransformSolARToWorldResponse() {
    *this = ::std::move(from);
  }

  inline set3DTransformSolARToWorldResponse& operator=(const set3DTransformSolARToWorldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline set3DTransformSolARToWorldResponse& operator=(set3DTransformSolARToWorldResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const set3DTransformSolARToWorldResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const set3DTransformSolARToWorldResponse* internal_default_instance() {
    return reinterpret_cast<const set3DTransformSolARToWorldResponse*>(
               &_set3DTransformSolARToWorldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(set3DTransformSolARToWorldResponse& a, set3DTransformSolARToWorldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(set3DTransformSolARToWorldResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(set3DTransformSolARToWorldResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  set3DTransformSolARToWorldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<set3DTransformSolARToWorldResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const set3DTransformSolARToWorldResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const set3DTransformSolARToWorldResponse& from) {
    set3DTransformSolARToWorldResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(set3DTransformSolARToWorldResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.set3DTransformSolARToWorldResponse";
  }
  protected:
  explicit set3DTransformSolARToWorldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.set3DTransformSolARToWorldResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc0Request) */ {
 public:
  inline mappingProcessRequest_grpc0Request() : mappingProcessRequest_grpc0Request(nullptr) {}
  ~mappingProcessRequest_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR mappingProcessRequest_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc0Request(const mappingProcessRequest_grpc0Request& from);
  mappingProcessRequest_grpc0Request(mappingProcessRequest_grpc0Request&& from) noexcept
    : mappingProcessRequest_grpc0Request() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc0Request& operator=(const mappingProcessRequest_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc0Request& operator=(mappingProcessRequest_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mappingProcessRequest_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc0Request*>(
               &_mappingProcessRequest_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(mappingProcessRequest_grpc0Request& a, mappingProcessRequest_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mappingProcessRequest_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mappingProcessRequest_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mappingProcessRequest_grpc0Request& from) {
    mappingProcessRequest_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc0Request";
  }
  protected:
  explicit mappingProcessRequest_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kPosesFieldNumber = 3,
    kTransformFieldNumber = 5,
    kUpdatedTransformFieldNumber = 6,
    kStatusFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kFixedPoseFieldNumber = 4,
  };
  // bytes images = 2;
  void clear_images();
  const std::string& images() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_images(ArgT0&& arg0, ArgT... args);
  std::string* mutable_images();
  PROTOBUF_NODISCARD std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 3;
  void clear_poses();
  const std::string& poses() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poses(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poses();
  PROTOBUF_NODISCARD std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes transform = 5;
  void clear_transform();
  const std::string& transform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transform();
  PROTOBUF_NODISCARD std::string* release_transform();
  void set_allocated_transform(std::string* transform);
  private:
  const std::string& _internal_transform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transform(const std::string& value);
  std::string* _internal_mutable_transform();
  public:

  // bytes updatedTransform = 6;
  void clear_updatedtransform();
  const std::string& updatedtransform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updatedtransform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updatedtransform();
  PROTOBUF_NODISCARD std::string* release_updatedtransform();
  void set_allocated_updatedtransform(std::string* updatedtransform);
  private:
  const std::string& _internal_updatedtransform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedtransform(const std::string& value);
  std::string* _internal_mutable_updatedtransform();
  public:

  // bytes status = 7;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // bool fixedPose = 4;
  void clear_fixedpose();
  bool fixedpose() const;
  void set_fixedpose(bool value);
  private:
  bool _internal_fixedpose() const;
  void _internal_set_fixedpose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transform_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedtransform_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int32_t grpcservercompressionformat_;
    bool fixedpose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc0Response) */ {
 public:
  inline mappingProcessRequest_grpc0Response() : mappingProcessRequest_grpc0Response(nullptr) {}
  ~mappingProcessRequest_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR mappingProcessRequest_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc0Response(const mappingProcessRequest_grpc0Response& from);
  mappingProcessRequest_grpc0Response(mappingProcessRequest_grpc0Response&& from) noexcept
    : mappingProcessRequest_grpc0Response() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc0Response& operator=(const mappingProcessRequest_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc0Response& operator=(mappingProcessRequest_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mappingProcessRequest_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc0Response*>(
               &_mappingProcessRequest_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(mappingProcessRequest_grpc0Response& a, mappingProcessRequest_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mappingProcessRequest_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mappingProcessRequest_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mappingProcessRequest_grpc0Response& from) {
    mappingProcessRequest_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc0Response";
  }
  protected:
  explicit mappingProcessRequest_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedTransformFieldNumber = 1,
    kStatusFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes updatedTransform = 1;
  void clear_updatedtransform();
  const std::string& updatedtransform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updatedtransform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updatedtransform();
  PROTOBUF_NODISCARD std::string* release_updatedtransform();
  void set_allocated_updatedtransform(std::string* updatedtransform);
  private:
  const std::string& _internal_updatedtransform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedtransform(const std::string& value);
  std::string* _internal_mutable_updatedtransform();
  public:

  // bytes status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedtransform_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc1Request) */ {
 public:
  inline mappingProcessRequest_grpc1Request() : mappingProcessRequest_grpc1Request(nullptr) {}
  ~mappingProcessRequest_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR mappingProcessRequest_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc1Request(const mappingProcessRequest_grpc1Request& from);
  mappingProcessRequest_grpc1Request(mappingProcessRequest_grpc1Request&& from) noexcept
    : mappingProcessRequest_grpc1Request() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc1Request& operator=(const mappingProcessRequest_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc1Request& operator=(mappingProcessRequest_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mappingProcessRequest_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc1Request*>(
               &_mappingProcessRequest_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(mappingProcessRequest_grpc1Request& a, mappingProcessRequest_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mappingProcessRequest_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mappingProcessRequest_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mappingProcessRequest_grpc1Request& from) {
    mappingProcessRequest_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc1Request";
  }
  protected:
  explicit mappingProcessRequest_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kPosesFieldNumber = 3,
    kStatusFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kFixedPoseFieldNumber = 4,
  };
  // bytes images = 2;
  void clear_images();
  const std::string& images() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_images(ArgT0&& arg0, ArgT... args);
  std::string* mutable_images();
  PROTOBUF_NODISCARD std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 3;
  void clear_poses();
  const std::string& poses() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poses(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poses();
  PROTOBUF_NODISCARD std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes status = 5;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // bool fixedPose = 4;
  void clear_fixedpose();
  bool fixedpose() const;
  void set_fixedpose(bool value);
  private:
  bool _internal_fixedpose() const;
  void _internal_set_fixedpose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int32_t grpcservercompressionformat_;
    bool fixedpose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc1Response) */ {
 public:
  inline mappingProcessRequest_grpc1Response() : mappingProcessRequest_grpc1Response(nullptr) {}
  ~mappingProcessRequest_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR mappingProcessRequest_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc1Response(const mappingProcessRequest_grpc1Response& from);
  mappingProcessRequest_grpc1Response(mappingProcessRequest_grpc1Response&& from) noexcept
    : mappingProcessRequest_grpc1Response() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc1Response& operator=(const mappingProcessRequest_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc1Response& operator=(mappingProcessRequest_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mappingProcessRequest_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc1Response*>(
               &_mappingProcessRequest_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(mappingProcessRequest_grpc1Response& a, mappingProcessRequest_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mappingProcessRequest_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mappingProcessRequest_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mappingProcessRequest_grpc1Response& from) {
    mappingProcessRequest_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc1Response";
  }
  protected:
  explicit mappingProcessRequest_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc2Request) */ {
 public:
  inline mappingProcessRequest_grpc2Request() : mappingProcessRequest_grpc2Request(nullptr) {}
  ~mappingProcessRequest_grpc2Request() override;
  explicit PROTOBUF_CONSTEXPR mappingProcessRequest_grpc2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc2Request(const mappingProcessRequest_grpc2Request& from);
  mappingProcessRequest_grpc2Request(mappingProcessRequest_grpc2Request&& from) noexcept
    : mappingProcessRequest_grpc2Request() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc2Request& operator=(const mappingProcessRequest_grpc2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc2Request& operator=(mappingProcessRequest_grpc2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mappingProcessRequest_grpc2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc2Request* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc2Request*>(
               &_mappingProcessRequest_grpc2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(mappingProcessRequest_grpc2Request& a, mappingProcessRequest_grpc2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mappingProcessRequest_grpc2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mappingProcessRequest_grpc2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mappingProcessRequest_grpc2Request& from) {
    mappingProcessRequest_grpc2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc2Request";
  }
  protected:
  explicit mappingProcessRequest_grpc2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kPosesFieldNumber = 3,
    kUpdatedTransformFieldNumber = 5,
    kStatusFieldNumber = 6,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kFixedPoseFieldNumber = 4,
  };
  // bytes images = 2;
  void clear_images();
  const std::string& images() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_images(ArgT0&& arg0, ArgT... args);
  std::string* mutable_images();
  PROTOBUF_NODISCARD std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 3;
  void clear_poses();
  const std::string& poses() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_poses(ArgT0&& arg0, ArgT... args);
  std::string* mutable_poses();
  PROTOBUF_NODISCARD std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes updatedTransform = 5;
  void clear_updatedtransform();
  const std::string& updatedtransform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updatedtransform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updatedtransform();
  PROTOBUF_NODISCARD std::string* release_updatedtransform();
  void set_allocated_updatedtransform(std::string* updatedtransform);
  private:
  const std::string& _internal_updatedtransform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedtransform(const std::string& value);
  std::string* _internal_mutable_updatedtransform();
  public:

  // bytes status = 6;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // bool fixedPose = 4;
  void clear_fixedpose();
  bool fixedpose() const;
  void set_fixedpose(bool value);
  private:
  bool _internal_fixedpose() const;
  void _internal_set_fixedpose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedtransform_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int32_t grpcservercompressionformat_;
    bool fixedpose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class mappingProcessRequest_grpc2Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.mappingProcessRequest_grpc2Response) */ {
 public:
  inline mappingProcessRequest_grpc2Response() : mappingProcessRequest_grpc2Response(nullptr) {}
  ~mappingProcessRequest_grpc2Response() override;
  explicit PROTOBUF_CONSTEXPR mappingProcessRequest_grpc2Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  mappingProcessRequest_grpc2Response(const mappingProcessRequest_grpc2Response& from);
  mappingProcessRequest_grpc2Response(mappingProcessRequest_grpc2Response&& from) noexcept
    : mappingProcessRequest_grpc2Response() {
    *this = ::std::move(from);
  }

  inline mappingProcessRequest_grpc2Response& operator=(const mappingProcessRequest_grpc2Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline mappingProcessRequest_grpc2Response& operator=(mappingProcessRequest_grpc2Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mappingProcessRequest_grpc2Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const mappingProcessRequest_grpc2Response* internal_default_instance() {
    return reinterpret_cast<const mappingProcessRequest_grpc2Response*>(
               &_mappingProcessRequest_grpc2Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(mappingProcessRequest_grpc2Response& a, mappingProcessRequest_grpc2Response& b) {
    a.Swap(&b);
  }
  inline void Swap(mappingProcessRequest_grpc2Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mappingProcessRequest_grpc2Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mappingProcessRequest_grpc2Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<mappingProcessRequest_grpc2Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const mappingProcessRequest_grpc2Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const mappingProcessRequest_grpc2Response& from) {
    mappingProcessRequest_grpc2Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mappingProcessRequest_grpc2Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.mappingProcessRequest_grpc2Response";
  }
  protected:
  explicit mappingProcessRequest_grpc2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedTransformFieldNumber = 1,
    kStatusFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes updatedTransform = 1;
  void clear_updatedtransform();
  const std::string& updatedtransform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updatedtransform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updatedtransform();
  PROTOBUF_NODISCARD std::string* release_updatedtransform();
  void set_allocated_updatedtransform(std::string* updatedtransform);
  private:
  const std::string& _internal_updatedtransform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updatedtransform(const std::string& value);
  std::string* _internal_mutable_updatedtransform();
  public:

  // bytes status = 2;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.mappingProcessRequest_grpc2Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedtransform_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class getDataForVisualizationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.getDataForVisualizationRequest) */ {
 public:
  inline getDataForVisualizationRequest() : getDataForVisualizationRequest(nullptr) {}
  ~getDataForVisualizationRequest() override;
  explicit PROTOBUF_CONSTEXPR getDataForVisualizationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDataForVisualizationRequest(const getDataForVisualizationRequest& from);
  getDataForVisualizationRequest(getDataForVisualizationRequest&& from) noexcept
    : getDataForVisualizationRequest() {
    *this = ::std::move(from);
  }

  inline getDataForVisualizationRequest& operator=(const getDataForVisualizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDataForVisualizationRequest& operator=(getDataForVisualizationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDataForVisualizationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDataForVisualizationRequest* internal_default_instance() {
    return reinterpret_cast<const getDataForVisualizationRequest*>(
               &_getDataForVisualizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(getDataForVisualizationRequest& a, getDataForVisualizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getDataForVisualizationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDataForVisualizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getDataForVisualizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getDataForVisualizationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDataForVisualizationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getDataForVisualizationRequest& from) {
    getDataForVisualizationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDataForVisualizationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.getDataForVisualizationRequest";
  }
  protected:
  explicit getDataForVisualizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPointCloudsFieldNumber = 2,
    kKeyframePosesFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes outputPointClouds = 2;
  void clear_outputpointclouds();
  const std::string& outputpointclouds() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpointclouds(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpointclouds();
  PROTOBUF_NODISCARD std::string* release_outputpointclouds();
  void set_allocated_outputpointclouds(std::string* outputpointclouds);
  private:
  const std::string& _internal_outputpointclouds() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpointclouds(const std::string& value);
  std::string* _internal_mutable_outputpointclouds();
  public:

  // bytes keyframePoses = 3;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.getDataForVisualizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointclouds_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class getDataForVisualizationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMappingPipeline.getDataForVisualizationResponse) */ {
 public:
  inline getDataForVisualizationResponse() : getDataForVisualizationResponse(nullptr) {}
  ~getDataForVisualizationResponse() override;
  explicit PROTOBUF_CONSTEXPR getDataForVisualizationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDataForVisualizationResponse(const getDataForVisualizationResponse& from);
  getDataForVisualizationResponse(getDataForVisualizationResponse&& from) noexcept
    : getDataForVisualizationResponse() {
    *this = ::std::move(from);
  }

  inline getDataForVisualizationResponse& operator=(const getDataForVisualizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDataForVisualizationResponse& operator=(getDataForVisualizationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDataForVisualizationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDataForVisualizationResponse* internal_default_instance() {
    return reinterpret_cast<const getDataForVisualizationResponse*>(
               &_getDataForVisualizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(getDataForVisualizationResponse& a, getDataForVisualizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDataForVisualizationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDataForVisualizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getDataForVisualizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getDataForVisualizationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDataForVisualizationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getDataForVisualizationResponse& from) {
    getDataForVisualizationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDataForVisualizationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMappingPipeline.getDataForVisualizationResponse";
  }
  protected:
  explicit getDataForVisualizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPointCloudsFieldNumber = 1,
    kKeyframePosesFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes outputPointClouds = 1;
  void clear_outputpointclouds();
  const std::string& outputpointclouds() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpointclouds(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpointclouds();
  PROTOBUF_NODISCARD std::string* release_outputpointclouds();
  void set_allocated_outputpointclouds(std::string* outputpointclouds);
  private:
  const std::string& _internal_outputpointclouds() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpointclouds(const std::string& value);
  std::string* _internal_mutable_outputpointclouds();
  public:

  // bytes keyframePoses = 2;
  void clear_keyframeposes();
  const std::string& keyframeposes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframeposes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframeposes();
  PROTOBUF_NODISCARD std::string* release_keyframeposes();
  void set_allocated_keyframeposes(std::string* keyframeposes);
  private:
  const std::string& _internal_keyframeposes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframeposes(const std::string& value);
  std::string* _internal_mutable_keyframeposes();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMappingPipeline.getDataForVisualizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointclouds_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframeposes_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIMappingPipelineService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// init_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.init_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.init_grpc0Request.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// init_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.init_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.init_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// startRequest

// int32 grpcServerCompressionFormat = 1;
inline void startRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t startRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t startRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.startRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void startRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void startRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.startRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t startResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopRequest

// int32 grpcServerCompressionFormat = 1;
inline void stopRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t stopRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t stopRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.stopRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void stopRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void stopRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.stopRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// init_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void init_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t init_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t init_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.init_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void init_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void init_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.init_grpc1Request.grpcServerCompressionFormat)
}

// string relocalizationServiceURL = 2;
inline void init_grpc1Request::clear_relocalizationserviceurl() {
  _impl_.relocalizationserviceurl_.ClearToEmpty();
}
inline const std::string& init_grpc1Request::relocalizationserviceurl() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.init_grpc1Request.relocalizationServiceURL)
  return _internal_relocalizationserviceurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void init_grpc1Request::set_relocalizationserviceurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relocalizationserviceurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.init_grpc1Request.relocalizationServiceURL)
}
inline std::string* init_grpc1Request::mutable_relocalizationserviceurl() {
  std::string* _s = _internal_mutable_relocalizationserviceurl();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.init_grpc1Request.relocalizationServiceURL)
  return _s;
}
inline const std::string& init_grpc1Request::_internal_relocalizationserviceurl() const {
  return _impl_.relocalizationserviceurl_.Get();
}
inline void init_grpc1Request::_internal_set_relocalizationserviceurl(const std::string& value) {
  
  _impl_.relocalizationserviceurl_.Set(value, GetArenaForAllocation());
}
inline std::string* init_grpc1Request::_internal_mutable_relocalizationserviceurl() {
  
  return _impl_.relocalizationserviceurl_.Mutable(GetArenaForAllocation());
}
inline std::string* init_grpc1Request::release_relocalizationserviceurl() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.init_grpc1Request.relocalizationServiceURL)
  return _impl_.relocalizationserviceurl_.Release();
}
inline void init_grpc1Request::set_allocated_relocalizationserviceurl(std::string* relocalizationserviceurl) {
  if (relocalizationserviceurl != nullptr) {
    
  } else {
    
  }
  _impl_.relocalizationserviceurl_.SetAllocated(relocalizationserviceurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relocalizationserviceurl_.IsDefault()) {
    _impl_.relocalizationserviceurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.init_grpc1Request.relocalizationServiceURL)
}

// -------------------------------------------------------------------

// init_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void init_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t init_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t init_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.init_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void init_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void init_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.init_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void setCameraParameters_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setCameraParameters_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setCameraParameters_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParameters_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setCameraParameters_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setCameraParameters_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParameters_grpc0Request.grpcServerCompressionFormat)
}

// bytes cameraParams = 2;
inline void setCameraParameters_grpc0Request::clear_cameraparams() {
  _impl_.cameraparams_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc0Request::cameraparams() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParameters_grpc0Request.cameraParams)
  return _internal_cameraparams();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc0Request::set_cameraparams(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParameters_grpc0Request.cameraParams)
}
inline std::string* setCameraParameters_grpc0Request::mutable_cameraparams() {
  std::string* _s = _internal_mutable_cameraparams();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.setCameraParameters_grpc0Request.cameraParams)
  return _s;
}
inline const std::string& setCameraParameters_grpc0Request::_internal_cameraparams() const {
  return _impl_.cameraparams_.Get();
}
inline void setCameraParameters_grpc0Request::_internal_set_cameraparams(const std::string& value) {
  
  _impl_.cameraparams_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::_internal_mutable_cameraparams() {
  
  return _impl_.cameraparams_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc0Request::release_cameraparams() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.setCameraParameters_grpc0Request.cameraParams)
  return _impl_.cameraparams_.Release();
}
inline void setCameraParameters_grpc0Request::set_allocated_cameraparams(std::string* cameraparams) {
  if (cameraparams != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams_.SetAllocated(cameraparams, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams_.IsDefault()) {
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.setCameraParameters_grpc0Request.cameraParams)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void setCameraParameters_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setCameraParameters_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setCameraParameters_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParameters_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setCameraParameters_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setCameraParameters_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParameters_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void setCameraParameters_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setCameraParameters_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setCameraParameters_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParameters_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setCameraParameters_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setCameraParameters_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParameters_grpc1Request.grpcServerCompressionFormat)
}

// bytes cameraParams1 = 2;
inline void setCameraParameters_grpc1Request::clear_cameraparams1() {
  _impl_.cameraparams1_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc1Request::cameraparams1() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams1)
  return _internal_cameraparams1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc1Request::set_cameraparams1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams1)
}
inline std::string* setCameraParameters_grpc1Request::mutable_cameraparams1() {
  std::string* _s = _internal_mutable_cameraparams1();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams1)
  return _s;
}
inline const std::string& setCameraParameters_grpc1Request::_internal_cameraparams1() const {
  return _impl_.cameraparams1_.Get();
}
inline void setCameraParameters_grpc1Request::_internal_set_cameraparams1(const std::string& value) {
  
  _impl_.cameraparams1_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::_internal_mutable_cameraparams1() {
  
  return _impl_.cameraparams1_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::release_cameraparams1() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams1)
  return _impl_.cameraparams1_.Release();
}
inline void setCameraParameters_grpc1Request::set_allocated_cameraparams1(std::string* cameraparams1) {
  if (cameraparams1 != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams1_.SetAllocated(cameraparams1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams1_.IsDefault()) {
    _impl_.cameraparams1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams1)
}

// bytes cameraParams2 = 3;
inline void setCameraParameters_grpc1Request::clear_cameraparams2() {
  _impl_.cameraparams2_.ClearToEmpty();
}
inline const std::string& setCameraParameters_grpc1Request::cameraparams2() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams2)
  return _internal_cameraparams2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setCameraParameters_grpc1Request::set_cameraparams2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cameraparams2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams2)
}
inline std::string* setCameraParameters_grpc1Request::mutable_cameraparams2() {
  std::string* _s = _internal_mutable_cameraparams2();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams2)
  return _s;
}
inline const std::string& setCameraParameters_grpc1Request::_internal_cameraparams2() const {
  return _impl_.cameraparams2_.Get();
}
inline void setCameraParameters_grpc1Request::_internal_set_cameraparams2(const std::string& value) {
  
  _impl_.cameraparams2_.Set(value, GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::_internal_mutable_cameraparams2() {
  
  return _impl_.cameraparams2_.Mutable(GetArenaForAllocation());
}
inline std::string* setCameraParameters_grpc1Request::release_cameraparams2() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams2)
  return _impl_.cameraparams2_.Release();
}
inline void setCameraParameters_grpc1Request::set_allocated_cameraparams2(std::string* cameraparams2) {
  if (cameraparams2 != nullptr) {
    
  } else {
    
  }
  _impl_.cameraparams2_.SetAllocated(cameraparams2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cameraparams2_.IsDefault()) {
    _impl_.cameraparams2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.setCameraParameters_grpc1Request.cameraParams2)
}

// -------------------------------------------------------------------

// setCameraParameters_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void setCameraParameters_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setCameraParameters_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setCameraParameters_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setCameraParameters_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setCameraParameters_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setCameraParameters_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setCameraParameters_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setRectificationParametersRequest

// int32 grpcServerCompressionFormat = 1;
inline void setRectificationParametersRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t setRectificationParametersRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t setRectificationParametersRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setRectificationParametersRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void setRectificationParametersRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void setRectificationParametersRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setRectificationParametersRequest.grpcServerCompressionFormat)
}

// bytes rectCam1 = 2;
inline void setRectificationParametersRequest::clear_rectcam1() {
  _impl_.rectcam1_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectcam1() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
  return _internal_rectcam1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_rectcam1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rectcam1_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
}
inline std::string* setRectificationParametersRequest::mutable_rectcam1() {
  std::string* _s = _internal_mutable_rectcam1();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_rectcam1() const {
  return _impl_.rectcam1_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectcam1(const std::string& value) {
  
  _impl_.rectcam1_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectcam1() {
  
  return _impl_.rectcam1_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_rectcam1() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
  return _impl_.rectcam1_.Release();
}
inline void setRectificationParametersRequest::set_allocated_rectcam1(std::string* rectcam1) {
  if (rectcam1 != nullptr) {
    
  } else {
    
  }
  _impl_.rectcam1_.SetAllocated(rectcam1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rectcam1_.IsDefault()) {
    _impl_.rectcam1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.setRectificationParametersRequest.rectCam1)
}

// bytes rectCam2 = 3;
inline void setRectificationParametersRequest::clear_rectcam2() {
  _impl_.rectcam2_.ClearToEmpty();
}
inline const std::string& setRectificationParametersRequest::rectcam2() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
  return _internal_rectcam2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setRectificationParametersRequest::set_rectcam2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rectcam2_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
}
inline std::string* setRectificationParametersRequest::mutable_rectcam2() {
  std::string* _s = _internal_mutable_rectcam2();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
  return _s;
}
inline const std::string& setRectificationParametersRequest::_internal_rectcam2() const {
  return _impl_.rectcam2_.Get();
}
inline void setRectificationParametersRequest::_internal_set_rectcam2(const std::string& value) {
  
  _impl_.rectcam2_.Set(value, GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::_internal_mutable_rectcam2() {
  
  return _impl_.rectcam2_.Mutable(GetArenaForAllocation());
}
inline std::string* setRectificationParametersRequest::release_rectcam2() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
  return _impl_.rectcam2_.Release();
}
inline void setRectificationParametersRequest::set_allocated_rectcam2(std::string* rectcam2) {
  if (rectcam2 != nullptr) {
    
  } else {
    
  }
  _impl_.rectcam2_.SetAllocated(rectcam2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rectcam2_.IsDefault()) {
    _impl_.rectcam2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.setRectificationParametersRequest.rectCam2)
}

// -------------------------------------------------------------------

// setRectificationParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setRectificationParametersResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t setRectificationParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t setRectificationParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.setRectificationParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setRectificationParametersResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void setRectificationParametersResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.setRectificationParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// set3DTransformSolARToWorldRequest

// int32 grpcServerCompressionFormat = 1;
inline void set3DTransformSolARToWorldRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t set3DTransformSolARToWorldRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t set3DTransformSolARToWorldRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.set3DTransformSolARToWorldRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void set3DTransformSolARToWorldRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void set3DTransformSolARToWorldRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.set3DTransformSolARToWorldRequest.grpcServerCompressionFormat)
}

// bytes transform = 2;
inline void set3DTransformSolARToWorldRequest::clear_transform() {
  _impl_.transform_.ClearToEmpty();
}
inline const std::string& set3DTransformSolARToWorldRequest::transform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.set3DTransformSolARToWorldRequest.transform)
  return _internal_transform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void set3DTransformSolARToWorldRequest::set_transform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.set3DTransformSolARToWorldRequest.transform)
}
inline std::string* set3DTransformSolARToWorldRequest::mutable_transform() {
  std::string* _s = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.set3DTransformSolARToWorldRequest.transform)
  return _s;
}
inline const std::string& set3DTransformSolARToWorldRequest::_internal_transform() const {
  return _impl_.transform_.Get();
}
inline void set3DTransformSolARToWorldRequest::_internal_set_transform(const std::string& value) {
  
  _impl_.transform_.Set(value, GetArenaForAllocation());
}
inline std::string* set3DTransformSolARToWorldRequest::_internal_mutable_transform() {
  
  return _impl_.transform_.Mutable(GetArenaForAllocation());
}
inline std::string* set3DTransformSolARToWorldRequest::release_transform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.set3DTransformSolARToWorldRequest.transform)
  return _impl_.transform_.Release();
}
inline void set3DTransformSolARToWorldRequest::set_allocated_transform(std::string* transform) {
  if (transform != nullptr) {
    
  } else {
    
  }
  _impl_.transform_.SetAllocated(transform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform_.IsDefault()) {
    _impl_.transform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.set3DTransformSolARToWorldRequest.transform)
}

// -------------------------------------------------------------------

// set3DTransformSolARToWorldResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void set3DTransformSolARToWorldResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t set3DTransformSolARToWorldResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t set3DTransformSolARToWorldResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.set3DTransformSolARToWorldResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void set3DTransformSolARToWorldResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void set3DTransformSolARToWorldResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.set3DTransformSolARToWorldResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void mappingProcessRequest_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t mappingProcessRequest_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t mappingProcessRequest_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void mappingProcessRequest_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.grpcServerCompressionFormat)
}

// bytes images = 2;
inline void mappingProcessRequest_grpc0Request::clear_images() {
  _impl_.images_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::images() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
  return _internal_images();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc0Request::set_images(ArgT0&& arg0, ArgT... args) {
 
 _impl_.images_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_images() {
  std::string* _s = _internal_mutable_images();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_images() const {
  return _impl_.images_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_images(const std::string& value) {
  
  _impl_.images_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_images() {
  
  return _impl_.images_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::release_images() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
  return _impl_.images_.Release();
}
inline void mappingProcessRequest_grpc0Request::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  _impl_.images_.SetAllocated(images, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.images_.IsDefault()) {
    _impl_.images_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.images)
}

// bytes poses = 3;
inline void mappingProcessRequest_grpc0Request::clear_poses() {
  _impl_.poses_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::poses() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
  return _internal_poses();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc0Request::set_poses(ArgT0&& arg0, ArgT... args) {
 
 _impl_.poses_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_poses() {
  std::string* _s = _internal_mutable_poses();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_poses() const {
  return _impl_.poses_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_poses(const std::string& value) {
  
  _impl_.poses_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_poses() {
  
  return _impl_.poses_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
  return _impl_.poses_.Release();
}
inline void mappingProcessRequest_grpc0Request::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  _impl_.poses_.SetAllocated(poses, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.poses_.IsDefault()) {
    _impl_.poses_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.poses)
}

// bool fixedPose = 4;
inline void mappingProcessRequest_grpc0Request::clear_fixedpose() {
  _impl_.fixedpose_ = false;
}
inline bool mappingProcessRequest_grpc0Request::_internal_fixedpose() const {
  return _impl_.fixedpose_;
}
inline bool mappingProcessRequest_grpc0Request::fixedpose() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.fixedPose)
  return _internal_fixedpose();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_fixedpose(bool value) {
  
  _impl_.fixedpose_ = value;
}
inline void mappingProcessRequest_grpc0Request::set_fixedpose(bool value) {
  _internal_set_fixedpose(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.fixedPose)
}

// bytes transform = 5;
inline void mappingProcessRequest_grpc0Request::clear_transform() {
  _impl_.transform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::transform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
  return _internal_transform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc0Request::set_transform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.transform_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_transform() {
  std::string* _s = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_transform() const {
  return _impl_.transform_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_transform(const std::string& value) {
  
  _impl_.transform_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_transform() {
  
  return _impl_.transform_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::release_transform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
  return _impl_.transform_.Release();
}
inline void mappingProcessRequest_grpc0Request::set_allocated_transform(std::string* transform) {
  if (transform != nullptr) {
    
  } else {
    
  }
  _impl_.transform_.SetAllocated(transform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.transform_.IsDefault()) {
    _impl_.transform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.transform)
}

// bytes updatedTransform = 6;
inline void mappingProcessRequest_grpc0Request::clear_updatedtransform() {
  _impl_.updatedtransform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::updatedtransform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
  return _internal_updatedtransform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc0Request::set_updatedtransform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updatedtransform_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_updatedtransform() {
  std::string* _s = _internal_mutable_updatedtransform();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_updatedtransform() const {
  return _impl_.updatedtransform_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_updatedtransform(const std::string& value) {
  
  _impl_.updatedtransform_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_updatedtransform() {
  
  return _impl_.updatedtransform_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::release_updatedtransform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
  return _impl_.updatedtransform_.Release();
}
inline void mappingProcessRequest_grpc0Request::set_allocated_updatedtransform(std::string* updatedtransform) {
  if (updatedtransform != nullptr) {
    
  } else {
    
  }
  _impl_.updatedtransform_.SetAllocated(updatedtransform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updatedtransform_.IsDefault()) {
    _impl_.updatedtransform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.updatedTransform)
}

// bytes status = 7;
inline void mappingProcessRequest_grpc0Request::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc0Request::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
}
inline std::string* mappingProcessRequest_grpc0Request::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc0Request::_internal_status() const {
  return _impl_.status_.Get();
}
inline void mappingProcessRequest_grpc0Request::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
  return _impl_.status_.Release();
}
inline void mappingProcessRequest_grpc0Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Request.status)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc0Response

// bytes updatedTransform = 1;
inline void mappingProcessRequest_grpc0Response::clear_updatedtransform() {
  _impl_.updatedtransform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Response::updatedtransform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
  return _internal_updatedtransform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc0Response::set_updatedtransform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updatedtransform_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc0Response::mutable_updatedtransform() {
  std::string* _s = _internal_mutable_updatedtransform();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc0Response::_internal_updatedtransform() const {
  return _impl_.updatedtransform_.Get();
}
inline void mappingProcessRequest_grpc0Response::_internal_set_updatedtransform(const std::string& value) {
  
  _impl_.updatedtransform_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Response::_internal_mutable_updatedtransform() {
  
  return _impl_.updatedtransform_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Response::release_updatedtransform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
  return _impl_.updatedtransform_.Release();
}
inline void mappingProcessRequest_grpc0Response::set_allocated_updatedtransform(std::string* updatedtransform) {
  if (updatedtransform != nullptr) {
    
  } else {
    
  }
  _impl_.updatedtransform_.SetAllocated(updatedtransform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updatedtransform_.IsDefault()) {
    _impl_.updatedtransform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.updatedTransform)
}

// bytes status = 2;
inline void mappingProcessRequest_grpc0Response::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc0Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc0Response::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
}
inline std::string* mappingProcessRequest_grpc0Response::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc0Response::_internal_status() const {
  return _impl_.status_.Get();
}
inline void mappingProcessRequest_grpc0Response::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Response::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc0Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
  return _impl_.status_.Release();
}
inline void mappingProcessRequest_grpc0Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.status)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void mappingProcessRequest_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t mappingProcessRequest_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t mappingProcessRequest_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void mappingProcessRequest_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void mappingProcessRequest_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void mappingProcessRequest_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t mappingProcessRequest_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t mappingProcessRequest_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void mappingProcessRequest_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void mappingProcessRequest_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.grpcServerCompressionFormat)
}

// bytes images = 2;
inline void mappingProcessRequest_grpc1Request::clear_images() {
  _impl_.images_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc1Request::images() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
  return _internal_images();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc1Request::set_images(ArgT0&& arg0, ArgT... args) {
 
 _impl_.images_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
}
inline std::string* mappingProcessRequest_grpc1Request::mutable_images() {
  std::string* _s = _internal_mutable_images();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc1Request::_internal_images() const {
  return _impl_.images_.Get();
}
inline void mappingProcessRequest_grpc1Request::_internal_set_images(const std::string& value) {
  
  _impl_.images_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc1Request::_internal_mutable_images() {
  
  return _impl_.images_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc1Request::release_images() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
  return _impl_.images_.Release();
}
inline void mappingProcessRequest_grpc1Request::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  _impl_.images_.SetAllocated(images, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.images_.IsDefault()) {
    _impl_.images_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.images)
}

// bytes poses = 3;
inline void mappingProcessRequest_grpc1Request::clear_poses() {
  _impl_.poses_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc1Request::poses() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
  return _internal_poses();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc1Request::set_poses(ArgT0&& arg0, ArgT... args) {
 
 _impl_.poses_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
}
inline std::string* mappingProcessRequest_grpc1Request::mutable_poses() {
  std::string* _s = _internal_mutable_poses();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc1Request::_internal_poses() const {
  return _impl_.poses_.Get();
}
inline void mappingProcessRequest_grpc1Request::_internal_set_poses(const std::string& value) {
  
  _impl_.poses_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc1Request::_internal_mutable_poses() {
  
  return _impl_.poses_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc1Request::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
  return _impl_.poses_.Release();
}
inline void mappingProcessRequest_grpc1Request::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  _impl_.poses_.SetAllocated(poses, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.poses_.IsDefault()) {
    _impl_.poses_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.poses)
}

// bool fixedPose = 4;
inline void mappingProcessRequest_grpc1Request::clear_fixedpose() {
  _impl_.fixedpose_ = false;
}
inline bool mappingProcessRequest_grpc1Request::_internal_fixedpose() const {
  return _impl_.fixedpose_;
}
inline bool mappingProcessRequest_grpc1Request::fixedpose() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.fixedPose)
  return _internal_fixedpose();
}
inline void mappingProcessRequest_grpc1Request::_internal_set_fixedpose(bool value) {
  
  _impl_.fixedpose_ = value;
}
inline void mappingProcessRequest_grpc1Request::set_fixedpose(bool value) {
  _internal_set_fixedpose(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.fixedPose)
}

// bytes status = 5;
inline void mappingProcessRequest_grpc1Request::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc1Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc1Request::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
}
inline std::string* mappingProcessRequest_grpc1Request::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc1Request::_internal_status() const {
  return _impl_.status_.Get();
}
inline void mappingProcessRequest_grpc1Request::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc1Request::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc1Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
  return _impl_.status_.Release();
}
inline void mappingProcessRequest_grpc1Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc1Request.status)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc1Response

// bytes status = 1;
inline void mappingProcessRequest_grpc1Response::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc1Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc1Response::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
}
inline std::string* mappingProcessRequest_grpc1Response::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc1Response::_internal_status() const {
  return _impl_.status_.Get();
}
inline void mappingProcessRequest_grpc1Response::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc1Response::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc1Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
  return _impl_.status_.Release();
}
inline void mappingProcessRequest_grpc1Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.status)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void mappingProcessRequest_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t mappingProcessRequest_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t mappingProcessRequest_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void mappingProcessRequest_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void mappingProcessRequest_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc2Request

// int32 grpcServerCompressionFormat = 1;
inline void mappingProcessRequest_grpc2Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t mappingProcessRequest_grpc2Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t mappingProcessRequest_grpc2Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void mappingProcessRequest_grpc2Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.grpcServerCompressionFormat)
}

// bytes images = 2;
inline void mappingProcessRequest_grpc2Request::clear_images() {
  _impl_.images_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Request::images() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
  return _internal_images();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc2Request::set_images(ArgT0&& arg0, ArgT... args) {
 
 _impl_.images_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
}
inline std::string* mappingProcessRequest_grpc2Request::mutable_images() {
  std::string* _s = _internal_mutable_images();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc2Request::_internal_images() const {
  return _impl_.images_.Get();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_images(const std::string& value) {
  
  _impl_.images_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Request::_internal_mutable_images() {
  
  return _impl_.images_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Request::release_images() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
  return _impl_.images_.Release();
}
inline void mappingProcessRequest_grpc2Request::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  _impl_.images_.SetAllocated(images, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.images_.IsDefault()) {
    _impl_.images_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.images)
}

// bytes poses = 3;
inline void mappingProcessRequest_grpc2Request::clear_poses() {
  _impl_.poses_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Request::poses() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
  return _internal_poses();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc2Request::set_poses(ArgT0&& arg0, ArgT... args) {
 
 _impl_.poses_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
}
inline std::string* mappingProcessRequest_grpc2Request::mutable_poses() {
  std::string* _s = _internal_mutable_poses();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc2Request::_internal_poses() const {
  return _impl_.poses_.Get();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_poses(const std::string& value) {
  
  _impl_.poses_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Request::_internal_mutable_poses() {
  
  return _impl_.poses_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Request::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
  return _impl_.poses_.Release();
}
inline void mappingProcessRequest_grpc2Request::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  _impl_.poses_.SetAllocated(poses, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.poses_.IsDefault()) {
    _impl_.poses_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.poses)
}

// bool fixedPose = 4;
inline void mappingProcessRequest_grpc2Request::clear_fixedpose() {
  _impl_.fixedpose_ = false;
}
inline bool mappingProcessRequest_grpc2Request::_internal_fixedpose() const {
  return _impl_.fixedpose_;
}
inline bool mappingProcessRequest_grpc2Request::fixedpose() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.fixedPose)
  return _internal_fixedpose();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_fixedpose(bool value) {
  
  _impl_.fixedpose_ = value;
}
inline void mappingProcessRequest_grpc2Request::set_fixedpose(bool value) {
  _internal_set_fixedpose(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.fixedPose)
}

// bytes updatedTransform = 5;
inline void mappingProcessRequest_grpc2Request::clear_updatedtransform() {
  _impl_.updatedtransform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Request::updatedtransform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
  return _internal_updatedtransform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc2Request::set_updatedtransform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updatedtransform_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc2Request::mutable_updatedtransform() {
  std::string* _s = _internal_mutable_updatedtransform();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc2Request::_internal_updatedtransform() const {
  return _impl_.updatedtransform_.Get();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_updatedtransform(const std::string& value) {
  
  _impl_.updatedtransform_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Request::_internal_mutable_updatedtransform() {
  
  return _impl_.updatedtransform_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Request::release_updatedtransform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
  return _impl_.updatedtransform_.Release();
}
inline void mappingProcessRequest_grpc2Request::set_allocated_updatedtransform(std::string* updatedtransform) {
  if (updatedtransform != nullptr) {
    
  } else {
    
  }
  _impl_.updatedtransform_.SetAllocated(updatedtransform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updatedtransform_.IsDefault()) {
    _impl_.updatedtransform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.updatedTransform)
}

// bytes status = 6;
inline void mappingProcessRequest_grpc2Request::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Request::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc2Request::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
}
inline std::string* mappingProcessRequest_grpc2Request::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc2Request::_internal_status() const {
  return _impl_.status_.Get();
}
inline void mappingProcessRequest_grpc2Request::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Request::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Request::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
  return _impl_.status_.Release();
}
inline void mappingProcessRequest_grpc2Request::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Request.status)
}

// -------------------------------------------------------------------

// mappingProcessRequest_grpc2Response

// bytes updatedTransform = 1;
inline void mappingProcessRequest_grpc2Response::clear_updatedtransform() {
  _impl_.updatedtransform_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Response::updatedtransform() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
  return _internal_updatedtransform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc2Response::set_updatedtransform(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updatedtransform_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
}
inline std::string* mappingProcessRequest_grpc2Response::mutable_updatedtransform() {
  std::string* _s = _internal_mutable_updatedtransform();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc2Response::_internal_updatedtransform() const {
  return _impl_.updatedtransform_.Get();
}
inline void mappingProcessRequest_grpc2Response::_internal_set_updatedtransform(const std::string& value) {
  
  _impl_.updatedtransform_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Response::_internal_mutable_updatedtransform() {
  
  return _impl_.updatedtransform_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Response::release_updatedtransform() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
  return _impl_.updatedtransform_.Release();
}
inline void mappingProcessRequest_grpc2Response::set_allocated_updatedtransform(std::string* updatedtransform) {
  if (updatedtransform != nullptr) {
    
  } else {
    
  }
  _impl_.updatedtransform_.SetAllocated(updatedtransform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updatedtransform_.IsDefault()) {
    _impl_.updatedtransform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.updatedTransform)
}

// bytes status = 2;
inline void mappingProcessRequest_grpc2Response::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& mappingProcessRequest_grpc2Response::status() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void mappingProcessRequest_grpc2Response::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
}
inline std::string* mappingProcessRequest_grpc2Response::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
  return _s;
}
inline const std::string& mappingProcessRequest_grpc2Response::_internal_status() const {
  return _impl_.status_.Get();
}
inline void mappingProcessRequest_grpc2Response::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Response::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* mappingProcessRequest_grpc2Response::release_status() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
  return _impl_.status_.Release();
}
inline void mappingProcessRequest_grpc2Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.status)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void mappingProcessRequest_grpc2Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t mappingProcessRequest_grpc2Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t mappingProcessRequest_grpc2Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void mappingProcessRequest_grpc2Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void mappingProcessRequest_grpc2Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.mappingProcessRequest_grpc2Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDataForVisualizationRequest

// int32 grpcServerCompressionFormat = 1;
inline void getDataForVisualizationRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getDataForVisualizationRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getDataForVisualizationRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getDataForVisualizationRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getDataForVisualizationRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationRequest.grpcServerCompressionFormat)
}

// bytes outputPointClouds = 2;
inline void getDataForVisualizationRequest::clear_outputpointclouds() {
  _impl_.outputpointclouds_.ClearToEmpty();
}
inline const std::string& getDataForVisualizationRequest::outputpointclouds() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
  return _internal_outputpointclouds();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDataForVisualizationRequest::set_outputpointclouds(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpointclouds_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
}
inline std::string* getDataForVisualizationRequest::mutable_outputpointclouds() {
  std::string* _s = _internal_mutable_outputpointclouds();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
  return _s;
}
inline const std::string& getDataForVisualizationRequest::_internal_outputpointclouds() const {
  return _impl_.outputpointclouds_.Get();
}
inline void getDataForVisualizationRequest::_internal_set_outputpointclouds(const std::string& value) {
  
  _impl_.outputpointclouds_.Set(value, GetArenaForAllocation());
}
inline std::string* getDataForVisualizationRequest::_internal_mutable_outputpointclouds() {
  
  return _impl_.outputpointclouds_.Mutable(GetArenaForAllocation());
}
inline std::string* getDataForVisualizationRequest::release_outputpointclouds() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
  return _impl_.outputpointclouds_.Release();
}
inline void getDataForVisualizationRequest::set_allocated_outputpointclouds(std::string* outputpointclouds) {
  if (outputpointclouds != nullptr) {
    
  } else {
    
  }
  _impl_.outputpointclouds_.SetAllocated(outputpointclouds, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpointclouds_.IsDefault()) {
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.getDataForVisualizationRequest.outputPointClouds)
}

// bytes keyframePoses = 3;
inline void getDataForVisualizationRequest::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getDataForVisualizationRequest::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDataForVisualizationRequest::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
}
inline std::string* getDataForVisualizationRequest::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
  return _s;
}
inline const std::string& getDataForVisualizationRequest::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getDataForVisualizationRequest::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getDataForVisualizationRequest::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getDataForVisualizationRequest::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getDataForVisualizationRequest::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.getDataForVisualizationRequest.keyframePoses)
}

// -------------------------------------------------------------------

// getDataForVisualizationResponse

// bytes outputPointClouds = 1;
inline void getDataForVisualizationResponse::clear_outputpointclouds() {
  _impl_.outputpointclouds_.ClearToEmpty();
}
inline const std::string& getDataForVisualizationResponse::outputpointclouds() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
  return _internal_outputpointclouds();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDataForVisualizationResponse::set_outputpointclouds(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpointclouds_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
}
inline std::string* getDataForVisualizationResponse::mutable_outputpointclouds() {
  std::string* _s = _internal_mutable_outputpointclouds();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
  return _s;
}
inline const std::string& getDataForVisualizationResponse::_internal_outputpointclouds() const {
  return _impl_.outputpointclouds_.Get();
}
inline void getDataForVisualizationResponse::_internal_set_outputpointclouds(const std::string& value) {
  
  _impl_.outputpointclouds_.Set(value, GetArenaForAllocation());
}
inline std::string* getDataForVisualizationResponse::_internal_mutable_outputpointclouds() {
  
  return _impl_.outputpointclouds_.Mutable(GetArenaForAllocation());
}
inline std::string* getDataForVisualizationResponse::release_outputpointclouds() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
  return _impl_.outputpointclouds_.Release();
}
inline void getDataForVisualizationResponse::set_allocated_outputpointclouds(std::string* outputpointclouds) {
  if (outputpointclouds != nullptr) {
    
  } else {
    
  }
  _impl_.outputpointclouds_.SetAllocated(outputpointclouds, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpointclouds_.IsDefault()) {
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.getDataForVisualizationResponse.outputPointClouds)
}

// bytes keyframePoses = 2;
inline void getDataForVisualizationResponse::clear_keyframeposes() {
  _impl_.keyframeposes_.ClearToEmpty();
}
inline const std::string& getDataForVisualizationResponse::keyframeposes() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
  return _internal_keyframeposes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDataForVisualizationResponse::set_keyframeposes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keyframeposes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
}
inline std::string* getDataForVisualizationResponse::mutable_keyframeposes() {
  std::string* _s = _internal_mutable_keyframeposes();
  // @@protoc_insertion_point(field_mutable:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
  return _s;
}
inline const std::string& getDataForVisualizationResponse::_internal_keyframeposes() const {
  return _impl_.keyframeposes_.Get();
}
inline void getDataForVisualizationResponse::_internal_set_keyframeposes(const std::string& value) {
  
  _impl_.keyframeposes_.Set(value, GetArenaForAllocation());
}
inline std::string* getDataForVisualizationResponse::_internal_mutable_keyframeposes() {
  
  return _impl_.keyframeposes_.Mutable(GetArenaForAllocation());
}
inline std::string* getDataForVisualizationResponse::release_keyframeposes() {
  // @@protoc_insertion_point(field_release:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
  return _impl_.keyframeposes_.Release();
}
inline void getDataForVisualizationResponse::set_allocated_keyframeposes(std::string* keyframeposes) {
  if (keyframeposes != nullptr) {
    
  } else {
    
  }
  _impl_.keyframeposes_.SetAllocated(keyframeposes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keyframeposes_.IsDefault()) {
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIMappingPipeline.getDataForVisualizationResponse.keyframePoses)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getDataForVisualizationResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getDataForVisualizationResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getDataForVisualizationResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMappingPipeline.getDataForVisualizationResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDataForVisualizationResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getDataForVisualizationResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMappingPipeline.getDataForVisualizationResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMappingPipeline

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMappingPipelineService_2eproto
