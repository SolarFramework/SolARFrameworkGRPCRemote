// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIDenseMappingPipelineService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIDenseMappingPipelineService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIDenseMappingPipelineService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIDenseMappingPipelineService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIDenseMappingPipelineService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIDenseMappingPipelineService_2eproto;
namespace grpcIDenseMappingPipeline {
class denseMappingProcessRequestRequest;
struct denseMappingProcessRequestRequestDefaultTypeInternal;
extern denseMappingProcessRequestRequestDefaultTypeInternal _denseMappingProcessRequestRequest_default_instance_;
class denseMappingProcessRequestResponse;
struct denseMappingProcessRequestResponseDefaultTypeInternal;
extern denseMappingProcessRequestResponseDefaultTypeInternal _denseMappingProcessRequestResponse_default_instance_;
class getMeshRequest;
struct getMeshRequestDefaultTypeInternal;
extern getMeshRequestDefaultTypeInternal _getMeshRequest_default_instance_;
class getMeshResponse;
struct getMeshResponseDefaultTypeInternal;
extern getMeshResponseDefaultTypeInternal _getMeshResponse_default_instance_;
class getPointCloudRequest;
struct getPointCloudRequestDefaultTypeInternal;
extern getPointCloudRequestDefaultTypeInternal _getPointCloudRequest_default_instance_;
class getPointCloudResponse;
struct getPointCloudResponseDefaultTypeInternal;
extern getPointCloudResponseDefaultTypeInternal _getPointCloudResponse_default_instance_;
class initRequest;
struct initRequestDefaultTypeInternal;
extern initRequestDefaultTypeInternal _initRequest_default_instance_;
class initResponse;
struct initResponseDefaultTypeInternal;
extern initResponseDefaultTypeInternal _initResponse_default_instance_;
class startRequest;
struct startRequestDefaultTypeInternal;
extern startRequestDefaultTypeInternal _startRequest_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopRequest;
struct stopRequestDefaultTypeInternal;
extern stopRequestDefaultTypeInternal _stopRequest_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
}  // namespace grpcIDenseMappingPipeline
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::denseMappingProcessRequestRequest>(Arena*);
template<> ::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::denseMappingProcessRequestResponse>(Arena*);
template<> ::grpcIDenseMappingPipeline::getMeshRequest* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::getMeshRequest>(Arena*);
template<> ::grpcIDenseMappingPipeline::getMeshResponse* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::getMeshResponse>(Arena*);
template<> ::grpcIDenseMappingPipeline::getPointCloudRequest* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::getPointCloudRequest>(Arena*);
template<> ::grpcIDenseMappingPipeline::getPointCloudResponse* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::getPointCloudResponse>(Arena*);
template<> ::grpcIDenseMappingPipeline::initRequest* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::initRequest>(Arena*);
template<> ::grpcIDenseMappingPipeline::initResponse* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::initResponse>(Arena*);
template<> ::grpcIDenseMappingPipeline::startRequest* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::startRequest>(Arena*);
template<> ::grpcIDenseMappingPipeline::startResponse* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::startResponse>(Arena*);
template<> ::grpcIDenseMappingPipeline::stopRequest* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::stopRequest>(Arena*);
template<> ::grpcIDenseMappingPipeline::stopResponse* Arena::CreateMaybeMessage<::grpcIDenseMappingPipeline::stopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIDenseMappingPipeline {

// ===================================================================

class initRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.initRequest) */ {
 public:
  inline initRequest() : initRequest(nullptr) {}
  ~initRequest() override;
  explicit PROTOBUF_CONSTEXPR initRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  initRequest(const initRequest& from);
  initRequest(initRequest&& from) noexcept
    : initRequest() {
    *this = ::std::move(from);
  }

  inline initRequest& operator=(const initRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline initRequest& operator=(initRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const initRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const initRequest* internal_default_instance() {
    return reinterpret_cast<const initRequest*>(
               &_initRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(initRequest& a, initRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(initRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(initRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  initRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<initRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const initRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const initRequest& from) {
    initRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(initRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.initRequest";
  }
  protected:
  explicit initRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.initRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class initResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.initResponse) */ {
 public:
  inline initResponse() : initResponse(nullptr) {}
  ~initResponse() override;
  explicit PROTOBUF_CONSTEXPR initResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  initResponse(const initResponse& from);
  initResponse(initResponse&& from) noexcept
    : initResponse() {
    *this = ::std::move(from);
  }

  inline initResponse& operator=(const initResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline initResponse& operator=(initResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const initResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const initResponse* internal_default_instance() {
    return reinterpret_cast<const initResponse*>(
               &_initResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(initResponse& a, initResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(initResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(initResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  initResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<initResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const initResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const initResponse& from) {
    initResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(initResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.initResponse";
  }
  protected:
  explicit initResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.initResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class startRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.startRequest) */ {
 public:
  inline startRequest() : startRequest(nullptr) {}
  ~startRequest() override;
  explicit PROTOBUF_CONSTEXPR startRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startRequest(const startRequest& from);
  startRequest(startRequest&& from) noexcept
    : startRequest() {
    *this = ::std::move(from);
  }

  inline startRequest& operator=(const startRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline startRequest& operator=(startRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const startRequest* internal_default_instance() {
    return reinterpret_cast<const startRequest*>(
               &_startRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(startRequest& a, startRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(startRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  startRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<startRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const startRequest& from) {
    startRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.startRequest";
  }
  protected:
  explicit startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.startRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class startResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  ~startResponse() override;
  explicit PROTOBUF_CONSTEXPR startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const startResponse& from) {
    startResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class stopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.stopRequest) */ {
 public:
  inline stopRequest() : stopRequest(nullptr) {}
  ~stopRequest() override;
  explicit PROTOBUF_CONSTEXPR stopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopRequest(const stopRequest& from);
  stopRequest(stopRequest&& from) noexcept
    : stopRequest() {
    *this = ::std::move(from);
  }

  inline stopRequest& operator=(const stopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopRequest& operator=(stopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopRequest* internal_default_instance() {
    return reinterpret_cast<const stopRequest*>(
               &_stopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(stopRequest& a, stopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(stopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stopRequest& from) {
    stopRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.stopRequest";
  }
  protected:
  explicit stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.stopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  ~stopResponse() override;
  explicit PROTOBUF_CONSTEXPR stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const stopResponse& from) {
    stopResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class denseMappingProcessRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest) */ {
 public:
  inline denseMappingProcessRequestRequest() : denseMappingProcessRequestRequest(nullptr) {}
  ~denseMappingProcessRequestRequest() override;
  explicit PROTOBUF_CONSTEXPR denseMappingProcessRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  denseMappingProcessRequestRequest(const denseMappingProcessRequestRequest& from);
  denseMappingProcessRequestRequest(denseMappingProcessRequestRequest&& from) noexcept
    : denseMappingProcessRequestRequest() {
    *this = ::std::move(from);
  }

  inline denseMappingProcessRequestRequest& operator=(const denseMappingProcessRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline denseMappingProcessRequestRequest& operator=(denseMappingProcessRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const denseMappingProcessRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const denseMappingProcessRequestRequest* internal_default_instance() {
    return reinterpret_cast<const denseMappingProcessRequestRequest*>(
               &_denseMappingProcessRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(denseMappingProcessRequestRequest& a, denseMappingProcessRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(denseMappingProcessRequestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(denseMappingProcessRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  denseMappingProcessRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<denseMappingProcessRequestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const denseMappingProcessRequestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const denseMappingProcessRequestRequest& from) {
    denseMappingProcessRequestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(denseMappingProcessRequestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.denseMappingProcessRequestRequest";
  }
  protected:
  explicit denseMappingProcessRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSparseMapFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kCreateMeshFieldNumber = 3,
  };
  // bytes sparseMap = 2;
  void clear_sparsemap();
  const std::string& sparsemap() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sparsemap(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sparsemap();
  PROTOBUF_NODISCARD std::string* release_sparsemap();
  void set_allocated_sparsemap(std::string* sparsemap);
  private:
  const std::string& _internal_sparsemap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sparsemap(const std::string& value);
  std::string* _internal_mutable_sparsemap();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // bool createMesh = 3;
  void clear_createmesh();
  bool createmesh() const;
  void set_createmesh(bool value);
  private:
  bool _internal_createmesh() const;
  void _internal_set_createmesh(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sparsemap_;
    int32_t grpcservercompressionformat_;
    bool createmesh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class denseMappingProcessRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.denseMappingProcessRequestResponse) */ {
 public:
  inline denseMappingProcessRequestResponse() : denseMappingProcessRequestResponse(nullptr) {}
  ~denseMappingProcessRequestResponse() override;
  explicit PROTOBUF_CONSTEXPR denseMappingProcessRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  denseMappingProcessRequestResponse(const denseMappingProcessRequestResponse& from);
  denseMappingProcessRequestResponse(denseMappingProcessRequestResponse&& from) noexcept
    : denseMappingProcessRequestResponse() {
    *this = ::std::move(from);
  }

  inline denseMappingProcessRequestResponse& operator=(const denseMappingProcessRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline denseMappingProcessRequestResponse& operator=(denseMappingProcessRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const denseMappingProcessRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const denseMappingProcessRequestResponse* internal_default_instance() {
    return reinterpret_cast<const denseMappingProcessRequestResponse*>(
               &_denseMappingProcessRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(denseMappingProcessRequestResponse& a, denseMappingProcessRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(denseMappingProcessRequestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(denseMappingProcessRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  denseMappingProcessRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<denseMappingProcessRequestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const denseMappingProcessRequestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const denseMappingProcessRequestResponse& from) {
    denseMappingProcessRequestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(denseMappingProcessRequestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.denseMappingProcessRequestResponse";
  }
  protected:
  explicit denseMappingProcessRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.denseMappingProcessRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.getPointCloudRequest) */ {
 public:
  inline getPointCloudRequest() : getPointCloudRequest(nullptr) {}
  ~getPointCloudRequest() override;
  explicit PROTOBUF_CONSTEXPR getPointCloudRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequest(const getPointCloudRequest& from);
  getPointCloudRequest(getPointCloudRequest&& from) noexcept
    : getPointCloudRequest() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequest& operator=(const getPointCloudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequest& operator=(getPointCloudRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequest* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequest*>(
               &_getPointCloudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(getPointCloudRequest& a, getPointCloudRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getPointCloudRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getPointCloudRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getPointCloudRequest& from) {
    getPointCloudRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.getPointCloudRequest";
  }
  protected:
  explicit getPointCloudRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPointCloudFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // bytes outputPointCloud = 2;
  void clear_outputpointcloud();
  const std::string& outputpointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpointcloud();
  PROTOBUF_NODISCARD std::string* release_outputpointcloud();
  void set_allocated_outputpointcloud(std::string* outputpointcloud);
  private:
  const std::string& _internal_outputpointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpointcloud(const std::string& value);
  std::string* _internal_mutable_outputpointcloud();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // sint32 status = 3;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.getPointCloudRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointcloud_;
    int32_t grpcservercompressionformat_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.getPointCloudResponse) */ {
 public:
  inline getPointCloudResponse() : getPointCloudResponse(nullptr) {}
  ~getPointCloudResponse() override;
  explicit PROTOBUF_CONSTEXPR getPointCloudResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudResponse(const getPointCloudResponse& from);
  getPointCloudResponse(getPointCloudResponse&& from) noexcept
    : getPointCloudResponse() {
    *this = ::std::move(from);
  }

  inline getPointCloudResponse& operator=(const getPointCloudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudResponse& operator=(getPointCloudResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudResponse* internal_default_instance() {
    return reinterpret_cast<const getPointCloudResponse*>(
               &_getPointCloudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(getPointCloudResponse& a, getPointCloudResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getPointCloudResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getPointCloudResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getPointCloudResponse& from) {
    getPointCloudResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.getPointCloudResponse";
  }
  protected:
  explicit getPointCloudResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPointCloudFieldNumber = 1,
    kStatusFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes outputPointCloud = 1;
  void clear_outputpointcloud();
  const std::string& outputpointcloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputpointcloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputpointcloud();
  PROTOBUF_NODISCARD std::string* release_outputpointcloud();
  void set_allocated_outputpointcloud(std::string* outputpointcloud);
  private:
  const std::string& _internal_outputpointcloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputpointcloud(const std::string& value);
  std::string* _internal_mutable_outputpointcloud();
  public:

  // sint32 status = 2;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.getPointCloudResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpointcloud_;
    int32_t status_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class getMeshRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.getMeshRequest) */ {
 public:
  inline getMeshRequest() : getMeshRequest(nullptr) {}
  ~getMeshRequest() override;
  explicit PROTOBUF_CONSTEXPR getMeshRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMeshRequest(const getMeshRequest& from);
  getMeshRequest(getMeshRequest&& from) noexcept
    : getMeshRequest() {
    *this = ::std::move(from);
  }

  inline getMeshRequest& operator=(const getMeshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMeshRequest& operator=(getMeshRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMeshRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMeshRequest* internal_default_instance() {
    return reinterpret_cast<const getMeshRequest*>(
               &_getMeshRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(getMeshRequest& a, getMeshRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getMeshRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMeshRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMeshRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMeshRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMeshRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMeshRequest& from) {
    getMeshRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMeshRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.getMeshRequest";
  }
  protected:
  explicit getMeshRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputMeshFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // bytes outputMesh = 2;
  void clear_outputmesh();
  const std::string& outputmesh() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputmesh(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputmesh();
  PROTOBUF_NODISCARD std::string* release_outputmesh();
  void set_allocated_outputmesh(std::string* outputmesh);
  private:
  const std::string& _internal_outputmesh() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputmesh(const std::string& value);
  std::string* _internal_mutable_outputmesh();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // sint32 status = 3;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.getMeshRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputmesh_;
    int32_t grpcservercompressionformat_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// -------------------------------------------------------------------

class getMeshResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDenseMappingPipeline.getMeshResponse) */ {
 public:
  inline getMeshResponse() : getMeshResponse(nullptr) {}
  ~getMeshResponse() override;
  explicit PROTOBUF_CONSTEXPR getMeshResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getMeshResponse(const getMeshResponse& from);
  getMeshResponse(getMeshResponse&& from) noexcept
    : getMeshResponse() {
    *this = ::std::move(from);
  }

  inline getMeshResponse& operator=(const getMeshResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getMeshResponse& operator=(getMeshResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getMeshResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getMeshResponse* internal_default_instance() {
    return reinterpret_cast<const getMeshResponse*>(
               &_getMeshResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(getMeshResponse& a, getMeshResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getMeshResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getMeshResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  getMeshResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<getMeshResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getMeshResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const getMeshResponse& from) {
    getMeshResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getMeshResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDenseMappingPipeline.getMeshResponse";
  }
  protected:
  explicit getMeshResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputMeshFieldNumber = 1,
    kStatusFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes outputMesh = 1;
  void clear_outputmesh();
  const std::string& outputmesh() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputmesh(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputmesh();
  PROTOBUF_NODISCARD std::string* release_outputmesh();
  void set_allocated_outputmesh(std::string* outputmesh);
  private:
  const std::string& _internal_outputmesh() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputmesh(const std::string& value);
  std::string* _internal_mutable_outputmesh();
  public:

  // sint32 status = 2;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDenseMappingPipeline.getMeshResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputmesh_;
    int32_t status_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcIDenseMappingPipelineService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// initRequest

// int32 grpcServerCompressionFormat = 1;
inline void initRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t initRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t initRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.initRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void initRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void initRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.initRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// initResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void initResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t initResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t initResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.initResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void initResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void initResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.initResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// startRequest

// int32 grpcServerCompressionFormat = 1;
inline void startRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t startRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t startRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.startRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void startRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void startRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.startRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t startResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopRequest

// int32 grpcServerCompressionFormat = 1;
inline void stopRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t stopRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t stopRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.stopRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void stopRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void stopRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.stopRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// denseMappingProcessRequestRequest

// int32 grpcServerCompressionFormat = 1;
inline void denseMappingProcessRequestRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t denseMappingProcessRequestRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t denseMappingProcessRequestRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void denseMappingProcessRequestRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void denseMappingProcessRequestRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest.grpcServerCompressionFormat)
}

// bytes sparseMap = 2;
inline void denseMappingProcessRequestRequest::clear_sparsemap() {
  _impl_.sparsemap_.ClearToEmpty();
}
inline const std::string& denseMappingProcessRequestRequest::sparsemap() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest.sparseMap)
  return _internal_sparsemap();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void denseMappingProcessRequestRequest::set_sparsemap(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sparsemap_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest.sparseMap)
}
inline std::string* denseMappingProcessRequestRequest::mutable_sparsemap() {
  std::string* _s = _internal_mutable_sparsemap();
  // @@protoc_insertion_point(field_mutable:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest.sparseMap)
  return _s;
}
inline const std::string& denseMappingProcessRequestRequest::_internal_sparsemap() const {
  return _impl_.sparsemap_.Get();
}
inline void denseMappingProcessRequestRequest::_internal_set_sparsemap(const std::string& value) {
  
  _impl_.sparsemap_.Set(value, GetArenaForAllocation());
}
inline std::string* denseMappingProcessRequestRequest::_internal_mutable_sparsemap() {
  
  return _impl_.sparsemap_.Mutable(GetArenaForAllocation());
}
inline std::string* denseMappingProcessRequestRequest::release_sparsemap() {
  // @@protoc_insertion_point(field_release:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest.sparseMap)
  return _impl_.sparsemap_.Release();
}
inline void denseMappingProcessRequestRequest::set_allocated_sparsemap(std::string* sparsemap) {
  if (sparsemap != nullptr) {
    
  } else {
    
  }
  _impl_.sparsemap_.SetAllocated(sparsemap, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sparsemap_.IsDefault()) {
    _impl_.sparsemap_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest.sparseMap)
}

// bool createMesh = 3;
inline void denseMappingProcessRequestRequest::clear_createmesh() {
  _impl_.createmesh_ = false;
}
inline bool denseMappingProcessRequestRequest::_internal_createmesh() const {
  return _impl_.createmesh_;
}
inline bool denseMappingProcessRequestRequest::createmesh() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest.createMesh)
  return _internal_createmesh();
}
inline void denseMappingProcessRequestRequest::_internal_set_createmesh(bool value) {
  
  _impl_.createmesh_ = value;
}
inline void denseMappingProcessRequestRequest::set_createmesh(bool value) {
  _internal_set_createmesh(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.denseMappingProcessRequestRequest.createMesh)
}

// -------------------------------------------------------------------

// denseMappingProcessRequestResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void denseMappingProcessRequestResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t denseMappingProcessRequestResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t denseMappingProcessRequestResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.denseMappingProcessRequestResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void denseMappingProcessRequestResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void denseMappingProcessRequestResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.denseMappingProcessRequestResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPointCloudRequest

// int32 grpcServerCompressionFormat = 1;
inline void getPointCloudRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getPointCloudRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getPointCloudRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getPointCloudRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getPointCloudRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getPointCloudRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getPointCloudRequest.grpcServerCompressionFormat)
}

// bytes outputPointCloud = 2;
inline void getPointCloudRequest::clear_outputpointcloud() {
  _impl_.outputpointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudRequest::outputpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getPointCloudRequest.outputPointCloud)
  return _internal_outputpointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequest::set_outputpointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getPointCloudRequest.outputPointCloud)
}
inline std::string* getPointCloudRequest::mutable_outputpointcloud() {
  std::string* _s = _internal_mutable_outputpointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIDenseMappingPipeline.getPointCloudRequest.outputPointCloud)
  return _s;
}
inline const std::string& getPointCloudRequest::_internal_outputpointcloud() const {
  return _impl_.outputpointcloud_.Get();
}
inline void getPointCloudRequest::_internal_set_outputpointcloud(const std::string& value) {
  
  _impl_.outputpointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequest::_internal_mutable_outputpointcloud() {
  
  return _impl_.outputpointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudRequest::release_outputpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIDenseMappingPipeline.getPointCloudRequest.outputPointCloud)
  return _impl_.outputpointcloud_.Release();
}
inline void getPointCloudRequest::set_allocated_outputpointcloud(std::string* outputpointcloud) {
  if (outputpointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.outputpointcloud_.SetAllocated(outputpointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpointcloud_.IsDefault()) {
    _impl_.outputpointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDenseMappingPipeline.getPointCloudRequest.outputPointCloud)
}

// sint32 status = 3;
inline void getPointCloudRequest::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t getPointCloudRequest::_internal_status() const {
  return _impl_.status_;
}
inline int32_t getPointCloudRequest::status() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getPointCloudRequest.status)
  return _internal_status();
}
inline void getPointCloudRequest::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void getPointCloudRequest::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getPointCloudRequest.status)
}

// -------------------------------------------------------------------

// getPointCloudResponse

// bytes outputPointCloud = 1;
inline void getPointCloudResponse::clear_outputpointcloud() {
  _impl_.outputpointcloud_.ClearToEmpty();
}
inline const std::string& getPointCloudResponse::outputpointcloud() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getPointCloudResponse.outputPointCloud)
  return _internal_outputpointcloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudResponse::set_outputpointcloud(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputpointcloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getPointCloudResponse.outputPointCloud)
}
inline std::string* getPointCloudResponse::mutable_outputpointcloud() {
  std::string* _s = _internal_mutable_outputpointcloud();
  // @@protoc_insertion_point(field_mutable:grpcIDenseMappingPipeline.getPointCloudResponse.outputPointCloud)
  return _s;
}
inline const std::string& getPointCloudResponse::_internal_outputpointcloud() const {
  return _impl_.outputpointcloud_.Get();
}
inline void getPointCloudResponse::_internal_set_outputpointcloud(const std::string& value) {
  
  _impl_.outputpointcloud_.Set(value, GetArenaForAllocation());
}
inline std::string* getPointCloudResponse::_internal_mutable_outputpointcloud() {
  
  return _impl_.outputpointcloud_.Mutable(GetArenaForAllocation());
}
inline std::string* getPointCloudResponse::release_outputpointcloud() {
  // @@protoc_insertion_point(field_release:grpcIDenseMappingPipeline.getPointCloudResponse.outputPointCloud)
  return _impl_.outputpointcloud_.Release();
}
inline void getPointCloudResponse::set_allocated_outputpointcloud(std::string* outputpointcloud) {
  if (outputpointcloud != nullptr) {
    
  } else {
    
  }
  _impl_.outputpointcloud_.SetAllocated(outputpointcloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputpointcloud_.IsDefault()) {
    _impl_.outputpointcloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDenseMappingPipeline.getPointCloudResponse.outputPointCloud)
}

// sint32 status = 2;
inline void getPointCloudResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t getPointCloudResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t getPointCloudResponse::status() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getPointCloudResponse.status)
  return _internal_status();
}
inline void getPointCloudResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void getPointCloudResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getPointCloudResponse.status)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getPointCloudResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getPointCloudResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getPointCloudResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getPointCloudResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getPointCloudResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getPointCloudResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getPointCloudResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getMeshRequest

// int32 grpcServerCompressionFormat = 1;
inline void getMeshRequest::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t getMeshRequest::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t getMeshRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getMeshRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void getMeshRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void getMeshRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getMeshRequest.grpcServerCompressionFormat)
}

// bytes outputMesh = 2;
inline void getMeshRequest::clear_outputmesh() {
  _impl_.outputmesh_.ClearToEmpty();
}
inline const std::string& getMeshRequest::outputmesh() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getMeshRequest.outputMesh)
  return _internal_outputmesh();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMeshRequest::set_outputmesh(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputmesh_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getMeshRequest.outputMesh)
}
inline std::string* getMeshRequest::mutable_outputmesh() {
  std::string* _s = _internal_mutable_outputmesh();
  // @@protoc_insertion_point(field_mutable:grpcIDenseMappingPipeline.getMeshRequest.outputMesh)
  return _s;
}
inline const std::string& getMeshRequest::_internal_outputmesh() const {
  return _impl_.outputmesh_.Get();
}
inline void getMeshRequest::_internal_set_outputmesh(const std::string& value) {
  
  _impl_.outputmesh_.Set(value, GetArenaForAllocation());
}
inline std::string* getMeshRequest::_internal_mutable_outputmesh() {
  
  return _impl_.outputmesh_.Mutable(GetArenaForAllocation());
}
inline std::string* getMeshRequest::release_outputmesh() {
  // @@protoc_insertion_point(field_release:grpcIDenseMappingPipeline.getMeshRequest.outputMesh)
  return _impl_.outputmesh_.Release();
}
inline void getMeshRequest::set_allocated_outputmesh(std::string* outputmesh) {
  if (outputmesh != nullptr) {
    
  } else {
    
  }
  _impl_.outputmesh_.SetAllocated(outputmesh, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputmesh_.IsDefault()) {
    _impl_.outputmesh_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDenseMappingPipeline.getMeshRequest.outputMesh)
}

// sint32 status = 3;
inline void getMeshRequest::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t getMeshRequest::_internal_status() const {
  return _impl_.status_;
}
inline int32_t getMeshRequest::status() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getMeshRequest.status)
  return _internal_status();
}
inline void getMeshRequest::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void getMeshRequest::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getMeshRequest.status)
}

// -------------------------------------------------------------------

// getMeshResponse

// bytes outputMesh = 1;
inline void getMeshResponse::clear_outputmesh() {
  _impl_.outputmesh_.ClearToEmpty();
}
inline const std::string& getMeshResponse::outputmesh() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getMeshResponse.outputMesh)
  return _internal_outputmesh();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getMeshResponse::set_outputmesh(ArgT0&& arg0, ArgT... args) {
 
 _impl_.outputmesh_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getMeshResponse.outputMesh)
}
inline std::string* getMeshResponse::mutable_outputmesh() {
  std::string* _s = _internal_mutable_outputmesh();
  // @@protoc_insertion_point(field_mutable:grpcIDenseMappingPipeline.getMeshResponse.outputMesh)
  return _s;
}
inline const std::string& getMeshResponse::_internal_outputmesh() const {
  return _impl_.outputmesh_.Get();
}
inline void getMeshResponse::_internal_set_outputmesh(const std::string& value) {
  
  _impl_.outputmesh_.Set(value, GetArenaForAllocation());
}
inline std::string* getMeshResponse::_internal_mutable_outputmesh() {
  
  return _impl_.outputmesh_.Mutable(GetArenaForAllocation());
}
inline std::string* getMeshResponse::release_outputmesh() {
  // @@protoc_insertion_point(field_release:grpcIDenseMappingPipeline.getMeshResponse.outputMesh)
  return _impl_.outputmesh_.Release();
}
inline void getMeshResponse::set_allocated_outputmesh(std::string* outputmesh) {
  if (outputmesh != nullptr) {
    
  } else {
    
  }
  _impl_.outputmesh_.SetAllocated(outputmesh, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.outputmesh_.IsDefault()) {
    _impl_.outputmesh_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDenseMappingPipeline.getMeshResponse.outputMesh)
}

// sint32 status = 2;
inline void getMeshResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t getMeshResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t getMeshResponse::status() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getMeshResponse.status)
  return _internal_status();
}
inline void getMeshResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void getMeshResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getMeshResponse.status)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getMeshResponse::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t getMeshResponse::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t getMeshResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDenseMappingPipeline.getMeshResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getMeshResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void getMeshResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDenseMappingPipeline.getMeshResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIDenseMappingPipeline

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIDenseMappingPipelineService_2eproto
