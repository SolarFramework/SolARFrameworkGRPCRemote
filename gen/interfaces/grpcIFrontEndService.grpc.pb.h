// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIFrontEndService.proto
#ifndef GRPC_grpcIFrontEndService_2eproto__INCLUDED
#define GRPC_grpcIFrontEndService_2eproto__INCLUDED

#include "grpcIFrontEndService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIFrontEnd {

class grpcIFrontEndService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIFrontEnd.grpcIFrontEndService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status registerClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpcIFrontEnd::registerClientResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::registerClientResponse>> AsyncregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::registerClientResponse>>(AsyncregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::registerClientResponse>> PrepareAsyncregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::registerClientResponse>>(PrepareAsyncregisterClientRaw(context, request, cq));
    }
    virtual ::grpc::Status unregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpcIFrontEnd::unregisterClientResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::unregisterClientResponse>> AsyncunregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::unregisterClientResponse>>(AsyncunregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::unregisterClientResponse>> PrepareAsyncunregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::unregisterClientResponse>>(PrepareAsyncunregisterClientRaw(context, request, cq));
    }
    virtual ::grpc::Status getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllClientsUUIDResponse>> AsyncgetAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllClientsUUIDResponse>>(AsyncgetAllClientsUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllClientsUUIDResponse>> PrepareAsyncgetAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllClientsUUIDResponse>>(PrepareAsyncgetAllClientsUUIDRaw(context, request, cq));
    }
    virtual ::grpc::Status getDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpcIFrontEnd::getDeviceInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDeviceInfoResponse>> AsyncgetDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDeviceInfoResponse>>(AsyncgetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDeviceInfoResponse>> PrepareAsyncgetDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDeviceInfoResponse>>(PrepareAsyncgetDeviceInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status init_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpcIFrontEnd::init_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc0Response>> Asyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc0Response>>(Asyncinit_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc0Response>> PrepareAsyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc0Response>>(PrepareAsyncinit_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status init_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpcIFrontEnd::init_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc1Response>> Asyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc1Response>>(Asyncinit_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc1Response>> PrepareAsyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc1Response>>(PrepareAsyncinit_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpcIFrontEnd::startResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpcIFrontEnd::stopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status getProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpcIFrontEnd::getProcessingModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getProcessingModeResponse>> AsyncgetProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getProcessingModeResponse>>(AsyncgetProcessingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getProcessingModeResponse>> PrepareAsyncgetProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getProcessingModeResponse>>(PrepareAsyncgetProcessingModeRaw(context, request, cq));
    }
    virtual ::grpc::Status setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc0Response>> AsyncsetCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc0Response>>(AsyncsetCameraParameters_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc0Response>> PrepareAsyncsetCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc0Response>>(PrepareAsyncsetCameraParameters_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc1Response>> AsyncsetCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc1Response>>(AsyncsetCameraParameters_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc1Response>> PrepareAsyncsetCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc1Response>>(PrepareAsyncsetCameraParameters_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status setRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpcIFrontEnd::setRectificationParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setRectificationParametersResponse>> AsyncsetRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setRectificationParametersResponse>>(AsyncsetRectificationParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setRectificationParametersResponse>> PrepareAsyncsetRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setRectificationParametersResponse>>(PrepareAsyncsetRectificationParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpcIFrontEnd::getCameraParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getCameraParametersResponse>> AsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getCameraParametersResponse>>(AsyncgetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getCameraParametersResponse>> PrepareAsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getCameraParametersResponse>>(PrepareAsyncgetCameraParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>> AsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>>(AsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>> PrepareAsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>>(PrepareAsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>> AsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>>(AsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>> PrepareAsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>>(PrepareAsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    virtual ::grpc::Status get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpcIFrontEnd::get3DTransformRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::get3DTransformRequestResponse>> Asyncget3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::get3DTransformRequestResponse>>(Asyncget3DTransformRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::get3DTransformRequestResponse>> PrepareAsyncget3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::get3DTransformRequestResponse>>(PrepareAsyncget3DTransformRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpcIFrontEnd::getMappingDataRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMappingDataRequestResponse>> AsyncgetMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMappingDataRequestResponse>>(AsyncgetMappingDataRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMappingDataRequestResponse>> PrepareAsyncgetMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMappingDataRequestResponse>>(PrepareAsyncgetMappingDataRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status getLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpcIFrontEnd::getLastPoseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getLastPoseResponse>> AsyncgetLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getLastPoseResponse>>(AsyncgetLastPoseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getLastPoseResponse>> PrepareAsyncgetLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getLastPoseResponse>>(PrepareAsyncgetLastPoseRaw(context, request, cq));
    }
    virtual ::grpc::Status createMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpcIFrontEnd::createMapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::createMapResponse>> AsynccreateMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::createMapResponse>>(AsynccreateMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::createMapResponse>> PrepareAsynccreateMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::createMapResponse>>(PrepareAsynccreateMapRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpcIFrontEnd::deleteMapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::deleteMapResponse>> AsyncdeleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::deleteMapResponse>>(AsyncdeleteMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::deleteMapResponse>> PrepareAsyncdeleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::deleteMapResponse>>(PrepareAsyncdeleteMapRaw(context, request, cq));
    }
    virtual ::grpc::Status getAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllMapsUUIDResponse>> AsyncgetAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllMapsUUIDResponse>>(AsyncgetAllMapsUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllMapsUUIDResponse>> PrepareAsyncgetAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllMapsUUIDResponse>>(PrepareAsyncgetAllMapsUUIDRaw(context, request, cq));
    }
    virtual ::grpc::Status getClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpcIFrontEnd::getClientMapUUIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getClientMapUUIDResponse>> AsyncgetClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getClientMapUUIDResponse>>(AsyncgetClientMapUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getClientMapUUIDResponse>> PrepareAsyncgetClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getClientMapUUIDResponse>>(PrepareAsyncgetClientMapUUIDRaw(context, request, cq));
    }
    virtual ::grpc::Status getMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpcIFrontEnd::getMapRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMapRequestResponse>> AsyncgetMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMapRequestResponse>>(AsyncgetMapRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMapRequestResponse>> PrepareAsyncgetMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMapRequestResponse>>(PrepareAsyncgetMapRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status setMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpcIFrontEnd::setMapRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setMapRequestResponse>> AsyncsetMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setMapRequestResponse>>(AsyncsetMapRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setMapRequestResponse>> PrepareAsyncsetMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setMapRequestResponse>>(PrepareAsyncsetMapRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpcIFrontEnd::getPointCloudRequestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getPointCloudRequestResponse>> AsyncgetPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getPointCloudRequestResponse>>(AsyncgetPointCloudRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getPointCloudRequestResponse>> PrepareAsyncgetPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getPointCloudRequestResponse>>(PrepareAsyncgetPointCloudRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status requestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpcIFrontEnd::requestForMapProcessingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::requestForMapProcessingResponse>> AsyncrequestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::requestForMapProcessingResponse>>(AsyncrequestForMapProcessingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::requestForMapProcessingResponse>> PrepareAsyncrequestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::requestForMapProcessingResponse>>(PrepareAsyncrequestForMapProcessingRaw(context, request, cq));
    }
    virtual ::grpc::Status getStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpcIFrontEnd::getStatusForMapProcessingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getStatusForMapProcessingResponse>> AsyncgetStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getStatusForMapProcessingResponse>>(AsyncgetStatusForMapProcessingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getStatusForMapProcessingResponse>> PrepareAsyncgetStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getStatusForMapProcessingResponse>>(PrepareAsyncgetStatusForMapProcessingRaw(context, request, cq));
    }
    virtual ::grpc::Status getDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpcIFrontEnd::getDataForMapProcessingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDataForMapProcessingResponse>> AsyncgetDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDataForMapProcessingResponse>>(AsyncgetDataForMapProcessingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDataForMapProcessingResponse>> PrepareAsyncgetDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDataForMapProcessingResponse>>(PrepareAsyncgetDataForMapProcessingRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void registerClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest* request, ::grpcIFrontEnd::registerClientResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest* request, ::grpcIFrontEnd::registerClientResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void unregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest* request, ::grpcIFrontEnd::unregisterClientResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest* request, ::grpcIFrontEnd::unregisterClientResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpcIFrontEnd::getDeviceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpcIFrontEnd::getDeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void init_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request* request, ::grpcIFrontEnd::init_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request* request, ::grpcIFrontEnd::init_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void init_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request* request, ::grpcIFrontEnd::init_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void init_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request* request, ::grpcIFrontEnd::init_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest* request, ::grpcIFrontEnd::startResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void start(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest* request, ::grpcIFrontEnd::startResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest* request, ::grpcIFrontEnd::stopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void stop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest* request, ::grpcIFrontEnd::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpcIFrontEnd::getProcessingModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpcIFrontEnd::getProcessingModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpcIFrontEnd::setRectificationParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpcIFrontEnd::setRectificationParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpcIFrontEnd::getCameraParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpcIFrontEnd::getCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpcIFrontEnd::get3DTransformRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpcIFrontEnd::get3DTransformRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpcIFrontEnd::getMappingDataRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpcIFrontEnd::getMappingDataRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest* request, ::grpcIFrontEnd::getLastPoseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest* request, ::grpcIFrontEnd::getLastPoseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void createMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest* request, ::grpcIFrontEnd::createMapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest* request, ::grpcIFrontEnd::createMapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest* request, ::grpcIFrontEnd::deleteMapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest* request, ::grpcIFrontEnd::deleteMapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest* request, ::grpcIFrontEnd::getClientMapUUIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest* request, ::grpcIFrontEnd::getClientMapUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest* request, ::grpcIFrontEnd::getMapRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest* request, ::grpcIFrontEnd::getMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void setMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest* request, ::grpcIFrontEnd::setMapRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest* request, ::grpcIFrontEnd::setMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpcIFrontEnd::getPointCloudRequestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpcIFrontEnd::getPointCloudRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void requestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest* request, ::grpcIFrontEnd::requestForMapProcessingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest* request, ::grpcIFrontEnd::requestForMapProcessingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* request, ::grpcIFrontEnd::getStatusForMapProcessingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* request, ::grpcIFrontEnd::getStatusForMapProcessingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest* request, ::grpcIFrontEnd::getDataForMapProcessingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest* request, ::grpcIFrontEnd::getDataForMapProcessingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::registerClientResponse>* AsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::registerClientResponse>* PrepareAsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::unregisterClientResponse>* AsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::unregisterClientResponse>* PrepareAsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllClientsUUIDResponse>* AsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllClientsUUIDResponse>* PrepareAsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDeviceInfoResponse>* AsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDeviceInfoResponse>* PrepareAsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc0Response>* Asyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc0Response>* PrepareAsyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc1Response>* Asyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::init_grpc1Response>* PrepareAsyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getProcessingModeResponse>* AsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getProcessingModeResponse>* PrepareAsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc0Response>* AsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc0Response>* PrepareAsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc1Response>* AsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setCameraParameters_grpc1Response>* PrepareAsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setRectificationParametersResponse>* AsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setRectificationParametersResponse>* PrepareAsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getCameraParametersResponse>* AsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getCameraParametersResponse>* PrepareAsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* AsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* PrepareAsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* AsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* PrepareAsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::get3DTransformRequestResponse>* Asyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::get3DTransformRequestResponse>* PrepareAsyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMappingDataRequestResponse>* AsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMappingDataRequestResponse>* PrepareAsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getLastPoseResponse>* AsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getLastPoseResponse>* PrepareAsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::createMapResponse>* AsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::createMapResponse>* PrepareAsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::deleteMapResponse>* AsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::deleteMapResponse>* PrepareAsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllMapsUUIDResponse>* AsyncgetAllMapsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getAllMapsUUIDResponse>* PrepareAsyncgetAllMapsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getClientMapUUIDResponse>* AsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getClientMapUUIDResponse>* PrepareAsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMapRequestResponse>* AsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getMapRequestResponse>* PrepareAsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setMapRequestResponse>* AsyncsetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::setMapRequestResponse>* PrepareAsyncsetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getPointCloudRequestResponse>* AsyncgetPointCloudRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getPointCloudRequestResponse>* PrepareAsyncgetPointCloudRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::requestForMapProcessingResponse>* AsyncrequestForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::requestForMapProcessingResponse>* PrepareAsyncrequestForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getStatusForMapProcessingResponse>* AsyncgetStatusForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getStatusForMapProcessingResponse>* PrepareAsyncgetStatusForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDataForMapProcessingResponse>* AsyncgetDataForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIFrontEnd::getDataForMapProcessingResponse>* PrepareAsyncgetDataForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status registerClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpcIFrontEnd::registerClientResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::registerClientResponse>> AsyncregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::registerClientResponse>>(AsyncregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::registerClientResponse>> PrepareAsyncregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::registerClientResponse>>(PrepareAsyncregisterClientRaw(context, request, cq));
    }
    ::grpc::Status unregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpcIFrontEnd::unregisterClientResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::unregisterClientResponse>> AsyncunregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::unregisterClientResponse>>(AsyncunregisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::unregisterClientResponse>> PrepareAsyncunregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::unregisterClientResponse>>(PrepareAsyncunregisterClientRaw(context, request, cq));
    }
    ::grpc::Status getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllClientsUUIDResponse>> AsyncgetAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllClientsUUIDResponse>>(AsyncgetAllClientsUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllClientsUUIDResponse>> PrepareAsyncgetAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllClientsUUIDResponse>>(PrepareAsyncgetAllClientsUUIDRaw(context, request, cq));
    }
    ::grpc::Status getDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpcIFrontEnd::getDeviceInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDeviceInfoResponse>> AsyncgetDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDeviceInfoResponse>>(AsyncgetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDeviceInfoResponse>> PrepareAsyncgetDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDeviceInfoResponse>>(PrepareAsyncgetDeviceInfoRaw(context, request, cq));
    }
    ::grpc::Status init_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpcIFrontEnd::init_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc0Response>> Asyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc0Response>>(Asyncinit_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc0Response>> PrepareAsyncinit_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc0Response>>(PrepareAsyncinit_grpc0Raw(context, request, cq));
    }
    ::grpc::Status init_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpcIFrontEnd::init_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc1Response>> Asyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc1Response>>(Asyncinit_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc1Response>> PrepareAsyncinit_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc1Response>>(PrepareAsyncinit_grpc1Raw(context, request, cq));
    }
    ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpcIFrontEnd::startResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpcIFrontEnd::stopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status getProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpcIFrontEnd::getProcessingModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getProcessingModeResponse>> AsyncgetProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getProcessingModeResponse>>(AsyncgetProcessingModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getProcessingModeResponse>> PrepareAsyncgetProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getProcessingModeResponse>>(PrepareAsyncgetProcessingModeRaw(context, request, cq));
    }
    ::grpc::Status setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc0Response>> AsyncsetCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc0Response>>(AsyncsetCameraParameters_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc0Response>> PrepareAsyncsetCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc0Response>>(PrepareAsyncsetCameraParameters_grpc0Raw(context, request, cq));
    }
    ::grpc::Status setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc1Response>> AsyncsetCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc1Response>>(AsyncsetCameraParameters_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc1Response>> PrepareAsyncsetCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc1Response>>(PrepareAsyncsetCameraParameters_grpc1Raw(context, request, cq));
    }
    ::grpc::Status setRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpcIFrontEnd::setRectificationParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setRectificationParametersResponse>> AsyncsetRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setRectificationParametersResponse>>(AsyncsetRectificationParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setRectificationParametersResponse>> PrepareAsyncsetRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setRectificationParametersResponse>>(PrepareAsyncsetRectificationParametersRaw(context, request, cq));
    }
    ::grpc::Status getCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpcIFrontEnd::getCameraParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getCameraParametersResponse>> AsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getCameraParametersResponse>>(AsyncgetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getCameraParametersResponse>> PrepareAsyncgetCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getCameraParametersResponse>>(PrepareAsyncgetCameraParametersRaw(context, request, cq));
    }
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>> AsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>>(AsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>> PrepareAsyncrelocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>>(PrepareAsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq));
    }
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>> AsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>>(AsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>> PrepareAsyncrelocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>>(PrepareAsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq));
    }
    ::grpc::Status get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpcIFrontEnd::get3DTransformRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::get3DTransformRequestResponse>> Asyncget3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::get3DTransformRequestResponse>>(Asyncget3DTransformRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::get3DTransformRequestResponse>> PrepareAsyncget3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::get3DTransformRequestResponse>>(PrepareAsyncget3DTransformRequestRaw(context, request, cq));
    }
    ::grpc::Status getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpcIFrontEnd::getMappingDataRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMappingDataRequestResponse>> AsyncgetMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMappingDataRequestResponse>>(AsyncgetMappingDataRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMappingDataRequestResponse>> PrepareAsyncgetMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMappingDataRequestResponse>>(PrepareAsyncgetMappingDataRequestRaw(context, request, cq));
    }
    ::grpc::Status getLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpcIFrontEnd::getLastPoseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getLastPoseResponse>> AsyncgetLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getLastPoseResponse>>(AsyncgetLastPoseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getLastPoseResponse>> PrepareAsyncgetLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getLastPoseResponse>>(PrepareAsyncgetLastPoseRaw(context, request, cq));
    }
    ::grpc::Status createMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpcIFrontEnd::createMapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::createMapResponse>> AsynccreateMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::createMapResponse>>(AsynccreateMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::createMapResponse>> PrepareAsynccreateMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::createMapResponse>>(PrepareAsynccreateMapRaw(context, request, cq));
    }
    ::grpc::Status deleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpcIFrontEnd::deleteMapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::deleteMapResponse>> AsyncdeleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::deleteMapResponse>>(AsyncdeleteMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::deleteMapResponse>> PrepareAsyncdeleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::deleteMapResponse>>(PrepareAsyncdeleteMapRaw(context, request, cq));
    }
    ::grpc::Status getAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllMapsUUIDResponse>> AsyncgetAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllMapsUUIDResponse>>(AsyncgetAllMapsUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllMapsUUIDResponse>> PrepareAsyncgetAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllMapsUUIDResponse>>(PrepareAsyncgetAllMapsUUIDRaw(context, request, cq));
    }
    ::grpc::Status getClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpcIFrontEnd::getClientMapUUIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getClientMapUUIDResponse>> AsyncgetClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getClientMapUUIDResponse>>(AsyncgetClientMapUUIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getClientMapUUIDResponse>> PrepareAsyncgetClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getClientMapUUIDResponse>>(PrepareAsyncgetClientMapUUIDRaw(context, request, cq));
    }
    ::grpc::Status getMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpcIFrontEnd::getMapRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMapRequestResponse>> AsyncgetMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMapRequestResponse>>(AsyncgetMapRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMapRequestResponse>> PrepareAsyncgetMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMapRequestResponse>>(PrepareAsyncgetMapRequestRaw(context, request, cq));
    }
    ::grpc::Status setMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpcIFrontEnd::setMapRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setMapRequestResponse>> AsyncsetMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setMapRequestResponse>>(AsyncsetMapRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setMapRequestResponse>> PrepareAsyncsetMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setMapRequestResponse>>(PrepareAsyncsetMapRequestRaw(context, request, cq));
    }
    ::grpc::Status getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpcIFrontEnd::getPointCloudRequestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getPointCloudRequestResponse>> AsyncgetPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getPointCloudRequestResponse>>(AsyncgetPointCloudRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getPointCloudRequestResponse>> PrepareAsyncgetPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getPointCloudRequestResponse>>(PrepareAsyncgetPointCloudRequestRaw(context, request, cq));
    }
    ::grpc::Status requestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpcIFrontEnd::requestForMapProcessingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::requestForMapProcessingResponse>> AsyncrequestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::requestForMapProcessingResponse>>(AsyncrequestForMapProcessingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::requestForMapProcessingResponse>> PrepareAsyncrequestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::requestForMapProcessingResponse>>(PrepareAsyncrequestForMapProcessingRaw(context, request, cq));
    }
    ::grpc::Status getStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpcIFrontEnd::getStatusForMapProcessingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getStatusForMapProcessingResponse>> AsyncgetStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getStatusForMapProcessingResponse>>(AsyncgetStatusForMapProcessingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getStatusForMapProcessingResponse>> PrepareAsyncgetStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getStatusForMapProcessingResponse>>(PrepareAsyncgetStatusForMapProcessingRaw(context, request, cq));
    }
    ::grpc::Status getDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpcIFrontEnd::getDataForMapProcessingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDataForMapProcessingResponse>> AsyncgetDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDataForMapProcessingResponse>>(AsyncgetDataForMapProcessingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDataForMapProcessingResponse>> PrepareAsyncgetDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDataForMapProcessingResponse>>(PrepareAsyncgetDataForMapProcessingRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void registerClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest* request, ::grpcIFrontEnd::registerClientResponse* response, std::function<void(::grpc::Status)>) override;
      void registerClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest* request, ::grpcIFrontEnd::registerClientResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void unregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest* request, ::grpcIFrontEnd::unregisterClientResponse* response, std::function<void(::grpc::Status)>) override;
      void unregisterClient(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest* request, ::grpcIFrontEnd::unregisterClientResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpcIFrontEnd::getDeviceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void getDeviceInfo(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpcIFrontEnd::getDeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void init_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request* request, ::grpcIFrontEnd::init_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void init_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request* request, ::grpcIFrontEnd::init_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void init_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request* request, ::grpcIFrontEnd::init_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void init_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request* request, ::grpcIFrontEnd::init_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void start(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest* request, ::grpcIFrontEnd::startResponse* response, std::function<void(::grpc::Status)>) override;
      void start(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest* request, ::grpcIFrontEnd::startResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void stop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest* request, ::grpcIFrontEnd::stopResponse* response, std::function<void(::grpc::Status)>) override;
      void stop(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest* request, ::grpcIFrontEnd::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpcIFrontEnd::getProcessingModeResponse* response, std::function<void(::grpc::Status)>) override;
      void getProcessingMode(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpcIFrontEnd::getProcessingModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpcIFrontEnd::setRectificationParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void setRectificationParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpcIFrontEnd::setRectificationParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpcIFrontEnd::getCameraParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void getCameraParameters(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpcIFrontEnd::getCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpcIFrontEnd::get3DTransformRequestResponse* response, std::function<void(::grpc::Status)>) override;
      void get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpcIFrontEnd::get3DTransformRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpcIFrontEnd::getMappingDataRequestResponse* response, std::function<void(::grpc::Status)>) override;
      void getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpcIFrontEnd::getMappingDataRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest* request, ::grpcIFrontEnd::getLastPoseResponse* response, std::function<void(::grpc::Status)>) override;
      void getLastPose(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest* request, ::grpcIFrontEnd::getLastPoseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void createMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest* request, ::grpcIFrontEnd::createMapResponse* response, std::function<void(::grpc::Status)>) override;
      void createMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest* request, ::grpcIFrontEnd::createMapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest* request, ::grpcIFrontEnd::deleteMapResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteMap(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest* request, ::grpcIFrontEnd::deleteMapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void getAllMapsUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest* request, ::grpcIFrontEnd::getClientMapUUIDResponse* response, std::function<void(::grpc::Status)>) override;
      void getClientMapUUID(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest* request, ::grpcIFrontEnd::getClientMapUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest* request, ::grpcIFrontEnd::getMapRequestResponse* response, std::function<void(::grpc::Status)>) override;
      void getMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest* request, ::grpcIFrontEnd::getMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void setMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest* request, ::grpcIFrontEnd::setMapRequestResponse* response, std::function<void(::grpc::Status)>) override;
      void setMapRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest* request, ::grpcIFrontEnd::setMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpcIFrontEnd::getPointCloudRequestResponse* response, std::function<void(::grpc::Status)>) override;
      void getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpcIFrontEnd::getPointCloudRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void requestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest* request, ::grpcIFrontEnd::requestForMapProcessingResponse* response, std::function<void(::grpc::Status)>) override;
      void requestForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest* request, ::grpcIFrontEnd::requestForMapProcessingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* request, ::grpcIFrontEnd::getStatusForMapProcessingResponse* response, std::function<void(::grpc::Status)>) override;
      void getStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* request, ::grpcIFrontEnd::getStatusForMapProcessingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest* request, ::grpcIFrontEnd::getDataForMapProcessingResponse* response, std::function<void(::grpc::Status)>) override;
      void getDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest* request, ::grpcIFrontEnd::getDataForMapProcessingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::registerClientResponse>* AsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::registerClientResponse>* PrepareAsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::registerClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::unregisterClientResponse>* AsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::unregisterClientResponse>* PrepareAsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllClientsUUIDResponse>* AsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllClientsUUIDResponse>* PrepareAsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDeviceInfoResponse>* AsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDeviceInfoResponse>* PrepareAsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc0Response>* Asyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc0Response>* PrepareAsyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc1Response>* Asyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::init_grpc1Response>* PrepareAsyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::init_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getProcessingModeResponse>* AsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getProcessingModeResponse>* PrepareAsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc0Response>* AsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc0Response>* PrepareAsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc1Response>* AsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setCameraParameters_grpc1Response>* PrepareAsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setRectificationParametersResponse>* AsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setRectificationParametersResponse>* PrepareAsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getCameraParametersResponse>* AsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getCameraParametersResponse>* PrepareAsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* AsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* PrepareAsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* AsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* PrepareAsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::get3DTransformRequestResponse>* Asyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::get3DTransformRequestResponse>* PrepareAsyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMappingDataRequestResponse>* AsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMappingDataRequestResponse>* PrepareAsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getLastPoseResponse>* AsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getLastPoseResponse>* PrepareAsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::createMapResponse>* AsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::createMapResponse>* PrepareAsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::createMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::deleteMapResponse>* AsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::deleteMapResponse>* PrepareAsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::deleteMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllMapsUUIDResponse>* AsyncgetAllMapsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getAllMapsUUIDResponse>* PrepareAsyncgetAllMapsUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getClientMapUUIDResponse>* AsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getClientMapUUIDResponse>* PrepareAsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMapRequestResponse>* AsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getMapRequestResponse>* PrepareAsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setMapRequestResponse>* AsyncsetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::setMapRequestResponse>* PrepareAsyncsetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getPointCloudRequestResponse>* AsyncgetPointCloudRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getPointCloudRequestResponse>* PrepareAsyncgetPointCloudRequestRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::requestForMapProcessingResponse>* AsyncrequestForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::requestForMapProcessingResponse>* PrepareAsyncrequestForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getStatusForMapProcessingResponse>* AsyncgetStatusForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getStatusForMapProcessingResponse>* PrepareAsyncgetStatusForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDataForMapProcessingResponse>* AsyncgetDataForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIFrontEnd::getDataForMapProcessingResponse>* PrepareAsyncgetDataForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_registerClient_;
    const ::grpc::internal::RpcMethod rpcmethod_unregisterClient_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllClientsUUID_;
    const ::grpc::internal::RpcMethod rpcmethod_getDeviceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_init_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_init_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_getProcessingMode_;
    const ::grpc::internal::RpcMethod rpcmethod_setCameraParameters_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_setCameraParameters_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_setRectificationParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getCameraParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_relocalizeProcessRequest_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_relocalizeProcessRequest_grpc1_;
    const ::grpc::internal::RpcMethod rpcmethod_get3DTransformRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_getMappingDataRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_getLastPose_;
    const ::grpc::internal::RpcMethod rpcmethod_createMap_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteMap_;
    const ::grpc::internal::RpcMethod rpcmethod_getAllMapsUUID_;
    const ::grpc::internal::RpcMethod rpcmethod_getClientMapUUID_;
    const ::grpc::internal::RpcMethod rpcmethod_getMapRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_setMapRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_getPointCloudRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_requestForMapProcessing_;
    const ::grpc::internal::RpcMethod rpcmethod_getStatusForMapProcessing_;
    const ::grpc::internal::RpcMethod rpcmethod_getDataForMapProcessing_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status registerClient(::grpc::ServerContext* context, const ::grpcIFrontEnd::registerClientRequest* request, ::grpcIFrontEnd::registerClientResponse* response);
    virtual ::grpc::Status unregisterClient(::grpc::ServerContext* context, const ::grpcIFrontEnd::unregisterClientRequest* request, ::grpcIFrontEnd::unregisterClientResponse* response);
    virtual ::grpc::Status getAllClientsUUID(::grpc::ServerContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response);
    virtual ::grpc::Status getDeviceInfo(::grpc::ServerContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpcIFrontEnd::getDeviceInfoResponse* response);
    virtual ::grpc::Status init_grpc0(::grpc::ServerContext* context, const ::grpcIFrontEnd::init_grpc0Request* request, ::grpcIFrontEnd::init_grpc0Response* response);
    virtual ::grpc::Status init_grpc1(::grpc::ServerContext* context, const ::grpcIFrontEnd::init_grpc1Request* request, ::grpcIFrontEnd::init_grpc1Response* response);
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::grpcIFrontEnd::startRequest* request, ::grpcIFrontEnd::startResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::grpcIFrontEnd::stopRequest* request, ::grpcIFrontEnd::stopResponse* response);
    virtual ::grpc::Status getProcessingMode(::grpc::ServerContext* context, const ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpcIFrontEnd::getProcessingModeResponse* response);
    virtual ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response);
    virtual ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response);
    virtual ::grpc::Status setRectificationParameters(::grpc::ServerContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpcIFrontEnd::setRectificationParametersResponse* response);
    virtual ::grpc::Status getCameraParameters(::grpc::ServerContext* context, const ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpcIFrontEnd::getCameraParametersResponse* response);
    virtual ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response);
    virtual ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response);
    virtual ::grpc::Status get3DTransformRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpcIFrontEnd::get3DTransformRequestResponse* response);
    virtual ::grpc::Status getMappingDataRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpcIFrontEnd::getMappingDataRequestResponse* response);
    virtual ::grpc::Status getLastPose(::grpc::ServerContext* context, const ::grpcIFrontEnd::getLastPoseRequest* request, ::grpcIFrontEnd::getLastPoseResponse* response);
    virtual ::grpc::Status createMap(::grpc::ServerContext* context, const ::grpcIFrontEnd::createMapRequest* request, ::grpcIFrontEnd::createMapResponse* response);
    virtual ::grpc::Status deleteMap(::grpc::ServerContext* context, const ::grpcIFrontEnd::deleteMapRequest* request, ::grpcIFrontEnd::deleteMapResponse* response);
    virtual ::grpc::Status getAllMapsUUID(::grpc::ServerContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response);
    virtual ::grpc::Status getClientMapUUID(::grpc::ServerContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest* request, ::grpcIFrontEnd::getClientMapUUIDResponse* response);
    virtual ::grpc::Status getMapRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::getMapRequestRequest* request, ::grpcIFrontEnd::getMapRequestResponse* response);
    virtual ::grpc::Status setMapRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::setMapRequestRequest* request, ::grpcIFrontEnd::setMapRequestResponse* response);
    virtual ::grpc::Status getPointCloudRequest(::grpc::ServerContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpcIFrontEnd::getPointCloudRequestResponse* response);
    virtual ::grpc::Status requestForMapProcessing(::grpc::ServerContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest* request, ::grpcIFrontEnd::requestForMapProcessingResponse* response);
    virtual ::grpc::Status getStatusForMapProcessing(::grpc::ServerContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* request, ::grpcIFrontEnd::getStatusForMapProcessingResponse* response);
    virtual ::grpc::Status getDataForMapProcessing(::grpc::ServerContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest* request, ::grpcIFrontEnd::getDataForMapProcessingResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::registerClientRequest* /*request*/, ::grpcIFrontEnd::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterClient(::grpc::ServerContext* context, ::grpcIFrontEnd::registerClientRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::registerClientResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unregisterClient() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::unregisterClientRequest* /*request*/, ::grpcIFrontEnd::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunregisterClient(::grpc::ServerContext* context, ::grpcIFrontEnd::unregisterClientRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::unregisterClientResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllClientsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllClientsUUID(::grpc::ServerContext* context, ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getAllClientsUUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDeviceInfoRequest* /*request*/, ::grpcIFrontEnd::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeviceInfo(::grpc::ServerContext* context, ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getDeviceInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_grpc0() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc0Request* /*request*/, ::grpcIFrontEnd::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc0(::grpc::ServerContext* context, ::grpcIFrontEnd::init_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::init_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_init_grpc1() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc1Request* /*request*/, ::grpcIFrontEnd::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc1(::grpc::ServerContext* context, ::grpcIFrontEnd::init_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::init_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::startRequest* /*request*/, ::grpcIFrontEnd::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpcIFrontEnd::startRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::startResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::stopRequest* /*request*/, ::grpcIFrontEnd::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpcIFrontEnd::stopRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::stopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getProcessingModeRequest* /*request*/, ::grpcIFrontEnd::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProcessingMode(::grpc::ServerContext* context, ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getProcessingModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters_grpc0(::grpc::ServerContext* context, ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::setCameraParameters_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters_grpc1(::grpc::ServerContext* context, ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::setCameraParameters_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setRectificationParametersRequest* /*request*/, ::grpcIFrontEnd::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetRectificationParameters(::grpc::ServerContext* context, ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::setRectificationParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getCameraParametersRequest* /*request*/, ::grpcIFrontEnd::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCameraParameters(::grpc::ServerContext* context, ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getCameraParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc0(::grpc::ServerContext* context, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc1(::grpc::ServerContext* context, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::get3DTransformRequestRequest* /*request*/, ::grpcIFrontEnd::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget3DTransformRequest(::grpc::ServerContext* context, ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::get3DTransformRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMappingDataRequestRequest* /*request*/, ::grpcIFrontEnd::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMappingDataRequest(::grpc::ServerContext* context, ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getMappingDataRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getLastPose() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getLastPoseRequest* /*request*/, ::grpcIFrontEnd::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLastPose(::grpc::ServerContext* context, ::grpcIFrontEnd::getLastPoseRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getLastPoseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createMap() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::createMapRequest* /*request*/, ::grpcIFrontEnd::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateMap(::grpc::ServerContext* context, ::grpcIFrontEnd::createMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::createMapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteMap() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::deleteMapRequest* /*request*/, ::grpcIFrontEnd::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteMap(::grpc::ServerContext* context, ::grpcIFrontEnd::deleteMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::deleteMapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAllMapsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAllMapsUUID() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_getAllMapsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMapsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllMapsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllMapsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllMapsUUID(::grpc::ServerContext* context, ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getAllMapsUUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getClientMapUUIDRequest* /*request*/, ::grpcIFrontEnd::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetClientMapUUID(::grpc::ServerContext* context, ::grpcIFrontEnd::getClientMapUUIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getClientMapUUIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getMapRequest() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMapRequestRequest* /*request*/, ::grpcIFrontEnd::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMapRequest(::grpc::ServerContext* context, ::grpcIFrontEnd::getMapRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getMapRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setMapRequest() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_setMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setMapRequestRequest* /*request*/, ::grpcIFrontEnd::setMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetMapRequest(::grpc::ServerContext* context, ::grpcIFrontEnd::setMapRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::setMapRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPointCloudRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPointCloudRequest() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_getPointCloudRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloudRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getPointCloudRequestRequest* /*request*/, ::grpcIFrontEnd::getPointCloudRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloudRequest(::grpc::ServerContext* context, ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getPointCloudRequestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_requestForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_requestForMapProcessing() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_requestForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::requestForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::requestForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestForMapProcessing(::grpc::ServerContext* context, ::grpcIFrontEnd::requestForMapProcessingRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::requestForMapProcessingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getStatusForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getStatusForMapProcessing() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_getStatusForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatusForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getStatusForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatusForMapProcessing(::grpc::ServerContext* context, ::grpcIFrontEnd::getStatusForMapProcessingRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getStatusForMapProcessingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDataForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDataForMapProcessing() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_getDataForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDataForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getDataForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDataForMapProcessing(::grpc::ServerContext* context, ::grpcIFrontEnd::getDataForMapProcessingRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIFrontEnd::getDataForMapProcessingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerClient<WithAsyncMethod_unregisterClient<WithAsyncMethod_getAllClientsUUID<WithAsyncMethod_getDeviceInfo<WithAsyncMethod_init_grpc0<WithAsyncMethod_init_grpc1<WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_getProcessingMode<WithAsyncMethod_setCameraParameters_grpc0<WithAsyncMethod_setCameraParameters_grpc1<WithAsyncMethod_setRectificationParameters<WithAsyncMethod_getCameraParameters<WithAsyncMethod_relocalizeProcessRequest_grpc0<WithAsyncMethod_relocalizeProcessRequest_grpc1<WithAsyncMethod_get3DTransformRequest<WithAsyncMethod_getMappingDataRequest<WithAsyncMethod_getLastPose<WithAsyncMethod_createMap<WithAsyncMethod_deleteMap<WithAsyncMethod_getAllMapsUUID<WithAsyncMethod_getClientMapUUID<WithAsyncMethod_getMapRequest<WithAsyncMethod_setMapRequest<WithAsyncMethod_getPointCloudRequest<WithAsyncMethod_requestForMapProcessing<WithAsyncMethod_getStatusForMapProcessing<WithAsyncMethod_getDataForMapProcessing<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_registerClient() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::registerClientRequest, ::grpcIFrontEnd::registerClientResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::registerClientRequest* request, ::grpcIFrontEnd::registerClientResponse* response) { return this->registerClient(context, request, response); }));}
    void SetMessageAllocatorFor_registerClient(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::registerClientRequest, ::grpcIFrontEnd::registerClientResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::registerClientRequest, ::grpcIFrontEnd::registerClientResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::registerClientRequest* /*request*/, ::grpcIFrontEnd::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::registerClientRequest* /*request*/, ::grpcIFrontEnd::registerClientResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unregisterClient() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::unregisterClientRequest, ::grpcIFrontEnd::unregisterClientResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::unregisterClientRequest* request, ::grpcIFrontEnd::unregisterClientResponse* response) { return this->unregisterClient(context, request, response); }));}
    void SetMessageAllocatorFor_unregisterClient(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::unregisterClientRequest, ::grpcIFrontEnd::unregisterClientResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::unregisterClientRequest, ::grpcIFrontEnd::unregisterClientResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::unregisterClientRequest* /*request*/, ::grpcIFrontEnd::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::unregisterClientRequest* /*request*/, ::grpcIFrontEnd::unregisterClientResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getAllClientsUUIDRequest, ::grpcIFrontEnd::getAllClientsUUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getAllClientsUUIDRequest* request, ::grpcIFrontEnd::getAllClientsUUIDResponse* response) { return this->getAllClientsUUID(context, request, response); }));}
    void SetMessageAllocatorFor_getAllClientsUUID(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getAllClientsUUIDRequest, ::grpcIFrontEnd::getAllClientsUUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getAllClientsUUIDRequest, ::grpcIFrontEnd::getAllClientsUUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllClientsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllClientsUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getAllClientsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllClientsUUIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getDeviceInfoRequest, ::grpcIFrontEnd::getDeviceInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getDeviceInfoRequest* request, ::grpcIFrontEnd::getDeviceInfoResponse* response) { return this->getDeviceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_getDeviceInfo(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getDeviceInfoRequest, ::grpcIFrontEnd::getDeviceInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getDeviceInfoRequest, ::grpcIFrontEnd::getDeviceInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDeviceInfoRequest* /*request*/, ::grpcIFrontEnd::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getDeviceInfoRequest* /*request*/, ::grpcIFrontEnd::getDeviceInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_grpc0() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::init_grpc0Request, ::grpcIFrontEnd::init_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::init_grpc0Request* request, ::grpcIFrontEnd::init_grpc0Response* response) { return this->init_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_init_grpc0(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::init_grpc0Request, ::grpcIFrontEnd::init_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::init_grpc0Request, ::grpcIFrontEnd::init_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc0Request* /*request*/, ::grpcIFrontEnd::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc0Request* /*request*/, ::grpcIFrontEnd::init_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_init_grpc1() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::init_grpc1Request, ::grpcIFrontEnd::init_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::init_grpc1Request* request, ::grpcIFrontEnd::init_grpc1Response* response) { return this->init_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_init_grpc1(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::init_grpc1Request, ::grpcIFrontEnd::init_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::init_grpc1Request, ::grpcIFrontEnd::init_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc1Request* /*request*/, ::grpcIFrontEnd::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc1Request* /*request*/, ::grpcIFrontEnd::init_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_start() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::startRequest, ::grpcIFrontEnd::startResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::startRequest* request, ::grpcIFrontEnd::startResponse* response) { return this->start(context, request, response); }));}
    void SetMessageAllocatorFor_start(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::startRequest, ::grpcIFrontEnd::startResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::startRequest, ::grpcIFrontEnd::startResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::startRequest* /*request*/, ::grpcIFrontEnd::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::startRequest* /*request*/, ::grpcIFrontEnd::startResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_stop() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::stopRequest, ::grpcIFrontEnd::stopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::stopRequest* request, ::grpcIFrontEnd::stopResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::stopRequest, ::grpcIFrontEnd::stopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::stopRequest, ::grpcIFrontEnd::stopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::stopRequest* /*request*/, ::grpcIFrontEnd::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::stopRequest* /*request*/, ::grpcIFrontEnd::stopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getProcessingModeRequest, ::grpcIFrontEnd::getProcessingModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getProcessingModeRequest* request, ::grpcIFrontEnd::getProcessingModeResponse* response) { return this->getProcessingMode(context, request, response); }));}
    void SetMessageAllocatorFor_getProcessingMode(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getProcessingModeRequest, ::grpcIFrontEnd::getProcessingModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getProcessingModeRequest, ::grpcIFrontEnd::getProcessingModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getProcessingModeRequest* /*request*/, ::grpcIFrontEnd::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProcessingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getProcessingModeRequest* /*request*/, ::grpcIFrontEnd::getProcessingModeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::setCameraParameters_grpc0Request, ::grpcIFrontEnd::setCameraParameters_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* request, ::grpcIFrontEnd::setCameraParameters_grpc0Response* response) { return this->setCameraParameters_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_setCameraParameters_grpc0(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::setCameraParameters_grpc0Request, ::grpcIFrontEnd::setCameraParameters_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::setCameraParameters_grpc0Request, ::grpcIFrontEnd::setCameraParameters_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::setCameraParameters_grpc1Request, ::grpcIFrontEnd::setCameraParameters_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* request, ::grpcIFrontEnd::setCameraParameters_grpc1Response* response) { return this->setCameraParameters_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_setCameraParameters_grpc1(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::setCameraParameters_grpc1Request, ::grpcIFrontEnd::setCameraParameters_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::setCameraParameters_grpc1Request, ::grpcIFrontEnd::setCameraParameters_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::setRectificationParametersRequest, ::grpcIFrontEnd::setRectificationParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::setRectificationParametersRequest* request, ::grpcIFrontEnd::setRectificationParametersResponse* response) { return this->setRectificationParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setRectificationParameters(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::setRectificationParametersRequest, ::grpcIFrontEnd::setRectificationParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::setRectificationParametersRequest, ::grpcIFrontEnd::setRectificationParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setRectificationParametersRequest* /*request*/, ::grpcIFrontEnd::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setRectificationParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::setRectificationParametersRequest* /*request*/, ::grpcIFrontEnd::setRectificationParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getCameraParametersRequest, ::grpcIFrontEnd::getCameraParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getCameraParametersRequest* request, ::grpcIFrontEnd::getCameraParametersResponse* response) { return this->getCameraParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getCameraParameters(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getCameraParametersRequest, ::grpcIFrontEnd::getCameraParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getCameraParametersRequest, ::grpcIFrontEnd::getCameraParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getCameraParametersRequest* /*request*/, ::grpcIFrontEnd::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getCameraParametersRequest* /*request*/, ::grpcIFrontEnd::getCameraParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* response) { return this->relocalizeProcessRequest_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_relocalizeProcessRequest_grpc0(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* response) { return this->relocalizeProcessRequest_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_relocalizeProcessRequest_grpc1(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::get3DTransformRequestRequest, ::grpcIFrontEnd::get3DTransformRequestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::get3DTransformRequestRequest* request, ::grpcIFrontEnd::get3DTransformRequestResponse* response) { return this->get3DTransformRequest(context, request, response); }));}
    void SetMessageAllocatorFor_get3DTransformRequest(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::get3DTransformRequestRequest, ::grpcIFrontEnd::get3DTransformRequestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::get3DTransformRequestRequest, ::grpcIFrontEnd::get3DTransformRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::get3DTransformRequestRequest* /*request*/, ::grpcIFrontEnd::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get3DTransformRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::get3DTransformRequestRequest* /*request*/, ::grpcIFrontEnd::get3DTransformRequestResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getMappingDataRequestRequest, ::grpcIFrontEnd::getMappingDataRequestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getMappingDataRequestRequest* request, ::grpcIFrontEnd::getMappingDataRequestResponse* response) { return this->getMappingDataRequest(context, request, response); }));}
    void SetMessageAllocatorFor_getMappingDataRequest(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getMappingDataRequestRequest, ::grpcIFrontEnd::getMappingDataRequestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getMappingDataRequestRequest, ::grpcIFrontEnd::getMappingDataRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMappingDataRequestRequest* /*request*/, ::grpcIFrontEnd::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMappingDataRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getMappingDataRequestRequest* /*request*/, ::grpcIFrontEnd::getMappingDataRequestResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getLastPose() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getLastPoseRequest, ::grpcIFrontEnd::getLastPoseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getLastPoseRequest* request, ::grpcIFrontEnd::getLastPoseResponse* response) { return this->getLastPose(context, request, response); }));}
    void SetMessageAllocatorFor_getLastPose(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getLastPoseRequest, ::grpcIFrontEnd::getLastPoseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getLastPoseRequest, ::grpcIFrontEnd::getLastPoseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getLastPoseRequest* /*request*/, ::grpcIFrontEnd::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLastPose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getLastPoseRequest* /*request*/, ::grpcIFrontEnd::getLastPoseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createMap() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::createMapRequest, ::grpcIFrontEnd::createMapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::createMapRequest* request, ::grpcIFrontEnd::createMapResponse* response) { return this->createMap(context, request, response); }));}
    void SetMessageAllocatorFor_createMap(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::createMapRequest, ::grpcIFrontEnd::createMapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::createMapRequest, ::grpcIFrontEnd::createMapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::createMapRequest* /*request*/, ::grpcIFrontEnd::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::createMapRequest* /*request*/, ::grpcIFrontEnd::createMapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteMap() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::deleteMapRequest, ::grpcIFrontEnd::deleteMapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::deleteMapRequest* request, ::grpcIFrontEnd::deleteMapResponse* response) { return this->deleteMap(context, request, response); }));}
    void SetMessageAllocatorFor_deleteMap(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::deleteMapRequest, ::grpcIFrontEnd::deleteMapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::deleteMapRequest, ::grpcIFrontEnd::deleteMapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::deleteMapRequest* /*request*/, ::grpcIFrontEnd::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::deleteMapRequest* /*request*/, ::grpcIFrontEnd::deleteMapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAllMapsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAllMapsUUID() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getAllMapsUUIDRequest, ::grpcIFrontEnd::getAllMapsUUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getAllMapsUUIDRequest* request, ::grpcIFrontEnd::getAllMapsUUIDResponse* response) { return this->getAllMapsUUID(context, request, response); }));}
    void SetMessageAllocatorFor_getAllMapsUUID(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getAllMapsUUIDRequest, ::grpcIFrontEnd::getAllMapsUUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getAllMapsUUIDRequest, ::grpcIFrontEnd::getAllMapsUUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getAllMapsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMapsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllMapsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllMapsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllMapsUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getAllMapsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllMapsUUIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getClientMapUUIDRequest, ::grpcIFrontEnd::getClientMapUUIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getClientMapUUIDRequest* request, ::grpcIFrontEnd::getClientMapUUIDResponse* response) { return this->getClientMapUUID(context, request, response); }));}
    void SetMessageAllocatorFor_getClientMapUUID(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getClientMapUUIDRequest, ::grpcIFrontEnd::getClientMapUUIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getClientMapUUIDRequest, ::grpcIFrontEnd::getClientMapUUIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getClientMapUUIDRequest* /*request*/, ::grpcIFrontEnd::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getClientMapUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getClientMapUUIDRequest* /*request*/, ::grpcIFrontEnd::getClientMapUUIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getMapRequest() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getMapRequestRequest, ::grpcIFrontEnd::getMapRequestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getMapRequestRequest* request, ::grpcIFrontEnd::getMapRequestResponse* response) { return this->getMapRequest(context, request, response); }));}
    void SetMessageAllocatorFor_getMapRequest(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getMapRequestRequest, ::grpcIFrontEnd::getMapRequestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getMapRequestRequest, ::grpcIFrontEnd::getMapRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMapRequestRequest* /*request*/, ::grpcIFrontEnd::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMapRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getMapRequestRequest* /*request*/, ::grpcIFrontEnd::getMapRequestResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_setMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setMapRequest() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::setMapRequestRequest, ::grpcIFrontEnd::setMapRequestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::setMapRequestRequest* request, ::grpcIFrontEnd::setMapRequestResponse* response) { return this->setMapRequest(context, request, response); }));}
    void SetMessageAllocatorFor_setMapRequest(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::setMapRequestRequest, ::grpcIFrontEnd::setMapRequestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::setMapRequestRequest, ::grpcIFrontEnd::setMapRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setMapRequestRequest* /*request*/, ::grpcIFrontEnd::setMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setMapRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::setMapRequestRequest* /*request*/, ::grpcIFrontEnd::setMapRequestResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPointCloudRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPointCloudRequest() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getPointCloudRequestRequest, ::grpcIFrontEnd::getPointCloudRequestResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getPointCloudRequestRequest* request, ::grpcIFrontEnd::getPointCloudRequestResponse* response) { return this->getPointCloudRequest(context, request, response); }));}
    void SetMessageAllocatorFor_getPointCloudRequest(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getPointCloudRequestRequest, ::grpcIFrontEnd::getPointCloudRequestResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getPointCloudRequestRequest, ::grpcIFrontEnd::getPointCloudRequestResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPointCloudRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloudRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getPointCloudRequestRequest* /*request*/, ::grpcIFrontEnd::getPointCloudRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPointCloudRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getPointCloudRequestRequest* /*request*/, ::grpcIFrontEnd::getPointCloudRequestResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_requestForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_requestForMapProcessing() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::requestForMapProcessingRequest, ::grpcIFrontEnd::requestForMapProcessingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::requestForMapProcessingRequest* request, ::grpcIFrontEnd::requestForMapProcessingResponse* response) { return this->requestForMapProcessing(context, request, response); }));}
    void SetMessageAllocatorFor_requestForMapProcessing(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::requestForMapProcessingRequest, ::grpcIFrontEnd::requestForMapProcessingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::requestForMapProcessingRequest, ::grpcIFrontEnd::requestForMapProcessingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_requestForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::requestForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::requestForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* requestForMapProcessing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::requestForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::requestForMapProcessingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getStatusForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getStatusForMapProcessing() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getStatusForMapProcessingRequest, ::grpcIFrontEnd::getStatusForMapProcessingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* request, ::grpcIFrontEnd::getStatusForMapProcessingResponse* response) { return this->getStatusForMapProcessing(context, request, response); }));}
    void SetMessageAllocatorFor_getStatusForMapProcessing(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getStatusForMapProcessingRequest, ::grpcIFrontEnd::getStatusForMapProcessingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getStatusForMapProcessingRequest, ::grpcIFrontEnd::getStatusForMapProcessingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getStatusForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatusForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getStatusForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStatusForMapProcessing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getStatusForMapProcessingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getDataForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getDataForMapProcessing() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getDataForMapProcessingRequest, ::grpcIFrontEnd::getDataForMapProcessingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIFrontEnd::getDataForMapProcessingRequest* request, ::grpcIFrontEnd::getDataForMapProcessingResponse* response) { return this->getDataForMapProcessing(context, request, response); }));}
    void SetMessageAllocatorFor_getDataForMapProcessing(
        ::grpc::MessageAllocator< ::grpcIFrontEnd::getDataForMapProcessingRequest, ::grpcIFrontEnd::getDataForMapProcessingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIFrontEnd::getDataForMapProcessingRequest, ::grpcIFrontEnd::getDataForMapProcessingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getDataForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDataForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getDataForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDataForMapProcessing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIFrontEnd::getDataForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getDataForMapProcessingResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_registerClient<WithCallbackMethod_unregisterClient<WithCallbackMethod_getAllClientsUUID<WithCallbackMethod_getDeviceInfo<WithCallbackMethod_init_grpc0<WithCallbackMethod_init_grpc1<WithCallbackMethod_start<WithCallbackMethod_stop<WithCallbackMethod_getProcessingMode<WithCallbackMethod_setCameraParameters_grpc0<WithCallbackMethod_setCameraParameters_grpc1<WithCallbackMethod_setRectificationParameters<WithCallbackMethod_getCameraParameters<WithCallbackMethod_relocalizeProcessRequest_grpc0<WithCallbackMethod_relocalizeProcessRequest_grpc1<WithCallbackMethod_get3DTransformRequest<WithCallbackMethod_getMappingDataRequest<WithCallbackMethod_getLastPose<WithCallbackMethod_createMap<WithCallbackMethod_deleteMap<WithCallbackMethod_getAllMapsUUID<WithCallbackMethod_getClientMapUUID<WithCallbackMethod_getMapRequest<WithCallbackMethod_setMapRequest<WithCallbackMethod_getPointCloudRequest<WithCallbackMethod_requestForMapProcessing<WithCallbackMethod_getStatusForMapProcessing<WithCallbackMethod_getDataForMapProcessing<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::registerClientRequest* /*request*/, ::grpcIFrontEnd::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unregisterClient() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::unregisterClientRequest* /*request*/, ::grpcIFrontEnd::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllClientsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDeviceInfoRequest* /*request*/, ::grpcIFrontEnd::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_grpc0() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc0Request* /*request*/, ::grpcIFrontEnd::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_init_grpc1() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc1Request* /*request*/, ::grpcIFrontEnd::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::startRequest* /*request*/, ::grpcIFrontEnd::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::stopRequest* /*request*/, ::grpcIFrontEnd::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getProcessingModeRequest* /*request*/, ::grpcIFrontEnd::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setRectificationParametersRequest* /*request*/, ::grpcIFrontEnd::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getCameraParametersRequest* /*request*/, ::grpcIFrontEnd::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::get3DTransformRequestRequest* /*request*/, ::grpcIFrontEnd::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMappingDataRequestRequest* /*request*/, ::grpcIFrontEnd::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getLastPose() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getLastPoseRequest* /*request*/, ::grpcIFrontEnd::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createMap() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::createMapRequest* /*request*/, ::grpcIFrontEnd::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteMap() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::deleteMapRequest* /*request*/, ::grpcIFrontEnd::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAllMapsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAllMapsUUID() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_getAllMapsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMapsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllMapsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllMapsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getClientMapUUIDRequest* /*request*/, ::grpcIFrontEnd::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getMapRequest() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMapRequestRequest* /*request*/, ::grpcIFrontEnd::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setMapRequest() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_setMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setMapRequestRequest* /*request*/, ::grpcIFrontEnd::setMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPointCloudRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPointCloudRequest() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_getPointCloudRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloudRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getPointCloudRequestRequest* /*request*/, ::grpcIFrontEnd::getPointCloudRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_requestForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_requestForMapProcessing() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_requestForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::requestForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::requestForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getStatusForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getStatusForMapProcessing() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_getStatusForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatusForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getStatusForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDataForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDataForMapProcessing() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_getDataForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDataForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getDataForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerClient() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::registerClientRequest* /*request*/, ::grpcIFrontEnd::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unregisterClient() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::unregisterClientRequest* /*request*/, ::grpcIFrontEnd::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunregisterClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllClientsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllClientsUUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDeviceInfoRequest* /*request*/, ::grpcIFrontEnd::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDeviceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_grpc0() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc0Request* /*request*/, ::grpcIFrontEnd::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_init_grpc1() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc1Request* /*request*/, ::grpcIFrontEnd::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestinit_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::startRequest* /*request*/, ::grpcIFrontEnd::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::stopRequest* /*request*/, ::grpcIFrontEnd::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getProcessingModeRequest* /*request*/, ::grpcIFrontEnd::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetProcessingMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setRectificationParametersRequest* /*request*/, ::grpcIFrontEnd::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetRectificationParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getCameraParametersRequest* /*request*/, ::grpcIFrontEnd::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetCameraParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrelocalizeProcessRequest_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::get3DTransformRequestRequest* /*request*/, ::grpcIFrontEnd::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestget3DTransformRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMappingDataRequestRequest* /*request*/, ::grpcIFrontEnd::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMappingDataRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getLastPose() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getLastPoseRequest* /*request*/, ::grpcIFrontEnd::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetLastPose(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createMap() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::createMapRequest* /*request*/, ::grpcIFrontEnd::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteMap() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::deleteMapRequest* /*request*/, ::grpcIFrontEnd::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAllMapsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAllMapsUUID() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_getAllMapsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMapsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllMapsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllMapsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAllMapsUUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getClientMapUUIDRequest* /*request*/, ::grpcIFrontEnd::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetClientMapUUID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getMapRequest() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMapRequestRequest* /*request*/, ::grpcIFrontEnd::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetMapRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setMapRequest() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_setMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setMapRequestRequest* /*request*/, ::grpcIFrontEnd::setMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetMapRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPointCloudRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPointCloudRequest() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_getPointCloudRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloudRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getPointCloudRequestRequest* /*request*/, ::grpcIFrontEnd::getPointCloudRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloudRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_requestForMapProcessing() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_requestForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::requestForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::requestForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestForMapProcessing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getStatusForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getStatusForMapProcessing() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_getStatusForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatusForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getStatusForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetStatusForMapProcessing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDataForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDataForMapProcessing() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_getDataForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDataForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getDataForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDataForMapProcessing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_registerClient() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::registerClientRequest* /*request*/, ::grpcIFrontEnd::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unregisterClient() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unregisterClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::unregisterClientRequest* /*request*/, ::grpcIFrontEnd::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unregisterClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllClientsUUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllClientsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllClientsUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDeviceInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDeviceInfoRequest* /*request*/, ::grpcIFrontEnd::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc0Request* /*request*/, ::grpcIFrontEnd::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_init_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->init_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc1Request* /*request*/, ::grpcIFrontEnd::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* init_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_start() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start(context, request, response); }));
    }
    ~WithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::startRequest* /*request*/, ::grpcIFrontEnd::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_stop() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::stopRequest* /*request*/, ::grpcIFrontEnd::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getProcessingMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getProcessingModeRequest* /*request*/, ::grpcIFrontEnd::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getProcessingMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setCameraParameters_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setCameraParameters_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setRectificationParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setRectificationParametersRequest* /*request*/, ::grpcIFrontEnd::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setRectificationParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getCameraParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getCameraParametersRequest* /*request*/, ::grpcIFrontEnd::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->relocalizeProcessRequest_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->relocalizeProcessRequest_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* relocalizeProcessRequest_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->get3DTransformRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::get3DTransformRequestRequest* /*request*/, ::grpcIFrontEnd::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* get3DTransformRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMappingDataRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMappingDataRequestRequest* /*request*/, ::grpcIFrontEnd::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMappingDataRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getLastPose() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getLastPose(context, request, response); }));
    }
    ~WithRawCallbackMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getLastPoseRequest* /*request*/, ::grpcIFrontEnd::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getLastPose(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createMap() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::createMapRequest* /*request*/, ::grpcIFrontEnd::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteMap() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::deleteMapRequest* /*request*/, ::grpcIFrontEnd::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAllMapsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAllMapsUUID() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getAllMapsUUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_getAllMapsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAllMapsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllMapsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllMapsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getAllMapsUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getClientMapUUID(context, request, response); }));
    }
    ~WithRawCallbackMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getClientMapUUIDRequest* /*request*/, ::grpcIFrontEnd::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getClientMapUUID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getMapRequest() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getMapRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMapRequestRequest* /*request*/, ::grpcIFrontEnd::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getMapRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setMapRequest() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setMapRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_setMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setMapRequestRequest* /*request*/, ::grpcIFrontEnd::setMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setMapRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPointCloudRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPointCloudRequest() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPointCloudRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPointCloudRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloudRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getPointCloudRequestRequest* /*request*/, ::grpcIFrontEnd::getPointCloudRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPointCloudRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_requestForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_requestForMapProcessing() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->requestForMapProcessing(context, request, response); }));
    }
    ~WithRawCallbackMethod_requestForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::requestForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::requestForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* requestForMapProcessing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getStatusForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getStatusForMapProcessing() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getStatusForMapProcessing(context, request, response); }));
    }
    ~WithRawCallbackMethod_getStatusForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getStatusForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getStatusForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getStatusForMapProcessing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getDataForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getDataForMapProcessing() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDataForMapProcessing(context, request, response); }));
    }
    ~WithRawCallbackMethod_getDataForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDataForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getDataForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getDataForMapProcessing(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerClient() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::registerClientRequest, ::grpcIFrontEnd::registerClientResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::registerClientRequest, ::grpcIFrontEnd::registerClientResponse>* streamer) {
                       return this->StreamedregisterClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::registerClientRequest* /*request*/, ::grpcIFrontEnd::registerClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::registerClientRequest,::grpcIFrontEnd::registerClientResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unregisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unregisterClient() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::unregisterClientRequest, ::grpcIFrontEnd::unregisterClientResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::unregisterClientRequest, ::grpcIFrontEnd::unregisterClientResponse>* streamer) {
                       return this->StreamedunregisterClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unregisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unregisterClient(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::unregisterClientRequest* /*request*/, ::grpcIFrontEnd::unregisterClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunregisterClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::unregisterClientRequest,::grpcIFrontEnd::unregisterClientResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllClientsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllClientsUUID() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getAllClientsUUIDRequest, ::grpcIFrontEnd::getAllClientsUUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getAllClientsUUIDRequest, ::grpcIFrontEnd::getAllClientsUUIDResponse>* streamer) {
                       return this->StreamedgetAllClientsUUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllClientsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllClientsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllClientsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllClientsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllClientsUUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getAllClientsUUIDRequest,::grpcIFrontEnd::getAllClientsUUIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDeviceInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getDeviceInfoRequest, ::grpcIFrontEnd::getDeviceInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getDeviceInfoRequest, ::grpcIFrontEnd::getDeviceInfoResponse>* streamer) {
                       return this->StreamedgetDeviceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDeviceInfo(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDeviceInfoRequest* /*request*/, ::grpcIFrontEnd::getDeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDeviceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getDeviceInfoRequest,::grpcIFrontEnd::getDeviceInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_grpc0() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::init_grpc0Request, ::grpcIFrontEnd::init_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::init_grpc0Request, ::grpcIFrontEnd::init_grpc0Response>* streamer) {
                       return this->Streamedinit_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc0Request* /*request*/, ::grpcIFrontEnd::init_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::init_grpc0Request,::grpcIFrontEnd::init_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_init_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_init_grpc1() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::init_grpc1Request, ::grpcIFrontEnd::init_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::init_grpc1Request, ::grpcIFrontEnd::init_grpc1Response>* streamer) {
                       return this->Streamedinit_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_init_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status init_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::init_grpc1Request* /*request*/, ::grpcIFrontEnd::init_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedinit_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::init_grpc1Request,::grpcIFrontEnd::init_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::startRequest, ::grpcIFrontEnd::startResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::startRequest, ::grpcIFrontEnd::startResponse>* streamer) {
                       return this->Streamedstart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::startRequest* /*request*/, ::grpcIFrontEnd::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::startRequest,::grpcIFrontEnd::startResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::stopRequest, ::grpcIFrontEnd::stopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::stopRequest, ::grpcIFrontEnd::stopResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::stopRequest* /*request*/, ::grpcIFrontEnd::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::stopRequest,::grpcIFrontEnd::stopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getProcessingMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getProcessingMode() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getProcessingModeRequest, ::grpcIFrontEnd::getProcessingModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getProcessingModeRequest, ::grpcIFrontEnd::getProcessingModeResponse>* streamer) {
                       return this->StreamedgetProcessingMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getProcessingMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getProcessingMode(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getProcessingModeRequest* /*request*/, ::grpcIFrontEnd::getProcessingModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetProcessingMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getProcessingModeRequest,::grpcIFrontEnd::getProcessingModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setCameraParameters_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setCameraParameters_grpc0() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::setCameraParameters_grpc0Request, ::grpcIFrontEnd::setCameraParameters_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::setCameraParameters_grpc0Request, ::grpcIFrontEnd::setCameraParameters_grpc0Response>* streamer) {
                       return this->StreamedsetCameraParameters_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setCameraParameters_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setCameraParameters_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc0Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetCameraParameters_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::setCameraParameters_grpc0Request,::grpcIFrontEnd::setCameraParameters_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setCameraParameters_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setCameraParameters_grpc1() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::setCameraParameters_grpc1Request, ::grpcIFrontEnd::setCameraParameters_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::setCameraParameters_grpc1Request, ::grpcIFrontEnd::setCameraParameters_grpc1Response>* streamer) {
                       return this->StreamedsetCameraParameters_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setCameraParameters_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setCameraParameters_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setCameraParameters_grpc1Request* /*request*/, ::grpcIFrontEnd::setCameraParameters_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetCameraParameters_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::setCameraParameters_grpc1Request,::grpcIFrontEnd::setCameraParameters_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setRectificationParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setRectificationParameters() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::setRectificationParametersRequest, ::grpcIFrontEnd::setRectificationParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::setRectificationParametersRequest, ::grpcIFrontEnd::setRectificationParametersResponse>* streamer) {
                       return this->StreamedsetRectificationParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setRectificationParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setRectificationParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setRectificationParametersRequest* /*request*/, ::grpcIFrontEnd::setRectificationParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetRectificationParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::setRectificationParametersRequest,::grpcIFrontEnd::setRectificationParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getCameraParameters() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getCameraParametersRequest, ::grpcIFrontEnd::getCameraParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getCameraParametersRequest, ::grpcIFrontEnd::getCameraParametersResponse>* streamer) {
                       return this->StreamedgetCameraParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getCameraParametersRequest* /*request*/, ::grpcIFrontEnd::getCameraParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetCameraParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getCameraParametersRequest,::grpcIFrontEnd::getCameraParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* streamer) {
                       return this->StreamedrelocalizeProcessRequest_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status relocalizeProcessRequest_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrelocalizeProcessRequest_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::relocalizeProcessRequest_grpc0Request,::grpcIFrontEnd::relocalizeProcessRequest_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* streamer) {
                       return this->StreamedrelocalizeProcessRequest_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status relocalizeProcessRequest_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request* /*request*/, ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrelocalizeProcessRequest_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::relocalizeProcessRequest_grpc1Request,::grpcIFrontEnd::relocalizeProcessRequest_grpc1Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_get3DTransformRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_get3DTransformRequest() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::get3DTransformRequestRequest, ::grpcIFrontEnd::get3DTransformRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::get3DTransformRequestRequest, ::grpcIFrontEnd::get3DTransformRequestResponse>* streamer) {
                       return this->Streamedget3DTransformRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_get3DTransformRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status get3DTransformRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::get3DTransformRequestRequest* /*request*/, ::grpcIFrontEnd::get3DTransformRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedget3DTransformRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::get3DTransformRequestRequest,::grpcIFrontEnd::get3DTransformRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMappingDataRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMappingDataRequest() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getMappingDataRequestRequest, ::grpcIFrontEnd::getMappingDataRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getMappingDataRequestRequest, ::grpcIFrontEnd::getMappingDataRequestResponse>* streamer) {
                       return this->StreamedgetMappingDataRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMappingDataRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMappingDataRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMappingDataRequestRequest* /*request*/, ::grpcIFrontEnd::getMappingDataRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMappingDataRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getMappingDataRequestRequest,::grpcIFrontEnd::getMappingDataRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getLastPose : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getLastPose() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getLastPoseRequest, ::grpcIFrontEnd::getLastPoseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getLastPoseRequest, ::grpcIFrontEnd::getLastPoseResponse>* streamer) {
                       return this->StreamedgetLastPose(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getLastPose() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getLastPose(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getLastPoseRequest* /*request*/, ::grpcIFrontEnd::getLastPoseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetLastPose(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getLastPoseRequest,::grpcIFrontEnd::getLastPoseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createMap() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::createMapRequest, ::grpcIFrontEnd::createMapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::createMapRequest, ::grpcIFrontEnd::createMapResponse>* streamer) {
                       return this->StreamedcreateMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::createMapRequest* /*request*/, ::grpcIFrontEnd::createMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::createMapRequest,::grpcIFrontEnd::createMapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteMap() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::deleteMapRequest, ::grpcIFrontEnd::deleteMapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::deleteMapRequest, ::grpcIFrontEnd::deleteMapResponse>* streamer) {
                       return this->StreameddeleteMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteMap(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::deleteMapRequest* /*request*/, ::grpcIFrontEnd::deleteMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::deleteMapRequest,::grpcIFrontEnd::deleteMapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getAllMapsUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getAllMapsUUID() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getAllMapsUUIDRequest, ::grpcIFrontEnd::getAllMapsUUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getAllMapsUUIDRequest, ::grpcIFrontEnd::getAllMapsUUIDResponse>* streamer) {
                       return this->StreamedgetAllMapsUUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getAllMapsUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAllMapsUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getAllMapsUUIDRequest* /*request*/, ::grpcIFrontEnd::getAllMapsUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetAllMapsUUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getAllMapsUUIDRequest,::grpcIFrontEnd::getAllMapsUUIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getClientMapUUID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getClientMapUUID() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getClientMapUUIDRequest, ::grpcIFrontEnd::getClientMapUUIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getClientMapUUIDRequest, ::grpcIFrontEnd::getClientMapUUIDResponse>* streamer) {
                       return this->StreamedgetClientMapUUID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getClientMapUUID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getClientMapUUID(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getClientMapUUIDRequest* /*request*/, ::grpcIFrontEnd::getClientMapUUIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetClientMapUUID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getClientMapUUIDRequest,::grpcIFrontEnd::getClientMapUUIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getMapRequest() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getMapRequestRequest, ::grpcIFrontEnd::getMapRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getMapRequestRequest, ::grpcIFrontEnd::getMapRequestResponse>* streamer) {
                       return this->StreamedgetMapRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getMapRequestRequest* /*request*/, ::grpcIFrontEnd::getMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetMapRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getMapRequestRequest,::grpcIFrontEnd::getMapRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setMapRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setMapRequest() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::setMapRequestRequest, ::grpcIFrontEnd::setMapRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::setMapRequestRequest, ::grpcIFrontEnd::setMapRequestResponse>* streamer) {
                       return this->StreamedsetMapRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setMapRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setMapRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::setMapRequestRequest* /*request*/, ::grpcIFrontEnd::setMapRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetMapRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::setMapRequestRequest,::grpcIFrontEnd::setMapRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPointCloudRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPointCloudRequest() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getPointCloudRequestRequest, ::grpcIFrontEnd::getPointCloudRequestResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getPointCloudRequestRequest, ::grpcIFrontEnd::getPointCloudRequestResponse>* streamer) {
                       return this->StreamedgetPointCloudRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPointCloudRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPointCloudRequest(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getPointCloudRequestRequest* /*request*/, ::grpcIFrontEnd::getPointCloudRequestResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPointCloudRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getPointCloudRequestRequest,::grpcIFrontEnd::getPointCloudRequestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_requestForMapProcessing() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::requestForMapProcessingRequest, ::grpcIFrontEnd::requestForMapProcessingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::requestForMapProcessingRequest, ::grpcIFrontEnd::requestForMapProcessingResponse>* streamer) {
                       return this->StreamedrequestForMapProcessing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_requestForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::requestForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::requestForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestForMapProcessing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::requestForMapProcessingRequest,::grpcIFrontEnd::requestForMapProcessingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getStatusForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getStatusForMapProcessing() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getStatusForMapProcessingRequest, ::grpcIFrontEnd::getStatusForMapProcessingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getStatusForMapProcessingRequest, ::grpcIFrontEnd::getStatusForMapProcessingResponse>* streamer) {
                       return this->StreamedgetStatusForMapProcessing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getStatusForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getStatusForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getStatusForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getStatusForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetStatusForMapProcessing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getStatusForMapProcessingRequest,::grpcIFrontEnd::getStatusForMapProcessingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDataForMapProcessing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDataForMapProcessing() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIFrontEnd::getDataForMapProcessingRequest, ::grpcIFrontEnd::getDataForMapProcessingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIFrontEnd::getDataForMapProcessingRequest, ::grpcIFrontEnd::getDataForMapProcessingResponse>* streamer) {
                       return this->StreamedgetDataForMapProcessing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDataForMapProcessing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDataForMapProcessing(::grpc::ServerContext* /*context*/, const ::grpcIFrontEnd::getDataForMapProcessingRequest* /*request*/, ::grpcIFrontEnd::getDataForMapProcessingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDataForMapProcessing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIFrontEnd::getDataForMapProcessingRequest,::grpcIFrontEnd::getDataForMapProcessingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerClient<WithStreamedUnaryMethod_unregisterClient<WithStreamedUnaryMethod_getAllClientsUUID<WithStreamedUnaryMethod_getDeviceInfo<WithStreamedUnaryMethod_init_grpc0<WithStreamedUnaryMethod_init_grpc1<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getProcessingMode<WithStreamedUnaryMethod_setCameraParameters_grpc0<WithStreamedUnaryMethod_setCameraParameters_grpc1<WithStreamedUnaryMethod_setRectificationParameters<WithStreamedUnaryMethod_getCameraParameters<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1<WithStreamedUnaryMethod_get3DTransformRequest<WithStreamedUnaryMethod_getMappingDataRequest<WithStreamedUnaryMethod_getLastPose<WithStreamedUnaryMethod_createMap<WithStreamedUnaryMethod_deleteMap<WithStreamedUnaryMethod_getAllMapsUUID<WithStreamedUnaryMethod_getClientMapUUID<WithStreamedUnaryMethod_getMapRequest<WithStreamedUnaryMethod_setMapRequest<WithStreamedUnaryMethod_getPointCloudRequest<WithStreamedUnaryMethod_requestForMapProcessing<WithStreamedUnaryMethod_getStatusForMapProcessing<WithStreamedUnaryMethod_getDataForMapProcessing<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerClient<WithStreamedUnaryMethod_unregisterClient<WithStreamedUnaryMethod_getAllClientsUUID<WithStreamedUnaryMethod_getDeviceInfo<WithStreamedUnaryMethod_init_grpc0<WithStreamedUnaryMethod_init_grpc1<WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getProcessingMode<WithStreamedUnaryMethod_setCameraParameters_grpc0<WithStreamedUnaryMethod_setCameraParameters_grpc1<WithStreamedUnaryMethod_setRectificationParameters<WithStreamedUnaryMethod_getCameraParameters<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc0<WithStreamedUnaryMethod_relocalizeProcessRequest_grpc1<WithStreamedUnaryMethod_get3DTransformRequest<WithStreamedUnaryMethod_getMappingDataRequest<WithStreamedUnaryMethod_getLastPose<WithStreamedUnaryMethod_createMap<WithStreamedUnaryMethod_deleteMap<WithStreamedUnaryMethod_getAllMapsUUID<WithStreamedUnaryMethod_getClientMapUUID<WithStreamedUnaryMethod_getMapRequest<WithStreamedUnaryMethod_setMapRequest<WithStreamedUnaryMethod_getPointCloudRequest<WithStreamedUnaryMethod_requestForMapProcessing<WithStreamedUnaryMethod_getStatusForMapProcessing<WithStreamedUnaryMethod_getDataForMapProcessing<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace grpcIFrontEnd


#endif  // GRPC_grpcIFrontEndService_2eproto__INCLUDED
