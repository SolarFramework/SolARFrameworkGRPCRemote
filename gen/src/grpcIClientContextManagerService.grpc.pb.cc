// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIClientContextManagerService.proto

#include "grpcIClientContextManagerService.pb.h"
#include "grpcIClientContextManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIClientContextManager {

static const char* grpcIClientContextManagerService_method_names[] = {
  "/grpcIClientContextManager.grpcIClientContextManagerService/registerClient",
  "/grpcIClientContextManager.grpcIClientContextManagerService/unregisterClient",
  "/grpcIClientContextManager.grpcIClientContextManagerService/getAllClientsUUID",
  "/grpcIClientContextManager.grpcIClientContextManagerService/getDeviceInfo",
  "/grpcIClientContextManager.grpcIClientContextManagerService/init_grpc0",
  "/grpcIClientContextManager.grpcIClientContextManagerService/init_grpc1",
  "/grpcIClientContextManager.grpcIClientContextManagerService/start",
  "/grpcIClientContextManager.grpcIClientContextManagerService/stop",
  "/grpcIClientContextManager.grpcIClientContextManagerService/getProcessingMode",
  "/grpcIClientContextManager.grpcIClientContextManagerService/setCameraParameters_grpc0",
  "/grpcIClientContextManager.grpcIClientContextManagerService/setCameraParameters_grpc1",
  "/grpcIClientContextManager.grpcIClientContextManagerService/setRectificationParameters",
  "/grpcIClientContextManager.grpcIClientContextManagerService/getCameraParameters",
  "/grpcIClientContextManager.grpcIClientContextManagerService/relocalizeProcessRequest_grpc0",
  "/grpcIClientContextManager.grpcIClientContextManagerService/relocalizeProcessRequest_grpc1",
  "/grpcIClientContextManager.grpcIClientContextManagerService/get3DTransformRequest",
  "/grpcIClientContextManager.grpcIClientContextManagerService/getMappingDataRequest",
  "/grpcIClientContextManager.grpcIClientContextManagerService/getLastPose",
  "/grpcIClientContextManager.grpcIClientContextManagerService/getClientMapUUID",
};

std::unique_ptr< grpcIClientContextManagerService::Stub> grpcIClientContextManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIClientContextManagerService::Stub> stub(new grpcIClientContextManagerService::Stub(channel, options));
  return stub;
}

grpcIClientContextManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_registerClient_(grpcIClientContextManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unregisterClient_(grpcIClientContextManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllClientsUUID_(grpcIClientContextManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDeviceInfo_(grpcIClientContextManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_init_grpc0_(grpcIClientContextManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_init_grpc1_(grpcIClientContextManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_(grpcIClientContextManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIClientContextManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getProcessingMode_(grpcIClientContextManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setCameraParameters_grpc0_(grpcIClientContextManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setCameraParameters_grpc1_(grpcIClientContextManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setRectificationParameters_(grpcIClientContextManagerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCameraParameters_(grpcIClientContextManagerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_relocalizeProcessRequest_grpc0_(grpcIClientContextManagerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_relocalizeProcessRequest_grpc1_(grpcIClientContextManagerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get3DTransformRequest_(grpcIClientContextManagerService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMappingDataRequest_(grpcIClientContextManagerService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getLastPose_(grpcIClientContextManagerService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getClientMapUUID_(grpcIClientContextManagerService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIClientContextManagerService::Stub::registerClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpcIClientContextManager::registerClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::registerClientRequest, ::grpcIClientContextManager::registerClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerClient_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::registerClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest* request, ::grpcIClientContextManager::registerClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::registerClientRequest, ::grpcIClientContextManager::registerClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerClient_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::registerClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest* request, ::grpcIClientContextManager::registerClientResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::registerClientResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::registerClientResponse, ::grpcIClientContextManager::registerClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::registerClientResponse>* grpcIClientContextManagerService::Stub::AsyncregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::registerClientRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::unregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpcIClientContextManager::unregisterClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::unregisterClientRequest, ::grpcIClientContextManager::unregisterClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregisterClient_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::unregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest* request, ::grpcIClientContextManager::unregisterClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::unregisterClientRequest, ::grpcIClientContextManager::unregisterClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterClient_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::unregisterClient(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest* request, ::grpcIClientContextManager::unregisterClientResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::unregisterClientResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::unregisterClientResponse, ::grpcIClientContextManager::unregisterClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregisterClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::unregisterClientResponse>* grpcIClientContextManagerService::Stub::AsyncunregisterClientRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::unregisterClientRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregisterClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::getAllClientsUUIDRequest, ::grpcIClientContextManager::getAllClientsUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllClientsUUID_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::getAllClientsUUIDRequest, ::grpcIClientContextManager::getAllClientsUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllClientsUUID_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::getAllClientsUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllClientsUUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getAllClientsUUIDResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::getAllClientsUUIDResponse, ::grpcIClientContextManager::getAllClientsUUIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllClientsUUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getAllClientsUUIDResponse>* grpcIClientContextManagerService::Stub::AsyncgetAllClientsUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllClientsUUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::getDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpcIClientContextManager::getDeviceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::getDeviceInfoRequest, ::grpcIClientContextManager::getDeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDeviceInfo_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::getDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpcIClientContextManager::getDeviceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::getDeviceInfoRequest, ::grpcIClientContextManager::getDeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceInfo_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::getDeviceInfo(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpcIClientContextManager::getDeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDeviceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getDeviceInfoResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::getDeviceInfoResponse, ::grpcIClientContextManager::getDeviceInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDeviceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getDeviceInfoResponse>* grpcIClientContextManagerService::Stub::AsyncgetDeviceInfoRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDeviceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::init_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpcIClientContextManager::init_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::init_grpc0Request, ::grpcIClientContextManager::init_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_grpc0_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::init_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request* request, ::grpcIClientContextManager::init_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::init_grpc0Request, ::grpcIClientContextManager::init_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_grpc0_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::init_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request* request, ::grpcIClientContextManager::init_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc0Response>* grpcIClientContextManagerService::Stub::PrepareAsyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::init_grpc0Response, ::grpcIClientContextManager::init_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc0Response>* grpcIClientContextManagerService::Stub::Asyncinit_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinit_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::init_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpcIClientContextManager::init_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::init_grpc1Request, ::grpcIClientContextManager::init_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_grpc1_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::init_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request* request, ::grpcIClientContextManager::init_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::init_grpc1Request, ::grpcIClientContextManager::init_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_grpc1_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::init_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request* request, ::grpcIClientContextManager::init_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc1Response>* grpcIClientContextManagerService::Stub::PrepareAsyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::init_grpc1Response, ::grpcIClientContextManager::init_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::init_grpc1Response>* grpcIClientContextManagerService::Stub::Asyncinit_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::init_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinit_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::start(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpcIClientContextManager::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::startRequest, ::grpcIClientContextManager::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest* request, ::grpcIClientContextManager::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::startRequest, ::grpcIClientContextManager::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest* request, ::grpcIClientContextManager::startResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::startResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::startResponse, ::grpcIClientContextManager::startRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::startResponse>* grpcIClientContextManagerService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::startRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::stop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpcIClientContextManager::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::stopRequest, ::grpcIClientContextManager::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest* request, ::grpcIClientContextManager::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::stopRequest, ::grpcIClientContextManager::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest* request, ::grpcIClientContextManager::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::stopResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::stopResponse, ::grpcIClientContextManager::stopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::stopResponse>* grpcIClientContextManagerService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::stopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::getProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpcIClientContextManager::getProcessingModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::getProcessingModeRequest, ::grpcIClientContextManager::getProcessingModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getProcessingMode_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::getProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpcIClientContextManager::getProcessingModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::getProcessingModeRequest, ::grpcIClientContextManager::getProcessingModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getProcessingMode_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::getProcessingMode(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpcIClientContextManager::getProcessingModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getProcessingMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getProcessingModeResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::getProcessingModeResponse, ::grpcIClientContextManager::getProcessingModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getProcessingMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getProcessingModeResponse>* grpcIClientContextManagerService::Stub::AsyncgetProcessingModeRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getProcessingModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetProcessingModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::setCameraParameters_grpc0Request, ::grpcIClientContextManager::setCameraParameters_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCameraParameters_grpc0_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::setCameraParameters_grpc0Request, ::grpcIClientContextManager::setCameraParameters_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_grpc0_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::setCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc0Response>* grpcIClientContextManagerService::Stub::PrepareAsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::setCameraParameters_grpc0Response, ::grpcIClientContextManager::setCameraParameters_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCameraParameters_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc0Response>* grpcIClientContextManagerService::Stub::AsyncsetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCameraParameters_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::setCameraParameters_grpc1Request, ::grpcIClientContextManager::setCameraParameters_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setCameraParameters_grpc1_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::setCameraParameters_grpc1Request, ::grpcIClientContextManager::setCameraParameters_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_grpc1_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::setCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setCameraParameters_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc1Response>* grpcIClientContextManagerService::Stub::PrepareAsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::setCameraParameters_grpc1Response, ::grpcIClientContextManager::setCameraParameters_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setCameraParameters_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setCameraParameters_grpc1Response>* grpcIClientContextManagerService::Stub::AsyncsetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetCameraParameters_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::setRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpcIClientContextManager::setRectificationParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::setRectificationParametersRequest, ::grpcIClientContextManager::setRectificationParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setRectificationParameters_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::setRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpcIClientContextManager::setRectificationParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::setRectificationParametersRequest, ::grpcIClientContextManager::setRectificationParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRectificationParameters_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::setRectificationParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpcIClientContextManager::setRectificationParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setRectificationParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setRectificationParametersResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::setRectificationParametersResponse, ::grpcIClientContextManager::setRectificationParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setRectificationParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::setRectificationParametersResponse>* grpcIClientContextManagerService::Stub::AsyncsetRectificationParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetRectificationParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::getCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpcIClientContextManager::getCameraParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::getCameraParametersRequest, ::grpcIClientContextManager::getCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCameraParameters_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::getCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpcIClientContextManager::getCameraParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::getCameraParametersRequest, ::grpcIClientContextManager::getCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::getCameraParameters(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpcIClientContextManager::getCameraParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getCameraParametersResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::getCameraParametersResponse, ::grpcIClientContextManager::getCameraParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getCameraParametersResponse>* grpcIClientContextManagerService::Stub::AsyncgetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_relocalizeProcessRequest_grpc0_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalizeProcessRequest_grpc0_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::relocalizeProcessRequest_grpc0(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalizeProcessRequest_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* grpcIClientContextManagerService::Stub::PrepareAsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_relocalizeProcessRequest_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response>* grpcIClientContextManagerService::Stub::AsyncrelocalizeProcessRequest_grpc0Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrelocalizeProcessRequest_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_relocalizeProcessRequest_grpc1_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalizeProcessRequest_grpc1_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::relocalizeProcessRequest_grpc1(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalizeProcessRequest_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* grpcIClientContextManagerService::Stub::PrepareAsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_relocalizeProcessRequest_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response>* grpcIClientContextManagerService::Stub::AsyncrelocalizeProcessRequest_grpc1Raw(::grpc::ClientContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrelocalizeProcessRequest_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpcIClientContextManager::get3DTransformRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::get3DTransformRequestRequest, ::grpcIClientContextManager::get3DTransformRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get3DTransformRequest_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpcIClientContextManager::get3DTransformRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::get3DTransformRequestRequest, ::grpcIClientContextManager::get3DTransformRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get3DTransformRequest_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::get3DTransformRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpcIClientContextManager::get3DTransformRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get3DTransformRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::get3DTransformRequestResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::get3DTransformRequestResponse, ::grpcIClientContextManager::get3DTransformRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get3DTransformRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::get3DTransformRequestResponse>* grpcIClientContextManagerService::Stub::Asyncget3DTransformRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget3DTransformRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpcIClientContextManager::getMappingDataRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::getMappingDataRequestRequest, ::grpcIClientContextManager::getMappingDataRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMappingDataRequest_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpcIClientContextManager::getMappingDataRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::getMappingDataRequestRequest, ::grpcIClientContextManager::getMappingDataRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMappingDataRequest_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::getMappingDataRequest(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpcIClientContextManager::getMappingDataRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMappingDataRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getMappingDataRequestResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::getMappingDataRequestResponse, ::grpcIClientContextManager::getMappingDataRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMappingDataRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getMappingDataRequestResponse>* grpcIClientContextManagerService::Stub::AsyncgetMappingDataRequestRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMappingDataRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::getLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpcIClientContextManager::getLastPoseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::getLastPoseRequest, ::grpcIClientContextManager::getLastPoseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLastPose_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::getLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest* request, ::grpcIClientContextManager::getLastPoseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::getLastPoseRequest, ::grpcIClientContextManager::getLastPoseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLastPose_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::getLastPose(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest* request, ::grpcIClientContextManager::getLastPoseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLastPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getLastPoseResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::getLastPoseResponse, ::grpcIClientContextManager::getLastPoseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLastPose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getLastPoseResponse>* grpcIClientContextManagerService::Stub::AsyncgetLastPoseRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getLastPoseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLastPoseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIClientContextManagerService::Stub::getClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpcIClientContextManager::getClientMapUUIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIClientContextManager::getClientMapUUIDRequest, ::grpcIClientContextManager::getClientMapUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getClientMapUUID_, context, request, response);
}

void grpcIClientContextManagerService::Stub::async::getClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpcIClientContextManager::getClientMapUUIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIClientContextManager::getClientMapUUIDRequest, ::grpcIClientContextManager::getClientMapUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getClientMapUUID_, context, request, response, std::move(f));
}

void grpcIClientContextManagerService::Stub::async::getClientMapUUID(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpcIClientContextManager::getClientMapUUIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getClientMapUUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getClientMapUUIDResponse>* grpcIClientContextManagerService::Stub::PrepareAsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIClientContextManager::getClientMapUUIDResponse, ::grpcIClientContextManager::getClientMapUUIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getClientMapUUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIClientContextManager::getClientMapUUIDResponse>* grpcIClientContextManagerService::Stub::AsyncgetClientMapUUIDRaw(::grpc::ClientContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetClientMapUUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIClientContextManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::registerClientRequest, ::grpcIClientContextManager::registerClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::registerClientRequest* req,
             ::grpcIClientContextManager::registerClientResponse* resp) {
               return service->registerClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::unregisterClientRequest, ::grpcIClientContextManager::unregisterClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::unregisterClientRequest* req,
             ::grpcIClientContextManager::unregisterClientResponse* resp) {
               return service->unregisterClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::getAllClientsUUIDRequest, ::grpcIClientContextManager::getAllClientsUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::getAllClientsUUIDRequest* req,
             ::grpcIClientContextManager::getAllClientsUUIDResponse* resp) {
               return service->getAllClientsUUID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::getDeviceInfoRequest, ::grpcIClientContextManager::getDeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::getDeviceInfoRequest* req,
             ::grpcIClientContextManager::getDeviceInfoResponse* resp) {
               return service->getDeviceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::init_grpc0Request, ::grpcIClientContextManager::init_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::init_grpc0Request* req,
             ::grpcIClientContextManager::init_grpc0Response* resp) {
               return service->init_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::init_grpc1Request, ::grpcIClientContextManager::init_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::init_grpc1Request* req,
             ::grpcIClientContextManager::init_grpc1Response* resp) {
               return service->init_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::startRequest, ::grpcIClientContextManager::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::startRequest* req,
             ::grpcIClientContextManager::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::stopRequest, ::grpcIClientContextManager::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::stopRequest* req,
             ::grpcIClientContextManager::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::getProcessingModeRequest, ::grpcIClientContextManager::getProcessingModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::getProcessingModeRequest* req,
             ::grpcIClientContextManager::getProcessingModeResponse* resp) {
               return service->getProcessingMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::setCameraParameters_grpc0Request, ::grpcIClientContextManager::setCameraParameters_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::setCameraParameters_grpc0Request* req,
             ::grpcIClientContextManager::setCameraParameters_grpc0Response* resp) {
               return service->setCameraParameters_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::setCameraParameters_grpc1Request, ::grpcIClientContextManager::setCameraParameters_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::setCameraParameters_grpc1Request* req,
             ::grpcIClientContextManager::setCameraParameters_grpc1Response* resp) {
               return service->setCameraParameters_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::setRectificationParametersRequest, ::grpcIClientContextManager::setRectificationParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::setRectificationParametersRequest* req,
             ::grpcIClientContextManager::setRectificationParametersResponse* resp) {
               return service->setRectificationParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::getCameraParametersRequest, ::grpcIClientContextManager::getCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::getCameraParametersRequest* req,
             ::grpcIClientContextManager::getCameraParametersResponse* resp) {
               return service->getCameraParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* req,
             ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* resp) {
               return service->relocalizeProcessRequest_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* req,
             ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* resp) {
               return service->relocalizeProcessRequest_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::get3DTransformRequestRequest, ::grpcIClientContextManager::get3DTransformRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::get3DTransformRequestRequest* req,
             ::grpcIClientContextManager::get3DTransformRequestResponse* resp) {
               return service->get3DTransformRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::getMappingDataRequestRequest, ::grpcIClientContextManager::getMappingDataRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::getMappingDataRequestRequest* req,
             ::grpcIClientContextManager::getMappingDataRequestResponse* resp) {
               return service->getMappingDataRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::getLastPoseRequest, ::grpcIClientContextManager::getLastPoseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::getLastPoseRequest* req,
             ::grpcIClientContextManager::getLastPoseResponse* resp) {
               return service->getLastPose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIClientContextManagerService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIClientContextManagerService::Service, ::grpcIClientContextManager::getClientMapUUIDRequest, ::grpcIClientContextManager::getClientMapUUIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIClientContextManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIClientContextManager::getClientMapUUIDRequest* req,
             ::grpcIClientContextManager::getClientMapUUIDResponse* resp) {
               return service->getClientMapUUID(ctx, req, resp);
             }, this)));
}

grpcIClientContextManagerService::Service::~Service() {
}

::grpc::Status grpcIClientContextManagerService::Service::registerClient(::grpc::ServerContext* context, const ::grpcIClientContextManager::registerClientRequest* request, ::grpcIClientContextManager::registerClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::unregisterClient(::grpc::ServerContext* context, const ::grpcIClientContextManager::unregisterClientRequest* request, ::grpcIClientContextManager::unregisterClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::getAllClientsUUID(::grpc::ServerContext* context, const ::grpcIClientContextManager::getAllClientsUUIDRequest* request, ::grpcIClientContextManager::getAllClientsUUIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::getDeviceInfo(::grpc::ServerContext* context, const ::grpcIClientContextManager::getDeviceInfoRequest* request, ::grpcIClientContextManager::getDeviceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::init_grpc0(::grpc::ServerContext* context, const ::grpcIClientContextManager::init_grpc0Request* request, ::grpcIClientContextManager::init_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::init_grpc1(::grpc::ServerContext* context, const ::grpcIClientContextManager::init_grpc1Request* request, ::grpcIClientContextManager::init_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::start(::grpc::ServerContext* context, const ::grpcIClientContextManager::startRequest* request, ::grpcIClientContextManager::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::stop(::grpc::ServerContext* context, const ::grpcIClientContextManager::stopRequest* request, ::grpcIClientContextManager::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::getProcessingMode(::grpc::ServerContext* context, const ::grpcIClientContextManager::getProcessingModeRequest* request, ::grpcIClientContextManager::getProcessingModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::setCameraParameters_grpc0(::grpc::ServerContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc0Request* request, ::grpcIClientContextManager::setCameraParameters_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::setCameraParameters_grpc1(::grpc::ServerContext* context, const ::grpcIClientContextManager::setCameraParameters_grpc1Request* request, ::grpcIClientContextManager::setCameraParameters_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::setRectificationParameters(::grpc::ServerContext* context, const ::grpcIClientContextManager::setRectificationParametersRequest* request, ::grpcIClientContextManager::setRectificationParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::getCameraParameters(::grpc::ServerContext* context, const ::grpcIClientContextManager::getCameraParametersRequest* request, ::grpcIClientContextManager::getCameraParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::relocalizeProcessRequest_grpc0(::grpc::ServerContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::relocalizeProcessRequest_grpc1(::grpc::ServerContext* context, const ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Request* request, ::grpcIClientContextManager::relocalizeProcessRequest_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::get3DTransformRequest(::grpc::ServerContext* context, const ::grpcIClientContextManager::get3DTransformRequestRequest* request, ::grpcIClientContextManager::get3DTransformRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::getMappingDataRequest(::grpc::ServerContext* context, const ::grpcIClientContextManager::getMappingDataRequestRequest* request, ::grpcIClientContextManager::getMappingDataRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::getLastPose(::grpc::ServerContext* context, const ::grpcIClientContextManager::getLastPoseRequest* request, ::grpcIClientContextManager::getLastPoseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIClientContextManagerService::Service::getClientMapUUID(::grpc::ServerContext* context, const ::grpcIClientContextManager::getClientMapUUIDRequest* request, ::grpcIClientContextManager::getClientMapUUIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIClientContextManager

