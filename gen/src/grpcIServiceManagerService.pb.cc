// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIServiceManagerService.proto

#include "grpcIServiceManagerService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIServiceManager {
PROTOBUF_CONSTEXPR initRequest::initRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct initRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR initRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~initRequestDefaultTypeInternal() {}
  union {
    initRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 initRequestDefaultTypeInternal _initRequest_default_instance_;
PROTOBUF_CONSTEXPR initResponse::initResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct initResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR initResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~initResponseDefaultTypeInternal() {}
  union {
    initResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 initResponseDefaultTypeInternal _initResponse_default_instance_;
PROTOBUF_CONSTEXPR registerServiceRequest::registerServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct registerServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR registerServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~registerServiceRequestDefaultTypeInternal() {}
  union {
    registerServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 registerServiceRequestDefaultTypeInternal _registerServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR registerServiceResponse::registerServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct registerServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR registerServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~registerServiceResponseDefaultTypeInternal() {}
  union {
    registerServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 registerServiceResponseDefaultTypeInternal _registerServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR unregisterServiceRequest::unregisterServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unregisterServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unregisterServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unregisterServiceRequestDefaultTypeInternal() {}
  union {
    unregisterServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unregisterServiceRequestDefaultTypeInternal _unregisterServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR unregisterServiceResponse::unregisterServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unregisterServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unregisterServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unregisterServiceResponseDefaultTypeInternal() {}
  union {
    unregisterServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unregisterServiceResponseDefaultTypeInternal _unregisterServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR getServiceRequest::getServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getServiceRequestDefaultTypeInternal() {}
  union {
    getServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getServiceRequestDefaultTypeInternal _getServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR getServiceResponse::getServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getServiceResponseDefaultTypeInternal() {}
  union {
    getServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getServiceResponseDefaultTypeInternal _getServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR getAndLockServiceRequest::getAndLockServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAndLockServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAndLockServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAndLockServiceRequestDefaultTypeInternal() {}
  union {
    getAndLockServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAndLockServiceRequestDefaultTypeInternal _getAndLockServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR getAndLockServiceResponse::getAndLockServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serviceurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAndLockServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAndLockServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAndLockServiceResponseDefaultTypeInternal() {}
  union {
    getAndLockServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAndLockServiceResponseDefaultTypeInternal _getAndLockServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR unlockServiceRequest::unlockServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.servicetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unlockServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unlockServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unlockServiceRequestDefaultTypeInternal() {}
  union {
    unlockServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unlockServiceRequestDefaultTypeInternal _unlockServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR unlockServiceResponse::unlockServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unlockServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unlockServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unlockServiceResponseDefaultTypeInternal() {}
  union {
    unlockServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unlockServiceResponseDefaultTypeInternal _unlockServiceResponse_default_instance_;
}  // namespace grpcIServiceManager
static ::_pb::Metadata file_level_metadata_grpcIServiceManagerService_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIServiceManagerService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIServiceManagerService_2eproto = nullptr;

const uint32_t TableStruct_grpcIServiceManagerService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::initRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::initRequest, _impl_.grpcservercompressionformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::initResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::initResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::registerServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::registerServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::registerServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::registerServiceRequest, _impl_.serviceurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::registerServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::registerServiceResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unregisterServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unregisterServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unregisterServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unregisterServiceRequest, _impl_.serviceurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unregisterServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unregisterServiceResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getServiceRequest, _impl_.serviceurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getServiceResponse, _impl_.serviceurl_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getServiceResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getAndLockServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getAndLockServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getAndLockServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getAndLockServiceRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getAndLockServiceRequest, _impl_.serviceurl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getAndLockServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getAndLockServiceResponse, _impl_.serviceurl_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::getAndLockServiceResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unlockServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unlockServiceRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unlockServiceRequest, _impl_.servicetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unlockServiceRequest, _impl_.clientuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unlockServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIServiceManager::unlockServiceResponse, _impl_.xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIServiceManager::initRequest)},
  { 7, -1, -1, sizeof(::grpcIServiceManager::initResponse)},
  { 14, -1, -1, sizeof(::grpcIServiceManager::registerServiceRequest)},
  { 23, -1, -1, sizeof(::grpcIServiceManager::registerServiceResponse)},
  { 30, -1, -1, sizeof(::grpcIServiceManager::unregisterServiceRequest)},
  { 39, -1, -1, sizeof(::grpcIServiceManager::unregisterServiceResponse)},
  { 46, -1, -1, sizeof(::grpcIServiceManager::getServiceRequest)},
  { 55, -1, -1, sizeof(::grpcIServiceManager::getServiceResponse)},
  { 63, -1, -1, sizeof(::grpcIServiceManager::getAndLockServiceRequest)},
  { 73, -1, -1, sizeof(::grpcIServiceManager::getAndLockServiceResponse)},
  { 81, -1, -1, sizeof(::grpcIServiceManager::unlockServiceRequest)},
  { 90, -1, -1, sizeof(::grpcIServiceManager::unlockServiceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIServiceManager::_initRequest_default_instance_._instance,
  &::grpcIServiceManager::_initResponse_default_instance_._instance,
  &::grpcIServiceManager::_registerServiceRequest_default_instance_._instance,
  &::grpcIServiceManager::_registerServiceResponse_default_instance_._instance,
  &::grpcIServiceManager::_unregisterServiceRequest_default_instance_._instance,
  &::grpcIServiceManager::_unregisterServiceResponse_default_instance_._instance,
  &::grpcIServiceManager::_getServiceRequest_default_instance_._instance,
  &::grpcIServiceManager::_getServiceResponse_default_instance_._instance,
  &::grpcIServiceManager::_getAndLockServiceRequest_default_instance_._instance,
  &::grpcIServiceManager::_getAndLockServiceResponse_default_instance_._instance,
  &::grpcIServiceManager::_unlockServiceRequest_default_instance_._instance,
  &::grpcIServiceManager::_unlockServiceResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIServiceManagerService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n grpcIServiceManagerService.proto\022\023grpc"
  "IServiceManager\032\033google/protobuf/empty.p"
  "roto\"2\n\013initRequest\022#\n\033grpcServerCompres"
  "sionFormat\030\001 \001(\005\"+\n\014initResponse\022\033\n\023xpcf"
  "GrpcReturnValue\030\001 \001(\021\"f\n\026registerService"
  "Request\022#\n\033grpcServerCompressionFormat\030\001"
  " \001(\005\022\023\n\013serviceType\030\002 \001(\021\022\022\n\nserviceURL\030"
  "\003 \001(\t\"6\n\027registerServiceResponse\022\033\n\023xpcf"
  "GrpcReturnValue\030\001 \001(\021\"h\n\030unregisterServi"
  "ceRequest\022#\n\033grpcServerCompressionFormat"
  "\030\001 \001(\005\022\023\n\013serviceType\030\002 \001(\021\022\022\n\nserviceUR"
  "L\030\003 \001(\t\"8\n\031unregisterServiceResponse\022\033\n\023"
  "xpcfGrpcReturnValue\030\001 \001(\021\"a\n\021getServiceR"
  "equest\022#\n\033grpcServerCompressionFormat\030\001 "
  "\001(\005\022\023\n\013serviceType\030\002 \001(\021\022\022\n\nserviceURL\030\003"
  " \001(\t\"E\n\022getServiceResponse\022\022\n\nserviceURL"
  "\030\001 \001(\t\022\033\n\023xpcfGrpcReturnValue\030\002 \001(\021\"|\n\030g"
  "etAndLockServiceRequest\022#\n\033grpcServerCom"
  "pressionFormat\030\001 \001(\005\022\023\n\013serviceType\030\002 \001("
  "\021\022\022\n\nclientUUID\030\003 \001(\t\022\022\n\nserviceURL\030\004 \001("
  "\t\"L\n\031getAndLockServiceResponse\022\022\n\nservic"
  "eURL\030\001 \001(\t\022\033\n\023xpcfGrpcReturnValue\030\002 \001(\021\""
  "d\n\024unlockServiceRequest\022#\n\033grpcServerCom"
  "pressionFormat\030\001 \001(\005\022\023\n\013serviceType\030\002 \001("
  "\021\022\022\n\nclientUUID\030\003 \001(\t\"4\n\025unlockServiceRe"
  "sponse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\0212\222\005\n\032"
  "grpcIServiceManagerService\022M\n\004init\022 .grp"
  "cIServiceManager.initRequest\032!.grpcIServ"
  "iceManager.initResponse\"\000\022n\n\017registerSer"
  "vice\022+.grpcIServiceManager.registerServi"
  "ceRequest\032,.grpcIServiceManager.register"
  "ServiceResponse\"\000\022t\n\021unregisterService\022-"
  ".grpcIServiceManager.unregisterServiceRe"
  "quest\032..grpcIServiceManager.unregisterSe"
  "rviceResponse\"\000\022_\n\ngetService\022&.grpcISer"
  "viceManager.getServiceRequest\032\'.grpcISer"
  "viceManager.getServiceResponse\"\000\022t\n\021getA"
  "ndLockService\022-.grpcIServiceManager.getA"
  "ndLockServiceRequest\032..grpcIServiceManag"
  "er.getAndLockServiceResponse\"\000\022h\n\runlock"
  "Service\022).grpcIServiceManager.unlockServ"
  "iceRequest\032*.grpcIServiceManager.unlockS"
  "erviceResponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIServiceManagerService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIServiceManagerService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIServiceManagerService_2eproto = {
    false, false, 1704, descriptor_table_protodef_grpcIServiceManagerService_2eproto,
    "grpcIServiceManagerService.proto",
    &descriptor_table_grpcIServiceManagerService_2eproto_once, descriptor_table_grpcIServiceManagerService_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_grpcIServiceManagerService_2eproto::offsets,
    file_level_metadata_grpcIServiceManagerService_2eproto, file_level_enum_descriptors_grpcIServiceManagerService_2eproto,
    file_level_service_descriptors_grpcIServiceManagerService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIServiceManagerService_2eproto_getter() {
  return &descriptor_table_grpcIServiceManagerService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIServiceManagerService_2eproto(&descriptor_table_grpcIServiceManagerService_2eproto);
namespace grpcIServiceManager {

// ===================================================================

class initRequest::_Internal {
 public:
};

initRequest::initRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.initRequest)
}
initRequest::initRequest(const initRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  initRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.initRequest)
}

inline void initRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

initRequest::~initRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.initRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void initRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void initRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void initRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.initRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* initRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* initRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.initRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.initRequest)
  return target;
}

size_t initRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.initRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData initRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    initRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*initRequest::GetClassData() const { return &_class_data_; }


void initRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<initRequest*>(&to_msg);
  auto& from = static_cast<const initRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.initRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void initRequest::CopyFrom(const initRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.initRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool initRequest::IsInitialized() const {
  return true;
}

void initRequest::InternalSwap(initRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata initRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[0]);
}

// ===================================================================

class initResponse::_Internal {
 public:
};

initResponse::initResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.initResponse)
}
initResponse::initResponse(const initResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  initResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.initResponse)
}

inline void initResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

initResponse::~initResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.initResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void initResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void initResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void initResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.initResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* initResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* initResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.initResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.initResponse)
  return target;
}

size_t initResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.initResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData initResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    initResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*initResponse::GetClassData() const { return &_class_data_; }


void initResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<initResponse*>(&to_msg);
  auto& from = static_cast<const initResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.initResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void initResponse::CopyFrom(const initResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.initResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool initResponse::IsInitialized() const {
  return true;
}

void initResponse::InternalSwap(initResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata initResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[1]);
}

// ===================================================================

class registerServiceRequest::_Internal {
 public:
};

registerServiceRequest::registerServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.registerServiceRequest)
}
registerServiceRequest::registerServiceRequest(const registerServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  registerServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.registerServiceRequest)
}

inline void registerServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

registerServiceRequest::~registerServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.registerServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void registerServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void registerServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void registerServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.registerServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serviceURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManager.registerServiceRequest.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* registerServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.registerServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManager.registerServiceRequest.serviceURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.registerServiceRequest)
  return target;
}

size_t registerServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.registerServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registerServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    registerServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registerServiceRequest::GetClassData() const { return &_class_data_; }


void registerServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<registerServiceRequest*>(&to_msg);
  auto& from = static_cast<const registerServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.registerServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registerServiceRequest::CopyFrom(const registerServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.registerServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerServiceRequest::IsInitialized() const {
  return true;
}

void registerServiceRequest::InternalSwap(registerServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(registerServiceRequest, _impl_.servicetype_)
      + sizeof(registerServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(registerServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata registerServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[2]);
}

// ===================================================================

class registerServiceResponse::_Internal {
 public:
};

registerServiceResponse::registerServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.registerServiceResponse)
}
registerServiceResponse::registerServiceResponse(const registerServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  registerServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.registerServiceResponse)
}

inline void registerServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

registerServiceResponse::~registerServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.registerServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void registerServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void registerServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void registerServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.registerServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* registerServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.registerServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.registerServiceResponse)
  return target;
}

size_t registerServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.registerServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registerServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    registerServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registerServiceResponse::GetClassData() const { return &_class_data_; }


void registerServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<registerServiceResponse*>(&to_msg);
  auto& from = static_cast<const registerServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.registerServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registerServiceResponse::CopyFrom(const registerServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.registerServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerServiceResponse::IsInitialized() const {
  return true;
}

void registerServiceResponse::InternalSwap(registerServiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registerServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[3]);
}

// ===================================================================

class unregisterServiceRequest::_Internal {
 public:
};

unregisterServiceRequest::unregisterServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.unregisterServiceRequest)
}
unregisterServiceRequest::unregisterServiceRequest(const unregisterServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unregisterServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.unregisterServiceRequest)
}

inline void unregisterServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

unregisterServiceRequest::~unregisterServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.unregisterServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unregisterServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void unregisterServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unregisterServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.unregisterServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unregisterServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serviceURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManager.unregisterServiceRequest.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unregisterServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.unregisterServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManager.unregisterServiceRequest.serviceURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.unregisterServiceRequest)
  return target;
}

size_t unregisterServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.unregisterServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unregisterServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unregisterServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unregisterServiceRequest::GetClassData() const { return &_class_data_; }


void unregisterServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unregisterServiceRequest*>(&to_msg);
  auto& from = static_cast<const unregisterServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.unregisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unregisterServiceRequest::CopyFrom(const unregisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.unregisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unregisterServiceRequest::IsInitialized() const {
  return true;
}

void unregisterServiceRequest::InternalSwap(unregisterServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(unregisterServiceRequest, _impl_.servicetype_)
      + sizeof(unregisterServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(unregisterServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata unregisterServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[4]);
}

// ===================================================================

class unregisterServiceResponse::_Internal {
 public:
};

unregisterServiceResponse::unregisterServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.unregisterServiceResponse)
}
unregisterServiceResponse::unregisterServiceResponse(const unregisterServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unregisterServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.unregisterServiceResponse)
}

inline void unregisterServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

unregisterServiceResponse::~unregisterServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.unregisterServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unregisterServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void unregisterServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unregisterServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.unregisterServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unregisterServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unregisterServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.unregisterServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.unregisterServiceResponse)
  return target;
}

size_t unregisterServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.unregisterServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unregisterServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unregisterServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unregisterServiceResponse::GetClassData() const { return &_class_data_; }


void unregisterServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unregisterServiceResponse*>(&to_msg);
  auto& from = static_cast<const unregisterServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.unregisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unregisterServiceResponse::CopyFrom(const unregisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.unregisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unregisterServiceResponse::IsInitialized() const {
  return true;
}

void unregisterServiceResponse::InternalSwap(unregisterServiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata unregisterServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[5]);
}

// ===================================================================

class getServiceRequest::_Internal {
 public:
};

getServiceRequest::getServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.getServiceRequest)
}
getServiceRequest::getServiceRequest(const getServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.getServiceRequest)
}

inline void getServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getServiceRequest::~getServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.getServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void getServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.getServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serviceURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManager.getServiceRequest.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.getServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManager.getServiceRequest.serviceURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serviceurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.getServiceRequest)
  return target;
}

size_t getServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.getServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 3;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getServiceRequest::GetClassData() const { return &_class_data_; }


void getServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getServiceRequest*>(&to_msg);
  auto& from = static_cast<const getServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.getServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getServiceRequest::CopyFrom(const getServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.getServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getServiceRequest::IsInitialized() const {
  return true;
}

void getServiceRequest::InternalSwap(getServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getServiceRequest, _impl_.servicetype_)
      + sizeof(getServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(getServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[6]);
}

// ===================================================================

class getServiceResponse::_Internal {
 public:
};

getServiceResponse::getServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.getServiceResponse)
}
getServiceResponse::getServiceResponse(const getServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.getServiceResponse)
}

inline void getServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getServiceResponse::~getServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.getServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void getServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.getServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serviceURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManager.getServiceResponse.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.getServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceURL = 1;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManager.getServiceResponse.serviceURL");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serviceurl(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.getServiceResponse)
  return target;
}

size_t getServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.getServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 1;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getServiceResponse::GetClassData() const { return &_class_data_; }


void getServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getServiceResponse*>(&to_msg);
  auto& from = static_cast<const getServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.getServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getServiceResponse::CopyFrom(const getServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.getServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getServiceResponse::IsInitialized() const {
  return true;
}

void getServiceResponse::InternalSwap(getServiceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[7]);
}

// ===================================================================

class getAndLockServiceRequest::_Internal {
 public:
};

getAndLockServiceRequest::getAndLockServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.getAndLockServiceRequest)
}
getAndLockServiceRequest::getAndLockServiceRequest(const getAndLockServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAndLockServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.getAndLockServiceRequest)
}

inline void getAndLockServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.serviceurl_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAndLockServiceRequest::~getAndLockServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.getAndLockServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAndLockServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientuuid_.Destroy();
  _impl_.serviceurl_.Destroy();
}

void getAndLockServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAndLockServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.getAndLockServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientuuid_.ClearToEmpty();
  _impl_.serviceurl_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAndLockServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManager.getAndLockServiceRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // string serviceURL = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManager.getAndLockServiceRequest.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAndLockServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.getAndLockServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManager.getAndLockServiceRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // string serviceURL = 4;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManager.getAndLockServiceRequest.serviceURL");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serviceurl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.getAndLockServiceRequest)
  return target;
}

size_t getAndLockServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.getAndLockServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // string serviceURL = 4;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAndLockServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAndLockServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAndLockServiceRequest::GetClassData() const { return &_class_data_; }


void getAndLockServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAndLockServiceRequest*>(&to_msg);
  auto& from = static_cast<const getAndLockServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.getAndLockServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAndLockServiceRequest::CopyFrom(const getAndLockServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.getAndLockServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAndLockServiceRequest::IsInitialized() const {
  return true;
}

void getAndLockServiceRequest::InternalSwap(getAndLockServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getAndLockServiceRequest, _impl_.servicetype_)
      + sizeof(getAndLockServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(getAndLockServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getAndLockServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[8]);
}

// ===================================================================

class getAndLockServiceResponse::_Internal {
 public:
};

getAndLockServiceResponse::getAndLockServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.getAndLockServiceResponse)
}
getAndLockServiceResponse::getAndLockServiceResponse(const getAndLockServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAndLockServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceurl().empty()) {
    _this->_impl_.serviceurl_.Set(from._internal_serviceurl(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.getAndLockServiceResponse)
}

inline void getAndLockServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serviceurl_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serviceurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAndLockServiceResponse::~getAndLockServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.getAndLockServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAndLockServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serviceurl_.Destroy();
}

void getAndLockServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAndLockServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.getAndLockServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serviceurl_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAndLockServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serviceURL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serviceurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManager.getAndLockServiceResponse.serviceURL"));
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAndLockServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.getAndLockServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceURL = 1;
  if (!this->_internal_serviceurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceurl().data(), static_cast<int>(this->_internal_serviceurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManager.getAndLockServiceResponse.serviceURL");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serviceurl(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.getAndLockServiceResponse)
  return target;
}

size_t getAndLockServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.getAndLockServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceURL = 1;
  if (!this->_internal_serviceurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceurl());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAndLockServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAndLockServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAndLockServiceResponse::GetClassData() const { return &_class_data_; }


void getAndLockServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAndLockServiceResponse*>(&to_msg);
  auto& from = static_cast<const getAndLockServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.getAndLockServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serviceurl().empty()) {
    _this->_internal_set_serviceurl(from._internal_serviceurl());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAndLockServiceResponse::CopyFrom(const getAndLockServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.getAndLockServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAndLockServiceResponse::IsInitialized() const {
  return true;
}

void getAndLockServiceResponse::InternalSwap(getAndLockServiceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceurl_, lhs_arena,
      &other->_impl_.serviceurl_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAndLockServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[9]);
}

// ===================================================================

class unlockServiceRequest::_Internal {
 public:
};

unlockServiceRequest::unlockServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.unlockServiceRequest)
}
unlockServiceRequest::unlockServiceRequest(const unlockServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unlockServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.servicetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servicetype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.unlockServiceRequest)
}

inline void unlockServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.servicetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

unlockServiceRequest::~unlockServiceRequest() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.unlockServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unlockServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientuuid_.Destroy();
}

void unlockServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unlockServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.unlockServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientuuid_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servicetype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.servicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unlockServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 serviceType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIServiceManager.unlockServiceRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unlockServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.unlockServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_servicetype(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIServiceManager.unlockServiceRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.unlockServiceRequest)
  return target;
}

size_t unlockServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.unlockServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 serviceType = 2;
  if (this->_internal_servicetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_servicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unlockServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unlockServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unlockServiceRequest::GetClassData() const { return &_class_data_; }


void unlockServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unlockServiceRequest*>(&to_msg);
  auto& from = static_cast<const unlockServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.unlockServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_servicetype() != 0) {
    _this->_internal_set_servicetype(from._internal_servicetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unlockServiceRequest::CopyFrom(const unlockServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.unlockServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unlockServiceRequest::IsInitialized() const {
  return true;
}

void unlockServiceRequest::InternalSwap(unlockServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(unlockServiceRequest, _impl_.servicetype_)
      + sizeof(unlockServiceRequest::_impl_.servicetype_)
      - PROTOBUF_FIELD_OFFSET(unlockServiceRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata unlockServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[10]);
}

// ===================================================================

class unlockServiceResponse::_Internal {
 public:
};

unlockServiceResponse::unlockServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIServiceManager.unlockServiceResponse)
}
unlockServiceResponse::unlockServiceResponse(const unlockServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unlockServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIServiceManager.unlockServiceResponse)
}

inline void unlockServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

unlockServiceResponse::~unlockServiceResponse() {
  // @@protoc_insertion_point(destructor:grpcIServiceManager.unlockServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unlockServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void unlockServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unlockServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIServiceManager.unlockServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unlockServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unlockServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIServiceManager.unlockServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIServiceManager.unlockServiceResponse)
  return target;
}

size_t unlockServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIServiceManager.unlockServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unlockServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unlockServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unlockServiceResponse::GetClassData() const { return &_class_data_; }


void unlockServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unlockServiceResponse*>(&to_msg);
  auto& from = static_cast<const unlockServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIServiceManager.unlockServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unlockServiceResponse::CopyFrom(const unlockServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIServiceManager.unlockServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unlockServiceResponse::IsInitialized() const {
  return true;
}

void unlockServiceResponse::InternalSwap(unlockServiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata unlockServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIServiceManagerService_2eproto_getter, &descriptor_table_grpcIServiceManagerService_2eproto_once,
      file_level_metadata_grpcIServiceManagerService_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIServiceManager
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::initRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManager::initRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::initRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::initResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManager::initResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::initResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::registerServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManager::registerServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::registerServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::registerServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManager::registerServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::registerServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::unregisterServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManager::unregisterServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::unregisterServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::unregisterServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManager::unregisterServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::unregisterServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::getServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManager::getServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::getServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::getServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManager::getServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::getServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::getAndLockServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManager::getAndLockServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::getAndLockServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::getAndLockServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManager::getAndLockServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::getAndLockServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::unlockServiceRequest*
Arena::CreateMaybeMessage< ::grpcIServiceManager::unlockServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::unlockServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIServiceManager::unlockServiceResponse*
Arena::CreateMaybeMessage< ::grpcIServiceManager::unlockServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIServiceManager::unlockServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
