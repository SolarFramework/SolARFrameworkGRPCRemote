// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMapsManagerService.proto

#include "grpcIMapsManagerService.pb.h"
#include "grpcIMapsManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIMapsManager {

static const char* grpcIMapsManagerService_method_names[] = {
  "/grpcIMapsManager.grpcIMapsManagerService/createMap",
  "/grpcIMapsManager.grpcIMapsManagerService/deleteMap",
  "/grpcIMapsManager.grpcIMapsManagerService/getAllMaps",
  "/grpcIMapsManager.grpcIMapsManagerService/registerMapUpdateService",
  "/grpcIMapsManager.grpcIMapsManagerService/unregisterMapUpdateService",
  "/grpcIMapsManager.grpcIMapsManagerService/increaseMapClients",
  "/grpcIMapsManager.grpcIMapsManagerService/decreaseMapClients",
  "/grpcIMapsManager.grpcIMapsManagerService/getMapRequest",
  "/grpcIMapsManager.grpcIMapsManagerService/setMapRequest",
  "/grpcIMapsManager.grpcIMapsManagerService/getPointCloudRequest",
  "/grpcIMapsManager.grpcIMapsManagerService/requestForMapProcessing",
  "/grpcIMapsManager.grpcIMapsManagerService/getStatusForMapProcessing",
  "/grpcIMapsManager.grpcIMapsManagerService/getDataForMapProcessing",
};

std::unique_ptr< grpcIMapsManagerService::Stub> grpcIMapsManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIMapsManagerService::Stub> stub(new grpcIMapsManagerService::Stub(channel, options));
  return stub;
}

grpcIMapsManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_createMap_(grpcIMapsManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteMap_(grpcIMapsManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllMaps_(grpcIMapsManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_registerMapUpdateService_(grpcIMapsManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unregisterMapUpdateService_(grpcIMapsManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_increaseMapClients_(grpcIMapsManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_decreaseMapClients_(grpcIMapsManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMapRequest_(grpcIMapsManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setMapRequest_(grpcIMapsManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPointCloudRequest_(grpcIMapsManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestForMapProcessing_(grpcIMapsManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getStatusForMapProcessing_(grpcIMapsManagerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDataForMapProcessing_(grpcIMapsManagerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIMapsManagerService::Stub::createMap(::grpc::ClientContext* context, const ::grpcIMapsManager::createMapRequest& request, ::grpcIMapsManager::createMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::createMapRequest, ::grpcIMapsManager::createMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createMap_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::createMap(::grpc::ClientContext* context, const ::grpcIMapsManager::createMapRequest* request, ::grpcIMapsManager::createMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::createMapRequest, ::grpcIMapsManager::createMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createMap_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::createMap(::grpc::ClientContext* context, const ::grpcIMapsManager::createMapRequest* request, ::grpcIMapsManager::createMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::createMapResponse>* grpcIMapsManagerService::Stub::PrepareAsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::createMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::createMapResponse, ::grpcIMapsManager::createMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::createMapResponse>* grpcIMapsManagerService::Stub::AsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::createMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::deleteMap(::grpc::ClientContext* context, const ::grpcIMapsManager::deleteMapRequest& request, ::grpcIMapsManager::deleteMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::deleteMapRequest, ::grpcIMapsManager::deleteMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deleteMap_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::deleteMap(::grpc::ClientContext* context, const ::grpcIMapsManager::deleteMapRequest* request, ::grpcIMapsManager::deleteMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::deleteMapRequest, ::grpcIMapsManager::deleteMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteMap_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::deleteMap(::grpc::ClientContext* context, const ::grpcIMapsManager::deleteMapRequest* request, ::grpcIMapsManager::deleteMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::deleteMapResponse>* grpcIMapsManagerService::Stub::PrepareAsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::deleteMapResponse, ::grpcIMapsManager::deleteMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deleteMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::deleteMapResponse>* grpcIMapsManagerService::Stub::AsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeleteMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::getAllMaps(::grpc::ClientContext* context, const ::grpcIMapsManager::getAllMapsRequest& request, ::grpcIMapsManager::getAllMapsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::getAllMapsRequest, ::grpcIMapsManager::getAllMapsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllMaps_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::getAllMaps(::grpc::ClientContext* context, const ::grpcIMapsManager::getAllMapsRequest* request, ::grpcIMapsManager::getAllMapsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::getAllMapsRequest, ::grpcIMapsManager::getAllMapsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllMaps_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::getAllMaps(::grpc::ClientContext* context, const ::grpcIMapsManager::getAllMapsRequest* request, ::grpcIMapsManager::getAllMapsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllMaps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getAllMapsResponse>* grpcIMapsManagerService::Stub::PrepareAsyncgetAllMapsRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::getAllMapsResponse, ::grpcIMapsManager::getAllMapsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllMaps_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getAllMapsResponse>* grpcIMapsManagerService::Stub::AsyncgetAllMapsRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllMapsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapsManager::registerMapUpdateServiceRequest& request, ::grpcIMapsManager::registerMapUpdateServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::registerMapUpdateServiceRequest, ::grpcIMapsManager::registerMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerMapUpdateService_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapsManager::registerMapUpdateServiceRequest* request, ::grpcIMapsManager::registerMapUpdateServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::registerMapUpdateServiceRequest, ::grpcIMapsManager::registerMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerMapUpdateService_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapsManager::registerMapUpdateServiceRequest* request, ::grpcIMapsManager::registerMapUpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerMapUpdateService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::registerMapUpdateServiceResponse>* grpcIMapsManagerService::Stub::PrepareAsyncregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::registerMapUpdateServiceResponse, ::grpcIMapsManager::registerMapUpdateServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerMapUpdateService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::registerMapUpdateServiceResponse>* grpcIMapsManagerService::Stub::AsyncregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterMapUpdateServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapsManager::unregisterMapUpdateServiceRequest& request, ::grpcIMapsManager::unregisterMapUpdateServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::unregisterMapUpdateServiceRequest, ::grpcIMapsManager::unregisterMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregisterMapUpdateService_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapsManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapsManager::unregisterMapUpdateServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::unregisterMapUpdateServiceRequest, ::grpcIMapsManager::unregisterMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterMapUpdateService_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapsManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapsManager::unregisterMapUpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterMapUpdateService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::unregisterMapUpdateServiceResponse>* grpcIMapsManagerService::Stub::PrepareAsyncunregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::unregisterMapUpdateServiceResponse, ::grpcIMapsManager::unregisterMapUpdateServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregisterMapUpdateService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::unregisterMapUpdateServiceResponse>* grpcIMapsManagerService::Stub::AsyncunregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregisterMapUpdateServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapsManager::increaseMapClientsRequest& request, ::grpcIMapsManager::increaseMapClientsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::increaseMapClientsRequest, ::grpcIMapsManager::increaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_increaseMapClients_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapsManager::increaseMapClientsRequest* request, ::grpcIMapsManager::increaseMapClientsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::increaseMapClientsRequest, ::grpcIMapsManager::increaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_increaseMapClients_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapsManager::increaseMapClientsRequest* request, ::grpcIMapsManager::increaseMapClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_increaseMapClients_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::increaseMapClientsResponse>* grpcIMapsManagerService::Stub::PrepareAsyncincreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::increaseMapClientsResponse, ::grpcIMapsManager::increaseMapClientsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_increaseMapClients_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::increaseMapClientsResponse>* grpcIMapsManagerService::Stub::AsyncincreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncincreaseMapClientsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapsManager::decreaseMapClientsRequest& request, ::grpcIMapsManager::decreaseMapClientsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::decreaseMapClientsRequest, ::grpcIMapsManager::decreaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_decreaseMapClients_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapsManager::decreaseMapClientsRequest* request, ::grpcIMapsManager::decreaseMapClientsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::decreaseMapClientsRequest, ::grpcIMapsManager::decreaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_decreaseMapClients_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapsManager::decreaseMapClientsRequest* request, ::grpcIMapsManager::decreaseMapClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_decreaseMapClients_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::decreaseMapClientsResponse>* grpcIMapsManagerService::Stub::PrepareAsyncdecreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::decreaseMapClientsResponse, ::grpcIMapsManager::decreaseMapClientsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_decreaseMapClients_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::decreaseMapClientsResponse>* grpcIMapsManagerService::Stub::AsyncdecreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdecreaseMapClientsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::getMapRequest(::grpc::ClientContext* context, const ::grpcIMapsManager::getMapRequestRequest& request, ::grpcIMapsManager::getMapRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::getMapRequestRequest, ::grpcIMapsManager::getMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMapRequest_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::getMapRequest(::grpc::ClientContext* context, const ::grpcIMapsManager::getMapRequestRequest* request, ::grpcIMapsManager::getMapRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::getMapRequestRequest, ::grpcIMapsManager::getMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMapRequest_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::getMapRequest(::grpc::ClientContext* context, const ::grpcIMapsManager::getMapRequestRequest* request, ::grpcIMapsManager::getMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMapRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getMapRequestResponse>* grpcIMapsManagerService::Stub::PrepareAsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::getMapRequestResponse, ::grpcIMapsManager::getMapRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMapRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getMapRequestResponse>* grpcIMapsManagerService::Stub::AsyncgetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMapRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::setMapRequest(::grpc::ClientContext* context, const ::grpcIMapsManager::setMapRequestRequest& request, ::grpcIMapsManager::setMapRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::setMapRequestRequest, ::grpcIMapsManager::setMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setMapRequest_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::setMapRequest(::grpc::ClientContext* context, const ::grpcIMapsManager::setMapRequestRequest* request, ::grpcIMapsManager::setMapRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::setMapRequestRequest, ::grpcIMapsManager::setMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMapRequest_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::setMapRequest(::grpc::ClientContext* context, const ::grpcIMapsManager::setMapRequestRequest* request, ::grpcIMapsManager::setMapRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMapRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::setMapRequestResponse>* grpcIMapsManagerService::Stub::PrepareAsyncsetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::setMapRequestResponse, ::grpcIMapsManager::setMapRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setMapRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::setMapRequestResponse>* grpcIMapsManagerService::Stub::AsyncsetMapRequestRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::setMapRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetMapRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIMapsManager::getPointCloudRequestRequest& request, ::grpcIMapsManager::getPointCloudRequestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::getPointCloudRequestRequest, ::grpcIMapsManager::getPointCloudRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPointCloudRequest_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIMapsManager::getPointCloudRequestRequest* request, ::grpcIMapsManager::getPointCloudRequestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::getPointCloudRequestRequest, ::grpcIMapsManager::getPointCloudRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloudRequest_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::getPointCloudRequest(::grpc::ClientContext* context, const ::grpcIMapsManager::getPointCloudRequestRequest* request, ::grpcIMapsManager::getPointCloudRequestResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloudRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getPointCloudRequestResponse>* grpcIMapsManagerService::Stub::PrepareAsyncgetPointCloudRequestRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::getPointCloudRequestResponse, ::grpcIMapsManager::getPointCloudRequestRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPointCloudRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getPointCloudRequestResponse>* grpcIMapsManagerService::Stub::AsyncgetPointCloudRequestRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getPointCloudRequestRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPointCloudRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::requestForMapProcessing(::grpc::ClientContext* context, const ::grpcIMapsManager::requestForMapProcessingRequest& request, ::grpcIMapsManager::requestForMapProcessingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::requestForMapProcessingRequest, ::grpcIMapsManager::requestForMapProcessingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_requestForMapProcessing_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::requestForMapProcessing(::grpc::ClientContext* context, const ::grpcIMapsManager::requestForMapProcessingRequest* request, ::grpcIMapsManager::requestForMapProcessingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::requestForMapProcessingRequest, ::grpcIMapsManager::requestForMapProcessingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestForMapProcessing_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::requestForMapProcessing(::grpc::ClientContext* context, const ::grpcIMapsManager::requestForMapProcessingRequest* request, ::grpcIMapsManager::requestForMapProcessingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestForMapProcessing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::requestForMapProcessingResponse>* grpcIMapsManagerService::Stub::PrepareAsyncrequestForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::requestForMapProcessingResponse, ::grpcIMapsManager::requestForMapProcessingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_requestForMapProcessing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::requestForMapProcessingResponse>* grpcIMapsManagerService::Stub::AsyncrequestForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::requestForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrequestForMapProcessingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::getStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIMapsManager::getStatusForMapProcessingRequest& request, ::grpcIMapsManager::getStatusForMapProcessingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::getStatusForMapProcessingRequest, ::grpcIMapsManager::getStatusForMapProcessingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getStatusForMapProcessing_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::getStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIMapsManager::getStatusForMapProcessingRequest* request, ::grpcIMapsManager::getStatusForMapProcessingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::getStatusForMapProcessingRequest, ::grpcIMapsManager::getStatusForMapProcessingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatusForMapProcessing_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::getStatusForMapProcessing(::grpc::ClientContext* context, const ::grpcIMapsManager::getStatusForMapProcessingRequest* request, ::grpcIMapsManager::getStatusForMapProcessingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatusForMapProcessing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getStatusForMapProcessingResponse>* grpcIMapsManagerService::Stub::PrepareAsyncgetStatusForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::getStatusForMapProcessingResponse, ::grpcIMapsManager::getStatusForMapProcessingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getStatusForMapProcessing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getStatusForMapProcessingResponse>* grpcIMapsManagerService::Stub::AsyncgetStatusForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getStatusForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetStatusForMapProcessingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapsManagerService::Stub::getDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIMapsManager::getDataForMapProcessingRequest& request, ::grpcIMapsManager::getDataForMapProcessingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapsManager::getDataForMapProcessingRequest, ::grpcIMapsManager::getDataForMapProcessingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDataForMapProcessing_, context, request, response);
}

void grpcIMapsManagerService::Stub::async::getDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIMapsManager::getDataForMapProcessingRequest* request, ::grpcIMapsManager::getDataForMapProcessingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapsManager::getDataForMapProcessingRequest, ::grpcIMapsManager::getDataForMapProcessingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDataForMapProcessing_, context, request, response, std::move(f));
}

void grpcIMapsManagerService::Stub::async::getDataForMapProcessing(::grpc::ClientContext* context, const ::grpcIMapsManager::getDataForMapProcessingRequest* request, ::grpcIMapsManager::getDataForMapProcessingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDataForMapProcessing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getDataForMapProcessingResponse>* grpcIMapsManagerService::Stub::PrepareAsyncgetDataForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapsManager::getDataForMapProcessingResponse, ::grpcIMapsManager::getDataForMapProcessingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDataForMapProcessing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapsManager::getDataForMapProcessingResponse>* grpcIMapsManagerService::Stub::AsyncgetDataForMapProcessingRaw(::grpc::ClientContext* context, const ::grpcIMapsManager::getDataForMapProcessingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDataForMapProcessingRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIMapsManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::createMapRequest, ::grpcIMapsManager::createMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::createMapRequest* req,
             ::grpcIMapsManager::createMapResponse* resp) {
               return service->createMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::deleteMapRequest, ::grpcIMapsManager::deleteMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::deleteMapRequest* req,
             ::grpcIMapsManager::deleteMapResponse* resp) {
               return service->deleteMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::getAllMapsRequest, ::grpcIMapsManager::getAllMapsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::getAllMapsRequest* req,
             ::grpcIMapsManager::getAllMapsResponse* resp) {
               return service->getAllMaps(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::registerMapUpdateServiceRequest, ::grpcIMapsManager::registerMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::registerMapUpdateServiceRequest* req,
             ::grpcIMapsManager::registerMapUpdateServiceResponse* resp) {
               return service->registerMapUpdateService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::unregisterMapUpdateServiceRequest, ::grpcIMapsManager::unregisterMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::unregisterMapUpdateServiceRequest* req,
             ::grpcIMapsManager::unregisterMapUpdateServiceResponse* resp) {
               return service->unregisterMapUpdateService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::increaseMapClientsRequest, ::grpcIMapsManager::increaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::increaseMapClientsRequest* req,
             ::grpcIMapsManager::increaseMapClientsResponse* resp) {
               return service->increaseMapClients(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::decreaseMapClientsRequest, ::grpcIMapsManager::decreaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::decreaseMapClientsRequest* req,
             ::grpcIMapsManager::decreaseMapClientsResponse* resp) {
               return service->decreaseMapClients(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::getMapRequestRequest, ::grpcIMapsManager::getMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::getMapRequestRequest* req,
             ::grpcIMapsManager::getMapRequestResponse* resp) {
               return service->getMapRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::setMapRequestRequest, ::grpcIMapsManager::setMapRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::setMapRequestRequest* req,
             ::grpcIMapsManager::setMapRequestResponse* resp) {
               return service->setMapRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::getPointCloudRequestRequest, ::grpcIMapsManager::getPointCloudRequestResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::getPointCloudRequestRequest* req,
             ::grpcIMapsManager::getPointCloudRequestResponse* resp) {
               return service->getPointCloudRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::requestForMapProcessingRequest, ::grpcIMapsManager::requestForMapProcessingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::requestForMapProcessingRequest* req,
             ::grpcIMapsManager::requestForMapProcessingResponse* resp) {
               return service->requestForMapProcessing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::getStatusForMapProcessingRequest, ::grpcIMapsManager::getStatusForMapProcessingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::getStatusForMapProcessingRequest* req,
             ::grpcIMapsManager::getStatusForMapProcessingResponse* resp) {
               return service->getStatusForMapProcessing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapsManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapsManagerService::Service, ::grpcIMapsManager::getDataForMapProcessingRequest, ::grpcIMapsManager::getDataForMapProcessingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapsManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapsManager::getDataForMapProcessingRequest* req,
             ::grpcIMapsManager::getDataForMapProcessingResponse* resp) {
               return service->getDataForMapProcessing(ctx, req, resp);
             }, this)));
}

grpcIMapsManagerService::Service::~Service() {
}

::grpc::Status grpcIMapsManagerService::Service::createMap(::grpc::ServerContext* context, const ::grpcIMapsManager::createMapRequest* request, ::grpcIMapsManager::createMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::deleteMap(::grpc::ServerContext* context, const ::grpcIMapsManager::deleteMapRequest* request, ::grpcIMapsManager::deleteMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::getAllMaps(::grpc::ServerContext* context, const ::grpcIMapsManager::getAllMapsRequest* request, ::grpcIMapsManager::getAllMapsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::registerMapUpdateService(::grpc::ServerContext* context, const ::grpcIMapsManager::registerMapUpdateServiceRequest* request, ::grpcIMapsManager::registerMapUpdateServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::unregisterMapUpdateService(::grpc::ServerContext* context, const ::grpcIMapsManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapsManager::unregisterMapUpdateServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::increaseMapClients(::grpc::ServerContext* context, const ::grpcIMapsManager::increaseMapClientsRequest* request, ::grpcIMapsManager::increaseMapClientsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::decreaseMapClients(::grpc::ServerContext* context, const ::grpcIMapsManager::decreaseMapClientsRequest* request, ::grpcIMapsManager::decreaseMapClientsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::getMapRequest(::grpc::ServerContext* context, const ::grpcIMapsManager::getMapRequestRequest* request, ::grpcIMapsManager::getMapRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::setMapRequest(::grpc::ServerContext* context, const ::grpcIMapsManager::setMapRequestRequest* request, ::grpcIMapsManager::setMapRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::getPointCloudRequest(::grpc::ServerContext* context, const ::grpcIMapsManager::getPointCloudRequestRequest* request, ::grpcIMapsManager::getPointCloudRequestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::requestForMapProcessing(::grpc::ServerContext* context, const ::grpcIMapsManager::requestForMapProcessingRequest* request, ::grpcIMapsManager::requestForMapProcessingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::getStatusForMapProcessing(::grpc::ServerContext* context, const ::grpcIMapsManager::getStatusForMapProcessingRequest* request, ::grpcIMapsManager::getStatusForMapProcessingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapsManagerService::Service::getDataForMapProcessing(::grpc::ServerContext* context, const ::grpcIMapsManager::getDataForMapProcessingRequest* request, ::grpcIMapsManager::getDataForMapProcessingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIMapsManager

