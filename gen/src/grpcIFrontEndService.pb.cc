// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIFrontEndService.proto

#include "grpcIFrontEndService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIFrontEnd {
PROTOBUF_CONSTEXPR registerClientRequest::registerClientRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.worldelementuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct registerClientRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR registerClientRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~registerClientRequestDefaultTypeInternal() {}
  union {
    registerClientRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 registerClientRequestDefaultTypeInternal _registerClientRequest_default_instance_;
PROTOBUF_CONSTEXPR registerClientResponse::registerClientResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct registerClientResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR registerClientResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~registerClientResponseDefaultTypeInternal() {}
  union {
    registerClientResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 registerClientResponseDefaultTypeInternal _registerClientResponse_default_instance_;
PROTOBUF_CONSTEXPR unregisterClientRequest::unregisterClientRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unregisterClientRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unregisterClientRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unregisterClientRequestDefaultTypeInternal() {}
  union {
    unregisterClientRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unregisterClientRequestDefaultTypeInternal _unregisterClientRequest_default_instance_;
PROTOBUF_CONSTEXPR unregisterClientResponse::unregisterClientResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct unregisterClientResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR unregisterClientResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~unregisterClientResponseDefaultTypeInternal() {}
  union {
    unregisterClientResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 unregisterClientResponseDefaultTypeInternal _unregisterClientResponse_default_instance_;
PROTOBUF_CONSTEXPR getAllClientsUUIDRequest::getAllClientsUUIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuidlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAllClientsUUIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAllClientsUUIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAllClientsUUIDRequestDefaultTypeInternal() {}
  union {
    getAllClientsUUIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAllClientsUUIDRequestDefaultTypeInternal _getAllClientsUUIDRequest_default_instance_;
PROTOBUF_CONSTEXPR getAllClientsUUIDResponse::getAllClientsUUIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientuuidlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAllClientsUUIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAllClientsUUIDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAllClientsUUIDResponseDefaultTypeInternal() {}
  union {
    getAllClientsUUIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAllClientsUUIDResponseDefaultTypeInternal _getAllClientsUUIDResponse_default_instance_;
PROTOBUF_CONSTEXPR getDeviceInfoRequest::getDeviceInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.deviceinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getDeviceInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getDeviceInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getDeviceInfoRequestDefaultTypeInternal() {}
  union {
    getDeviceInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getDeviceInfoRequestDefaultTypeInternal _getDeviceInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR getDeviceInfoResponse::getDeviceInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deviceinfo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getDeviceInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getDeviceInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getDeviceInfoResponseDefaultTypeInternal() {}
  union {
    getDeviceInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getDeviceInfoResponseDefaultTypeInternal _getDeviceInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR init_grpc0Request::init_grpc0Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct init_grpc0RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR init_grpc0RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~init_grpc0RequestDefaultTypeInternal() {}
  union {
    init_grpc0Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 init_grpc0RequestDefaultTypeInternal _init_grpc0Request_default_instance_;
PROTOBUF_CONSTEXPR init_grpc0Response::init_grpc0Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct init_grpc0ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR init_grpc0ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~init_grpc0ResponseDefaultTypeInternal() {}
  union {
    init_grpc0Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 init_grpc0ResponseDefaultTypeInternal _init_grpc0Response_default_instance_;
PROTOBUF_CONSTEXPR init_grpc1Request::init_grpc1Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.pipelinemode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct init_grpc1RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR init_grpc1RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~init_grpc1RequestDefaultTypeInternal() {}
  union {
    init_grpc1Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 init_grpc1RequestDefaultTypeInternal _init_grpc1Request_default_instance_;
PROTOBUF_CONSTEXPR init_grpc1Response::init_grpc1Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct init_grpc1ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR init_grpc1ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~init_grpc1ResponseDefaultTypeInternal() {}
  union {
    init_grpc1Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 init_grpc1ResponseDefaultTypeInternal _init_grpc1Response_default_instance_;
PROTOBUF_CONSTEXPR startRequest::startRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct startRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR startRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~startRequestDefaultTypeInternal() {}
  union {
    startRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 startRequestDefaultTypeInternal _startRequest_default_instance_;
PROTOBUF_CONSTEXPR startResponse::startResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct startResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR startResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~startResponseDefaultTypeInternal() {}
  union {
    startResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 startResponseDefaultTypeInternal _startResponse_default_instance_;
PROTOBUF_CONSTEXPR stopRequest::stopRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct stopRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR stopRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~stopRequestDefaultTypeInternal() {}
  union {
    stopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 stopRequestDefaultTypeInternal _stopRequest_default_instance_;
PROTOBUF_CONSTEXPR stopResponse::stopResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct stopResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR stopResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~stopResponseDefaultTypeInternal() {}
  union {
    stopResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 stopResponseDefaultTypeInternal _stopResponse_default_instance_;
PROTOBUF_CONSTEXPR getProcessingModeRequest::getProcessingModeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.pipelinemode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getProcessingModeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getProcessingModeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getProcessingModeRequestDefaultTypeInternal() {}
  union {
    getProcessingModeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getProcessingModeRequestDefaultTypeInternal _getProcessingModeRequest_default_instance_;
PROTOBUF_CONSTEXPR getProcessingModeResponse::getProcessingModeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pipelinemode_)*/0
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getProcessingModeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getProcessingModeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getProcessingModeResponseDefaultTypeInternal() {}
  union {
    getProcessingModeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getProcessingModeResponseDefaultTypeInternal _getProcessingModeResponse_default_instance_;
PROTOBUF_CONSTEXPR setCameraParameters_grpc0Request::setCameraParameters_grpc0Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cameraparams_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct setCameraParameters_grpc0RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setCameraParameters_grpc0RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setCameraParameters_grpc0RequestDefaultTypeInternal() {}
  union {
    setCameraParameters_grpc0Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setCameraParameters_grpc0RequestDefaultTypeInternal _setCameraParameters_grpc0Request_default_instance_;
PROTOBUF_CONSTEXPR setCameraParameters_grpc0Response::setCameraParameters_grpc0Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct setCameraParameters_grpc0ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setCameraParameters_grpc0ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setCameraParameters_grpc0ResponseDefaultTypeInternal() {}
  union {
    setCameraParameters_grpc0Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setCameraParameters_grpc0ResponseDefaultTypeInternal _setCameraParameters_grpc0Response_default_instance_;
PROTOBUF_CONSTEXPR setCameraParameters_grpc1Request::setCameraParameters_grpc1Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cameraparams1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cameraparams2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct setCameraParameters_grpc1RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setCameraParameters_grpc1RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setCameraParameters_grpc1RequestDefaultTypeInternal() {}
  union {
    setCameraParameters_grpc1Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setCameraParameters_grpc1RequestDefaultTypeInternal _setCameraParameters_grpc1Request_default_instance_;
PROTOBUF_CONSTEXPR setCameraParameters_grpc1Response::setCameraParameters_grpc1Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct setCameraParameters_grpc1ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setCameraParameters_grpc1ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setCameraParameters_grpc1ResponseDefaultTypeInternal() {}
  union {
    setCameraParameters_grpc1Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setCameraParameters_grpc1ResponseDefaultTypeInternal _setCameraParameters_grpc1Response_default_instance_;
PROTOBUF_CONSTEXPR setRectificationParametersRequest::setRectificationParametersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rectcam1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rectcam2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct setRectificationParametersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setRectificationParametersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setRectificationParametersRequestDefaultTypeInternal() {}
  union {
    setRectificationParametersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setRectificationParametersRequestDefaultTypeInternal _setRectificationParametersRequest_default_instance_;
PROTOBUF_CONSTEXPR setRectificationParametersResponse::setRectificationParametersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct setRectificationParametersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setRectificationParametersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setRectificationParametersResponseDefaultTypeInternal() {}
  union {
    setRectificationParametersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setRectificationParametersResponseDefaultTypeInternal _setRectificationParametersResponse_default_instance_;
PROTOBUF_CONSTEXPR getCameraParametersRequest::getCameraParametersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cameraparams_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getCameraParametersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getCameraParametersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getCameraParametersRequestDefaultTypeInternal() {}
  union {
    getCameraParametersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getCameraParametersRequestDefaultTypeInternal _getCameraParametersRequest_default_instance_;
PROTOBUF_CONSTEXPR getCameraParametersResponse::getCameraParametersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cameraparams_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getCameraParametersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getCameraParametersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getCameraParametersResponseDefaultTypeInternal() {}
  union {
    getCameraParametersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getCameraParametersResponseDefaultTypeInternal _getCameraParametersResponse_default_instance_;
PROTOBUF_CONSTEXPR imageProcessRequestRequest::imageProcessRequestRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.images_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.poses_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.worldtransform_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transform3d_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.confidence_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detectedobjects_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.fixedpose_)*/false
  , /*decltype(_impl_.transform3dstatus_)*/0
  , /*decltype(_impl_.mappingstatus_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct imageProcessRequestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR imageProcessRequestRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~imageProcessRequestRequestDefaultTypeInternal() {}
  union {
    imageProcessRequestRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 imageProcessRequestRequestDefaultTypeInternal _imageProcessRequestRequest_default_instance_;
PROTOBUF_CONSTEXPR imageProcessRequestResponse::imageProcessRequestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transform3d_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.confidence_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detectedobjects_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transform3dstatus_)*/0
  , /*decltype(_impl_.mappingstatus_)*/0
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct imageProcessRequestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR imageProcessRequestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~imageProcessRequestResponseDefaultTypeInternal() {}
  union {
    imageProcessRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 imageProcessRequestResponseDefaultTypeInternal _imageProcessRequestResponse_default_instance_;
PROTOBUF_CONSTEXPR getMappingDataRequestRequest::getMappingDataRequestRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outputpointclouds_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.keyframeposes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMappingDataRequestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMappingDataRequestRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMappingDataRequestRequestDefaultTypeInternal() {}
  union {
    getMappingDataRequestRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMappingDataRequestRequestDefaultTypeInternal _getMappingDataRequestRequest_default_instance_;
PROTOBUF_CONSTEXPR getMappingDataRequestResponse::getMappingDataRequestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.outputpointclouds_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.keyframeposes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMappingDataRequestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMappingDataRequestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMappingDataRequestResponseDefaultTypeInternal() {}
  union {
    getMappingDataRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMappingDataRequestResponseDefaultTypeInternal _getMappingDataRequestResponse_default_instance_;
PROTOBUF_CONSTEXPR getClientPoseRequest::getClientPoseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transform3d_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.confidence_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pose_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.posetype_)*/0
  , /*decltype(_impl_.transform3dstatus_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getClientPoseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getClientPoseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getClientPoseRequestDefaultTypeInternal() {}
  union {
    getClientPoseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getClientPoseRequestDefaultTypeInternal _getClientPoseRequest_default_instance_;
PROTOBUF_CONSTEXPR getClientPoseResponse::getClientPoseResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transform3d_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.confidence_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pose_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.transform3dstatus_)*/0
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getClientPoseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getClientPoseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getClientPoseResponseDefaultTypeInternal() {}
  union {
    getClientPoseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getClientPoseResponseDefaultTypeInternal _getClientPoseResponse_default_instance_;
PROTOBUF_CONSTEXPR createMapRequest::createMapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct createMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createMapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~createMapRequestDefaultTypeInternal() {}
  union {
    createMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createMapRequestDefaultTypeInternal _createMapRequest_default_instance_;
PROTOBUF_CONSTEXPR createMapResponse::createMapResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct createMapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR createMapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~createMapResponseDefaultTypeInternal() {}
  union {
    createMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 createMapResponseDefaultTypeInternal _createMapResponse_default_instance_;
PROTOBUF_CONSTEXPR deleteMapRequest::deleteMapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct deleteMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR deleteMapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~deleteMapRequestDefaultTypeInternal() {}
  union {
    deleteMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 deleteMapRequestDefaultTypeInternal _deleteMapRequest_default_instance_;
PROTOBUF_CONSTEXPR deleteMapResponse::deleteMapResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct deleteMapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR deleteMapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~deleteMapResponseDefaultTypeInternal() {}
  union {
    deleteMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 deleteMapResponseDefaultTypeInternal _deleteMapResponse_default_instance_;
PROTOBUF_CONSTEXPR getAllMapsUUIDRequest::getAllMapsUUIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuidlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAllMapsUUIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAllMapsUUIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAllMapsUUIDRequestDefaultTypeInternal() {}
  union {
    getAllMapsUUIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAllMapsUUIDRequestDefaultTypeInternal _getAllMapsUUIDRequest_default_instance_;
PROTOBUF_CONSTEXPR getAllMapsUUIDResponse::getAllMapsUUIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapuuidlist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getAllMapsUUIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getAllMapsUUIDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getAllMapsUUIDResponseDefaultTypeInternal() {}
  union {
    getAllMapsUUIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getAllMapsUUIDResponseDefaultTypeInternal _getAllMapsUUIDResponse_default_instance_;
PROTOBUF_CONSTEXPR getClientMapUUIDRequest::getClientMapUUIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getClientMapUUIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getClientMapUUIDRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getClientMapUUIDRequestDefaultTypeInternal() {}
  union {
    getClientMapUUIDRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getClientMapUUIDRequestDefaultTypeInternal _getClientMapUUIDRequest_default_instance_;
PROTOBUF_CONSTEXPR getClientMapUUIDResponse::getClientMapUUIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getClientMapUUIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getClientMapUUIDResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getClientMapUUIDResponseDefaultTypeInternal() {}
  union {
    getClientMapUUIDResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getClientMapUUIDResponseDefaultTypeInternal _getClientMapUUIDResponse_default_instance_;
PROTOBUF_CONSTEXPR getClientInfoForMapRequest::getClientInfoForMapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientinfolist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getClientInfoForMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getClientInfoForMapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getClientInfoForMapRequestDefaultTypeInternal() {}
  union {
    getClientInfoForMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getClientInfoForMapRequestDefaultTypeInternal _getClientInfoForMapRequest_default_instance_;
PROTOBUF_CONSTEXPR getClientInfoForMapResponse::getClientInfoForMapResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientinfolist_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getClientInfoForMapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getClientInfoForMapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getClientInfoForMapResponseDefaultTypeInternal() {}
  union {
    getClientInfoForMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getClientInfoForMapResponseDefaultTypeInternal _getClientInfoForMapResponse_default_instance_;
PROTOBUF_CONSTEXPR getMapRequestRequest::getMapRequestRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapdatastructure_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.withkeyframeimages_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMapRequestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMapRequestRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMapRequestRequestDefaultTypeInternal() {}
  union {
    getMapRequestRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMapRequestRequestDefaultTypeInternal _getMapRequestRequest_default_instance_;
PROTOBUF_CONSTEXPR getMapRequestResponse::getMapRequestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapdatastructure_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMapRequestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMapRequestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMapRequestResponseDefaultTypeInternal() {}
  union {
    getMapRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMapRequestResponseDefaultTypeInternal _getMapRequestResponse_default_instance_;
PROTOBUF_CONSTEXPR setMapRequestRequest::setMapRequestRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapdatastructure_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct setMapRequestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setMapRequestRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setMapRequestRequestDefaultTypeInternal() {}
  union {
    setMapRequestRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setMapRequestRequestDefaultTypeInternal _setMapRequestRequest_default_instance_;
PROTOBUF_CONSTEXPR setMapRequestResponse::setMapRequestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct setMapRequestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setMapRequestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setMapRequestResponseDefaultTypeInternal() {}
  union {
    setMapRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setMapRequestResponseDefaultTypeInternal _setMapRequestResponse_default_instance_;
PROTOBUF_CONSTEXPR getPointCloudRequestRequest::getPointCloudRequestRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pointcloud_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getPointCloudRequestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getPointCloudRequestRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getPointCloudRequestRequestDefaultTypeInternal() {}
  union {
    getPointCloudRequestRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getPointCloudRequestRequestDefaultTypeInternal _getPointCloudRequestRequest_default_instance_;
PROTOBUF_CONSTEXPR getPointCloudRequestResponse::getPointCloudRequestResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pointcloud_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getPointCloudRequestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getPointCloudRequestResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getPointCloudRequestResponseDefaultTypeInternal() {}
  union {
    getPointCloudRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getPointCloudRequestResponseDefaultTypeInternal _getPointCloudRequestResponse_default_instance_;
PROTOBUF_CONSTEXPR getMapInfoRequest::getMapInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.descriptortype_)*/0
  , /*decltype(_impl_.mapsupportedtypes_)*/0u
  , /*decltype(_impl_.datasize_)*/0u
  , /*decltype(_impl_.areimagesaved_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMapInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMapInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMapInfoRequestDefaultTypeInternal() {}
  union {
    getMapInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMapInfoRequestDefaultTypeInternal _getMapInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR getMapInfoResponse::getMapInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.descriptortype_)*/0
  , /*decltype(_impl_.mapsupportedtypes_)*/0u
  , /*decltype(_impl_.datasize_)*/0u
  , /*decltype(_impl_.areimagesaved_)*/false
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMapInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMapInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMapInfoResponseDefaultTypeInternal() {}
  union {
    getMapInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMapInfoResponseDefaultTypeInternal _getMapInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR requestMapProcessingRequest::requestMapProcessingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resultmapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.processingtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct requestMapProcessingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR requestMapProcessingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~requestMapProcessingRequestDefaultTypeInternal() {}
  union {
    requestMapProcessingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 requestMapProcessingRequestDefaultTypeInternal _requestMapProcessingRequest_default_instance_;
PROTOBUF_CONSTEXPR requestMapProcessingResponse::requestMapProcessingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct requestMapProcessingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR requestMapProcessingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~requestMapProcessingResponseDefaultTypeInternal() {}
  union {
    requestMapProcessingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 requestMapProcessingResponseDefaultTypeInternal _requestMapProcessingResponse_default_instance_;
PROTOBUF_CONSTEXPR getMapProcessingStatusRequest::getMapProcessingStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resultmapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMapProcessingStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMapProcessingStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMapProcessingStatusRequestDefaultTypeInternal() {}
  union {
    getMapProcessingStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMapProcessingStatusRequestDefaultTypeInternal _getMapProcessingStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR getMapProcessingStatusResponse::getMapProcessingStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMapProcessingStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMapProcessingStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMapProcessingStatusResponseDefaultTypeInternal() {}
  union {
    getMapProcessingStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMapProcessingStatusResponseDefaultTypeInternal _getMapProcessingStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR getMapProcessingDataRequest::getMapProcessingDataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accesstoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resultmapuuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pointcloud_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.keyframeposes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grpcservercompressionformat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMapProcessingDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMapProcessingDataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMapProcessingDataRequestDefaultTypeInternal() {}
  union {
    getMapProcessingDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMapProcessingDataRequestDefaultTypeInternal _getMapProcessingDataRequest_default_instance_;
PROTOBUF_CONSTEXPR getMapProcessingDataResponse::getMapProcessingDataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pointcloud_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.keyframeposes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.xpcfgrpcreturnvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct getMapProcessingDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR getMapProcessingDataResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~getMapProcessingDataResponseDefaultTypeInternal() {}
  union {
    getMapProcessingDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 getMapProcessingDataResponseDefaultTypeInternal _getMapProcessingDataResponse_default_instance_;
}  // namespace grpcIFrontEnd
static ::_pb::Metadata file_level_metadata_grpcIFrontEndService_2eproto[56];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIFrontEndService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIFrontEndService_2eproto = nullptr;

const uint32_t TableStruct_grpcIFrontEndService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::registerClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::registerClientRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::registerClientRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::registerClientRequest, _impl_.deviceinfo_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::registerClientRequest, _impl_.worldelementuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::registerClientRequest, _impl_.clientuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::registerClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::registerClientResponse, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::registerClientResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::unregisterClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::unregisterClientRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::unregisterClientRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::unregisterClientRequest, _impl_.clientuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::unregisterClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::unregisterClientResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllClientsUUIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllClientsUUIDRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllClientsUUIDRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllClientsUUIDRequest, _impl_.clientuuidlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllClientsUUIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllClientsUUIDResponse, _impl_.clientuuidlist_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllClientsUUIDResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getDeviceInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getDeviceInfoRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getDeviceInfoRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getDeviceInfoRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getDeviceInfoRequest, _impl_.deviceinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getDeviceInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getDeviceInfoResponse, _impl_.deviceinfo_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getDeviceInfoResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc0Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc0Request, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc0Request, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc0Request, _impl_.clientuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc0Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc0Response, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc1Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc1Request, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc1Request, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc1Request, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc1Request, _impl_.pipelinemode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc1Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::init_grpc1Response, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::startRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::startRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::startRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::startRequest, _impl_.clientuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::startResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::startResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::stopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::stopRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::stopRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::stopRequest, _impl_.clientuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::stopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::stopResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getProcessingModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getProcessingModeRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getProcessingModeRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getProcessingModeRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getProcessingModeRequest, _impl_.pipelinemode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getProcessingModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getProcessingModeResponse, _impl_.pipelinemode_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getProcessingModeResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc0Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc0Request, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc0Request, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc0Request, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc0Request, _impl_.cameraparams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc0Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc0Response, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc1Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc1Request, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc1Request, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc1Request, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc1Request, _impl_.cameraparams1_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc1Request, _impl_.cameraparams2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc1Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setCameraParameters_grpc1Response, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setRectificationParametersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setRectificationParametersRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setRectificationParametersRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setRectificationParametersRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setRectificationParametersRequest, _impl_.rectcam1_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setRectificationParametersRequest, _impl_.rectcam2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setRectificationParametersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setRectificationParametersResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getCameraParametersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getCameraParametersRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getCameraParametersRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getCameraParametersRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getCameraParametersRequest, _impl_.cameraparams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getCameraParametersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getCameraParametersResponse, _impl_.cameraparams_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getCameraParametersResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.images_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.poses_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.fixedpose_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.worldtransform_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.transform3dstatus_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.transform3d_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.mappingstatus_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestRequest, _impl_.detectedobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestResponse, _impl_.transform3dstatus_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestResponse, _impl_.transform3d_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestResponse, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestResponse, _impl_.mappingstatus_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestResponse, _impl_.detectedobjects_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::imageProcessRequestResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestRequest, _impl_.outputpointclouds_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestRequest, _impl_.keyframeposes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestResponse, _impl_.outputpointclouds_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestResponse, _impl_.keyframeposes_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMappingDataRequestResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseRequest, _impl_.posetype_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseRequest, _impl_.transform3dstatus_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseRequest, _impl_.transform3d_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseRequest, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseRequest, _impl_.pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseResponse, _impl_.transform3dstatus_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseResponse, _impl_.transform3d_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseResponse, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseResponse, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientPoseResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::createMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::createMapRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::createMapRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::createMapRequest, _impl_.mapuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::createMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::createMapResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::deleteMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::deleteMapRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::deleteMapRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::deleteMapRequest, _impl_.mapuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::deleteMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::deleteMapResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllMapsUUIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllMapsUUIDRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllMapsUUIDRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllMapsUUIDRequest, _impl_.mapuuidlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllMapsUUIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllMapsUUIDResponse, _impl_.mapuuidlist_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getAllMapsUUIDResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientMapUUIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientMapUUIDRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientMapUUIDRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientMapUUIDRequest, _impl_.clientuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientMapUUIDRequest, _impl_.mapuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientMapUUIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientMapUUIDResponse, _impl_.mapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientMapUUIDResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientInfoForMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientInfoForMapRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientInfoForMapRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientInfoForMapRequest, _impl_.mapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientInfoForMapRequest, _impl_.clientinfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientInfoForMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientInfoForMapResponse, _impl_.clientinfolist_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getClientInfoForMapResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapRequestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapRequestRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapRequestRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapRequestRequest, _impl_.mapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapRequestRequest, _impl_.withkeyframeimages_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapRequestRequest, _impl_.mapdatastructure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapRequestResponse, _impl_.mapdatastructure_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapRequestResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setMapRequestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setMapRequestRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setMapRequestRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setMapRequestRequest, _impl_.mapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setMapRequestRequest, _impl_.mapdatastructure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setMapRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::setMapRequestResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getPointCloudRequestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getPointCloudRequestRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getPointCloudRequestRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getPointCloudRequestRequest, _impl_.mapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getPointCloudRequestRequest, _impl_.pointcloud_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getPointCloudRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getPointCloudRequestResponse, _impl_.pointcloud_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getPointCloudRequestResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoRequest, _impl_.mapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoRequest, _impl_.descriptortype_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoRequest, _impl_.mapsupportedtypes_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoRequest, _impl_.datasize_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoRequest, _impl_.areimagesaved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoResponse, _impl_.descriptortype_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoResponse, _impl_.mapsupportedtypes_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoResponse, _impl_.datasize_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoResponse, _impl_.areimagesaved_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapInfoResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::requestMapProcessingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::requestMapProcessingRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::requestMapProcessingRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::requestMapProcessingRequest, _impl_.mapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::requestMapProcessingRequest, _impl_.resultmapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::requestMapProcessingRequest, _impl_.processingtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::requestMapProcessingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::requestMapProcessingResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusRequest, _impl_.resultmapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusRequest, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusRequest, _impl_.progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusResponse, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingStatusResponse, _impl_.xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataRequest, _impl_.grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataRequest, _impl_.accesstoken_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataRequest, _impl_.resultmapuuid_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataRequest, _impl_.pointcloud_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataRequest, _impl_.keyframeposes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataResponse, _impl_.pointcloud_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataResponse, _impl_.keyframeposes_),
  PROTOBUF_FIELD_OFFSET(::grpcIFrontEnd::getMapProcessingDataResponse, _impl_.xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIFrontEnd::registerClientRequest)},
  { 11, -1, -1, sizeof(::grpcIFrontEnd::registerClientResponse)},
  { 19, -1, -1, sizeof(::grpcIFrontEnd::unregisterClientRequest)},
  { 28, -1, -1, sizeof(::grpcIFrontEnd::unregisterClientResponse)},
  { 35, -1, -1, sizeof(::grpcIFrontEnd::getAllClientsUUIDRequest)},
  { 44, -1, -1, sizeof(::grpcIFrontEnd::getAllClientsUUIDResponse)},
  { 52, -1, -1, sizeof(::grpcIFrontEnd::getDeviceInfoRequest)},
  { 62, -1, -1, sizeof(::grpcIFrontEnd::getDeviceInfoResponse)},
  { 70, -1, -1, sizeof(::grpcIFrontEnd::init_grpc0Request)},
  { 79, -1, -1, sizeof(::grpcIFrontEnd::init_grpc0Response)},
  { 86, -1, -1, sizeof(::grpcIFrontEnd::init_grpc1Request)},
  { 96, -1, -1, sizeof(::grpcIFrontEnd::init_grpc1Response)},
  { 103, -1, -1, sizeof(::grpcIFrontEnd::startRequest)},
  { 112, -1, -1, sizeof(::grpcIFrontEnd::startResponse)},
  { 119, -1, -1, sizeof(::grpcIFrontEnd::stopRequest)},
  { 128, -1, -1, sizeof(::grpcIFrontEnd::stopResponse)},
  { 135, -1, -1, sizeof(::grpcIFrontEnd::getProcessingModeRequest)},
  { 145, -1, -1, sizeof(::grpcIFrontEnd::getProcessingModeResponse)},
  { 153, -1, -1, sizeof(::grpcIFrontEnd::setCameraParameters_grpc0Request)},
  { 163, -1, -1, sizeof(::grpcIFrontEnd::setCameraParameters_grpc0Response)},
  { 170, -1, -1, sizeof(::grpcIFrontEnd::setCameraParameters_grpc1Request)},
  { 181, -1, -1, sizeof(::grpcIFrontEnd::setCameraParameters_grpc1Response)},
  { 188, -1, -1, sizeof(::grpcIFrontEnd::setRectificationParametersRequest)},
  { 199, -1, -1, sizeof(::grpcIFrontEnd::setRectificationParametersResponse)},
  { 206, -1, -1, sizeof(::grpcIFrontEnd::getCameraParametersRequest)},
  { 216, -1, -1, sizeof(::grpcIFrontEnd::getCameraParametersResponse)},
  { 224, -1, -1, sizeof(::grpcIFrontEnd::imageProcessRequestRequest)},
  { 243, -1, -1, sizeof(::grpcIFrontEnd::imageProcessRequestResponse)},
  { 255, -1, -1, sizeof(::grpcIFrontEnd::getMappingDataRequestRequest)},
  { 266, -1, -1, sizeof(::grpcIFrontEnd::getMappingDataRequestResponse)},
  { 275, -1, -1, sizeof(::grpcIFrontEnd::getClientPoseRequest)},
  { 289, -1, -1, sizeof(::grpcIFrontEnd::getClientPoseResponse)},
  { 300, -1, -1, sizeof(::grpcIFrontEnd::createMapRequest)},
  { 309, -1, -1, sizeof(::grpcIFrontEnd::createMapResponse)},
  { 316, -1, -1, sizeof(::grpcIFrontEnd::deleteMapRequest)},
  { 325, -1, -1, sizeof(::grpcIFrontEnd::deleteMapResponse)},
  { 332, -1, -1, sizeof(::grpcIFrontEnd::getAllMapsUUIDRequest)},
  { 341, -1, -1, sizeof(::grpcIFrontEnd::getAllMapsUUIDResponse)},
  { 349, -1, -1, sizeof(::grpcIFrontEnd::getClientMapUUIDRequest)},
  { 359, -1, -1, sizeof(::grpcIFrontEnd::getClientMapUUIDResponse)},
  { 367, -1, -1, sizeof(::grpcIFrontEnd::getClientInfoForMapRequest)},
  { 377, -1, -1, sizeof(::grpcIFrontEnd::getClientInfoForMapResponse)},
  { 385, -1, -1, sizeof(::grpcIFrontEnd::getMapRequestRequest)},
  { 396, -1, -1, sizeof(::grpcIFrontEnd::getMapRequestResponse)},
  { 404, -1, -1, sizeof(::grpcIFrontEnd::setMapRequestRequest)},
  { 414, -1, -1, sizeof(::grpcIFrontEnd::setMapRequestResponse)},
  { 421, -1, -1, sizeof(::grpcIFrontEnd::getPointCloudRequestRequest)},
  { 431, -1, -1, sizeof(::grpcIFrontEnd::getPointCloudRequestResponse)},
  { 439, -1, -1, sizeof(::grpcIFrontEnd::getMapInfoRequest)},
  { 452, -1, -1, sizeof(::grpcIFrontEnd::getMapInfoResponse)},
  { 463, -1, -1, sizeof(::grpcIFrontEnd::requestMapProcessingRequest)},
  { 474, -1, -1, sizeof(::grpcIFrontEnd::requestMapProcessingResponse)},
  { 481, -1, -1, sizeof(::grpcIFrontEnd::getMapProcessingStatusRequest)},
  { 492, -1, -1, sizeof(::grpcIFrontEnd::getMapProcessingStatusResponse)},
  { 501, -1, -1, sizeof(::grpcIFrontEnd::getMapProcessingDataRequest)},
  { 512, -1, -1, sizeof(::grpcIFrontEnd::getMapProcessingDataResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIFrontEnd::_registerClientRequest_default_instance_._instance,
  &::grpcIFrontEnd::_registerClientResponse_default_instance_._instance,
  &::grpcIFrontEnd::_unregisterClientRequest_default_instance_._instance,
  &::grpcIFrontEnd::_unregisterClientResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getAllClientsUUIDRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getAllClientsUUIDResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getDeviceInfoRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getDeviceInfoResponse_default_instance_._instance,
  &::grpcIFrontEnd::_init_grpc0Request_default_instance_._instance,
  &::grpcIFrontEnd::_init_grpc0Response_default_instance_._instance,
  &::grpcIFrontEnd::_init_grpc1Request_default_instance_._instance,
  &::grpcIFrontEnd::_init_grpc1Response_default_instance_._instance,
  &::grpcIFrontEnd::_startRequest_default_instance_._instance,
  &::grpcIFrontEnd::_startResponse_default_instance_._instance,
  &::grpcIFrontEnd::_stopRequest_default_instance_._instance,
  &::grpcIFrontEnd::_stopResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getProcessingModeRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getProcessingModeResponse_default_instance_._instance,
  &::grpcIFrontEnd::_setCameraParameters_grpc0Request_default_instance_._instance,
  &::grpcIFrontEnd::_setCameraParameters_grpc0Response_default_instance_._instance,
  &::grpcIFrontEnd::_setCameraParameters_grpc1Request_default_instance_._instance,
  &::grpcIFrontEnd::_setCameraParameters_grpc1Response_default_instance_._instance,
  &::grpcIFrontEnd::_setRectificationParametersRequest_default_instance_._instance,
  &::grpcIFrontEnd::_setRectificationParametersResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getCameraParametersRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getCameraParametersResponse_default_instance_._instance,
  &::grpcIFrontEnd::_imageProcessRequestRequest_default_instance_._instance,
  &::grpcIFrontEnd::_imageProcessRequestResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getMappingDataRequestRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getMappingDataRequestResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getClientPoseRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getClientPoseResponse_default_instance_._instance,
  &::grpcIFrontEnd::_createMapRequest_default_instance_._instance,
  &::grpcIFrontEnd::_createMapResponse_default_instance_._instance,
  &::grpcIFrontEnd::_deleteMapRequest_default_instance_._instance,
  &::grpcIFrontEnd::_deleteMapResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getAllMapsUUIDRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getAllMapsUUIDResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getClientMapUUIDRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getClientMapUUIDResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getClientInfoForMapRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getClientInfoForMapResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getMapRequestRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getMapRequestResponse_default_instance_._instance,
  &::grpcIFrontEnd::_setMapRequestRequest_default_instance_._instance,
  &::grpcIFrontEnd::_setMapRequestResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getPointCloudRequestRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getPointCloudRequestResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getMapInfoRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getMapInfoResponse_default_instance_._instance,
  &::grpcIFrontEnd::_requestMapProcessingRequest_default_instance_._instance,
  &::grpcIFrontEnd::_requestMapProcessingResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getMapProcessingStatusRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getMapProcessingStatusResponse_default_instance_._instance,
  &::grpcIFrontEnd::_getMapProcessingDataRequest_default_instance_._instance,
  &::grpcIFrontEnd::_getMapProcessingDataResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIFrontEndService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032grpcIFrontEndService.proto\022\rgrpcIFront"
  "End\032\033google/protobuf/empty.proto\"\223\001\n\025reg"
  "isterClientRequest\022#\n\033grpcServerCompress"
  "ionFormat\030\001 \001(\005\022\023\n\013accessToken\030\002 \001(\t\022\022\n\n"
  "deviceInfo\030\003 \001(\014\022\030\n\020worldElementUUID\030\004 \001"
  "(\t\022\022\n\nclientUUID\030\005 \001(\t\"I\n\026registerClient"
  "Response\022\022\n\nclientUUID\030\001 \001(\t\022\033\n\023xpcfGrpc"
  "ReturnValue\030\002 \001(\021\"g\n\027unregisterClientReq"
  "uest\022#\n\033grpcServerCompressionFormat\030\001 \001("
  "\005\022\023\n\013accessToken\030\002 \001(\t\022\022\n\nclientUUID\030\003 \001"
  "(\t\"7\n\030unregisterClientResponse\022\033\n\023xpcfGr"
  "pcReturnValue\030\001 \001(\021\"l\n\030getAllClientsUUID"
  "Request\022#\n\033grpcServerCompressionFormat\030\001"
  " \001(\005\022\023\n\013accessToken\030\002 \001(\t\022\026\n\016clientUUIDL"
  "ist\030\003 \001(\014\"P\n\031getAllClientsUUIDResponse\022\026"
  "\n\016clientUUIDList\030\001 \001(\014\022\033\n\023xpcfGrpcReturn"
  "Value\030\002 \001(\021\"x\n\024getDeviceInfoRequest\022#\n\033g"
  "rpcServerCompressionFormat\030\001 \001(\005\022\023\n\013acce"
  "ssToken\030\002 \001(\t\022\022\n\nclientUUID\030\003 \001(\t\022\022\n\ndev"
  "iceInfo\030\004 \001(\014\"H\n\025getDeviceInfoResponse\022\022"
  "\n\ndeviceInfo\030\001 \001(\014\022\033\n\023xpcfGrpcReturnValu"
  "e\030\002 \001(\021\"a\n\021init_grpc0Request\022#\n\033grpcServ"
  "erCompressionFormat\030\001 \001(\005\022\023\n\013accessToken"
  "\030\002 \001(\t\022\022\n\nclientUUID\030\003 \001(\t\"1\n\022init_grpc0"
  "Response\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"w\n"
  "\021init_grpc1Request\022#\n\033grpcServerCompress"
  "ionFormat\030\001 \001(\005\022\023\n\013accessToken\030\002 \001(\t\022\022\n\n"
  "clientUUID\030\003 \001(\t\022\024\n\014pipelineMode\030\004 \001(\021\"1"
  "\n\022init_grpc1Response\022\033\n\023xpcfGrpcReturnVa"
  "lue\030\001 \001(\021\"\\\n\014startRequest\022#\n\033grpcServerC"
  "ompressionFormat\030\001 \001(\005\022\023\n\013accessToken\030\002 "
  "\001(\t\022\022\n\nclientUUID\030\003 \001(\t\",\n\rstartResponse"
  "\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"[\n\013stopReq"
  "uest\022#\n\033grpcServerCompressionFormat\030\001 \001("
  "\005\022\023\n\013accessToken\030\002 \001(\t\022\022\n\nclientUUID\030\003 \001"
  "(\t\"+\n\014stopResponse\022\033\n\023xpcfGrpcReturnValu"
  "e\030\001 \001(\021\"~\n\030getProcessingModeRequest\022#\n\033g"
  "rpcServerCompressionFormat\030\001 \001(\005\022\023\n\013acce"
  "ssToken\030\002 \001(\t\022\022\n\nclientUUID\030\003 \001(\t\022\024\n\014pip"
  "elineMode\030\004 \001(\021\"N\n\031getProcessingModeResp"
  "onse\022\024\n\014pipelineMode\030\001 \001(\021\022\033\n\023xpcfGrpcRe"
  "turnValue\030\002 \001(\021\"\206\001\n setCameraParameters_"
  "grpc0Request\022#\n\033grpcServerCompressionFor"
  "mat\030\001 \001(\005\022\023\n\013accessToken\030\002 \001(\t\022\022\n\nclient"
  "UUID\030\003 \001(\t\022\024\n\014cameraParams\030\004 \001(\014\"@\n!setC"
  "ameraParameters_grpc0Response\022\033\n\023xpcfGrp"
  "cReturnValue\030\001 \001(\021\"\236\001\n setCameraParamete"
  "rs_grpc1Request\022#\n\033grpcServerCompression"
  "Format\030\001 \001(\005\022\023\n\013accessToken\030\002 \001(\t\022\022\n\ncli"
  "entUUID\030\003 \001(\t\022\025\n\rcameraParams1\030\004 \001(\014\022\025\n\r"
  "cameraParams2\030\005 \001(\014\"@\n!setCameraParamete"
  "rs_grpc1Response\022\033\n\023xpcfGrpcReturnValue\030"
  "\001 \001(\021\"\225\001\n!setRectificationParametersRequ"
  "est\022#\n\033grpcServerCompressionFormat\030\001 \001(\005"
  "\022\023\n\013accessToken\030\002 \001(\t\022\022\n\nclientUUID\030\003 \001("
  "\t\022\020\n\010rectCam1\030\004 \001(\014\022\020\n\010rectCam2\030\005 \001(\014\"A\n"
  "\"setRectificationParametersResponse\022\033\n\023x"
  "pcfGrpcReturnValue\030\001 \001(\021\"\200\001\n\032getCameraPa"
  "rametersRequest\022#\n\033grpcServerCompression"
  "Format\030\001 \001(\005\022\023\n\013accessToken\030\002 \001(\t\022\022\n\ncli"
  "entUUID\030\003 \001(\t\022\024\n\014cameraParams\030\004 \001(\014\"P\n\033g"
  "etCameraParametersResponse\022\024\n\014cameraPara"
  "ms\030\001 \001(\014\022\033\n\023xpcfGrpcReturnValue\030\002 \001(\021\"\273\002"
  "\n\032imageProcessRequestRequest\022#\n\033grpcServ"
  "erCompressionFormat\030\001 \001(\005\022\023\n\013accessToken"
  "\030\002 \001(\t\022\022\n\nclientUUID\030\003 \001(\t\022\016\n\006images\030\004 \001"
  "(\014\022\r\n\005poses\030\005 \001(\014\022\021\n\tfixedPose\030\006 \001(\010\022\026\n\016"
  "worldTransform\030\007 \001(\014\022\021\n\ttimestamp\030\010 \001(\014\022"
  "\031\n\021transform3DStatus\030\t \001(\021\022\023\n\013transform3"
  "D\030\n \001(\014\022\022\n\nconfidence\030\013 \001(\014\022\025\n\rmappingSt"
  "atus\030\014 \001(\021\022\027\n\017detectedObjects\030\r \001(\014\"\256\001\n\033"
  "imageProcessRequestResponse\022\031\n\021transform"
  "3DStatus\030\001 \001(\021\022\023\n\013transform3D\030\002 \001(\014\022\022\n\nc"
  "onfidence\030\003 \001(\014\022\025\n\rmappingStatus\030\004 \001(\021\022\027"
  "\n\017detectedObjects\030\005 \001(\014\022\033\n\023xpcfGrpcRetur"
  "nValue\030\006 \001(\021\"\236\001\n\034getMappingDataRequestRe"
  "quest\022#\n\033grpcServerCompressionFormat\030\001 \001"
  "(\005\022\023\n\013accessToken\030\002 \001(\t\022\022\n\nclientUUID\030\003 "
  "\001(\t\022\031\n\021outputPointClouds\030\004 \001(\014\022\025\n\rkeyfra"
  "mePoses\030\005 \001(\014\"n\n\035getMappingDataRequestRe"
  "sponse\022\031\n\021outputPointClouds\030\001 \001(\014\022\025\n\rkey"
  "framePoses\030\002 \001(\014\022\033\n\023xpcfGrpcReturnValue\030"
  "\003 \001(\021\"\310\001\n\024getClientPoseRequest\022#\n\033grpcSe"
  "rverCompressionFormat\030\001 \001(\005\022\023\n\013accessTok"
  "en\030\002 \001(\t\022\022\n\nclientUUID\030\003 \001(\t\022\020\n\010poseType"
  "\030\004 \001(\021\022\031\n\021transform3DStatus\030\005 \001(\021\022\023\n\013tra"
  "nsform3D\030\006 \001(\014\022\022\n\nconfidence\030\007 \001(\014\022\014\n\004po"
  "se\030\010 \001(\014\"\206\001\n\025getClientPoseResponse\022\031\n\021tr"
  "ansform3DStatus\030\001 \001(\021\022\023\n\013transform3D\030\002 \001"
  "(\014\022\022\n\nconfidence\030\003 \001(\014\022\014\n\004pose\030\004 \001(\014\022\033\n\023"
  "xpcfGrpcReturnValue\030\005 \001(\021\"]\n\020createMapRe"
  "quest\022#\n\033grpcServerCompressionFormat\030\001 \001"
  "(\005\022\023\n\013accessToken\030\002 \001(\t\022\017\n\007mapUUID\030\003 \001(\t"
  "\"0\n\021createMapResponse\022\033\n\023xpcfGrpcReturnV"
  "alue\030\001 \001(\021\"]\n\020deleteMapRequest\022#\n\033grpcSe"
  "rverCompressionFormat\030\001 \001(\005\022\023\n\013accessTok"
  "en\030\002 \001(\t\022\017\n\007mapUUID\030\003 \001(\t\"0\n\021deleteMapRe"
  "sponse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"f\n\025g"
  "etAllMapsUUIDRequest\022#\n\033grpcServerCompre"
  "ssionFormat\030\001 \001(\005\022\023\n\013accessToken\030\002 \001(\t\022\023"
  "\n\013mapUUIDList\030\003 \001(\014\"J\n\026getAllMapsUUIDRes"
  "ponse\022\023\n\013mapUUIDList\030\001 \001(\014\022\033\n\023xpcfGrpcRe"
  "turnValue\030\002 \001(\021\"x\n\027getClientMapUUIDReque"
  "st\022#\n\033grpcServerCompressionFormat\030\001 \001(\005\022"
  "\023\n\013accessToken\030\002 \001(\t\022\022\n\nclientUUID\030\003 \001(\t"
  "\022\017\n\007mapUUID\030\004 \001(\t\"H\n\030getClientMapUUIDRes"
  "ponse\022\017\n\007mapUUID\030\001 \001(\t\022\033\n\023xpcfGrpcReturn"
  "Value\030\002 \001(\021\"\177\n\032getClientInfoForMapReques"
  "t\022#\n\033grpcServerCompressionFormat\030\001 \001(\005\022\023"
  "\n\013accessToken\030\002 \001(\t\022\017\n\007mapUUID\030\003 \001(\t\022\026\n\016"
  "clientInfoList\030\004 \001(\014\"R\n\033getClientInfoFor"
  "MapResponse\022\026\n\016clientInfoList\030\001 \001(\014\022\033\n\023x"
  "pcfGrpcReturnValue\030\002 \001(\021\"\227\001\n\024getMapReque"
  "stRequest\022#\n\033grpcServerCompressionFormat"
  "\030\001 \001(\005\022\023\n\013accessToken\030\002 \001(\t\022\017\n\007mapUUID\030\003"
  " \001(\t\022\032\n\022withKeyframeImages\030\004 \001(\010\022\030\n\020mapD"
  "atastructure\030\005 \001(\014\"N\n\025getMapRequestRespo"
  "nse\022\030\n\020mapDatastructure\030\001 \001(\014\022\033\n\023xpcfGrp"
  "cReturnValue\030\002 \001(\021\"{\n\024setMapRequestReque"
  "st\022#\n\033grpcServerCompressionFormat\030\001 \001(\005\022"
  "\023\n\013accessToken\030\002 \001(\t\022\017\n\007mapUUID\030\003 \001(\t\022\030\n"
  "\020mapDatastructure\030\004 \001(\014\"4\n\025setMapRequest"
  "Response\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"|\n"
  "\033getPointCloudRequestRequest\022#\n\033grpcServ"
  "erCompressionFormat\030\001 \001(\005\022\023\n\013accessToken"
  "\030\002 \001(\t\022\017\n\007mapUUID\030\003 \001(\t\022\022\n\npointCloud\030\004 "
  "\001(\014\"O\n\034getPointCloudRequestResponse\022\022\n\np"
  "ointCloud\030\001 \001(\014\022\033\n\023xpcfGrpcReturnValue\030\002"
  " \001(\021\"\272\001\n\021getMapInfoRequest\022#\n\033grpcServer"
  "CompressionFormat\030\001 \001(\005\022\023\n\013accessToken\030\002"
  " \001(\t\022\017\n\007mapUUID\030\003 \001(\t\022\026\n\016descriptorType\030"
  "\004 \001(\021\022\031\n\021mapSupportedTypes\030\005 \001(\r\022\020\n\010data"
  "Size\030\006 \001(\r\022\025\n\rareImageSaved\030\007 \001(\010\"\215\001\n\022ge"
  "tMapInfoResponse\022\026\n\016descriptorType\030\001 \001(\021"
  "\022\031\n\021mapSupportedTypes\030\002 \001(\r\022\020\n\010dataSize\030"
  "\003 \001(\r\022\025\n\rareImageSaved\030\004 \001(\010\022\033\n\023xpcfGrpc"
  "ReturnValue\030\005 \001(\021\"\227\001\n\033requestMapProcessi"
  "ngRequest\022#\n\033grpcServerCompressionFormat"
  "\030\001 \001(\005\022\023\n\013accessToken\030\002 \001(\t\022\017\n\007mapUUID\030\003"
  " \001(\t\022\025\n\rresultMapUUID\030\004 \001(\t\022\026\n\016processin"
  "gType\030\005 \001(\021\";\n\034requestMapProcessingRespo"
  "nse\022\033\n\023xpcfGrpcReturnValue\030\001 \001(\021\"\222\001\n\035get"
  "MapProcessingStatusRequest\022#\n\033grpcServer"
  "CompressionFormat\030\001 \001(\005\022\023\n\013accessToken\030\002"
  " \001(\t\022\025\n\rresultMapUUID\030\003 \001(\t\022\016\n\006status\030\004 "
  "\001(\021\022\020\n\010progress\030\005 \001(\002\"_\n\036getMapProcessin"
  "gStatusResponse\022\016\n\006status\030\001 \001(\021\022\020\n\010progr"
  "ess\030\002 \001(\002\022\033\n\023xpcfGrpcReturnValue\030\003 \001(\021\"\231"
  "\001\n\033getMapProcessingDataRequest\022#\n\033grpcSe"
  "rverCompressionFormat\030\001 \001(\005\022\023\n\013accessTok"
  "en\030\002 \001(\t\022\025\n\rresultMapUUID\030\003 \001(\t\022\022\n\npoint"
  "Cloud\030\004 \001(\014\022\025\n\rkeyframePoses\030\005 \001(\014\"f\n\034ge"
  "tMapProcessingDataResponse\022\022\n\npointCloud"
  "\030\001 \001(\014\022\025\n\rkeyframePoses\030\002 \001(\014\022\033\n\023xpcfGrp"
  "cReturnValue\030\003 \001(\0212\302\026\n\024grpcIFrontEndServ"
  "ice\022_\n\016registerClient\022$.grpcIFrontEnd.re"
  "gisterClientRequest\032%.grpcIFrontEnd.regi"
  "sterClientResponse\"\000\022e\n\020unregisterClient"
  "\022&.grpcIFrontEnd.unregisterClientRequest"
  "\032\'.grpcIFrontEnd.unregisterClientRespons"
  "e\"\000\022h\n\021getAllClientsUUID\022\'.grpcIFrontEnd"
  ".getAllClientsUUIDRequest\032(.grpcIFrontEn"
  "d.getAllClientsUUIDResponse\"\000\022\\\n\rgetDevi"
  "ceInfo\022#.grpcIFrontEnd.getDeviceInfoRequ"
  "est\032$.grpcIFrontEnd.getDeviceInfoRespons"
  "e\"\000\022S\n\ninit_grpc0\022 .grpcIFrontEnd.init_g"
  "rpc0Request\032!.grpcIFrontEnd.init_grpc0Re"
  "sponse\"\000\022S\n\ninit_grpc1\022 .grpcIFrontEnd.i"
  "nit_grpc1Request\032!.grpcIFrontEnd.init_gr"
  "pc1Response\"\000\022D\n\005start\022\033.grpcIFrontEnd.s"
  "tartRequest\032\034.grpcIFrontEnd.startRespons"
  "e\"\000\022A\n\004stop\022\032.grpcIFrontEnd.stopRequest\032"
  "\033.grpcIFrontEnd.stopResponse\"\000\022h\n\021getPro"
  "cessingMode\022\'.grpcIFrontEnd.getProcessin"
  "gModeRequest\032(.grpcIFrontEnd.getProcessi"
  "ngModeResponse\"\000\022\200\001\n\031setCameraParameters"
  "_grpc0\022/.grpcIFrontEnd.setCameraParamete"
  "rs_grpc0Request\0320.grpcIFrontEnd.setCamer"
  "aParameters_grpc0Response\"\000\022\200\001\n\031setCamer"
  "aParameters_grpc1\022/.grpcIFrontEnd.setCam"
  "eraParameters_grpc1Request\0320.grpcIFrontE"
  "nd.setCameraParameters_grpc1Response\"\000\022\203"
  "\001\n\032setRectificationParameters\0220.grpcIFro"
  "ntEnd.setRectificationParametersRequest\032"
  "1.grpcIFrontEnd.setRectificationParamete"
  "rsResponse\"\000\022n\n\023getCameraParameters\022).gr"
  "pcIFrontEnd.getCameraParametersRequest\032*"
  ".grpcIFrontEnd.getCameraParametersRespon"
  "se\"\000\022n\n\023imageProcessRequest\022).grpcIFront"
  "End.imageProcessRequestRequest\032*.grpcIFr"
  "ontEnd.imageProcessRequestResponse\"\000\022t\n\025"
  "getMappingDataRequest\022+.grpcIFrontEnd.ge"
  "tMappingDataRequestRequest\032,.grpcIFrontE"
  "nd.getMappingDataRequestResponse\"\000\022\\\n\rge"
  "tClientPose\022#.grpcIFrontEnd.getClientPos"
  "eRequest\032$.grpcIFrontEnd.getClientPoseRe"
  "sponse\"\000\022P\n\tcreateMap\022\037.grpcIFrontEnd.cr"
  "eateMapRequest\032 .grpcIFrontEnd.createMap"
  "Response\"\000\022P\n\tdeleteMap\022\037.grpcIFrontEnd."
  "deleteMapRequest\032 .grpcIFrontEnd.deleteM"
  "apResponse\"\000\022_\n\016getAllMapsUUID\022$.grpcIFr"
  "ontEnd.getAllMapsUUIDRequest\032%.grpcIFron"
  "tEnd.getAllMapsUUIDResponse\"\000\022e\n\020getClie"
  "ntMapUUID\022&.grpcIFrontEnd.getClientMapUU"
  "IDRequest\032\'.grpcIFrontEnd.getClientMapUU"
  "IDResponse\"\000\022n\n\023getClientInfoForMap\022).gr"
  "pcIFrontEnd.getClientInfoForMapRequest\032*"
  ".grpcIFrontEnd.getClientInfoForMapRespon"
  "se\"\000\022\\\n\rgetMapRequest\022#.grpcIFrontEnd.ge"
  "tMapRequestRequest\032$.grpcIFrontEnd.getMa"
  "pRequestResponse\"\000\022\\\n\rsetMapRequest\022#.gr"
  "pcIFrontEnd.setMapRequestRequest\032$.grpcI"
  "FrontEnd.setMapRequestResponse\"\000\022q\n\024getP"
  "ointCloudRequest\022*.grpcIFrontEnd.getPoin"
  "tCloudRequestRequest\032+.grpcIFrontEnd.get"
  "PointCloudRequestResponse\"\000\022S\n\ngetMapInf"
  "o\022 .grpcIFrontEnd.getMapInfoRequest\032!.gr"
  "pcIFrontEnd.getMapInfoResponse\"\000\022q\n\024requ"
  "estMapProcessing\022*.grpcIFrontEnd.request"
  "MapProcessingRequest\032+.grpcIFrontEnd.req"
  "uestMapProcessingResponse\"\000\022w\n\026getMapPro"
  "cessingStatus\022,.grpcIFrontEnd.getMapProc"
  "essingStatusRequest\032-.grpcIFrontEnd.getM"
  "apProcessingStatusResponse\"\000\022q\n\024getMapPr"
  "ocessingData\022*.grpcIFrontEnd.getMapProce"
  "ssingDataRequest\032+.grpcIFrontEnd.getMapP"
  "rocessingDataResponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIFrontEndService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIFrontEndService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIFrontEndService_2eproto = {
    false, false, 9071, descriptor_table_protodef_grpcIFrontEndService_2eproto,
    "grpcIFrontEndService.proto",
    &descriptor_table_grpcIFrontEndService_2eproto_once, descriptor_table_grpcIFrontEndService_2eproto_deps, 1, 56,
    schemas, file_default_instances, TableStruct_grpcIFrontEndService_2eproto::offsets,
    file_level_metadata_grpcIFrontEndService_2eproto, file_level_enum_descriptors_grpcIFrontEndService_2eproto,
    file_level_service_descriptors_grpcIFrontEndService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIFrontEndService_2eproto_getter() {
  return &descriptor_table_grpcIFrontEndService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIFrontEndService_2eproto(&descriptor_table_grpcIFrontEndService_2eproto);
namespace grpcIFrontEnd {

// ===================================================================

class registerClientRequest::_Internal {
 public:
};

registerClientRequest::registerClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.registerClientRequest)
}
registerClientRequest::registerClientRequest(const registerClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  registerClientRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.deviceinfo_){}
    , decltype(_impl_.worldelementuuid_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceinfo().empty()) {
    _this->_impl_.deviceinfo_.Set(from._internal_deviceinfo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.worldelementuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldelementuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldelementuuid().empty()) {
    _this->_impl_.worldelementuuid_.Set(from._internal_worldelementuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.registerClientRequest)
}

inline void registerClientRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.deviceinfo_){}
    , decltype(_impl_.worldelementuuid_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.worldelementuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldelementuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

registerClientRequest::~registerClientRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.registerClientRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void registerClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.deviceinfo_.Destroy();
  _impl_.worldelementuuid_.Destroy();
  _impl_.clientuuid_.Destroy();
}

void registerClientRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void registerClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.registerClientRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.deviceinfo_.ClearToEmpty();
  _impl_.worldelementuuid_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerClientRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.registerClientRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // bytes deviceInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_deviceinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string worldElementUUID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_worldelementuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.registerClientRequest.worldElementUUID"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.registerClientRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* registerClientRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.registerClientRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.registerClientRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // bytes deviceInfo = 3;
  if (!this->_internal_deviceinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_deviceinfo(), target);
  }

  // string worldElementUUID = 4;
  if (!this->_internal_worldelementuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worldelementuuid().data(), static_cast<int>(this->_internal_worldelementuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.registerClientRequest.worldElementUUID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_worldelementuuid(), target);
  }

  // string clientUUID = 5;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.registerClientRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_clientuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.registerClientRequest)
  return target;
}

size_t registerClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.registerClientRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // bytes deviceInfo = 3;
  if (!this->_internal_deviceinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceinfo());
  }

  // string worldElementUUID = 4;
  if (!this->_internal_worldelementuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worldelementuuid());
  }

  // string clientUUID = 5;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registerClientRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    registerClientRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registerClientRequest::GetClassData() const { return &_class_data_; }


void registerClientRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<registerClientRequest*>(&to_msg);
  auto& from = static_cast<const registerClientRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.registerClientRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_deviceinfo().empty()) {
    _this->_internal_set_deviceinfo(from._internal_deviceinfo());
  }
  if (!from._internal_worldelementuuid().empty()) {
    _this->_internal_set_worldelementuuid(from._internal_worldelementuuid());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registerClientRequest::CopyFrom(const registerClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.registerClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerClientRequest::IsInitialized() const {
  return true;
}

void registerClientRequest::InternalSwap(registerClientRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceinfo_, lhs_arena,
      &other->_impl_.deviceinfo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worldelementuuid_, lhs_arena,
      &other->_impl_.worldelementuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registerClientRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[0]);
}

// ===================================================================

class registerClientResponse::_Internal {
 public:
};

registerClientResponse::registerClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.registerClientResponse)
}
registerClientResponse::registerClientResponse(const registerClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  registerClientResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.registerClientResponse)
}

inline void registerClientResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuid_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

registerClientResponse::~registerClientResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.registerClientResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void registerClientResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientuuid_.Destroy();
}

void registerClientResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void registerClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.registerClientResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientuuid_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* registerClientResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.registerClientResponse.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* registerClientResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.registerClientResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientUUID = 1;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.registerClientResponse.clientUUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientuuid(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.registerClientResponse)
  return target;
}

size_t registerClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.registerClientResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientUUID = 1;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData registerClientResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    registerClientResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*registerClientResponse::GetClassData() const { return &_class_data_; }


void registerClientResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<registerClientResponse*>(&to_msg);
  auto& from = static_cast<const registerClientResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.registerClientResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void registerClientResponse::CopyFrom(const registerClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.registerClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool registerClientResponse::IsInitialized() const {
  return true;
}

void registerClientResponse::InternalSwap(registerClientResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata registerClientResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[1]);
}

// ===================================================================

class unregisterClientRequest::_Internal {
 public:
};

unregisterClientRequest::unregisterClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.unregisterClientRequest)
}
unregisterClientRequest::unregisterClientRequest(const unregisterClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unregisterClientRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.unregisterClientRequest)
}

inline void unregisterClientRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

unregisterClientRequest::~unregisterClientRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.unregisterClientRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unregisterClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
}

void unregisterClientRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unregisterClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.unregisterClientRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unregisterClientRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.unregisterClientRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.unregisterClientRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unregisterClientRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.unregisterClientRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.unregisterClientRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.unregisterClientRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.unregisterClientRequest)
  return target;
}

size_t unregisterClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.unregisterClientRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unregisterClientRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unregisterClientRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unregisterClientRequest::GetClassData() const { return &_class_data_; }


void unregisterClientRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unregisterClientRequest*>(&to_msg);
  auto& from = static_cast<const unregisterClientRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.unregisterClientRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unregisterClientRequest::CopyFrom(const unregisterClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.unregisterClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unregisterClientRequest::IsInitialized() const {
  return true;
}

void unregisterClientRequest::InternalSwap(unregisterClientRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata unregisterClientRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[2]);
}

// ===================================================================

class unregisterClientResponse::_Internal {
 public:
};

unregisterClientResponse::unregisterClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.unregisterClientResponse)
}
unregisterClientResponse::unregisterClientResponse(const unregisterClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  unregisterClientResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.unregisterClientResponse)
}

inline void unregisterClientResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

unregisterClientResponse::~unregisterClientResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.unregisterClientResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void unregisterClientResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void unregisterClientResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void unregisterClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.unregisterClientResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unregisterClientResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* unregisterClientResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.unregisterClientResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.unregisterClientResponse)
  return target;
}

size_t unregisterClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.unregisterClientResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData unregisterClientResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    unregisterClientResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*unregisterClientResponse::GetClassData() const { return &_class_data_; }


void unregisterClientResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<unregisterClientResponse*>(&to_msg);
  auto& from = static_cast<const unregisterClientResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.unregisterClientResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void unregisterClientResponse::CopyFrom(const unregisterClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.unregisterClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unregisterClientResponse::IsInitialized() const {
  return true;
}

void unregisterClientResponse::InternalSwap(unregisterClientResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata unregisterClientResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[3]);
}

// ===================================================================

class getAllClientsUUIDRequest::_Internal {
 public:
};

getAllClientsUUIDRequest::getAllClientsUUIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getAllClientsUUIDRequest)
}
getAllClientsUUIDRequest::getAllClientsUUIDRequest(const getAllClientsUUIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAllClientsUUIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuidlist_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuidlist().empty()) {
    _this->_impl_.clientuuidlist_.Set(from._internal_clientuuidlist(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getAllClientsUUIDRequest)
}

inline void getAllClientsUUIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuidlist_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAllClientsUUIDRequest::~getAllClientsUUIDRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getAllClientsUUIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAllClientsUUIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuidlist_.Destroy();
}

void getAllClientsUUIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAllClientsUUIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getAllClientsUUIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuidlist_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllClientsUUIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getAllClientsUUIDRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // bytes clientUUIDList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuidlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAllClientsUUIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getAllClientsUUIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getAllClientsUUIDRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // bytes clientUUIDList = 3;
  if (!this->_internal_clientuuidlist().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_clientuuidlist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getAllClientsUUIDRequest)
  return target;
}

size_t getAllClientsUUIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getAllClientsUUIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // bytes clientUUIDList = 3;
  if (!this->_internal_clientuuidlist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientuuidlist());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAllClientsUUIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAllClientsUUIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAllClientsUUIDRequest::GetClassData() const { return &_class_data_; }


void getAllClientsUUIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAllClientsUUIDRequest*>(&to_msg);
  auto& from = static_cast<const getAllClientsUUIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getAllClientsUUIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuidlist().empty()) {
    _this->_internal_set_clientuuidlist(from._internal_clientuuidlist());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAllClientsUUIDRequest::CopyFrom(const getAllClientsUUIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getAllClientsUUIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllClientsUUIDRequest::IsInitialized() const {
  return true;
}

void getAllClientsUUIDRequest::InternalSwap(getAllClientsUUIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuidlist_, lhs_arena,
      &other->_impl_.clientuuidlist_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllClientsUUIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[4]);
}

// ===================================================================

class getAllClientsUUIDResponse::_Internal {
 public:
};

getAllClientsUUIDResponse::getAllClientsUUIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getAllClientsUUIDResponse)
}
getAllClientsUUIDResponse::getAllClientsUUIDResponse(const getAllClientsUUIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAllClientsUUIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuidlist_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientuuidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuidlist().empty()) {
    _this->_impl_.clientuuidlist_.Set(from._internal_clientuuidlist(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getAllClientsUUIDResponse)
}

inline void getAllClientsUUIDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientuuidlist_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientuuidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAllClientsUUIDResponse::~getAllClientsUUIDResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getAllClientsUUIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAllClientsUUIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientuuidlist_.Destroy();
}

void getAllClientsUUIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAllClientsUUIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getAllClientsUUIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientuuidlist_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllClientsUUIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes clientUUIDList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientuuidlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAllClientsUUIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getAllClientsUUIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes clientUUIDList = 1;
  if (!this->_internal_clientuuidlist().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_clientuuidlist(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getAllClientsUUIDResponse)
  return target;
}

size_t getAllClientsUUIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getAllClientsUUIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes clientUUIDList = 1;
  if (!this->_internal_clientuuidlist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientuuidlist());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAllClientsUUIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAllClientsUUIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAllClientsUUIDResponse::GetClassData() const { return &_class_data_; }


void getAllClientsUUIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAllClientsUUIDResponse*>(&to_msg);
  auto& from = static_cast<const getAllClientsUUIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getAllClientsUUIDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientuuidlist().empty()) {
    _this->_internal_set_clientuuidlist(from._internal_clientuuidlist());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAllClientsUUIDResponse::CopyFrom(const getAllClientsUUIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getAllClientsUUIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllClientsUUIDResponse::IsInitialized() const {
  return true;
}

void getAllClientsUUIDResponse::InternalSwap(getAllClientsUUIDResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuidlist_, lhs_arena,
      &other->_impl_.clientuuidlist_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllClientsUUIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[5]);
}

// ===================================================================

class getDeviceInfoRequest::_Internal {
 public:
};

getDeviceInfoRequest::getDeviceInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getDeviceInfoRequest)
}
getDeviceInfoRequest::getDeviceInfoRequest(const getDeviceInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getDeviceInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.deviceinfo_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.deviceinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceinfo().empty()) {
    _this->_impl_.deviceinfo_.Set(from._internal_deviceinfo(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getDeviceInfoRequest)
}

inline void getDeviceInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.deviceinfo_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getDeviceInfoRequest::~getDeviceInfoRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getDeviceInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getDeviceInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
  _impl_.deviceinfo_.Destroy();
}

void getDeviceInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getDeviceInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getDeviceInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.deviceinfo_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getDeviceInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getDeviceInfoRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getDeviceInfoRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes deviceInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_deviceinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getDeviceInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getDeviceInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getDeviceInfoRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getDeviceInfoRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // bytes deviceInfo = 4;
  if (!this->_internal_deviceinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_deviceinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getDeviceInfoRequest)
  return target;
}

size_t getDeviceInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getDeviceInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // bytes deviceInfo = 4;
  if (!this->_internal_deviceinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceinfo());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getDeviceInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getDeviceInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getDeviceInfoRequest::GetClassData() const { return &_class_data_; }


void getDeviceInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getDeviceInfoRequest*>(&to_msg);
  auto& from = static_cast<const getDeviceInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getDeviceInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_deviceinfo().empty()) {
    _this->_internal_set_deviceinfo(from._internal_deviceinfo());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getDeviceInfoRequest::CopyFrom(const getDeviceInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getDeviceInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getDeviceInfoRequest::IsInitialized() const {
  return true;
}

void getDeviceInfoRequest::InternalSwap(getDeviceInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceinfo_, lhs_arena,
      &other->_impl_.deviceinfo_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getDeviceInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[6]);
}

// ===================================================================

class getDeviceInfoResponse::_Internal {
 public:
};

getDeviceInfoResponse::getDeviceInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getDeviceInfoResponse)
}
getDeviceInfoResponse::getDeviceInfoResponse(const getDeviceInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getDeviceInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceinfo_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deviceinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceinfo().empty()) {
    _this->_impl_.deviceinfo_.Set(from._internal_deviceinfo(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getDeviceInfoResponse)
}

inline void getDeviceInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deviceinfo_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceinfo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceinfo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getDeviceInfoResponse::~getDeviceInfoResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getDeviceInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getDeviceInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceinfo_.Destroy();
}

void getDeviceInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getDeviceInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getDeviceInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deviceinfo_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getDeviceInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes deviceInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceinfo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getDeviceInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getDeviceInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes deviceInfo = 1;
  if (!this->_internal_deviceinfo().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_deviceinfo(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getDeviceInfoResponse)
  return target;
}

size_t getDeviceInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getDeviceInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes deviceInfo = 1;
  if (!this->_internal_deviceinfo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_deviceinfo());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getDeviceInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getDeviceInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getDeviceInfoResponse::GetClassData() const { return &_class_data_; }


void getDeviceInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getDeviceInfoResponse*>(&to_msg);
  auto& from = static_cast<const getDeviceInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getDeviceInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deviceinfo().empty()) {
    _this->_internal_set_deviceinfo(from._internal_deviceinfo());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getDeviceInfoResponse::CopyFrom(const getDeviceInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getDeviceInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getDeviceInfoResponse::IsInitialized() const {
  return true;
}

void getDeviceInfoResponse::InternalSwap(getDeviceInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceinfo_, lhs_arena,
      &other->_impl_.deviceinfo_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getDeviceInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[7]);
}

// ===================================================================

class init_grpc0Request::_Internal {
 public:
};

init_grpc0Request::init_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.init_grpc0Request)
}
init_grpc0Request::init_grpc0Request(const init_grpc0Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  init_grpc0Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.init_grpc0Request)
}

inline void init_grpc0Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

init_grpc0Request::~init_grpc0Request() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.init_grpc0Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void init_grpc0Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
}

void init_grpc0Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void init_grpc0Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.init_grpc0Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* init_grpc0Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.init_grpc0Request.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.init_grpc0Request.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* init_grpc0Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.init_grpc0Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.init_grpc0Request.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.init_grpc0Request.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.init_grpc0Request)
  return target;
}

size_t init_grpc0Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.init_grpc0Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData init_grpc0Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    init_grpc0Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*init_grpc0Request::GetClassData() const { return &_class_data_; }


void init_grpc0Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<init_grpc0Request*>(&to_msg);
  auto& from = static_cast<const init_grpc0Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.init_grpc0Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void init_grpc0Request::CopyFrom(const init_grpc0Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.init_grpc0Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool init_grpc0Request::IsInitialized() const {
  return true;
}

void init_grpc0Request::InternalSwap(init_grpc0Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata init_grpc0Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[8]);
}

// ===================================================================

class init_grpc0Response::_Internal {
 public:
};

init_grpc0Response::init_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.init_grpc0Response)
}
init_grpc0Response::init_grpc0Response(const init_grpc0Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  init_grpc0Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.init_grpc0Response)
}

inline void init_grpc0Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

init_grpc0Response::~init_grpc0Response() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.init_grpc0Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void init_grpc0Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void init_grpc0Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void init_grpc0Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.init_grpc0Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* init_grpc0Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* init_grpc0Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.init_grpc0Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.init_grpc0Response)
  return target;
}

size_t init_grpc0Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.init_grpc0Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData init_grpc0Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    init_grpc0Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*init_grpc0Response::GetClassData() const { return &_class_data_; }


void init_grpc0Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<init_grpc0Response*>(&to_msg);
  auto& from = static_cast<const init_grpc0Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.init_grpc0Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void init_grpc0Response::CopyFrom(const init_grpc0Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.init_grpc0Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool init_grpc0Response::IsInitialized() const {
  return true;
}

void init_grpc0Response::InternalSwap(init_grpc0Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata init_grpc0Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[9]);
}

// ===================================================================

class init_grpc1Request::_Internal {
 public:
};

init_grpc1Request::init_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.init_grpc1Request)
}
init_grpc1Request::init_grpc1Request(const init_grpc1Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  init_grpc1Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.pipelinemode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pipelinemode_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.pipelinemode_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.init_grpc1Request)
}

inline void init_grpc1Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.pipelinemode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

init_grpc1Request::~init_grpc1Request() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.init_grpc1Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void init_grpc1Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
}

void init_grpc1Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void init_grpc1Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.init_grpc1Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pipelinemode_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.pipelinemode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* init_grpc1Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.init_grpc1Request.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.init_grpc1Request.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // sint32 pipelineMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pipelinemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* init_grpc1Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.init_grpc1Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.init_grpc1Request.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.init_grpc1Request.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // sint32 pipelineMode = 4;
  if (this->_internal_pipelinemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_pipelinemode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.init_grpc1Request)
  return target;
}

size_t init_grpc1Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.init_grpc1Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 pipelineMode = 4;
  if (this->_internal_pipelinemode() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_pipelinemode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData init_grpc1Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    init_grpc1Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*init_grpc1Request::GetClassData() const { return &_class_data_; }


void init_grpc1Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<init_grpc1Request*>(&to_msg);
  auto& from = static_cast<const init_grpc1Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.init_grpc1Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_pipelinemode() != 0) {
    _this->_internal_set_pipelinemode(from._internal_pipelinemode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void init_grpc1Request::CopyFrom(const init_grpc1Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.init_grpc1Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool init_grpc1Request::IsInitialized() const {
  return true;
}

void init_grpc1Request::InternalSwap(init_grpc1Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(init_grpc1Request, _impl_.pipelinemode_)
      + sizeof(init_grpc1Request::_impl_.pipelinemode_)
      - PROTOBUF_FIELD_OFFSET(init_grpc1Request, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata init_grpc1Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[10]);
}

// ===================================================================

class init_grpc1Response::_Internal {
 public:
};

init_grpc1Response::init_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.init_grpc1Response)
}
init_grpc1Response::init_grpc1Response(const init_grpc1Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  init_grpc1Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.init_grpc1Response)
}

inline void init_grpc1Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

init_grpc1Response::~init_grpc1Response() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.init_grpc1Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void init_grpc1Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void init_grpc1Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void init_grpc1Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.init_grpc1Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* init_grpc1Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* init_grpc1Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.init_grpc1Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.init_grpc1Response)
  return target;
}

size_t init_grpc1Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.init_grpc1Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData init_grpc1Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    init_grpc1Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*init_grpc1Response::GetClassData() const { return &_class_data_; }


void init_grpc1Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<init_grpc1Response*>(&to_msg);
  auto& from = static_cast<const init_grpc1Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.init_grpc1Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void init_grpc1Response::CopyFrom(const init_grpc1Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.init_grpc1Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool init_grpc1Response::IsInitialized() const {
  return true;
}

void init_grpc1Response::InternalSwap(init_grpc1Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata init_grpc1Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[11]);
}

// ===================================================================

class startRequest::_Internal {
 public:
};

startRequest::startRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.startRequest)
}
startRequest::startRequest(const startRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  startRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.startRequest)
}

inline void startRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

startRequest::~startRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.startRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void startRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
}

void startRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void startRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.startRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* startRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.startRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.startRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* startRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.startRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.startRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.startRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.startRequest)
  return target;
}

size_t startRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.startRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData startRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    startRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*startRequest::GetClassData() const { return &_class_data_; }


void startRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<startRequest*>(&to_msg);
  auto& from = static_cast<const startRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.startRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void startRequest::CopyFrom(const startRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.startRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool startRequest::IsInitialized() const {
  return true;
}

void startRequest::InternalSwap(startRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata startRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[12]);
}

// ===================================================================

class startResponse::_Internal {
 public:
};

startResponse::startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.startResponse)
}
startResponse::startResponse(const startResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  startResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.startResponse)
}

inline void startResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

startResponse::~startResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.startResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void startResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void startResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void startResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.startResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* startResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* startResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.startResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.startResponse)
  return target;
}

size_t startResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.startResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData startResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    startResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*startResponse::GetClassData() const { return &_class_data_; }


void startResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<startResponse*>(&to_msg);
  auto& from = static_cast<const startResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.startResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void startResponse::CopyFrom(const startResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.startResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool startResponse::IsInitialized() const {
  return true;
}

void startResponse::InternalSwap(startResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata startResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[13]);
}

// ===================================================================

class stopRequest::_Internal {
 public:
};

stopRequest::stopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.stopRequest)
}
stopRequest::stopRequest(const stopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  stopRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.stopRequest)
}

inline void stopRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

stopRequest::~stopRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.stopRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void stopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
}

void stopRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void stopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.stopRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stopRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.stopRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.stopRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* stopRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.stopRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.stopRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.stopRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.stopRequest)
  return target;
}

size_t stopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.stopRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData stopRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    stopRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*stopRequest::GetClassData() const { return &_class_data_; }


void stopRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<stopRequest*>(&to_msg);
  auto& from = static_cast<const stopRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.stopRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void stopRequest::CopyFrom(const stopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.stopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopRequest::IsInitialized() const {
  return true;
}

void stopRequest::InternalSwap(stopRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stopRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[14]);
}

// ===================================================================

class stopResponse::_Internal {
 public:
};

stopResponse::stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.stopResponse)
}
stopResponse::stopResponse(const stopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  stopResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.stopResponse)
}

inline void stopResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

stopResponse::~stopResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.stopResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void stopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void stopResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void stopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.stopResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stopResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* stopResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.stopResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.stopResponse)
  return target;
}

size_t stopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.stopResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData stopResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    stopResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*stopResponse::GetClassData() const { return &_class_data_; }


void stopResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<stopResponse*>(&to_msg);
  auto& from = static_cast<const stopResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.stopResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void stopResponse::CopyFrom(const stopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.stopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stopResponse::IsInitialized() const {
  return true;
}

void stopResponse::InternalSwap(stopResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stopResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[15]);
}

// ===================================================================

class getProcessingModeRequest::_Internal {
 public:
};

getProcessingModeRequest::getProcessingModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getProcessingModeRequest)
}
getProcessingModeRequest::getProcessingModeRequest(const getProcessingModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getProcessingModeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.pipelinemode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pipelinemode_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.pipelinemode_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getProcessingModeRequest)
}

inline void getProcessingModeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.pipelinemode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getProcessingModeRequest::~getProcessingModeRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getProcessingModeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getProcessingModeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
}

void getProcessingModeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getProcessingModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getProcessingModeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pipelinemode_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.pipelinemode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getProcessingModeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getProcessingModeRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getProcessingModeRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // sint32 pipelineMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pipelinemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getProcessingModeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getProcessingModeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getProcessingModeRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getProcessingModeRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // sint32 pipelineMode = 4;
  if (this->_internal_pipelinemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_pipelinemode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getProcessingModeRequest)
  return target;
}

size_t getProcessingModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getProcessingModeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 pipelineMode = 4;
  if (this->_internal_pipelinemode() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_pipelinemode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getProcessingModeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getProcessingModeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getProcessingModeRequest::GetClassData() const { return &_class_data_; }


void getProcessingModeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getProcessingModeRequest*>(&to_msg);
  auto& from = static_cast<const getProcessingModeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getProcessingModeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_pipelinemode() != 0) {
    _this->_internal_set_pipelinemode(from._internal_pipelinemode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getProcessingModeRequest::CopyFrom(const getProcessingModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getProcessingModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getProcessingModeRequest::IsInitialized() const {
  return true;
}

void getProcessingModeRequest::InternalSwap(getProcessingModeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getProcessingModeRequest, _impl_.pipelinemode_)
      + sizeof(getProcessingModeRequest::_impl_.pipelinemode_)
      - PROTOBUF_FIELD_OFFSET(getProcessingModeRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getProcessingModeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[16]);
}

// ===================================================================

class getProcessingModeResponse::_Internal {
 public:
};

getProcessingModeResponse::getProcessingModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getProcessingModeResponse)
}
getProcessingModeResponse::getProcessingModeResponse(const getProcessingModeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getProcessingModeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pipelinemode_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pipelinemode_, &from._impl_.pipelinemode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
    reinterpret_cast<char*>(&_impl_.pipelinemode_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getProcessingModeResponse)
}

inline void getProcessingModeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pipelinemode_){0}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getProcessingModeResponse::~getProcessingModeResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getProcessingModeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getProcessingModeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void getProcessingModeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getProcessingModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getProcessingModeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pipelinemode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
      reinterpret_cast<char*>(&_impl_.pipelinemode_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getProcessingModeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 pipelineMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pipelinemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getProcessingModeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getProcessingModeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 pipelineMode = 1;
  if (this->_internal_pipelinemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_pipelinemode(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getProcessingModeResponse)
  return target;
}

size_t getProcessingModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getProcessingModeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 pipelineMode = 1;
  if (this->_internal_pipelinemode() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_pipelinemode());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getProcessingModeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getProcessingModeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getProcessingModeResponse::GetClassData() const { return &_class_data_; }


void getProcessingModeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getProcessingModeResponse*>(&to_msg);
  auto& from = static_cast<const getProcessingModeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getProcessingModeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pipelinemode() != 0) {
    _this->_internal_set_pipelinemode(from._internal_pipelinemode());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getProcessingModeResponse::CopyFrom(const getProcessingModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getProcessingModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getProcessingModeResponse::IsInitialized() const {
  return true;
}

void getProcessingModeResponse::InternalSwap(getProcessingModeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getProcessingModeResponse, _impl_.xpcfgrpcreturnvalue_)
      + sizeof(getProcessingModeResponse::_impl_.xpcfgrpcreturnvalue_)
      - PROTOBUF_FIELD_OFFSET(getProcessingModeResponse, _impl_.pipelinemode_)>(
          reinterpret_cast<char*>(&_impl_.pipelinemode_),
          reinterpret_cast<char*>(&other->_impl_.pipelinemode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getProcessingModeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[17]);
}

// ===================================================================

class setCameraParameters_grpc0Request::_Internal {
 public:
};

setCameraParameters_grpc0Request::setCameraParameters_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.setCameraParameters_grpc0Request)
}
setCameraParameters_grpc0Request::setCameraParameters_grpc0Request(const setCameraParameters_grpc0Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setCameraParameters_grpc0Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.cameraparams_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cameraparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cameraparams().empty()) {
    _this->_impl_.cameraparams_.Set(from._internal_cameraparams(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.setCameraParameters_grpc0Request)
}

inline void setCameraParameters_grpc0Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.cameraparams_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameraparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

setCameraParameters_grpc0Request::~setCameraParameters_grpc0Request() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.setCameraParameters_grpc0Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setCameraParameters_grpc0Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
  _impl_.cameraparams_.Destroy();
}

void setCameraParameters_grpc0Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setCameraParameters_grpc0Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.setCameraParameters_grpc0Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.cameraparams_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setCameraParameters_grpc0Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.setCameraParameters_grpc0Request.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.setCameraParameters_grpc0Request.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes cameraParams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cameraparams();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setCameraParameters_grpc0Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.setCameraParameters_grpc0Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.setCameraParameters_grpc0Request.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.setCameraParameters_grpc0Request.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // bytes cameraParams = 4;
  if (!this->_internal_cameraparams().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cameraparams(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.setCameraParameters_grpc0Request)
  return target;
}

size_t setCameraParameters_grpc0Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.setCameraParameters_grpc0Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // bytes cameraParams = 4;
  if (!this->_internal_cameraparams().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cameraparams());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setCameraParameters_grpc0Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setCameraParameters_grpc0Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setCameraParameters_grpc0Request::GetClassData() const { return &_class_data_; }


void setCameraParameters_grpc0Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setCameraParameters_grpc0Request*>(&to_msg);
  auto& from = static_cast<const setCameraParameters_grpc0Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.setCameraParameters_grpc0Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_cameraparams().empty()) {
    _this->_internal_set_cameraparams(from._internal_cameraparams());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setCameraParameters_grpc0Request::CopyFrom(const setCameraParameters_grpc0Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.setCameraParameters_grpc0Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setCameraParameters_grpc0Request::IsInitialized() const {
  return true;
}

void setCameraParameters_grpc0Request::InternalSwap(setCameraParameters_grpc0Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cameraparams_, lhs_arena,
      &other->_impl_.cameraparams_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setCameraParameters_grpc0Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[18]);
}

// ===================================================================

class setCameraParameters_grpc0Response::_Internal {
 public:
};

setCameraParameters_grpc0Response::setCameraParameters_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.setCameraParameters_grpc0Response)
}
setCameraParameters_grpc0Response::setCameraParameters_grpc0Response(const setCameraParameters_grpc0Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setCameraParameters_grpc0Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.setCameraParameters_grpc0Response)
}

inline void setCameraParameters_grpc0Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

setCameraParameters_grpc0Response::~setCameraParameters_grpc0Response() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.setCameraParameters_grpc0Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setCameraParameters_grpc0Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void setCameraParameters_grpc0Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setCameraParameters_grpc0Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.setCameraParameters_grpc0Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setCameraParameters_grpc0Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setCameraParameters_grpc0Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.setCameraParameters_grpc0Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.setCameraParameters_grpc0Response)
  return target;
}

size_t setCameraParameters_grpc0Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.setCameraParameters_grpc0Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setCameraParameters_grpc0Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setCameraParameters_grpc0Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setCameraParameters_grpc0Response::GetClassData() const { return &_class_data_; }


void setCameraParameters_grpc0Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setCameraParameters_grpc0Response*>(&to_msg);
  auto& from = static_cast<const setCameraParameters_grpc0Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.setCameraParameters_grpc0Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setCameraParameters_grpc0Response::CopyFrom(const setCameraParameters_grpc0Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.setCameraParameters_grpc0Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setCameraParameters_grpc0Response::IsInitialized() const {
  return true;
}

void setCameraParameters_grpc0Response::InternalSwap(setCameraParameters_grpc0Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setCameraParameters_grpc0Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[19]);
}

// ===================================================================

class setCameraParameters_grpc1Request::_Internal {
 public:
};

setCameraParameters_grpc1Request::setCameraParameters_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.setCameraParameters_grpc1Request)
}
setCameraParameters_grpc1Request::setCameraParameters_grpc1Request(const setCameraParameters_grpc1Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setCameraParameters_grpc1Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.cameraparams1_){}
    , decltype(_impl_.cameraparams2_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cameraparams1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cameraparams1().empty()) {
    _this->_impl_.cameraparams1_.Set(from._internal_cameraparams1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cameraparams2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cameraparams2().empty()) {
    _this->_impl_.cameraparams2_.Set(from._internal_cameraparams2(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.setCameraParameters_grpc1Request)
}

inline void setCameraParameters_grpc1Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.cameraparams1_){}
    , decltype(_impl_.cameraparams2_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameraparams1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameraparams2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

setCameraParameters_grpc1Request::~setCameraParameters_grpc1Request() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.setCameraParameters_grpc1Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setCameraParameters_grpc1Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
  _impl_.cameraparams1_.Destroy();
  _impl_.cameraparams2_.Destroy();
}

void setCameraParameters_grpc1Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setCameraParameters_grpc1Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.setCameraParameters_grpc1Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.cameraparams1_.ClearToEmpty();
  _impl_.cameraparams2_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setCameraParameters_grpc1Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.setCameraParameters_grpc1Request.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.setCameraParameters_grpc1Request.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes cameraParams1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cameraparams1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes cameraParams2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cameraparams2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setCameraParameters_grpc1Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.setCameraParameters_grpc1Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.setCameraParameters_grpc1Request.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.setCameraParameters_grpc1Request.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // bytes cameraParams1 = 4;
  if (!this->_internal_cameraparams1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cameraparams1(), target);
  }

  // bytes cameraParams2 = 5;
  if (!this->_internal_cameraparams2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_cameraparams2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.setCameraParameters_grpc1Request)
  return target;
}

size_t setCameraParameters_grpc1Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.setCameraParameters_grpc1Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // bytes cameraParams1 = 4;
  if (!this->_internal_cameraparams1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cameraparams1());
  }

  // bytes cameraParams2 = 5;
  if (!this->_internal_cameraparams2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cameraparams2());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setCameraParameters_grpc1Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setCameraParameters_grpc1Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setCameraParameters_grpc1Request::GetClassData() const { return &_class_data_; }


void setCameraParameters_grpc1Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setCameraParameters_grpc1Request*>(&to_msg);
  auto& from = static_cast<const setCameraParameters_grpc1Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.setCameraParameters_grpc1Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_cameraparams1().empty()) {
    _this->_internal_set_cameraparams1(from._internal_cameraparams1());
  }
  if (!from._internal_cameraparams2().empty()) {
    _this->_internal_set_cameraparams2(from._internal_cameraparams2());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setCameraParameters_grpc1Request::CopyFrom(const setCameraParameters_grpc1Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.setCameraParameters_grpc1Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setCameraParameters_grpc1Request::IsInitialized() const {
  return true;
}

void setCameraParameters_grpc1Request::InternalSwap(setCameraParameters_grpc1Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cameraparams1_, lhs_arena,
      &other->_impl_.cameraparams1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cameraparams2_, lhs_arena,
      &other->_impl_.cameraparams2_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setCameraParameters_grpc1Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[20]);
}

// ===================================================================

class setCameraParameters_grpc1Response::_Internal {
 public:
};

setCameraParameters_grpc1Response::setCameraParameters_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.setCameraParameters_grpc1Response)
}
setCameraParameters_grpc1Response::setCameraParameters_grpc1Response(const setCameraParameters_grpc1Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setCameraParameters_grpc1Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.setCameraParameters_grpc1Response)
}

inline void setCameraParameters_grpc1Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

setCameraParameters_grpc1Response::~setCameraParameters_grpc1Response() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.setCameraParameters_grpc1Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setCameraParameters_grpc1Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void setCameraParameters_grpc1Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setCameraParameters_grpc1Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.setCameraParameters_grpc1Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setCameraParameters_grpc1Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setCameraParameters_grpc1Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.setCameraParameters_grpc1Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.setCameraParameters_grpc1Response)
  return target;
}

size_t setCameraParameters_grpc1Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.setCameraParameters_grpc1Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setCameraParameters_grpc1Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setCameraParameters_grpc1Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setCameraParameters_grpc1Response::GetClassData() const { return &_class_data_; }


void setCameraParameters_grpc1Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setCameraParameters_grpc1Response*>(&to_msg);
  auto& from = static_cast<const setCameraParameters_grpc1Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.setCameraParameters_grpc1Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setCameraParameters_grpc1Response::CopyFrom(const setCameraParameters_grpc1Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.setCameraParameters_grpc1Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setCameraParameters_grpc1Response::IsInitialized() const {
  return true;
}

void setCameraParameters_grpc1Response::InternalSwap(setCameraParameters_grpc1Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setCameraParameters_grpc1Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[21]);
}

// ===================================================================

class setRectificationParametersRequest::_Internal {
 public:
};

setRectificationParametersRequest::setRectificationParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.setRectificationParametersRequest)
}
setRectificationParametersRequest::setRectificationParametersRequest(const setRectificationParametersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setRectificationParametersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.rectcam1_){}
    , decltype(_impl_.rectcam2_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rectcam1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rectcam1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectcam1().empty()) {
    _this->_impl_.rectcam1_.Set(from._internal_rectcam1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rectcam2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rectcam2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rectcam2().empty()) {
    _this->_impl_.rectcam2_.Set(from._internal_rectcam2(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.setRectificationParametersRequest)
}

inline void setRectificationParametersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.rectcam1_){}
    , decltype(_impl_.rectcam2_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rectcam1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rectcam1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rectcam2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rectcam2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

setRectificationParametersRequest::~setRectificationParametersRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.setRectificationParametersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setRectificationParametersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
  _impl_.rectcam1_.Destroy();
  _impl_.rectcam2_.Destroy();
}

void setRectificationParametersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setRectificationParametersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.setRectificationParametersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.rectcam1_.ClearToEmpty();
  _impl_.rectcam2_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setRectificationParametersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.setRectificationParametersRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.setRectificationParametersRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes rectCam1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rectcam1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes rectCam2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rectcam2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setRectificationParametersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.setRectificationParametersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.setRectificationParametersRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.setRectificationParametersRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // bytes rectCam1 = 4;
  if (!this->_internal_rectcam1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_rectcam1(), target);
  }

  // bytes rectCam2 = 5;
  if (!this->_internal_rectcam2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_rectcam2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.setRectificationParametersRequest)
  return target;
}

size_t setRectificationParametersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.setRectificationParametersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // bytes rectCam1 = 4;
  if (!this->_internal_rectcam1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectcam1());
  }

  // bytes rectCam2 = 5;
  if (!this->_internal_rectcam2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rectcam2());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setRectificationParametersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setRectificationParametersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setRectificationParametersRequest::GetClassData() const { return &_class_data_; }


void setRectificationParametersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setRectificationParametersRequest*>(&to_msg);
  auto& from = static_cast<const setRectificationParametersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.setRectificationParametersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_rectcam1().empty()) {
    _this->_internal_set_rectcam1(from._internal_rectcam1());
  }
  if (!from._internal_rectcam2().empty()) {
    _this->_internal_set_rectcam2(from._internal_rectcam2());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setRectificationParametersRequest::CopyFrom(const setRectificationParametersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.setRectificationParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setRectificationParametersRequest::IsInitialized() const {
  return true;
}

void setRectificationParametersRequest::InternalSwap(setRectificationParametersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rectcam1_, lhs_arena,
      &other->_impl_.rectcam1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rectcam2_, lhs_arena,
      &other->_impl_.rectcam2_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setRectificationParametersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[22]);
}

// ===================================================================

class setRectificationParametersResponse::_Internal {
 public:
};

setRectificationParametersResponse::setRectificationParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.setRectificationParametersResponse)
}
setRectificationParametersResponse::setRectificationParametersResponse(const setRectificationParametersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setRectificationParametersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.setRectificationParametersResponse)
}

inline void setRectificationParametersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

setRectificationParametersResponse::~setRectificationParametersResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.setRectificationParametersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setRectificationParametersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void setRectificationParametersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setRectificationParametersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.setRectificationParametersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setRectificationParametersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setRectificationParametersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.setRectificationParametersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.setRectificationParametersResponse)
  return target;
}

size_t setRectificationParametersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.setRectificationParametersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setRectificationParametersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setRectificationParametersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setRectificationParametersResponse::GetClassData() const { return &_class_data_; }


void setRectificationParametersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setRectificationParametersResponse*>(&to_msg);
  auto& from = static_cast<const setRectificationParametersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.setRectificationParametersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setRectificationParametersResponse::CopyFrom(const setRectificationParametersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.setRectificationParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setRectificationParametersResponse::IsInitialized() const {
  return true;
}

void setRectificationParametersResponse::InternalSwap(setRectificationParametersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setRectificationParametersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[23]);
}

// ===================================================================

class getCameraParametersRequest::_Internal {
 public:
};

getCameraParametersRequest::getCameraParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getCameraParametersRequest)
}
getCameraParametersRequest::getCameraParametersRequest(const getCameraParametersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getCameraParametersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.cameraparams_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cameraparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cameraparams().empty()) {
    _this->_impl_.cameraparams_.Set(from._internal_cameraparams(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getCameraParametersRequest)
}

inline void getCameraParametersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.cameraparams_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameraparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getCameraParametersRequest::~getCameraParametersRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getCameraParametersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getCameraParametersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
  _impl_.cameraparams_.Destroy();
}

void getCameraParametersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getCameraParametersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getCameraParametersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.cameraparams_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getCameraParametersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getCameraParametersRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getCameraParametersRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes cameraParams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cameraparams();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getCameraParametersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getCameraParametersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getCameraParametersRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getCameraParametersRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // bytes cameraParams = 4;
  if (!this->_internal_cameraparams().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cameraparams(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getCameraParametersRequest)
  return target;
}

size_t getCameraParametersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getCameraParametersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // bytes cameraParams = 4;
  if (!this->_internal_cameraparams().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cameraparams());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getCameraParametersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getCameraParametersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getCameraParametersRequest::GetClassData() const { return &_class_data_; }


void getCameraParametersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getCameraParametersRequest*>(&to_msg);
  auto& from = static_cast<const getCameraParametersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getCameraParametersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_cameraparams().empty()) {
    _this->_internal_set_cameraparams(from._internal_cameraparams());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getCameraParametersRequest::CopyFrom(const getCameraParametersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getCameraParametersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getCameraParametersRequest::IsInitialized() const {
  return true;
}

void getCameraParametersRequest::InternalSwap(getCameraParametersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cameraparams_, lhs_arena,
      &other->_impl_.cameraparams_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getCameraParametersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[24]);
}

// ===================================================================

class getCameraParametersResponse::_Internal {
 public:
};

getCameraParametersResponse::getCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getCameraParametersResponse)
}
getCameraParametersResponse::getCameraParametersResponse(const getCameraParametersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getCameraParametersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cameraparams_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cameraparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cameraparams().empty()) {
    _this->_impl_.cameraparams_.Set(from._internal_cameraparams(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getCameraParametersResponse)
}

inline void getCameraParametersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cameraparams_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cameraparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cameraparams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getCameraParametersResponse::~getCameraParametersResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getCameraParametersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getCameraParametersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cameraparams_.Destroy();
}

void getCameraParametersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getCameraParametersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getCameraParametersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cameraparams_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getCameraParametersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes cameraParams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cameraparams();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getCameraParametersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getCameraParametersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cameraParams = 1;
  if (!this->_internal_cameraparams().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cameraparams(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getCameraParametersResponse)
  return target;
}

size_t getCameraParametersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getCameraParametersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cameraParams = 1;
  if (!this->_internal_cameraparams().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cameraparams());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getCameraParametersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getCameraParametersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getCameraParametersResponse::GetClassData() const { return &_class_data_; }


void getCameraParametersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getCameraParametersResponse*>(&to_msg);
  auto& from = static_cast<const getCameraParametersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getCameraParametersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cameraparams().empty()) {
    _this->_internal_set_cameraparams(from._internal_cameraparams());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getCameraParametersResponse::CopyFrom(const getCameraParametersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getCameraParametersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getCameraParametersResponse::IsInitialized() const {
  return true;
}

void getCameraParametersResponse::InternalSwap(getCameraParametersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cameraparams_, lhs_arena,
      &other->_impl_.cameraparams_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getCameraParametersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[25]);
}

// ===================================================================

class imageProcessRequestRequest::_Internal {
 public:
};

imageProcessRequestRequest::imageProcessRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.imageProcessRequestRequest)
}
imageProcessRequestRequest::imageProcessRequestRequest(const imageProcessRequestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  imageProcessRequestRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.images_){}
    , decltype(_impl_.poses_){}
    , decltype(_impl_.worldtransform_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.transform3d_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.detectedobjects_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.fixedpose_){}
    , decltype(_impl_.transform3dstatus_){}
    , decltype(_impl_.mappingstatus_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.images_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.images_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_images().empty()) {
    _this->_impl_.images_.Set(from._internal_images(), 
      _this->GetArenaForAllocation());
  }
  _impl_.poses_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.poses_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_poses().empty()) {
    _this->_impl_.poses_.Set(from._internal_poses(), 
      _this->GetArenaForAllocation());
  }
  _impl_.worldtransform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldtransform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worldtransform().empty()) {
    _this->_impl_.worldtransform_.Set(from._internal_worldtransform(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transform3d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transform3d().empty()) {
    _this->_impl_.transform3d_.Set(from._internal_transform3d(), 
      _this->GetArenaForAllocation());
  }
  _impl_.confidence_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confidence_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_confidence().empty()) {
    _this->_impl_.confidence_.Set(from._internal_confidence(), 
      _this->GetArenaForAllocation());
  }
  _impl_.detectedobjects_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detectedobjects_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detectedobjects().empty()) {
    _this->_impl_.detectedobjects_.Set(from._internal_detectedobjects(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mappingstatus_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.mappingstatus_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.imageProcessRequestRequest)
}

inline void imageProcessRequestRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.images_){}
    , decltype(_impl_.poses_){}
    , decltype(_impl_.worldtransform_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.transform3d_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.detectedobjects_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.fixedpose_){false}
    , decltype(_impl_.transform3dstatus_){0}
    , decltype(_impl_.mappingstatus_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.images_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.images_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.poses_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.poses_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.worldtransform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worldtransform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transform3d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.confidence_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confidence_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detectedobjects_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detectedobjects_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

imageProcessRequestRequest::~imageProcessRequestRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.imageProcessRequestRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void imageProcessRequestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
  _impl_.images_.Destroy();
  _impl_.poses_.Destroy();
  _impl_.worldtransform_.Destroy();
  _impl_.timestamp_.Destroy();
  _impl_.transform3d_.Destroy();
  _impl_.confidence_.Destroy();
  _impl_.detectedobjects_.Destroy();
}

void imageProcessRequestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void imageProcessRequestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.imageProcessRequestRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.images_.ClearToEmpty();
  _impl_.poses_.ClearToEmpty();
  _impl_.worldtransform_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.transform3d_.ClearToEmpty();
  _impl_.confidence_.ClearToEmpty();
  _impl_.detectedobjects_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mappingstatus_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.mappingstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* imageProcessRequestRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.imageProcessRequestRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.imageProcessRequestRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes images = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_images();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes poses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_poses();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fixedPose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.fixedpose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes worldTransform = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_worldtransform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 transform3DStatus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.transform3dstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transform3D = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_transform3d();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes confidence = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_confidence();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 mappingStatus = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.mappingstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes detectedObjects = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_detectedobjects();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* imageProcessRequestRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.imageProcessRequestRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.imageProcessRequestRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.imageProcessRequestRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // bytes images = 4;
  if (!this->_internal_images().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_images(), target);
  }

  // bytes poses = 5;
  if (!this->_internal_poses().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_poses(), target);
  }

  // bool fixedPose = 6;
  if (this->_internal_fixedpose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_fixedpose(), target);
  }

  // bytes worldTransform = 7;
  if (!this->_internal_worldtransform().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_worldtransform(), target);
  }

  // bytes timestamp = 8;
  if (!this->_internal_timestamp().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_timestamp(), target);
  }

  // sint32 transform3DStatus = 9;
  if (this->_internal_transform3dstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(9, this->_internal_transform3dstatus(), target);
  }

  // bytes transform3D = 10;
  if (!this->_internal_transform3d().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_transform3d(), target);
  }

  // bytes confidence = 11;
  if (!this->_internal_confidence().empty()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_confidence(), target);
  }

  // sint32 mappingStatus = 12;
  if (this->_internal_mappingstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(12, this->_internal_mappingstatus(), target);
  }

  // bytes detectedObjects = 13;
  if (!this->_internal_detectedobjects().empty()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_detectedobjects(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.imageProcessRequestRequest)
  return target;
}

size_t imageProcessRequestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.imageProcessRequestRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // bytes images = 4;
  if (!this->_internal_images().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_images());
  }

  // bytes poses = 5;
  if (!this->_internal_poses().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_poses());
  }

  // bytes worldTransform = 7;
  if (!this->_internal_worldtransform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_worldtransform());
  }

  // bytes timestamp = 8;
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_timestamp());
  }

  // bytes transform3D = 10;
  if (!this->_internal_transform3d().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transform3d());
  }

  // bytes confidence = 11;
  if (!this->_internal_confidence().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_confidence());
  }

  // bytes detectedObjects = 13;
  if (!this->_internal_detectedobjects().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_detectedobjects());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // bool fixedPose = 6;
  if (this->_internal_fixedpose() != 0) {
    total_size += 1 + 1;
  }

  // sint32 transform3DStatus = 9;
  if (this->_internal_transform3dstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_transform3dstatus());
  }

  // sint32 mappingStatus = 12;
  if (this->_internal_mappingstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_mappingstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData imageProcessRequestRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    imageProcessRequestRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*imageProcessRequestRequest::GetClassData() const { return &_class_data_; }


void imageProcessRequestRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<imageProcessRequestRequest*>(&to_msg);
  auto& from = static_cast<const imageProcessRequestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.imageProcessRequestRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_images().empty()) {
    _this->_internal_set_images(from._internal_images());
  }
  if (!from._internal_poses().empty()) {
    _this->_internal_set_poses(from._internal_poses());
  }
  if (!from._internal_worldtransform().empty()) {
    _this->_internal_set_worldtransform(from._internal_worldtransform());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_transform3d().empty()) {
    _this->_internal_set_transform3d(from._internal_transform3d());
  }
  if (!from._internal_confidence().empty()) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  if (!from._internal_detectedobjects().empty()) {
    _this->_internal_set_detectedobjects(from._internal_detectedobjects());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_fixedpose() != 0) {
    _this->_internal_set_fixedpose(from._internal_fixedpose());
  }
  if (from._internal_transform3dstatus() != 0) {
    _this->_internal_set_transform3dstatus(from._internal_transform3dstatus());
  }
  if (from._internal_mappingstatus() != 0) {
    _this->_internal_set_mappingstatus(from._internal_mappingstatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void imageProcessRequestRequest::CopyFrom(const imageProcessRequestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.imageProcessRequestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imageProcessRequestRequest::IsInitialized() const {
  return true;
}

void imageProcessRequestRequest::InternalSwap(imageProcessRequestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.images_, lhs_arena,
      &other->_impl_.images_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.poses_, lhs_arena,
      &other->_impl_.poses_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worldtransform_, lhs_arena,
      &other->_impl_.worldtransform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timestamp_, lhs_arena,
      &other->_impl_.timestamp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transform3d_, lhs_arena,
      &other->_impl_.transform3d_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.confidence_, lhs_arena,
      &other->_impl_.confidence_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detectedobjects_, lhs_arena,
      &other->_impl_.detectedobjects_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(imageProcessRequestRequest, _impl_.mappingstatus_)
      + sizeof(imageProcessRequestRequest::_impl_.mappingstatus_)
      - PROTOBUF_FIELD_OFFSET(imageProcessRequestRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata imageProcessRequestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[26]);
}

// ===================================================================

class imageProcessRequestResponse::_Internal {
 public:
};

imageProcessRequestResponse::imageProcessRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.imageProcessRequestResponse)
}
imageProcessRequestResponse::imageProcessRequestResponse(const imageProcessRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  imageProcessRequestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transform3d_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.detectedobjects_){}
    , decltype(_impl_.transform3dstatus_){}
    , decltype(_impl_.mappingstatus_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transform3d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transform3d().empty()) {
    _this->_impl_.transform3d_.Set(from._internal_transform3d(), 
      _this->GetArenaForAllocation());
  }
  _impl_.confidence_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confidence_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_confidence().empty()) {
    _this->_impl_.confidence_.Set(from._internal_confidence(), 
      _this->GetArenaForAllocation());
  }
  _impl_.detectedobjects_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detectedobjects_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detectedobjects().empty()) {
    _this->_impl_.detectedobjects_.Set(from._internal_detectedobjects(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.transform3dstatus_, &from._impl_.transform3dstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
    reinterpret_cast<char*>(&_impl_.transform3dstatus_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.imageProcessRequestResponse)
}

inline void imageProcessRequestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transform3d_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.detectedobjects_){}
    , decltype(_impl_.transform3dstatus_){0}
    , decltype(_impl_.mappingstatus_){0}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.transform3d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.confidence_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confidence_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detectedobjects_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detectedobjects_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

imageProcessRequestResponse::~imageProcessRequestResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.imageProcessRequestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void imageProcessRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transform3d_.Destroy();
  _impl_.confidence_.Destroy();
  _impl_.detectedobjects_.Destroy();
}

void imageProcessRequestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void imageProcessRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.imageProcessRequestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transform3d_.ClearToEmpty();
  _impl_.confidence_.ClearToEmpty();
  _impl_.detectedobjects_.ClearToEmpty();
  ::memset(&_impl_.transform3dstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
      reinterpret_cast<char*>(&_impl_.transform3dstatus_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* imageProcessRequestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 transform3DStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.transform3dstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transform3D = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transform3d();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_confidence();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 mappingStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mappingstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes detectedObjects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_detectedobjects();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* imageProcessRequestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.imageProcessRequestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 transform3DStatus = 1;
  if (this->_internal_transform3dstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_transform3dstatus(), target);
  }

  // bytes transform3D = 2;
  if (!this->_internal_transform3d().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transform3d(), target);
  }

  // bytes confidence = 3;
  if (!this->_internal_confidence().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_confidence(), target);
  }

  // sint32 mappingStatus = 4;
  if (this->_internal_mappingstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_mappingstatus(), target);
  }

  // bytes detectedObjects = 5;
  if (!this->_internal_detectedobjects().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_detectedobjects(), target);
  }

  // sint32 xpcfGrpcReturnValue = 6;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.imageProcessRequestResponse)
  return target;
}

size_t imageProcessRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.imageProcessRequestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transform3D = 2;
  if (!this->_internal_transform3d().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transform3d());
  }

  // bytes confidence = 3;
  if (!this->_internal_confidence().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_confidence());
  }

  // bytes detectedObjects = 5;
  if (!this->_internal_detectedobjects().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_detectedobjects());
  }

  // sint32 transform3DStatus = 1;
  if (this->_internal_transform3dstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_transform3dstatus());
  }

  // sint32 mappingStatus = 4;
  if (this->_internal_mappingstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_mappingstatus());
  }

  // sint32 xpcfGrpcReturnValue = 6;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData imageProcessRequestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    imageProcessRequestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*imageProcessRequestResponse::GetClassData() const { return &_class_data_; }


void imageProcessRequestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<imageProcessRequestResponse*>(&to_msg);
  auto& from = static_cast<const imageProcessRequestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.imageProcessRequestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transform3d().empty()) {
    _this->_internal_set_transform3d(from._internal_transform3d());
  }
  if (!from._internal_confidence().empty()) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  if (!from._internal_detectedobjects().empty()) {
    _this->_internal_set_detectedobjects(from._internal_detectedobjects());
  }
  if (from._internal_transform3dstatus() != 0) {
    _this->_internal_set_transform3dstatus(from._internal_transform3dstatus());
  }
  if (from._internal_mappingstatus() != 0) {
    _this->_internal_set_mappingstatus(from._internal_mappingstatus());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void imageProcessRequestResponse::CopyFrom(const imageProcessRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.imageProcessRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imageProcessRequestResponse::IsInitialized() const {
  return true;
}

void imageProcessRequestResponse::InternalSwap(imageProcessRequestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transform3d_, lhs_arena,
      &other->_impl_.transform3d_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.confidence_, lhs_arena,
      &other->_impl_.confidence_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detectedobjects_, lhs_arena,
      &other->_impl_.detectedobjects_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(imageProcessRequestResponse, _impl_.xpcfgrpcreturnvalue_)
      + sizeof(imageProcessRequestResponse::_impl_.xpcfgrpcreturnvalue_)
      - PROTOBUF_FIELD_OFFSET(imageProcessRequestResponse, _impl_.transform3dstatus_)>(
          reinterpret_cast<char*>(&_impl_.transform3dstatus_),
          reinterpret_cast<char*>(&other->_impl_.transform3dstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata imageProcessRequestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[27]);
}

// ===================================================================

class getMappingDataRequestRequest::_Internal {
 public:
};

getMappingDataRequestRequest::getMappingDataRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMappingDataRequestRequest)
}
getMappingDataRequestRequest::getMappingDataRequestRequest(const getMappingDataRequestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMappingDataRequestRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.outputpointclouds_){}
    , decltype(_impl_.keyframeposes_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outputpointclouds_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outputpointclouds().empty()) {
    _this->_impl_.outputpointclouds_.Set(from._internal_outputpointclouds(), 
      _this->GetArenaForAllocation());
  }
  _impl_.keyframeposes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyframeposes().empty()) {
    _this->_impl_.keyframeposes_.Set(from._internal_keyframeposes(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMappingDataRequestRequest)
}

inline void getMappingDataRequestRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.outputpointclouds_){}
    , decltype(_impl_.keyframeposes_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outputpointclouds_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.keyframeposes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMappingDataRequestRequest::~getMappingDataRequestRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMappingDataRequestRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMappingDataRequestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
  _impl_.outputpointclouds_.Destroy();
  _impl_.keyframeposes_.Destroy();
}

void getMappingDataRequestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMappingDataRequestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMappingDataRequestRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.outputpointclouds_.ClearToEmpty();
  _impl_.keyframeposes_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMappingDataRequestRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMappingDataRequestRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMappingDataRequestRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes outputPointClouds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_outputpointclouds();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keyframePoses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_keyframeposes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMappingDataRequestRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMappingDataRequestRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMappingDataRequestRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMappingDataRequestRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // bytes outputPointClouds = 4;
  if (!this->_internal_outputpointclouds().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_outputpointclouds(), target);
  }

  // bytes keyframePoses = 5;
  if (!this->_internal_keyframeposes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_keyframeposes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMappingDataRequestRequest)
  return target;
}

size_t getMappingDataRequestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMappingDataRequestRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // bytes outputPointClouds = 4;
  if (!this->_internal_outputpointclouds().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_outputpointclouds());
  }

  // bytes keyframePoses = 5;
  if (!this->_internal_keyframeposes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keyframeposes());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMappingDataRequestRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMappingDataRequestRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMappingDataRequestRequest::GetClassData() const { return &_class_data_; }


void getMappingDataRequestRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMappingDataRequestRequest*>(&to_msg);
  auto& from = static_cast<const getMappingDataRequestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMappingDataRequestRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_outputpointclouds().empty()) {
    _this->_internal_set_outputpointclouds(from._internal_outputpointclouds());
  }
  if (!from._internal_keyframeposes().empty()) {
    _this->_internal_set_keyframeposes(from._internal_keyframeposes());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMappingDataRequestRequest::CopyFrom(const getMappingDataRequestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMappingDataRequestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMappingDataRequestRequest::IsInitialized() const {
  return true;
}

void getMappingDataRequestRequest::InternalSwap(getMappingDataRequestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outputpointclouds_, lhs_arena,
      &other->_impl_.outputpointclouds_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keyframeposes_, lhs_arena,
      &other->_impl_.keyframeposes_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getMappingDataRequestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[28]);
}

// ===================================================================

class getMappingDataRequestResponse::_Internal {
 public:
};

getMappingDataRequestResponse::getMappingDataRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMappingDataRequestResponse)
}
getMappingDataRequestResponse::getMappingDataRequestResponse(const getMappingDataRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMappingDataRequestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.outputpointclouds_){}
    , decltype(_impl_.keyframeposes_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.outputpointclouds_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outputpointclouds().empty()) {
    _this->_impl_.outputpointclouds_.Set(from._internal_outputpointclouds(), 
      _this->GetArenaForAllocation());
  }
  _impl_.keyframeposes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyframeposes().empty()) {
    _this->_impl_.keyframeposes_.Set(from._internal_keyframeposes(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMappingDataRequestResponse)
}

inline void getMappingDataRequestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.outputpointclouds_){}
    , decltype(_impl_.keyframeposes_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.outputpointclouds_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outputpointclouds_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.keyframeposes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMappingDataRequestResponse::~getMappingDataRequestResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMappingDataRequestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMappingDataRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.outputpointclouds_.Destroy();
  _impl_.keyframeposes_.Destroy();
}

void getMappingDataRequestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMappingDataRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMappingDataRequestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.outputpointclouds_.ClearToEmpty();
  _impl_.keyframeposes_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMappingDataRequestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes outputPointClouds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_outputpointclouds();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keyframePoses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_keyframeposes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMappingDataRequestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMappingDataRequestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes outputPointClouds = 1;
  if (!this->_internal_outputpointclouds().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_outputpointclouds(), target);
  }

  // bytes keyframePoses = 2;
  if (!this->_internal_keyframeposes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_keyframeposes(), target);
  }

  // sint32 xpcfGrpcReturnValue = 3;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMappingDataRequestResponse)
  return target;
}

size_t getMappingDataRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMappingDataRequestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes outputPointClouds = 1;
  if (!this->_internal_outputpointclouds().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_outputpointclouds());
  }

  // bytes keyframePoses = 2;
  if (!this->_internal_keyframeposes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keyframeposes());
  }

  // sint32 xpcfGrpcReturnValue = 3;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMappingDataRequestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMappingDataRequestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMappingDataRequestResponse::GetClassData() const { return &_class_data_; }


void getMappingDataRequestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMappingDataRequestResponse*>(&to_msg);
  auto& from = static_cast<const getMappingDataRequestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMappingDataRequestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_outputpointclouds().empty()) {
    _this->_internal_set_outputpointclouds(from._internal_outputpointclouds());
  }
  if (!from._internal_keyframeposes().empty()) {
    _this->_internal_set_keyframeposes(from._internal_keyframeposes());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMappingDataRequestResponse::CopyFrom(const getMappingDataRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMappingDataRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMappingDataRequestResponse::IsInitialized() const {
  return true;
}

void getMappingDataRequestResponse::InternalSwap(getMappingDataRequestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outputpointclouds_, lhs_arena,
      &other->_impl_.outputpointclouds_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keyframeposes_, lhs_arena,
      &other->_impl_.keyframeposes_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getMappingDataRequestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[29]);
}

// ===================================================================

class getClientPoseRequest::_Internal {
 public:
};

getClientPoseRequest::getClientPoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getClientPoseRequest)
}
getClientPoseRequest::getClientPoseRequest(const getClientPoseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getClientPoseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.transform3d_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.pose_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.posetype_){}
    , decltype(_impl_.transform3dstatus_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.transform3d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transform3d().empty()) {
    _this->_impl_.transform3d_.Set(from._internal_transform3d(), 
      _this->GetArenaForAllocation());
  }
  _impl_.confidence_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confidence_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_confidence().empty()) {
    _this->_impl_.confidence_.Set(from._internal_confidence(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pose().empty()) {
    _this->_impl_.pose_.Set(from._internal_pose(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transform3dstatus_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.transform3dstatus_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getClientPoseRequest)
}

inline void getClientPoseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.transform3d_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.pose_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.posetype_){0}
    , decltype(_impl_.transform3dstatus_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.transform3d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.confidence_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confidence_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getClientPoseRequest::~getClientPoseRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getClientPoseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getClientPoseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
  _impl_.transform3d_.Destroy();
  _impl_.confidence_.Destroy();
  _impl_.pose_.Destroy();
}

void getClientPoseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getClientPoseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getClientPoseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.transform3d_.ClearToEmpty();
  _impl_.confidence_.ClearToEmpty();
  _impl_.pose_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.transform3dstatus_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.transform3dstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getClientPoseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getClientPoseRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getClientPoseRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // sint32 poseType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.posetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 transform3DStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.transform3dstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transform3D = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_transform3d();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes confidence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_confidence();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pose = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_pose();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getClientPoseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getClientPoseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getClientPoseRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getClientPoseRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // sint32 poseType = 4;
  if (this->_internal_posetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_posetype(), target);
  }

  // sint32 transform3DStatus = 5;
  if (this->_internal_transform3dstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_transform3dstatus(), target);
  }

  // bytes transform3D = 6;
  if (!this->_internal_transform3d().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_transform3d(), target);
  }

  // bytes confidence = 7;
  if (!this->_internal_confidence().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_confidence(), target);
  }

  // bytes pose = 8;
  if (!this->_internal_pose().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_pose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getClientPoseRequest)
  return target;
}

size_t getClientPoseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getClientPoseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // bytes transform3D = 6;
  if (!this->_internal_transform3d().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transform3d());
  }

  // bytes confidence = 7;
  if (!this->_internal_confidence().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_confidence());
  }

  // bytes pose = 8;
  if (!this->_internal_pose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pose());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 poseType = 4;
  if (this->_internal_posetype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_posetype());
  }

  // sint32 transform3DStatus = 5;
  if (this->_internal_transform3dstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_transform3dstatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getClientPoseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getClientPoseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getClientPoseRequest::GetClassData() const { return &_class_data_; }


void getClientPoseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getClientPoseRequest*>(&to_msg);
  auto& from = static_cast<const getClientPoseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getClientPoseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_transform3d().empty()) {
    _this->_internal_set_transform3d(from._internal_transform3d());
  }
  if (!from._internal_confidence().empty()) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  if (!from._internal_pose().empty()) {
    _this->_internal_set_pose(from._internal_pose());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_posetype() != 0) {
    _this->_internal_set_posetype(from._internal_posetype());
  }
  if (from._internal_transform3dstatus() != 0) {
    _this->_internal_set_transform3dstatus(from._internal_transform3dstatus());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getClientPoseRequest::CopyFrom(const getClientPoseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getClientPoseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getClientPoseRequest::IsInitialized() const {
  return true;
}

void getClientPoseRequest::InternalSwap(getClientPoseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transform3d_, lhs_arena,
      &other->_impl_.transform3d_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.confidence_, lhs_arena,
      &other->_impl_.confidence_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pose_, lhs_arena,
      &other->_impl_.pose_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getClientPoseRequest, _impl_.transform3dstatus_)
      + sizeof(getClientPoseRequest::_impl_.transform3dstatus_)
      - PROTOBUF_FIELD_OFFSET(getClientPoseRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getClientPoseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[30]);
}

// ===================================================================

class getClientPoseResponse::_Internal {
 public:
};

getClientPoseResponse::getClientPoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getClientPoseResponse)
}
getClientPoseResponse::getClientPoseResponse(const getClientPoseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getClientPoseResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transform3d_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.pose_){}
    , decltype(_impl_.transform3dstatus_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.transform3d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transform3d().empty()) {
    _this->_impl_.transform3d_.Set(from._internal_transform3d(), 
      _this->GetArenaForAllocation());
  }
  _impl_.confidence_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confidence_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_confidence().empty()) {
    _this->_impl_.confidence_.Set(from._internal_confidence(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pose().empty()) {
    _this->_impl_.pose_.Set(from._internal_pose(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.transform3dstatus_, &from._impl_.transform3dstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
    reinterpret_cast<char*>(&_impl_.transform3dstatus_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getClientPoseResponse)
}

inline void getClientPoseResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transform3d_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.pose_){}
    , decltype(_impl_.transform3dstatus_){0}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.transform3d_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.transform3d_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.confidence_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.confidence_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getClientPoseResponse::~getClientPoseResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getClientPoseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getClientPoseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transform3d_.Destroy();
  _impl_.confidence_.Destroy();
  _impl_.pose_.Destroy();
}

void getClientPoseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getClientPoseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getClientPoseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transform3d_.ClearToEmpty();
  _impl_.confidence_.ClearToEmpty();
  _impl_.pose_.ClearToEmpty();
  ::memset(&_impl_.transform3dstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
      reinterpret_cast<char*>(&_impl_.transform3dstatus_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getClientPoseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 transform3DStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.transform3dstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transform3D = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transform3d();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_confidence();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pose();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getClientPoseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getClientPoseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 transform3DStatus = 1;
  if (this->_internal_transform3dstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_transform3dstatus(), target);
  }

  // bytes transform3D = 2;
  if (!this->_internal_transform3d().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transform3d(), target);
  }

  // bytes confidence = 3;
  if (!this->_internal_confidence().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_confidence(), target);
  }

  // bytes pose = 4;
  if (!this->_internal_pose().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pose(), target);
  }

  // sint32 xpcfGrpcReturnValue = 5;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getClientPoseResponse)
  return target;
}

size_t getClientPoseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getClientPoseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transform3D = 2;
  if (!this->_internal_transform3d().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transform3d());
  }

  // bytes confidence = 3;
  if (!this->_internal_confidence().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_confidence());
  }

  // bytes pose = 4;
  if (!this->_internal_pose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pose());
  }

  // sint32 transform3DStatus = 1;
  if (this->_internal_transform3dstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_transform3dstatus());
  }

  // sint32 xpcfGrpcReturnValue = 5;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getClientPoseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getClientPoseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getClientPoseResponse::GetClassData() const { return &_class_data_; }


void getClientPoseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getClientPoseResponse*>(&to_msg);
  auto& from = static_cast<const getClientPoseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getClientPoseResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transform3d().empty()) {
    _this->_internal_set_transform3d(from._internal_transform3d());
  }
  if (!from._internal_confidence().empty()) {
    _this->_internal_set_confidence(from._internal_confidence());
  }
  if (!from._internal_pose().empty()) {
    _this->_internal_set_pose(from._internal_pose());
  }
  if (from._internal_transform3dstatus() != 0) {
    _this->_internal_set_transform3dstatus(from._internal_transform3dstatus());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getClientPoseResponse::CopyFrom(const getClientPoseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getClientPoseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getClientPoseResponse::IsInitialized() const {
  return true;
}

void getClientPoseResponse::InternalSwap(getClientPoseResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.transform3d_, lhs_arena,
      &other->_impl_.transform3d_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.confidence_, lhs_arena,
      &other->_impl_.confidence_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pose_, lhs_arena,
      &other->_impl_.pose_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getClientPoseResponse, _impl_.xpcfgrpcreturnvalue_)
      + sizeof(getClientPoseResponse::_impl_.xpcfgrpcreturnvalue_)
      - PROTOBUF_FIELD_OFFSET(getClientPoseResponse, _impl_.transform3dstatus_)>(
          reinterpret_cast<char*>(&_impl_.transform3dstatus_),
          reinterpret_cast<char*>(&other->_impl_.transform3dstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getClientPoseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[31]);
}

// ===================================================================

class createMapRequest::_Internal {
 public:
};

createMapRequest::createMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.createMapRequest)
}
createMapRequest::createMapRequest(const createMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  createMapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.createMapRequest)
}

inline void createMapRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

createMapRequest::~createMapRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.createMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.mapuuid_.Destroy();
}

void createMapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.createMapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.mapuuid_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.createMapRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string mapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.createMapRequest.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* createMapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.createMapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.createMapRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.createMapRequest.mapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.createMapRequest)
  return target;
}

size_t createMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.createMapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createMapRequest::GetClassData() const { return &_class_data_; }


void createMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createMapRequest*>(&to_msg);
  auto& from = static_cast<const createMapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.createMapRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createMapRequest::CopyFrom(const createMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.createMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createMapRequest::IsInitialized() const {
  return true;
}

void createMapRequest::InternalSwap(createMapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata createMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[32]);
}

// ===================================================================

class createMapResponse::_Internal {
 public:
};

createMapResponse::createMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.createMapResponse)
}
createMapResponse::createMapResponse(const createMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  createMapResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.createMapResponse)
}

inline void createMapResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

createMapResponse::~createMapResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.createMapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void createMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void createMapResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void createMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.createMapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* createMapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* createMapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.createMapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.createMapResponse)
  return target;
}

size_t createMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.createMapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData createMapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    createMapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*createMapResponse::GetClassData() const { return &_class_data_; }


void createMapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<createMapResponse*>(&to_msg);
  auto& from = static_cast<const createMapResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.createMapResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void createMapResponse::CopyFrom(const createMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.createMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool createMapResponse::IsInitialized() const {
  return true;
}

void createMapResponse::InternalSwap(createMapResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata createMapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[33]);
}

// ===================================================================

class deleteMapRequest::_Internal {
 public:
};

deleteMapRequest::deleteMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.deleteMapRequest)
}
deleteMapRequest::deleteMapRequest(const deleteMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  deleteMapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.deleteMapRequest)
}

inline void deleteMapRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

deleteMapRequest::~deleteMapRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.deleteMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void deleteMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.mapuuid_.Destroy();
}

void deleteMapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void deleteMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.deleteMapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.mapuuid_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deleteMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.deleteMapRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string mapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.deleteMapRequest.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deleteMapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.deleteMapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.deleteMapRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.deleteMapRequest.mapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.deleteMapRequest)
  return target;
}

size_t deleteMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.deleteMapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deleteMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    deleteMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deleteMapRequest::GetClassData() const { return &_class_data_; }


void deleteMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<deleteMapRequest*>(&to_msg);
  auto& from = static_cast<const deleteMapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.deleteMapRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deleteMapRequest::CopyFrom(const deleteMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.deleteMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteMapRequest::IsInitialized() const {
  return true;
}

void deleteMapRequest::InternalSwap(deleteMapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata deleteMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[34]);
}

// ===================================================================

class deleteMapResponse::_Internal {
 public:
};

deleteMapResponse::deleteMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.deleteMapResponse)
}
deleteMapResponse::deleteMapResponse(const deleteMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  deleteMapResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.deleteMapResponse)
}

inline void deleteMapResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

deleteMapResponse::~deleteMapResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.deleteMapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void deleteMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void deleteMapResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void deleteMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.deleteMapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deleteMapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deleteMapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.deleteMapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.deleteMapResponse)
  return target;
}

size_t deleteMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.deleteMapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deleteMapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    deleteMapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deleteMapResponse::GetClassData() const { return &_class_data_; }


void deleteMapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<deleteMapResponse*>(&to_msg);
  auto& from = static_cast<const deleteMapResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.deleteMapResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deleteMapResponse::CopyFrom(const deleteMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.deleteMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteMapResponse::IsInitialized() const {
  return true;
}

void deleteMapResponse::InternalSwap(deleteMapResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata deleteMapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[35]);
}

// ===================================================================

class getAllMapsUUIDRequest::_Internal {
 public:
};

getAllMapsUUIDRequest::getAllMapsUUIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getAllMapsUUIDRequest)
}
getAllMapsUUIDRequest::getAllMapsUUIDRequest(const getAllMapsUUIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAllMapsUUIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuidlist_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuidlist().empty()) {
    _this->_impl_.mapuuidlist_.Set(from._internal_mapuuidlist(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getAllMapsUUIDRequest)
}

inline void getAllMapsUUIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuidlist_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAllMapsUUIDRequest::~getAllMapsUUIDRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getAllMapsUUIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAllMapsUUIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.mapuuidlist_.Destroy();
}

void getAllMapsUUIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAllMapsUUIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getAllMapsUUIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.mapuuidlist_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllMapsUUIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getAllMapsUUIDRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // bytes mapUUIDList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapuuidlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAllMapsUUIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getAllMapsUUIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getAllMapsUUIDRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // bytes mapUUIDList = 3;
  if (!this->_internal_mapuuidlist().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_mapuuidlist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getAllMapsUUIDRequest)
  return target;
}

size_t getAllMapsUUIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getAllMapsUUIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // bytes mapUUIDList = 3;
  if (!this->_internal_mapuuidlist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mapuuidlist());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAllMapsUUIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAllMapsUUIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAllMapsUUIDRequest::GetClassData() const { return &_class_data_; }


void getAllMapsUUIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAllMapsUUIDRequest*>(&to_msg);
  auto& from = static_cast<const getAllMapsUUIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getAllMapsUUIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_mapuuidlist().empty()) {
    _this->_internal_set_mapuuidlist(from._internal_mapuuidlist());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAllMapsUUIDRequest::CopyFrom(const getAllMapsUUIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getAllMapsUUIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllMapsUUIDRequest::IsInitialized() const {
  return true;
}

void getAllMapsUUIDRequest::InternalSwap(getAllMapsUUIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuidlist_, lhs_arena,
      &other->_impl_.mapuuidlist_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllMapsUUIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[36]);
}

// ===================================================================

class getAllMapsUUIDResponse::_Internal {
 public:
};

getAllMapsUUIDResponse::getAllMapsUUIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getAllMapsUUIDResponse)
}
getAllMapsUUIDResponse::getAllMapsUUIDResponse(const getAllMapsUUIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getAllMapsUUIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapuuidlist_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapuuidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuidlist().empty()) {
    _this->_impl_.mapuuidlist_.Set(from._internal_mapuuidlist(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getAllMapsUUIDResponse)
}

inline void getAllMapsUUIDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapuuidlist_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mapuuidlist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuidlist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getAllMapsUUIDResponse::~getAllMapsUUIDResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getAllMapsUUIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getAllMapsUUIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapuuidlist_.Destroy();
}

void getAllMapsUUIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getAllMapsUUIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getAllMapsUUIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mapuuidlist_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getAllMapsUUIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes mapUUIDList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mapuuidlist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getAllMapsUUIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getAllMapsUUIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes mapUUIDList = 1;
  if (!this->_internal_mapuuidlist().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mapuuidlist(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getAllMapsUUIDResponse)
  return target;
}

size_t getAllMapsUUIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getAllMapsUUIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mapUUIDList = 1;
  if (!this->_internal_mapuuidlist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mapuuidlist());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getAllMapsUUIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getAllMapsUUIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getAllMapsUUIDResponse::GetClassData() const { return &_class_data_; }


void getAllMapsUUIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getAllMapsUUIDResponse*>(&to_msg);
  auto& from = static_cast<const getAllMapsUUIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getAllMapsUUIDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapuuidlist().empty()) {
    _this->_internal_set_mapuuidlist(from._internal_mapuuidlist());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getAllMapsUUIDResponse::CopyFrom(const getAllMapsUUIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getAllMapsUUIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getAllMapsUUIDResponse::IsInitialized() const {
  return true;
}

void getAllMapsUUIDResponse::InternalSwap(getAllMapsUUIDResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuidlist_, lhs_arena,
      &other->_impl_.mapuuidlist_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getAllMapsUUIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[37]);
}

// ===================================================================

class getClientMapUUIDRequest::_Internal {
 public:
};

getClientMapUUIDRequest::getClientMapUUIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getClientMapUUIDRequest)
}
getClientMapUUIDRequest::getClientMapUUIDRequest(const getClientMapUUIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getClientMapUUIDRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientuuid().empty()) {
    _this->_impl_.clientuuid_.Set(from._internal_clientuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getClientMapUUIDRequest)
}

inline void getClientMapUUIDRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.clientuuid_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getClientMapUUIDRequest::~getClientMapUUIDRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getClientMapUUIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getClientMapUUIDRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.clientuuid_.Destroy();
  _impl_.mapuuid_.Destroy();
}

void getClientMapUUIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getClientMapUUIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getClientMapUUIDRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.clientuuid_.ClearToEmpty();
  _impl_.mapuuid_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getClientMapUUIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getClientMapUUIDRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string clientUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getClientMapUUIDRequest.clientUUID"));
        } else
          goto handle_unusual;
        continue;
      // string mapUUID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getClientMapUUIDRequest.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getClientMapUUIDRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getClientMapUUIDRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getClientMapUUIDRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientuuid().data(), static_cast<int>(this->_internal_clientuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getClientMapUUIDRequest.clientUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientuuid(), target);
  }

  // string mapUUID = 4;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getClientMapUUIDRequest.mapUUID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mapuuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getClientMapUUIDRequest)
  return target;
}

size_t getClientMapUUIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getClientMapUUIDRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string clientUUID = 3;
  if (!this->_internal_clientuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientuuid());
  }

  // string mapUUID = 4;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getClientMapUUIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getClientMapUUIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getClientMapUUIDRequest::GetClassData() const { return &_class_data_; }


void getClientMapUUIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getClientMapUUIDRequest*>(&to_msg);
  auto& from = static_cast<const getClientMapUUIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getClientMapUUIDRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_clientuuid().empty()) {
    _this->_internal_set_clientuuid(from._internal_clientuuid());
  }
  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getClientMapUUIDRequest::CopyFrom(const getClientMapUUIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getClientMapUUIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getClientMapUUIDRequest::IsInitialized() const {
  return true;
}

void getClientMapUUIDRequest::InternalSwap(getClientMapUUIDRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientuuid_, lhs_arena,
      &other->_impl_.clientuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getClientMapUUIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[38]);
}

// ===================================================================

class getClientMapUUIDResponse::_Internal {
 public:
};

getClientMapUUIDResponse::getClientMapUUIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getClientMapUUIDResponse)
}
getClientMapUUIDResponse::getClientMapUUIDResponse(const getClientMapUUIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getClientMapUUIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapuuid_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getClientMapUUIDResponse)
}

inline void getClientMapUUIDResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapuuid_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getClientMapUUIDResponse::~getClientMapUUIDResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getClientMapUUIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getClientMapUUIDResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapuuid_.Destroy();
}

void getClientMapUUIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getClientMapUUIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getClientMapUUIDResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mapuuid_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getClientMapUUIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mapUUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getClientMapUUIDResponse.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getClientMapUUIDResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getClientMapUUIDResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mapUUID = 1;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getClientMapUUIDResponse.mapUUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mapuuid(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getClientMapUUIDResponse)
  return target;
}

size_t getClientMapUUIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getClientMapUUIDResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mapUUID = 1;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getClientMapUUIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getClientMapUUIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getClientMapUUIDResponse::GetClassData() const { return &_class_data_; }


void getClientMapUUIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getClientMapUUIDResponse*>(&to_msg);
  auto& from = static_cast<const getClientMapUUIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getClientMapUUIDResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getClientMapUUIDResponse::CopyFrom(const getClientMapUUIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getClientMapUUIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getClientMapUUIDResponse::IsInitialized() const {
  return true;
}

void getClientMapUUIDResponse::InternalSwap(getClientMapUUIDResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getClientMapUUIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[39]);
}

// ===================================================================

class getClientInfoForMapRequest::_Internal {
 public:
};

getClientInfoForMapRequest::getClientInfoForMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getClientInfoForMapRequest)
}
getClientInfoForMapRequest::getClientInfoForMapRequest(const getClientInfoForMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getClientInfoForMapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.clientinfolist_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientinfolist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientinfolist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientinfolist().empty()) {
    _this->_impl_.clientinfolist_.Set(from._internal_clientinfolist(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getClientInfoForMapRequest)
}

inline void getClientInfoForMapRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.clientinfolist_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientinfolist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientinfolist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getClientInfoForMapRequest::~getClientInfoForMapRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getClientInfoForMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getClientInfoForMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.mapuuid_.Destroy();
  _impl_.clientinfolist_.Destroy();
}

void getClientInfoForMapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getClientInfoForMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getClientInfoForMapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.mapuuid_.ClearToEmpty();
  _impl_.clientinfolist_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getClientInfoForMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getClientInfoForMapRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string mapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getClientInfoForMapRequest.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes clientInfoList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_clientinfolist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getClientInfoForMapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getClientInfoForMapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getClientInfoForMapRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getClientInfoForMapRequest.mapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapuuid(), target);
  }

  // bytes clientInfoList = 4;
  if (!this->_internal_clientinfolist().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_clientinfolist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getClientInfoForMapRequest)
  return target;
}

size_t getClientInfoForMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getClientInfoForMapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // bytes clientInfoList = 4;
  if (!this->_internal_clientinfolist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientinfolist());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getClientInfoForMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getClientInfoForMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getClientInfoForMapRequest::GetClassData() const { return &_class_data_; }


void getClientInfoForMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getClientInfoForMapRequest*>(&to_msg);
  auto& from = static_cast<const getClientInfoForMapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getClientInfoForMapRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (!from._internal_clientinfolist().empty()) {
    _this->_internal_set_clientinfolist(from._internal_clientinfolist());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getClientInfoForMapRequest::CopyFrom(const getClientInfoForMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getClientInfoForMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getClientInfoForMapRequest::IsInitialized() const {
  return true;
}

void getClientInfoForMapRequest::InternalSwap(getClientInfoForMapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientinfolist_, lhs_arena,
      &other->_impl_.clientinfolist_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getClientInfoForMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[40]);
}

// ===================================================================

class getClientInfoForMapResponse::_Internal {
 public:
};

getClientInfoForMapResponse::getClientInfoForMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getClientInfoForMapResponse)
}
getClientInfoForMapResponse::getClientInfoForMapResponse(const getClientInfoForMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getClientInfoForMapResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientinfolist_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientinfolist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientinfolist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientinfolist().empty()) {
    _this->_impl_.clientinfolist_.Set(from._internal_clientinfolist(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getClientInfoForMapResponse)
}

inline void getClientInfoForMapResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientinfolist_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientinfolist_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientinfolist_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getClientInfoForMapResponse::~getClientInfoForMapResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getClientInfoForMapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getClientInfoForMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientinfolist_.Destroy();
}

void getClientInfoForMapResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getClientInfoForMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getClientInfoForMapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientinfolist_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getClientInfoForMapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes clientInfoList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientinfolist();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getClientInfoForMapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getClientInfoForMapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes clientInfoList = 1;
  if (!this->_internal_clientinfolist().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_clientinfolist(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getClientInfoForMapResponse)
  return target;
}

size_t getClientInfoForMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getClientInfoForMapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes clientInfoList = 1;
  if (!this->_internal_clientinfolist().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientinfolist());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getClientInfoForMapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getClientInfoForMapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getClientInfoForMapResponse::GetClassData() const { return &_class_data_; }


void getClientInfoForMapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getClientInfoForMapResponse*>(&to_msg);
  auto& from = static_cast<const getClientInfoForMapResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getClientInfoForMapResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientinfolist().empty()) {
    _this->_internal_set_clientinfolist(from._internal_clientinfolist());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getClientInfoForMapResponse::CopyFrom(const getClientInfoForMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getClientInfoForMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getClientInfoForMapResponse::IsInitialized() const {
  return true;
}

void getClientInfoForMapResponse::InternalSwap(getClientInfoForMapResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientinfolist_, lhs_arena,
      &other->_impl_.clientinfolist_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getClientInfoForMapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[41]);
}

// ===================================================================

class getMapRequestRequest::_Internal {
 public:
};

getMapRequestRequest::getMapRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMapRequestRequest)
}
getMapRequestRequest::getMapRequestRequest(const getMapRequestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMapRequestRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.mapdatastructure_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.withkeyframeimages_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapdatastructure_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapdatastructure().empty()) {
    _this->_impl_.mapdatastructure_.Set(from._internal_mapdatastructure(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.withkeyframeimages_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.withkeyframeimages_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMapRequestRequest)
}

inline void getMapRequestRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.mapdatastructure_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.withkeyframeimages_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapdatastructure_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMapRequestRequest::~getMapRequestRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMapRequestRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMapRequestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.mapuuid_.Destroy();
  _impl_.mapdatastructure_.Destroy();
}

void getMapRequestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMapRequestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMapRequestRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.mapuuid_.ClearToEmpty();
  _impl_.mapdatastructure_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.withkeyframeimages_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.withkeyframeimages_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMapRequestRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMapRequestRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string mapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMapRequestRequest.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      // bool withKeyframeImages = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.withkeyframeimages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mapDatastructure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mapdatastructure();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMapRequestRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMapRequestRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMapRequestRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMapRequestRequest.mapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapuuid(), target);
  }

  // bool withKeyframeImages = 4;
  if (this->_internal_withkeyframeimages() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_withkeyframeimages(), target);
  }

  // bytes mapDatastructure = 5;
  if (!this->_internal_mapdatastructure().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_mapdatastructure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMapRequestRequest)
  return target;
}

size_t getMapRequestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMapRequestRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // bytes mapDatastructure = 5;
  if (!this->_internal_mapdatastructure().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mapdatastructure());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // bool withKeyframeImages = 4;
  if (this->_internal_withkeyframeimages() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMapRequestRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMapRequestRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMapRequestRequest::GetClassData() const { return &_class_data_; }


void getMapRequestRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMapRequestRequest*>(&to_msg);
  auto& from = static_cast<const getMapRequestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMapRequestRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (!from._internal_mapdatastructure().empty()) {
    _this->_internal_set_mapdatastructure(from._internal_mapdatastructure());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_withkeyframeimages() != 0) {
    _this->_internal_set_withkeyframeimages(from._internal_withkeyframeimages());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMapRequestRequest::CopyFrom(const getMapRequestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMapRequestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMapRequestRequest::IsInitialized() const {
  return true;
}

void getMapRequestRequest::InternalSwap(getMapRequestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapdatastructure_, lhs_arena,
      &other->_impl_.mapdatastructure_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getMapRequestRequest, _impl_.withkeyframeimages_)
      + sizeof(getMapRequestRequest::_impl_.withkeyframeimages_)
      - PROTOBUF_FIELD_OFFSET(getMapRequestRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getMapRequestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[42]);
}

// ===================================================================

class getMapRequestResponse::_Internal {
 public:
};

getMapRequestResponse::getMapRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMapRequestResponse)
}
getMapRequestResponse::getMapRequestResponse(const getMapRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMapRequestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapdatastructure_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapdatastructure_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapdatastructure().empty()) {
    _this->_impl_.mapdatastructure_.Set(from._internal_mapdatastructure(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMapRequestResponse)
}

inline void getMapRequestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapdatastructure_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mapdatastructure_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMapRequestResponse::~getMapRequestResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMapRequestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMapRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapdatastructure_.Destroy();
}

void getMapRequestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMapRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMapRequestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mapdatastructure_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMapRequestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes mapDatastructure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mapdatastructure();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMapRequestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMapRequestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes mapDatastructure = 1;
  if (!this->_internal_mapdatastructure().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_mapdatastructure(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMapRequestResponse)
  return target;
}

size_t getMapRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMapRequestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mapDatastructure = 1;
  if (!this->_internal_mapdatastructure().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mapdatastructure());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMapRequestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMapRequestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMapRequestResponse::GetClassData() const { return &_class_data_; }


void getMapRequestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMapRequestResponse*>(&to_msg);
  auto& from = static_cast<const getMapRequestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMapRequestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapdatastructure().empty()) {
    _this->_internal_set_mapdatastructure(from._internal_mapdatastructure());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMapRequestResponse::CopyFrom(const getMapRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMapRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMapRequestResponse::IsInitialized() const {
  return true;
}

void getMapRequestResponse::InternalSwap(getMapRequestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapdatastructure_, lhs_arena,
      &other->_impl_.mapdatastructure_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getMapRequestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[43]);
}

// ===================================================================

class setMapRequestRequest::_Internal {
 public:
};

setMapRequestRequest::setMapRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.setMapRequestRequest)
}
setMapRequestRequest::setMapRequestRequest(const setMapRequestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setMapRequestRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.mapdatastructure_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapdatastructure_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapdatastructure().empty()) {
    _this->_impl_.mapdatastructure_.Set(from._internal_mapdatastructure(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.setMapRequestRequest)
}

inline void setMapRequestRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.mapdatastructure_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapdatastructure_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapdatastructure_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

setMapRequestRequest::~setMapRequestRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.setMapRequestRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setMapRequestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.mapuuid_.Destroy();
  _impl_.mapdatastructure_.Destroy();
}

void setMapRequestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setMapRequestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.setMapRequestRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.mapuuid_.ClearToEmpty();
  _impl_.mapdatastructure_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setMapRequestRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.setMapRequestRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string mapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.setMapRequestRequest.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes mapDatastructure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mapdatastructure();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setMapRequestRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.setMapRequestRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.setMapRequestRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.setMapRequestRequest.mapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapuuid(), target);
  }

  // bytes mapDatastructure = 4;
  if (!this->_internal_mapdatastructure().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mapdatastructure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.setMapRequestRequest)
  return target;
}

size_t setMapRequestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.setMapRequestRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // bytes mapDatastructure = 4;
  if (!this->_internal_mapdatastructure().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mapdatastructure());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setMapRequestRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setMapRequestRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setMapRequestRequest::GetClassData() const { return &_class_data_; }


void setMapRequestRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setMapRequestRequest*>(&to_msg);
  auto& from = static_cast<const setMapRequestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.setMapRequestRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (!from._internal_mapdatastructure().empty()) {
    _this->_internal_set_mapdatastructure(from._internal_mapdatastructure());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setMapRequestRequest::CopyFrom(const setMapRequestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.setMapRequestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setMapRequestRequest::IsInitialized() const {
  return true;
}

void setMapRequestRequest::InternalSwap(setMapRequestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapdatastructure_, lhs_arena,
      &other->_impl_.mapdatastructure_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setMapRequestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[44]);
}

// ===================================================================

class setMapRequestResponse::_Internal {
 public:
};

setMapRequestResponse::setMapRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.setMapRequestResponse)
}
setMapRequestResponse::setMapRequestResponse(const setMapRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  setMapRequestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.setMapRequestResponse)
}

inline void setMapRequestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

setMapRequestResponse::~setMapRequestResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.setMapRequestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setMapRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void setMapRequestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void setMapRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.setMapRequestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setMapRequestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setMapRequestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.setMapRequestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.setMapRequestResponse)
  return target;
}

size_t setMapRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.setMapRequestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setMapRequestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    setMapRequestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setMapRequestResponse::GetClassData() const { return &_class_data_; }


void setMapRequestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<setMapRequestResponse*>(&to_msg);
  auto& from = static_cast<const setMapRequestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.setMapRequestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setMapRequestResponse::CopyFrom(const setMapRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.setMapRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setMapRequestResponse::IsInitialized() const {
  return true;
}

void setMapRequestResponse::InternalSwap(setMapRequestResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setMapRequestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[45]);
}

// ===================================================================

class getPointCloudRequestRequest::_Internal {
 public:
};

getPointCloudRequestRequest::getPointCloudRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getPointCloudRequestRequest)
}
getPointCloudRequestRequest::getPointCloudRequestRequest(const getPointCloudRequestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getPointCloudRequestRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.pointcloud_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pointcloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pointcloud().empty()) {
    _this->_impl_.pointcloud_.Set(from._internal_pointcloud(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getPointCloudRequestRequest)
}

inline void getPointCloudRequestRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.pointcloud_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pointcloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getPointCloudRequestRequest::~getPointCloudRequestRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getPointCloudRequestRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getPointCloudRequestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.mapuuid_.Destroy();
  _impl_.pointcloud_.Destroy();
}

void getPointCloudRequestRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getPointCloudRequestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getPointCloudRequestRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.mapuuid_.ClearToEmpty();
  _impl_.pointcloud_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getPointCloudRequestRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getPointCloudRequestRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string mapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getPointCloudRequestRequest.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes pointCloud = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pointcloud();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getPointCloudRequestRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getPointCloudRequestRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getPointCloudRequestRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getPointCloudRequestRequest.mapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapuuid(), target);
  }

  // bytes pointCloud = 4;
  if (!this->_internal_pointcloud().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pointcloud(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getPointCloudRequestRequest)
  return target;
}

size_t getPointCloudRequestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getPointCloudRequestRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // bytes pointCloud = 4;
  if (!this->_internal_pointcloud().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pointcloud());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getPointCloudRequestRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getPointCloudRequestRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getPointCloudRequestRequest::GetClassData() const { return &_class_data_; }


void getPointCloudRequestRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getPointCloudRequestRequest*>(&to_msg);
  auto& from = static_cast<const getPointCloudRequestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getPointCloudRequestRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (!from._internal_pointcloud().empty()) {
    _this->_internal_set_pointcloud(from._internal_pointcloud());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getPointCloudRequestRequest::CopyFrom(const getPointCloudRequestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getPointCloudRequestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getPointCloudRequestRequest::IsInitialized() const {
  return true;
}

void getPointCloudRequestRequest::InternalSwap(getPointCloudRequestRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pointcloud_, lhs_arena,
      &other->_impl_.pointcloud_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getPointCloudRequestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[46]);
}

// ===================================================================

class getPointCloudRequestResponse::_Internal {
 public:
};

getPointCloudRequestResponse::getPointCloudRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getPointCloudRequestResponse)
}
getPointCloudRequestResponse::getPointCloudRequestResponse(const getPointCloudRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getPointCloudRequestResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pointcloud_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pointcloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pointcloud().empty()) {
    _this->_impl_.pointcloud_.Set(from._internal_pointcloud(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getPointCloudRequestResponse)
}

inline void getPointCloudRequestResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pointcloud_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pointcloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getPointCloudRequestResponse::~getPointCloudRequestResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getPointCloudRequestResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getPointCloudRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pointcloud_.Destroy();
}

void getPointCloudRequestResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getPointCloudRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getPointCloudRequestResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pointcloud_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getPointCloudRequestResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pointCloud = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pointcloud();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getPointCloudRequestResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getPointCloudRequestResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pointCloud = 1;
  if (!this->_internal_pointcloud().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pointcloud(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getPointCloudRequestResponse)
  return target;
}

size_t getPointCloudRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getPointCloudRequestResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pointCloud = 1;
  if (!this->_internal_pointcloud().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pointcloud());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getPointCloudRequestResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getPointCloudRequestResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getPointCloudRequestResponse::GetClassData() const { return &_class_data_; }


void getPointCloudRequestResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getPointCloudRequestResponse*>(&to_msg);
  auto& from = static_cast<const getPointCloudRequestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getPointCloudRequestResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pointcloud().empty()) {
    _this->_internal_set_pointcloud(from._internal_pointcloud());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getPointCloudRequestResponse::CopyFrom(const getPointCloudRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getPointCloudRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getPointCloudRequestResponse::IsInitialized() const {
  return true;
}

void getPointCloudRequestResponse::InternalSwap(getPointCloudRequestResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pointcloud_, lhs_arena,
      &other->_impl_.pointcloud_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getPointCloudRequestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[47]);
}

// ===================================================================

class getMapInfoRequest::_Internal {
 public:
};

getMapInfoRequest::getMapInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMapInfoRequest)
}
getMapInfoRequest::getMapInfoRequest(const getMapInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMapInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.descriptortype_){}
    , decltype(_impl_.mapsupportedtypes_){}
    , decltype(_impl_.datasize_){}
    , decltype(_impl_.areimagesaved_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.areimagesaved_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.areimagesaved_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMapInfoRequest)
}

inline void getMapInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.descriptortype_){0}
    , decltype(_impl_.mapsupportedtypes_){0u}
    , decltype(_impl_.datasize_){0u}
    , decltype(_impl_.areimagesaved_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMapInfoRequest::~getMapInfoRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMapInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMapInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.mapuuid_.Destroy();
}

void getMapInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMapInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMapInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.mapuuid_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.areimagesaved_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.areimagesaved_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMapInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMapInfoRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string mapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMapInfoRequest.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      // sint32 descriptorType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.descriptortype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mapSupportedTypes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mapsupportedtypes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dataSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool areImageSaved = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.areimagesaved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMapInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMapInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMapInfoRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMapInfoRequest.mapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapuuid(), target);
  }

  // sint32 descriptorType = 4;
  if (this->_internal_descriptortype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_descriptortype(), target);
  }

  // uint32 mapSupportedTypes = 5;
  if (this->_internal_mapsupportedtypes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mapsupportedtypes(), target);
  }

  // uint32 dataSize = 6;
  if (this->_internal_datasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_datasize(), target);
  }

  // bool areImageSaved = 7;
  if (this->_internal_areimagesaved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_areimagesaved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMapInfoRequest)
  return target;
}

size_t getMapInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMapInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 descriptorType = 4;
  if (this->_internal_descriptortype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_descriptortype());
  }

  // uint32 mapSupportedTypes = 5;
  if (this->_internal_mapsupportedtypes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapsupportedtypes());
  }

  // uint32 dataSize = 6;
  if (this->_internal_datasize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datasize());
  }

  // bool areImageSaved = 7;
  if (this->_internal_areimagesaved() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMapInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMapInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMapInfoRequest::GetClassData() const { return &_class_data_; }


void getMapInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMapInfoRequest*>(&to_msg);
  auto& from = static_cast<const getMapInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMapInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_descriptortype() != 0) {
    _this->_internal_set_descriptortype(from._internal_descriptortype());
  }
  if (from._internal_mapsupportedtypes() != 0) {
    _this->_internal_set_mapsupportedtypes(from._internal_mapsupportedtypes());
  }
  if (from._internal_datasize() != 0) {
    _this->_internal_set_datasize(from._internal_datasize());
  }
  if (from._internal_areimagesaved() != 0) {
    _this->_internal_set_areimagesaved(from._internal_areimagesaved());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMapInfoRequest::CopyFrom(const getMapInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMapInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMapInfoRequest::IsInitialized() const {
  return true;
}

void getMapInfoRequest::InternalSwap(getMapInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getMapInfoRequest, _impl_.areimagesaved_)
      + sizeof(getMapInfoRequest::_impl_.areimagesaved_)
      - PROTOBUF_FIELD_OFFSET(getMapInfoRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getMapInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[48]);
}

// ===================================================================

class getMapInfoResponse::_Internal {
 public:
};

getMapInfoResponse::getMapInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMapInfoResponse)
}
getMapInfoResponse::getMapInfoResponse(const getMapInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMapInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.descriptortype_){}
    , decltype(_impl_.mapsupportedtypes_){}
    , decltype(_impl_.datasize_){}
    , decltype(_impl_.areimagesaved_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.descriptortype_, &from._impl_.descriptortype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
    reinterpret_cast<char*>(&_impl_.descriptortype_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMapInfoResponse)
}

inline void getMapInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.descriptortype_){0}
    , decltype(_impl_.mapsupportedtypes_){0u}
    , decltype(_impl_.datasize_){0u}
    , decltype(_impl_.areimagesaved_){false}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getMapInfoResponse::~getMapInfoResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMapInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMapInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void getMapInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMapInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMapInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.descriptortype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
      reinterpret_cast<char*>(&_impl_.descriptortype_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMapInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 descriptorType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.descriptortype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mapSupportedTypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mapsupportedtypes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dataSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.datasize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool areImageSaved = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.areimagesaved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMapInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMapInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 descriptorType = 1;
  if (this->_internal_descriptortype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_descriptortype(), target);
  }

  // uint32 mapSupportedTypes = 2;
  if (this->_internal_mapsupportedtypes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mapsupportedtypes(), target);
  }

  // uint32 dataSize = 3;
  if (this->_internal_datasize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_datasize(), target);
  }

  // bool areImageSaved = 4;
  if (this->_internal_areimagesaved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_areimagesaved(), target);
  }

  // sint32 xpcfGrpcReturnValue = 5;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMapInfoResponse)
  return target;
}

size_t getMapInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMapInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 descriptorType = 1;
  if (this->_internal_descriptortype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_descriptortype());
  }

  // uint32 mapSupportedTypes = 2;
  if (this->_internal_mapsupportedtypes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapsupportedtypes());
  }

  // uint32 dataSize = 3;
  if (this->_internal_datasize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datasize());
  }

  // bool areImageSaved = 4;
  if (this->_internal_areimagesaved() != 0) {
    total_size += 1 + 1;
  }

  // sint32 xpcfGrpcReturnValue = 5;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMapInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMapInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMapInfoResponse::GetClassData() const { return &_class_data_; }


void getMapInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMapInfoResponse*>(&to_msg);
  auto& from = static_cast<const getMapInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMapInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_descriptortype() != 0) {
    _this->_internal_set_descriptortype(from._internal_descriptortype());
  }
  if (from._internal_mapsupportedtypes() != 0) {
    _this->_internal_set_mapsupportedtypes(from._internal_mapsupportedtypes());
  }
  if (from._internal_datasize() != 0) {
    _this->_internal_set_datasize(from._internal_datasize());
  }
  if (from._internal_areimagesaved() != 0) {
    _this->_internal_set_areimagesaved(from._internal_areimagesaved());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMapInfoResponse::CopyFrom(const getMapInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMapInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMapInfoResponse::IsInitialized() const {
  return true;
}

void getMapInfoResponse::InternalSwap(getMapInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getMapInfoResponse, _impl_.xpcfgrpcreturnvalue_)
      + sizeof(getMapInfoResponse::_impl_.xpcfgrpcreturnvalue_)
      - PROTOBUF_FIELD_OFFSET(getMapInfoResponse, _impl_.descriptortype_)>(
          reinterpret_cast<char*>(&_impl_.descriptortype_),
          reinterpret_cast<char*>(&other->_impl_.descriptortype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getMapInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[49]);
}

// ===================================================================

class requestMapProcessingRequest::_Internal {
 public:
};

requestMapProcessingRequest::requestMapProcessingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.requestMapProcessingRequest)
}
requestMapProcessingRequest::requestMapProcessingRequest(const requestMapProcessingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  requestMapProcessingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.resultmapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.processingtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapuuid().empty()) {
    _this->_impl_.mapuuid_.Set(from._internal_mapuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resultmapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resultmapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resultmapuuid().empty()) {
    _this->_impl_.resultmapuuid_.Set(from._internal_resultmapuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processingtype_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.processingtype_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.requestMapProcessingRequest)
}

inline void requestMapProcessingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.mapuuid_){}
    , decltype(_impl_.resultmapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.processingtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resultmapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resultmapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

requestMapProcessingRequest::~requestMapProcessingRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.requestMapProcessingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void requestMapProcessingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.mapuuid_.Destroy();
  _impl_.resultmapuuid_.Destroy();
}

void requestMapProcessingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void requestMapProcessingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.requestMapProcessingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.mapuuid_.ClearToEmpty();
  _impl_.resultmapuuid_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processingtype_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.processingtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* requestMapProcessingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.requestMapProcessingRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string mapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.requestMapProcessingRequest.mapUUID"));
        } else
          goto handle_unusual;
        continue;
      // string resultMapUUID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_resultmapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.requestMapProcessingRequest.resultMapUUID"));
        } else
          goto handle_unusual;
        continue;
      // sint32 processingType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.processingtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* requestMapProcessingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.requestMapProcessingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.requestMapProcessingRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapuuid().data(), static_cast<int>(this->_internal_mapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.requestMapProcessingRequest.mapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapuuid(), target);
  }

  // string resultMapUUID = 4;
  if (!this->_internal_resultmapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resultmapuuid().data(), static_cast<int>(this->_internal_resultmapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.requestMapProcessingRequest.resultMapUUID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_resultmapuuid(), target);
  }

  // sint32 processingType = 5;
  if (this->_internal_processingtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_processingtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.requestMapProcessingRequest)
  return target;
}

size_t requestMapProcessingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.requestMapProcessingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string mapUUID = 3;
  if (!this->_internal_mapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapuuid());
  }

  // string resultMapUUID = 4;
  if (!this->_internal_resultmapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resultmapuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 processingType = 5;
  if (this->_internal_processingtype() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_processingtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData requestMapProcessingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    requestMapProcessingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*requestMapProcessingRequest::GetClassData() const { return &_class_data_; }


void requestMapProcessingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<requestMapProcessingRequest*>(&to_msg);
  auto& from = static_cast<const requestMapProcessingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.requestMapProcessingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_mapuuid().empty()) {
    _this->_internal_set_mapuuid(from._internal_mapuuid());
  }
  if (!from._internal_resultmapuuid().empty()) {
    _this->_internal_set_resultmapuuid(from._internal_resultmapuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_processingtype() != 0) {
    _this->_internal_set_processingtype(from._internal_processingtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void requestMapProcessingRequest::CopyFrom(const requestMapProcessingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.requestMapProcessingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestMapProcessingRequest::IsInitialized() const {
  return true;
}

void requestMapProcessingRequest::InternalSwap(requestMapProcessingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapuuid_, lhs_arena,
      &other->_impl_.mapuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resultmapuuid_, lhs_arena,
      &other->_impl_.resultmapuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(requestMapProcessingRequest, _impl_.processingtype_)
      + sizeof(requestMapProcessingRequest::_impl_.processingtype_)
      - PROTOBUF_FIELD_OFFSET(requestMapProcessingRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata requestMapProcessingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[50]);
}

// ===================================================================

class requestMapProcessingResponse::_Internal {
 public:
};

requestMapProcessingResponse::requestMapProcessingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.requestMapProcessingResponse)
}
requestMapProcessingResponse::requestMapProcessingResponse(const requestMapProcessingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  requestMapProcessingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.requestMapProcessingResponse)
}

inline void requestMapProcessingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

requestMapProcessingResponse::~requestMapProcessingResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.requestMapProcessingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void requestMapProcessingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void requestMapProcessingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void requestMapProcessingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.requestMapProcessingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* requestMapProcessingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* requestMapProcessingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.requestMapProcessingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.requestMapProcessingResponse)
  return target;
}

size_t requestMapProcessingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.requestMapProcessingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData requestMapProcessingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    requestMapProcessingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*requestMapProcessingResponse::GetClassData() const { return &_class_data_; }


void requestMapProcessingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<requestMapProcessingResponse*>(&to_msg);
  auto& from = static_cast<const requestMapProcessingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.requestMapProcessingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void requestMapProcessingResponse::CopyFrom(const requestMapProcessingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.requestMapProcessingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool requestMapProcessingResponse::IsInitialized() const {
  return true;
}

void requestMapProcessingResponse::InternalSwap(requestMapProcessingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata requestMapProcessingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[51]);
}

// ===================================================================

class getMapProcessingStatusRequest::_Internal {
 public:
};

getMapProcessingStatusRequest::getMapProcessingStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMapProcessingStatusRequest)
}
getMapProcessingStatusRequest::getMapProcessingStatusRequest(const getMapProcessingStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMapProcessingStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.resultmapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.progress_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resultmapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resultmapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resultmapuuid().empty()) {
    _this->_impl_.resultmapuuid_.Set(from._internal_resultmapuuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.grpcservercompressionformat_, &from._impl_.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) -
    reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.progress_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMapProcessingStatusRequest)
}

inline void getMapProcessingStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.resultmapuuid_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.progress_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resultmapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resultmapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMapProcessingStatusRequest::~getMapProcessingStatusRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMapProcessingStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMapProcessingStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.resultmapuuid_.Destroy();
}

void getMapProcessingStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMapProcessingStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMapProcessingStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.resultmapuuid_.ClearToEmpty();
  ::memset(&_impl_.grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.progress_) -
      reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_)) + sizeof(_impl_.progress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMapProcessingStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMapProcessingStatusRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string resultMapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_resultmapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMapProcessingStatusRequest.resultMapUUID"));
        } else
          goto handle_unusual;
        continue;
      // sint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float progress = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMapProcessingStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMapProcessingStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMapProcessingStatusRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string resultMapUUID = 3;
  if (!this->_internal_resultmapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resultmapuuid().data(), static_cast<int>(this->_internal_resultmapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMapProcessingStatusRequest.resultMapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resultmapuuid(), target);
  }

  // sint32 status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_status(), target);
  }

  // float progress = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_progress = this->_internal_progress();
  uint32_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMapProcessingStatusRequest)
  return target;
}

size_t getMapProcessingStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMapProcessingStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string resultMapUUID = 3;
  if (!this->_internal_resultmapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resultmapuuid());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 status = 4;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_status());
  }

  // float progress = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_progress = this->_internal_progress();
  uint32_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMapProcessingStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMapProcessingStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMapProcessingStatusRequest::GetClassData() const { return &_class_data_; }


void getMapProcessingStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMapProcessingStatusRequest*>(&to_msg);
  auto& from = static_cast<const getMapProcessingStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMapProcessingStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_resultmapuuid().empty()) {
    _this->_internal_set_resultmapuuid(from._internal_resultmapuuid());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_progress = from._internal_progress();
  uint32_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMapProcessingStatusRequest::CopyFrom(const getMapProcessingStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMapProcessingStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMapProcessingStatusRequest::IsInitialized() const {
  return true;
}

void getMapProcessingStatusRequest::InternalSwap(getMapProcessingStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resultmapuuid_, lhs_arena,
      &other->_impl_.resultmapuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getMapProcessingStatusRequest, _impl_.progress_)
      + sizeof(getMapProcessingStatusRequest::_impl_.progress_)
      - PROTOBUF_FIELD_OFFSET(getMapProcessingStatusRequest, _impl_.grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&_impl_.grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->_impl_.grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getMapProcessingStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[52]);
}

// ===================================================================

class getMapProcessingStatusResponse::_Internal {
 public:
};

getMapProcessingStatusResponse::getMapProcessingStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMapProcessingStatusResponse)
}
getMapProcessingStatusResponse::getMapProcessingStatusResponse(const getMapProcessingStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMapProcessingStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMapProcessingStatusResponse)
}

inline void getMapProcessingStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

getMapProcessingStatusResponse::~getMapProcessingStatusResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMapProcessingStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMapProcessingStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void getMapProcessingStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMapProcessingStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMapProcessingStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.xpcfgrpcreturnvalue_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.xpcfgrpcreturnvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMapProcessingStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMapProcessingStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMapProcessingStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_status(), target);
  }

  // float progress = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_progress = this->_internal_progress();
  uint32_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_progress(), target);
  }

  // sint32 xpcfGrpcReturnValue = 3;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMapProcessingStatusResponse)
  return target;
}

size_t getMapProcessingStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMapProcessingStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_status());
  }

  // float progress = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_progress = this->_internal_progress();
  uint32_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    total_size += 1 + 4;
  }

  // sint32 xpcfGrpcReturnValue = 3;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMapProcessingStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMapProcessingStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMapProcessingStatusResponse::GetClassData() const { return &_class_data_; }


void getMapProcessingStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMapProcessingStatusResponse*>(&to_msg);
  auto& from = static_cast<const getMapProcessingStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMapProcessingStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_progress = from._internal_progress();
  uint32_t raw_progress;
  memcpy(&raw_progress, &tmp_progress, sizeof(tmp_progress));
  if (raw_progress != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMapProcessingStatusResponse::CopyFrom(const getMapProcessingStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMapProcessingStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMapProcessingStatusResponse::IsInitialized() const {
  return true;
}

void getMapProcessingStatusResponse::InternalSwap(getMapProcessingStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(getMapProcessingStatusResponse, _impl_.xpcfgrpcreturnvalue_)
      + sizeof(getMapProcessingStatusResponse::_impl_.xpcfgrpcreturnvalue_)
      - PROTOBUF_FIELD_OFFSET(getMapProcessingStatusResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata getMapProcessingStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[53]);
}

// ===================================================================

class getMapProcessingDataRequest::_Internal {
 public:
};

getMapProcessingDataRequest::getMapProcessingDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMapProcessingDataRequest)
}
getMapProcessingDataRequest::getMapProcessingDataRequest(const getMapProcessingDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMapProcessingDataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.resultmapuuid_){}
    , decltype(_impl_.pointcloud_){}
    , decltype(_impl_.keyframeposes_){}
    , decltype(_impl_.grpcservercompressionformat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_accesstoken().empty()) {
    _this->_impl_.accesstoken_.Set(from._internal_accesstoken(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resultmapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resultmapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resultmapuuid().empty()) {
    _this->_impl_.resultmapuuid_.Set(from._internal_resultmapuuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pointcloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pointcloud().empty()) {
    _this->_impl_.pointcloud_.Set(from._internal_pointcloud(), 
      _this->GetArenaForAllocation());
  }
  _impl_.keyframeposes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyframeposes().empty()) {
    _this->_impl_.keyframeposes_.Set(from._internal_keyframeposes(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.grpcservercompressionformat_ = from._impl_.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMapProcessingDataRequest)
}

inline void getMapProcessingDataRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accesstoken_){}
    , decltype(_impl_.resultmapuuid_){}
    , decltype(_impl_.pointcloud_){}
    , decltype(_impl_.keyframeposes_){}
    , decltype(_impl_.grpcservercompressionformat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.accesstoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.accesstoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resultmapuuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resultmapuuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pointcloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.keyframeposes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMapProcessingDataRequest::~getMapProcessingDataRequest() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMapProcessingDataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMapProcessingDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accesstoken_.Destroy();
  _impl_.resultmapuuid_.Destroy();
  _impl_.pointcloud_.Destroy();
  _impl_.keyframeposes_.Destroy();
}

void getMapProcessingDataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMapProcessingDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMapProcessingDataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accesstoken_.ClearToEmpty();
  _impl_.resultmapuuid_.ClearToEmpty();
  _impl_.pointcloud_.ClearToEmpty();
  _impl_.keyframeposes_.ClearToEmpty();
  _impl_.grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMapProcessingDataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMapProcessingDataRequest.accessToken"));
        } else
          goto handle_unusual;
        continue;
      // string resultMapUUID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_resultmapuuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grpcIFrontEnd.getMapProcessingDataRequest.resultMapUUID"));
        } else
          goto handle_unusual;
        continue;
      // bytes pointCloud = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pointcloud();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keyframePoses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_keyframeposes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMapProcessingDataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMapProcessingDataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMapProcessingDataRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string resultMapUUID = 3;
  if (!this->_internal_resultmapuuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resultmapuuid().data(), static_cast<int>(this->_internal_resultmapuuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grpcIFrontEnd.getMapProcessingDataRequest.resultMapUUID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resultmapuuid(), target);
  }

  // bytes pointCloud = 4;
  if (!this->_internal_pointcloud().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pointcloud(), target);
  }

  // bytes keyframePoses = 5;
  if (!this->_internal_keyframeposes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_keyframeposes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMapProcessingDataRequest)
  return target;
}

size_t getMapProcessingDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMapProcessingDataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 2;
  if (!this->_internal_accesstoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string resultMapUUID = 3;
  if (!this->_internal_resultmapuuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resultmapuuid());
  }

  // bytes pointCloud = 4;
  if (!this->_internal_pointcloud().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pointcloud());
  }

  // bytes keyframePoses = 5;
  if (!this->_internal_keyframeposes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keyframeposes());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMapProcessingDataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMapProcessingDataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMapProcessingDataRequest::GetClassData() const { return &_class_data_; }


void getMapProcessingDataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMapProcessingDataRequest*>(&to_msg);
  auto& from = static_cast<const getMapProcessingDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMapProcessingDataRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_accesstoken().empty()) {
    _this->_internal_set_accesstoken(from._internal_accesstoken());
  }
  if (!from._internal_resultmapuuid().empty()) {
    _this->_internal_set_resultmapuuid(from._internal_resultmapuuid());
  }
  if (!from._internal_pointcloud().empty()) {
    _this->_internal_set_pointcloud(from._internal_pointcloud());
  }
  if (!from._internal_keyframeposes().empty()) {
    _this->_internal_set_keyframeposes(from._internal_keyframeposes());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _this->_internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMapProcessingDataRequest::CopyFrom(const getMapProcessingDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMapProcessingDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMapProcessingDataRequest::IsInitialized() const {
  return true;
}

void getMapProcessingDataRequest::InternalSwap(getMapProcessingDataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.accesstoken_, lhs_arena,
      &other->_impl_.accesstoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resultmapuuid_, lhs_arena,
      &other->_impl_.resultmapuuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pointcloud_, lhs_arena,
      &other->_impl_.pointcloud_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keyframeposes_, lhs_arena,
      &other->_impl_.keyframeposes_, rhs_arena
  );
  swap(_impl_.grpcservercompressionformat_, other->_impl_.grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getMapProcessingDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[54]);
}

// ===================================================================

class getMapProcessingDataResponse::_Internal {
 public:
};

getMapProcessingDataResponse::getMapProcessingDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grpcIFrontEnd.getMapProcessingDataResponse)
}
getMapProcessingDataResponse::getMapProcessingDataResponse(const getMapProcessingDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  getMapProcessingDataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pointcloud_){}
    , decltype(_impl_.keyframeposes_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pointcloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pointcloud().empty()) {
    _this->_impl_.pointcloud_.Set(from._internal_pointcloud(), 
      _this->GetArenaForAllocation());
  }
  _impl_.keyframeposes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyframeposes().empty()) {
    _this->_impl_.keyframeposes_.Set(from._internal_keyframeposes(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.xpcfgrpcreturnvalue_ = from._impl_.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIFrontEnd.getMapProcessingDataResponse)
}

inline void getMapProcessingDataResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pointcloud_){}
    , decltype(_impl_.keyframeposes_){}
    , decltype(_impl_.xpcfgrpcreturnvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pointcloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pointcloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.keyframeposes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyframeposes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

getMapProcessingDataResponse::~getMapProcessingDataResponse() {
  // @@protoc_insertion_point(destructor:grpcIFrontEnd.getMapProcessingDataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void getMapProcessingDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pointcloud_.Destroy();
  _impl_.keyframeposes_.Destroy();
}

void getMapProcessingDataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void getMapProcessingDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIFrontEnd.getMapProcessingDataResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pointcloud_.ClearToEmpty();
  _impl_.keyframeposes_.ClearToEmpty();
  _impl_.xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getMapProcessingDataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pointCloud = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pointcloud();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keyframePoses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_keyframeposes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* getMapProcessingDataResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIFrontEnd.getMapProcessingDataResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pointCloud = 1;
  if (!this->_internal_pointcloud().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pointcloud(), target);
  }

  // bytes keyframePoses = 2;
  if (!this->_internal_keyframeposes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_keyframeposes(), target);
  }

  // sint32 xpcfGrpcReturnValue = 3;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIFrontEnd.getMapProcessingDataResponse)
  return target;
}

size_t getMapProcessingDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIFrontEnd.getMapProcessingDataResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pointCloud = 1;
  if (!this->_internal_pointcloud().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pointcloud());
  }

  // bytes keyframePoses = 2;
  if (!this->_internal_keyframeposes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keyframeposes());
  }

  // sint32 xpcfGrpcReturnValue = 3;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData getMapProcessingDataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    getMapProcessingDataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*getMapProcessingDataResponse::GetClassData() const { return &_class_data_; }


void getMapProcessingDataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<getMapProcessingDataResponse*>(&to_msg);
  auto& from = static_cast<const getMapProcessingDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grpcIFrontEnd.getMapProcessingDataResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pointcloud().empty()) {
    _this->_internal_set_pointcloud(from._internal_pointcloud());
  }
  if (!from._internal_keyframeposes().empty()) {
    _this->_internal_set_keyframeposes(from._internal_keyframeposes());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _this->_internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void getMapProcessingDataResponse::CopyFrom(const getMapProcessingDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIFrontEnd.getMapProcessingDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getMapProcessingDataResponse::IsInitialized() const {
  return true;
}

void getMapProcessingDataResponse::InternalSwap(getMapProcessingDataResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pointcloud_, lhs_arena,
      &other->_impl_.pointcloud_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keyframeposes_, lhs_arena,
      &other->_impl_.keyframeposes_, rhs_arena
  );
  swap(_impl_.xpcfgrpcreturnvalue_, other->_impl_.xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getMapProcessingDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIFrontEndService_2eproto_getter, &descriptor_table_grpcIFrontEndService_2eproto_once,
      file_level_metadata_grpcIFrontEndService_2eproto[55]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIFrontEnd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::registerClientRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::registerClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::registerClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::registerClientResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::registerClientResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::registerClientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::unregisterClientRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::unregisterClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::unregisterClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::unregisterClientResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::unregisterClientResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::unregisterClientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getAllClientsUUIDRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getAllClientsUUIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getAllClientsUUIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getAllClientsUUIDResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getAllClientsUUIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getAllClientsUUIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getDeviceInfoRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getDeviceInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getDeviceInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getDeviceInfoResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getDeviceInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getDeviceInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::init_grpc0Request*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::init_grpc0Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::init_grpc0Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::init_grpc0Response*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::init_grpc0Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::init_grpc0Response >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::init_grpc1Request*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::init_grpc1Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::init_grpc1Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::init_grpc1Response*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::init_grpc1Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::init_grpc1Response >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::startRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::startRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::startRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::startResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::startResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::startResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::stopRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::stopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::stopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::stopResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::stopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::stopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getProcessingModeRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getProcessingModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getProcessingModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getProcessingModeResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getProcessingModeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getProcessingModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::setCameraParameters_grpc0Request*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::setCameraParameters_grpc0Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::setCameraParameters_grpc0Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::setCameraParameters_grpc0Response*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::setCameraParameters_grpc0Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::setCameraParameters_grpc0Response >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::setCameraParameters_grpc1Request*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::setCameraParameters_grpc1Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::setCameraParameters_grpc1Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::setCameraParameters_grpc1Response*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::setCameraParameters_grpc1Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::setCameraParameters_grpc1Response >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::setRectificationParametersRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::setRectificationParametersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::setRectificationParametersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::setRectificationParametersResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::setRectificationParametersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::setRectificationParametersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getCameraParametersRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getCameraParametersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getCameraParametersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getCameraParametersResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getCameraParametersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getCameraParametersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::imageProcessRequestRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::imageProcessRequestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::imageProcessRequestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::imageProcessRequestResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::imageProcessRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::imageProcessRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMappingDataRequestRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMappingDataRequestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMappingDataRequestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMappingDataRequestResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMappingDataRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMappingDataRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getClientPoseRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getClientPoseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getClientPoseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getClientPoseResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getClientPoseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getClientPoseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::createMapRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::createMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::createMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::createMapResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::createMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::createMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::deleteMapRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::deleteMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::deleteMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::deleteMapResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::deleteMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::deleteMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getAllMapsUUIDRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getAllMapsUUIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getAllMapsUUIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getAllMapsUUIDResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getAllMapsUUIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getAllMapsUUIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getClientMapUUIDRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getClientMapUUIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getClientMapUUIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getClientMapUUIDResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getClientMapUUIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getClientMapUUIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getClientInfoForMapRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getClientInfoForMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getClientInfoForMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getClientInfoForMapResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getClientInfoForMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getClientInfoForMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMapRequestRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMapRequestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMapRequestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMapRequestResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMapRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMapRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::setMapRequestRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::setMapRequestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::setMapRequestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::setMapRequestResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::setMapRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::setMapRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getPointCloudRequestRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getPointCloudRequestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getPointCloudRequestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getPointCloudRequestResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getPointCloudRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getPointCloudRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMapInfoRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMapInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMapInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMapInfoResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMapInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMapInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::requestMapProcessingRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::requestMapProcessingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::requestMapProcessingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::requestMapProcessingResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::requestMapProcessingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::requestMapProcessingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMapProcessingStatusRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMapProcessingStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMapProcessingStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMapProcessingStatusResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMapProcessingStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMapProcessingStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMapProcessingDataRequest*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMapProcessingDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMapProcessingDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIFrontEnd::getMapProcessingDataResponse*
Arena::CreateMaybeMessage< ::grpcIFrontEnd::getMapProcessingDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIFrontEnd::getMapProcessingDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
