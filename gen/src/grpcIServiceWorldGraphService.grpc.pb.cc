// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIServiceWorldGraphService.proto

#include "grpcIServiceWorldGraphService.pb.h"
#include "grpcIServiceWorldGraphService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIServiceWorldGraph {

static const char* grpcIServiceWorldGraphService_method_names[] = {
  "/grpcIServiceWorldGraph.grpcIServiceWorldGraphService/init",
  "/grpcIServiceWorldGraph.grpcIServiceWorldGraphService/start",
  "/grpcIServiceWorldGraph.grpcIServiceWorldGraphService/stop",
};

std::unique_ptr< grpcIServiceWorldGraphService::Stub> grpcIServiceWorldGraphService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIServiceWorldGraphService::Stub> stub(new grpcIServiceWorldGraphService::Stub(channel, options));
  return stub;
}

grpcIServiceWorldGraphService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_init_(grpcIServiceWorldGraphService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_(grpcIServiceWorldGraphService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIServiceWorldGraphService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIServiceWorldGraphService::Stub::init(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::initRequest& request, ::grpcIServiceWorldGraph::initResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceWorldGraph::initRequest, ::grpcIServiceWorldGraph::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_, context, request, response);
}

void grpcIServiceWorldGraphService::Stub::async::init(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::initRequest* request, ::grpcIServiceWorldGraph::initResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceWorldGraph::initRequest, ::grpcIServiceWorldGraph::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, std::move(f));
}

void grpcIServiceWorldGraphService::Stub::async::init(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::initRequest* request, ::grpcIServiceWorldGraph::initResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceWorldGraph::initResponse>* grpcIServiceWorldGraphService::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::initRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceWorldGraph::initResponse, ::grpcIServiceWorldGraph::initRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceWorldGraph::initResponse>* grpcIServiceWorldGraphService::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::initRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIServiceWorldGraphService::Stub::start(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::startRequest& request, ::grpcIServiceWorldGraph::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceWorldGraph::startRequest, ::grpcIServiceWorldGraph::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIServiceWorldGraphService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::startRequest* request, ::grpcIServiceWorldGraph::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceWorldGraph::startRequest, ::grpcIServiceWorldGraph::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIServiceWorldGraphService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::startRequest* request, ::grpcIServiceWorldGraph::startResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceWorldGraph::startResponse>* grpcIServiceWorldGraphService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::startRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceWorldGraph::startResponse, ::grpcIServiceWorldGraph::startRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceWorldGraph::startResponse>* grpcIServiceWorldGraphService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::startRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIServiceWorldGraphService::Stub::stop(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::stopRequest& request, ::grpcIServiceWorldGraph::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceWorldGraph::stopRequest, ::grpcIServiceWorldGraph::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIServiceWorldGraphService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::stopRequest* request, ::grpcIServiceWorldGraph::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceWorldGraph::stopRequest, ::grpcIServiceWorldGraph::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIServiceWorldGraphService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::stopRequest* request, ::grpcIServiceWorldGraph::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceWorldGraph::stopResponse>* grpcIServiceWorldGraphService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::stopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceWorldGraph::stopResponse, ::grpcIServiceWorldGraph::stopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceWorldGraph::stopResponse>* grpcIServiceWorldGraphService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIServiceWorldGraph::stopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIServiceWorldGraphService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceWorldGraphService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceWorldGraphService::Service, ::grpcIServiceWorldGraph::initRequest, ::grpcIServiceWorldGraph::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceWorldGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceWorldGraph::initRequest* req,
             ::grpcIServiceWorldGraph::initResponse* resp) {
               return service->init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceWorldGraphService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceWorldGraphService::Service, ::grpcIServiceWorldGraph::startRequest, ::grpcIServiceWorldGraph::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceWorldGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceWorldGraph::startRequest* req,
             ::grpcIServiceWorldGraph::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceWorldGraphService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceWorldGraphService::Service, ::grpcIServiceWorldGraph::stopRequest, ::grpcIServiceWorldGraph::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceWorldGraphService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceWorldGraph::stopRequest* req,
             ::grpcIServiceWorldGraph::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
}

grpcIServiceWorldGraphService::Service::~Service() {
}

::grpc::Status grpcIServiceWorldGraphService::Service::init(::grpc::ServerContext* context, const ::grpcIServiceWorldGraph::initRequest* request, ::grpcIServiceWorldGraph::initResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIServiceWorldGraphService::Service::start(::grpc::ServerContext* context, const ::grpcIServiceWorldGraph::startRequest* request, ::grpcIServiceWorldGraph::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIServiceWorldGraphService::Service::stop(::grpc::ServerContext* context, const ::grpcIServiceWorldGraph::stopRequest* request, ::grpcIServiceWorldGraph::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIServiceWorldGraph

