// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMapProcessingPipelineService.proto

#include "grpcIMapProcessingPipelineService.pb.h"
#include "grpcIMapProcessingPipelineService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIMapProcessingPipeline {

static const char* grpcIMapProcessingPipelineService_method_names[] = {
  "/grpcIMapProcessingPipeline.grpcIMapProcessingPipelineService/init",
  "/grpcIMapProcessingPipeline.grpcIMapProcessingPipelineService/start",
  "/grpcIMapProcessingPipeline.grpcIMapProcessingPipelineService/stop",
  "/grpcIMapProcessingPipeline.grpcIMapProcessingPipelineService/setMapToProcess",
  "/grpcIMapProcessingPipeline.grpcIMapProcessingPipelineService/getStatus",
  "/grpcIMapProcessingPipeline.grpcIMapProcessingPipelineService/getProcessingData",
  "/grpcIMapProcessingPipeline.grpcIMapProcessingPipelineService/getProcessedMap",
};

std::unique_ptr< grpcIMapProcessingPipelineService::Stub> grpcIMapProcessingPipelineService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIMapProcessingPipelineService::Stub> stub(new grpcIMapProcessingPipelineService::Stub(channel, options));
  return stub;
}

grpcIMapProcessingPipelineService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_init_(grpcIMapProcessingPipelineService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_start_(grpcIMapProcessingPipelineService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIMapProcessingPipelineService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setMapToProcess_(grpcIMapProcessingPipelineService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getStatus_(grpcIMapProcessingPipelineService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getProcessingData_(grpcIMapProcessingPipelineService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getProcessedMap_(grpcIMapProcessingPipelineService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIMapProcessingPipelineService::Stub::init(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpcIMapProcessingPipeline::initResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapProcessingPipeline::initRequest, ::grpcIMapProcessingPipeline::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_, context, request, response);
}

void grpcIMapProcessingPipelineService::Stub::async::init(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest* request, ::grpcIMapProcessingPipeline::initResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapProcessingPipeline::initRequest, ::grpcIMapProcessingPipeline::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, std::move(f));
}

void grpcIMapProcessingPipelineService::Stub::async::init(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest* request, ::grpcIMapProcessingPipeline::initResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::initResponse>* grpcIMapProcessingPipelineService::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapProcessingPipeline::initResponse, ::grpcIMapProcessingPipeline::initRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::initResponse>* grpcIMapProcessingPipelineService::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::initRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapProcessingPipelineService::Stub::start(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpcIMapProcessingPipeline::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapProcessingPipeline::startRequest, ::grpcIMapProcessingPipeline::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIMapProcessingPipelineService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest* request, ::grpcIMapProcessingPipeline::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapProcessingPipeline::startRequest, ::grpcIMapProcessingPipeline::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIMapProcessingPipelineService::Stub::async::start(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest* request, ::grpcIMapProcessingPipeline::startResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::startResponse>* grpcIMapProcessingPipelineService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapProcessingPipeline::startResponse, ::grpcIMapProcessingPipeline::startRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::startResponse>* grpcIMapProcessingPipelineService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::startRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapProcessingPipelineService::Stub::stop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpcIMapProcessingPipeline::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapProcessingPipeline::stopRequest, ::grpcIMapProcessingPipeline::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIMapProcessingPipelineService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest* request, ::grpcIMapProcessingPipeline::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapProcessingPipeline::stopRequest, ::grpcIMapProcessingPipeline::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIMapProcessingPipelineService::Stub::async::stop(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest* request, ::grpcIMapProcessingPipeline::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::stopResponse>* grpcIMapProcessingPipelineService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapProcessingPipeline::stopResponse, ::grpcIMapProcessingPipeline::stopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::stopResponse>* grpcIMapProcessingPipelineService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::stopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapProcessingPipelineService::Stub::setMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapProcessingPipeline::setMapToProcessRequest, ::grpcIMapProcessingPipeline::setMapToProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setMapToProcess_, context, request, response);
}

void grpcIMapProcessingPipelineService::Stub::async::setMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapProcessingPipeline::setMapToProcessRequest, ::grpcIMapProcessingPipeline::setMapToProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMapToProcess_, context, request, response, std::move(f));
}

void grpcIMapProcessingPipelineService::Stub::async::setMapToProcess(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMapToProcess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::setMapToProcessResponse>* grpcIMapProcessingPipelineService::Stub::PrepareAsyncsetMapToProcessRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapProcessingPipeline::setMapToProcessResponse, ::grpcIMapProcessingPipeline::setMapToProcessRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setMapToProcess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::setMapToProcessResponse>* grpcIMapProcessingPipelineService::Stub::AsyncsetMapToProcessRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetMapToProcessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapProcessingPipelineService::Stub::getStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpcIMapProcessingPipeline::getStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapProcessingPipeline::getStatusRequest, ::grpcIMapProcessingPipeline::getStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getStatus_, context, request, response);
}

void grpcIMapProcessingPipelineService::Stub::async::getStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpcIMapProcessingPipeline::getStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapProcessingPipeline::getStatusRequest, ::grpcIMapProcessingPipeline::getStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, std::move(f));
}

void grpcIMapProcessingPipelineService::Stub::async::getStatus(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpcIMapProcessingPipeline::getStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getStatusResponse>* grpcIMapProcessingPipelineService::Stub::PrepareAsyncgetStatusRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapProcessingPipeline::getStatusResponse, ::grpcIMapProcessingPipeline::getStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getStatusResponse>* grpcIMapProcessingPipelineService::Stub::AsyncgetStatusRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapProcessingPipelineService::Stub::getProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapProcessingPipeline::getProcessingDataRequest, ::grpcIMapProcessingPipeline::getProcessingDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getProcessingData_, context, request, response);
}

void grpcIMapProcessingPipelineService::Stub::async::getProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapProcessingPipeline::getProcessingDataRequest, ::grpcIMapProcessingPipeline::getProcessingDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getProcessingData_, context, request, response, std::move(f));
}

void grpcIMapProcessingPipelineService::Stub::async::getProcessingData(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getProcessingData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessingDataResponse>* grpcIMapProcessingPipelineService::Stub::PrepareAsyncgetProcessingDataRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapProcessingPipeline::getProcessingDataResponse, ::grpcIMapProcessingPipeline::getProcessingDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getProcessingData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessingDataResponse>* grpcIMapProcessingPipelineService::Stub::AsyncgetProcessingDataRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetProcessingDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapProcessingPipelineService::Stub::getProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapProcessingPipeline::getProcessedMapRequest, ::grpcIMapProcessingPipeline::getProcessedMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getProcessedMap_, context, request, response);
}

void grpcIMapProcessingPipelineService::Stub::async::getProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapProcessingPipeline::getProcessedMapRequest, ::grpcIMapProcessingPipeline::getProcessedMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getProcessedMap_, context, request, response, std::move(f));
}

void grpcIMapProcessingPipelineService::Stub::async::getProcessedMap(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getProcessedMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessedMapResponse>* grpcIMapProcessingPipelineService::Stub::PrepareAsyncgetProcessedMapRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapProcessingPipeline::getProcessedMapResponse, ::grpcIMapProcessingPipeline::getProcessedMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getProcessedMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapProcessingPipeline::getProcessedMapResponse>* grpcIMapProcessingPipelineService::Stub::AsyncgetProcessedMapRaw(::grpc::ClientContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetProcessedMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIMapProcessingPipelineService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapProcessingPipelineService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapProcessingPipelineService::Service, ::grpcIMapProcessingPipeline::initRequest, ::grpcIMapProcessingPipeline::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapProcessingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapProcessingPipeline::initRequest* req,
             ::grpcIMapProcessingPipeline::initResponse* resp) {
               return service->init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapProcessingPipelineService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapProcessingPipelineService::Service, ::grpcIMapProcessingPipeline::startRequest, ::grpcIMapProcessingPipeline::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapProcessingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapProcessingPipeline::startRequest* req,
             ::grpcIMapProcessingPipeline::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapProcessingPipelineService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapProcessingPipelineService::Service, ::grpcIMapProcessingPipeline::stopRequest, ::grpcIMapProcessingPipeline::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapProcessingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapProcessingPipeline::stopRequest* req,
             ::grpcIMapProcessingPipeline::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapProcessingPipelineService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapProcessingPipelineService::Service, ::grpcIMapProcessingPipeline::setMapToProcessRequest, ::grpcIMapProcessingPipeline::setMapToProcessResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapProcessingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapProcessingPipeline::setMapToProcessRequest* req,
             ::grpcIMapProcessingPipeline::setMapToProcessResponse* resp) {
               return service->setMapToProcess(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapProcessingPipelineService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapProcessingPipelineService::Service, ::grpcIMapProcessingPipeline::getStatusRequest, ::grpcIMapProcessingPipeline::getStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapProcessingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapProcessingPipeline::getStatusRequest* req,
             ::grpcIMapProcessingPipeline::getStatusResponse* resp) {
               return service->getStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapProcessingPipelineService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapProcessingPipelineService::Service, ::grpcIMapProcessingPipeline::getProcessingDataRequest, ::grpcIMapProcessingPipeline::getProcessingDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapProcessingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapProcessingPipeline::getProcessingDataRequest* req,
             ::grpcIMapProcessingPipeline::getProcessingDataResponse* resp) {
               return service->getProcessingData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapProcessingPipelineService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapProcessingPipelineService::Service, ::grpcIMapProcessingPipeline::getProcessedMapRequest, ::grpcIMapProcessingPipeline::getProcessedMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapProcessingPipelineService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapProcessingPipeline::getProcessedMapRequest* req,
             ::grpcIMapProcessingPipeline::getProcessedMapResponse* resp) {
               return service->getProcessedMap(ctx, req, resp);
             }, this)));
}

grpcIMapProcessingPipelineService::Service::~Service() {
}

::grpc::Status grpcIMapProcessingPipelineService::Service::init(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::initRequest* request, ::grpcIMapProcessingPipeline::initResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapProcessingPipelineService::Service::start(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::startRequest* request, ::grpcIMapProcessingPipeline::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapProcessingPipelineService::Service::stop(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::stopRequest* request, ::grpcIMapProcessingPipeline::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapProcessingPipelineService::Service::setMapToProcess(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::setMapToProcessRequest* request, ::grpcIMapProcessingPipeline::setMapToProcessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapProcessingPipelineService::Service::getStatus(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::getStatusRequest* request, ::grpcIMapProcessingPipeline::getStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapProcessingPipelineService::Service::getProcessingData(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::getProcessingDataRequest* request, ::grpcIMapProcessingPipeline::getProcessingDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapProcessingPipelineService::Service::getProcessedMap(::grpc::ServerContext* context, const ::grpcIMapProcessingPipeline::getProcessedMapRequest* request, ::grpcIMapProcessingPipeline::getProcessedMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIMapProcessingPipeline

