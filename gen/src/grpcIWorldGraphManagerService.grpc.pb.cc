// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIWorldGraphManagerService.proto

#include "grpcIWorldGraphManagerService.pb.h"
#include "grpcIWorldGraphManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIWorldGraphManager {

static const char* grpcIWorldGraphManagerService_method_names[] = {
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getRelocalizationInformation",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getWorldElement",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getWorldElements",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getWorldElementByKeyValue",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getWorldElementByKey",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/addTrackable",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getTrackable",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/removeTrackable",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getTrackables",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/modifyTrackable",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/addWorldAnchor",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getWorldAnchor",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/removeWorldAnchor",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getWorldAnchors",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/modifyWorldAnchor",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/addWorldLink",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getWorldLink_grpc0",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getWorldLink_grpc1",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/removeWorldLink_grpc0",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/removeWorldLink_grpc1",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/getWorldLinks",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/modifyWorldLink",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/saveToFile",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/loadFromFile",
  "/grpcIWorldGraphManager.grpcIWorldGraphManagerService/deleteFile",
};

std::unique_ptr< grpcIWorldGraphManagerService::Stub> grpcIWorldGraphManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIWorldGraphManagerService::Stub> stub(new grpcIWorldGraphManagerService::Stub(channel, options));
  return stub;
}

grpcIWorldGraphManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getRelocalizationInformation_(grpcIWorldGraphManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldElement_(grpcIWorldGraphManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldElements_(grpcIWorldGraphManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldElementByKeyValue_(grpcIWorldGraphManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldElementByKey_(grpcIWorldGraphManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addTrackable_(grpcIWorldGraphManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTrackable_(grpcIWorldGraphManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeTrackable_(grpcIWorldGraphManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getTrackables_(grpcIWorldGraphManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modifyTrackable_(grpcIWorldGraphManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addWorldAnchor_(grpcIWorldGraphManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldAnchor_(grpcIWorldGraphManagerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeWorldAnchor_(grpcIWorldGraphManagerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldAnchors_(grpcIWorldGraphManagerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modifyWorldAnchor_(grpcIWorldGraphManagerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addWorldLink_(grpcIWorldGraphManagerService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldLink_grpc0_(grpcIWorldGraphManagerService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldLink_grpc1_(grpcIWorldGraphManagerService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeWorldLink_grpc0_(grpcIWorldGraphManagerService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeWorldLink_grpc1_(grpcIWorldGraphManagerService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getWorldLinks_(grpcIWorldGraphManagerService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modifyWorldLink_(grpcIWorldGraphManagerService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveToFile_(grpcIWorldGraphManagerService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadFromFile_(grpcIWorldGraphManagerService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteFile_(grpcIWorldGraphManagerService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIWorldGraphManagerService::Stub::getRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getRelocalizationInformationRequest, ::grpcIWorldGraphManager::getRelocalizationInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getRelocalizationInformation_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getRelocalizationInformationRequest, ::grpcIWorldGraphManager::getRelocalizationInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRelocalizationInformation_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getRelocalizationInformation(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getRelocalizationInformation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetRelocalizationInformationRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getRelocalizationInformationResponse, ::grpcIWorldGraphManager::getRelocalizationInformationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getRelocalizationInformation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getRelocalizationInformationResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetRelocalizationInformationRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetRelocalizationInformationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpcIWorldGraphManager::getWorldElementResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getWorldElementRequest, ::grpcIWorldGraphManager::getWorldElementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldElement_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpcIWorldGraphManager::getWorldElementResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getWorldElementRequest, ::grpcIWorldGraphManager::getWorldElementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldElement_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getWorldElement(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpcIWorldGraphManager::getWorldElementResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldElement_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetWorldElementRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getWorldElementResponse, ::grpcIWorldGraphManager::getWorldElementRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldElement_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetWorldElementRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldElementRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpcIWorldGraphManager::getWorldElementsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getWorldElementsRequest, ::grpcIWorldGraphManager::getWorldElementsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldElements_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpcIWorldGraphManager::getWorldElementsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getWorldElementsRequest, ::grpcIWorldGraphManager::getWorldElementsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldElements_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getWorldElements(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpcIWorldGraphManager::getWorldElementsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldElements_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementsResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetWorldElementsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getWorldElementsResponse, ::grpcIWorldGraphManager::getWorldElementsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldElements_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementsResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetWorldElementsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldElementsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldElementByKeyValue_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldElementByKeyValue_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getWorldElementByKeyValue(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldElementByKeyValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetWorldElementByKeyValueRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse, ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldElementByKeyValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetWorldElementByKeyValueRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldElementByKeyValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getWorldElementByKeyRequest, ::grpcIWorldGraphManager::getWorldElementByKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldElementByKey_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getWorldElementByKeyRequest, ::grpcIWorldGraphManager::getWorldElementByKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldElementByKey_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getWorldElementByKey(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldElementByKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetWorldElementByKeyRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getWorldElementByKeyResponse, ::grpcIWorldGraphManager::getWorldElementByKeyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldElementByKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldElementByKeyResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetWorldElementByKeyRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldElementByKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::addTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpcIWorldGraphManager::addTrackableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::addTrackableRequest, ::grpcIWorldGraphManager::addTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addTrackable_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::addTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpcIWorldGraphManager::addTrackableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::addTrackableRequest, ::grpcIWorldGraphManager::addTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addTrackable_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::addTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpcIWorldGraphManager::addTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addTrackable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addTrackableResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncaddTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::addTrackableResponse, ::grpcIWorldGraphManager::addTrackableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addTrackable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addTrackableResponse>* grpcIWorldGraphManagerService::Stub::AsyncaddTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddTrackableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpcIWorldGraphManager::getTrackableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getTrackableRequest, ::grpcIWorldGraphManager::getTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTrackable_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpcIWorldGraphManager::getTrackableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getTrackableRequest, ::grpcIWorldGraphManager::getTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTrackable_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpcIWorldGraphManager::getTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTrackable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackableResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getTrackableResponse, ::grpcIWorldGraphManager::getTrackableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTrackable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackableResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTrackableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::removeTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpcIWorldGraphManager::removeTrackableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::removeTrackableRequest, ::grpcIWorldGraphManager::removeTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeTrackable_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::removeTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpcIWorldGraphManager::removeTrackableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::removeTrackableRequest, ::grpcIWorldGraphManager::removeTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeTrackable_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::removeTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpcIWorldGraphManager::removeTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeTrackable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeTrackableResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncremoveTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::removeTrackableResponse, ::grpcIWorldGraphManager::removeTrackableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeTrackable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeTrackableResponse>* grpcIWorldGraphManagerService::Stub::AsyncremoveTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveTrackableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpcIWorldGraphManager::getTrackablesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getTrackablesRequest, ::grpcIWorldGraphManager::getTrackablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getTrackables_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpcIWorldGraphManager::getTrackablesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getTrackablesRequest, ::grpcIWorldGraphManager::getTrackablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTrackables_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getTrackables(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpcIWorldGraphManager::getTrackablesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getTrackables_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackablesResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetTrackablesRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getTrackablesResponse, ::grpcIWorldGraphManager::getTrackablesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getTrackables_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getTrackablesResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetTrackablesRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTrackablesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::modifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpcIWorldGraphManager::modifyTrackableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::modifyTrackableRequest, ::grpcIWorldGraphManager::modifyTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modifyTrackable_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::modifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpcIWorldGraphManager::modifyTrackableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::modifyTrackableRequest, ::grpcIWorldGraphManager::modifyTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyTrackable_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::modifyTrackable(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpcIWorldGraphManager::modifyTrackableResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyTrackable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyTrackableResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncmodifyTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::modifyTrackableResponse, ::grpcIWorldGraphManager::modifyTrackableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modifyTrackable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyTrackableResponse>* grpcIWorldGraphManagerService::Stub::AsyncmodifyTrackableRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodifyTrackableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::addWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::addWorldAnchorRequest, ::grpcIWorldGraphManager::addWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addWorldAnchor_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::addWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::addWorldAnchorRequest, ::grpcIWorldGraphManager::addWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addWorldAnchor_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::addWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addWorldAnchor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldAnchorResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncaddWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::addWorldAnchorResponse, ::grpcIWorldGraphManager::addWorldAnchorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addWorldAnchor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldAnchorResponse>* grpcIWorldGraphManagerService::Stub::AsyncaddWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddWorldAnchorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getWorldAnchorRequest, ::grpcIWorldGraphManager::getWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldAnchor_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getWorldAnchorRequest, ::grpcIWorldGraphManager::getWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldAnchor_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldAnchor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getWorldAnchorResponse, ::grpcIWorldGraphManager::getWorldAnchorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldAnchor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldAnchorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::removeWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::removeWorldAnchorRequest, ::grpcIWorldGraphManager::removeWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeWorldAnchor_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::removeWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::removeWorldAnchorRequest, ::grpcIWorldGraphManager::removeWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeWorldAnchor_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::removeWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeWorldAnchor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldAnchorResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncremoveWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::removeWorldAnchorResponse, ::grpcIWorldGraphManager::removeWorldAnchorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeWorldAnchor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldAnchorResponse>* grpcIWorldGraphManagerService::Stub::AsyncremoveWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveWorldAnchorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getWorldAnchorsRequest, ::grpcIWorldGraphManager::getWorldAnchorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldAnchors_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getWorldAnchorsRequest, ::grpcIWorldGraphManager::getWorldAnchorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldAnchors_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getWorldAnchors(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldAnchors_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorsResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetWorldAnchorsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getWorldAnchorsResponse, ::grpcIWorldGraphManager::getWorldAnchorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldAnchors_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldAnchorsResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetWorldAnchorsRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldAnchorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::modifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::modifyWorldAnchorRequest, ::grpcIWorldGraphManager::modifyWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modifyWorldAnchor_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::modifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::modifyWorldAnchorRequest, ::grpcIWorldGraphManager::modifyWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyWorldAnchor_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::modifyWorldAnchor(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyWorldAnchor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncmodifyWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::modifyWorldAnchorResponse, ::grpcIWorldGraphManager::modifyWorldAnchorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modifyWorldAnchor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldAnchorResponse>* grpcIWorldGraphManagerService::Stub::AsyncmodifyWorldAnchorRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodifyWorldAnchorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::addWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpcIWorldGraphManager::addWorldLinkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::addWorldLinkRequest, ::grpcIWorldGraphManager::addWorldLinkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addWorldLink_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::addWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpcIWorldGraphManager::addWorldLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::addWorldLinkRequest, ::grpcIWorldGraphManager::addWorldLinkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addWorldLink_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::addWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpcIWorldGraphManager::addWorldLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addWorldLink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldLinkResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncaddWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::addWorldLinkResponse, ::grpcIWorldGraphManager::addWorldLinkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addWorldLink_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::addWorldLinkResponse>* grpcIWorldGraphManagerService::Stub::AsyncaddWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddWorldLinkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getWorldLink_grpc0Request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldLink_grpc0_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getWorldLink_grpc0Request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldLink_grpc0_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldLink_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getWorldLink_grpc0Response, ::grpcIWorldGraphManager::getWorldLink_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldLink_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc0Response>* grpcIWorldGraphManagerService::Stub::AsyncgetWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldLink_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getWorldLink_grpc1Request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldLink_grpc1_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getWorldLink_grpc1Request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldLink_grpc1_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldLink_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getWorldLink_grpc1Response, ::grpcIWorldGraphManager::getWorldLink_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldLink_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLink_grpc1Response>* grpcIWorldGraphManagerService::Stub::AsyncgetWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldLink_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::removeWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::removeWorldLink_grpc0Request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeWorldLink_grpc0_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::removeWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::removeWorldLink_grpc0Request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeWorldLink_grpc0_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::removeWorldLink_grpc0(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeWorldLink_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* grpcIWorldGraphManagerService::Stub::PrepareAsyncremoveWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response, ::grpcIWorldGraphManager::removeWorldLink_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeWorldLink_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc0Response>* grpcIWorldGraphManagerService::Stub::AsyncremoveWorldLink_grpc0Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveWorldLink_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::removeWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::removeWorldLink_grpc1Request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeWorldLink_grpc1_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::removeWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::removeWorldLink_grpc1Request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeWorldLink_grpc1_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::removeWorldLink_grpc1(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeWorldLink_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* grpcIWorldGraphManagerService::Stub::PrepareAsyncremoveWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response, ::grpcIWorldGraphManager::removeWorldLink_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeWorldLink_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::removeWorldLink_grpc1Response>* grpcIWorldGraphManagerService::Stub::AsyncremoveWorldLink_grpc1Raw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveWorldLink_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::getWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpcIWorldGraphManager::getWorldLinksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::getWorldLinksRequest, ::grpcIWorldGraphManager::getWorldLinksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getWorldLinks_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::getWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpcIWorldGraphManager::getWorldLinksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::getWorldLinksRequest, ::grpcIWorldGraphManager::getWorldLinksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldLinks_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::getWorldLinks(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpcIWorldGraphManager::getWorldLinksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getWorldLinks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLinksResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncgetWorldLinksRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::getWorldLinksResponse, ::grpcIWorldGraphManager::getWorldLinksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getWorldLinks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::getWorldLinksResponse>* grpcIWorldGraphManagerService::Stub::AsyncgetWorldLinksRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetWorldLinksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::modifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::modifyWorldLinkRequest, ::grpcIWorldGraphManager::modifyWorldLinkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modifyWorldLink_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::modifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::modifyWorldLinkRequest, ::grpcIWorldGraphManager::modifyWorldLinkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyWorldLink_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::modifyWorldLink(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modifyWorldLink_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldLinkResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncmodifyWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::modifyWorldLinkResponse, ::grpcIWorldGraphManager::modifyWorldLinkRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modifyWorldLink_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::modifyWorldLinkResponse>* grpcIWorldGraphManagerService::Stub::AsyncmodifyWorldLinkRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodifyWorldLinkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::saveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpcIWorldGraphManager::saveToFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::saveToFileRequest, ::grpcIWorldGraphManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveToFile_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::saveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpcIWorldGraphManager::saveToFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::saveToFileRequest, ::grpcIWorldGraphManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::saveToFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpcIWorldGraphManager::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::saveToFileResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::saveToFileResponse, ::grpcIWorldGraphManager::saveToFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveToFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::saveToFileResponse>* grpcIWorldGraphManagerService::Stub::AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveToFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::loadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpcIWorldGraphManager::loadFromFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::loadFromFileRequest, ::grpcIWorldGraphManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadFromFile_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::loadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpcIWorldGraphManager::loadFromFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::loadFromFileRequest, ::grpcIWorldGraphManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::loadFromFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpcIWorldGraphManager::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::loadFromFileResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::loadFromFileResponse, ::grpcIWorldGraphManager::loadFromFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadFromFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::loadFromFileResponse>* grpcIWorldGraphManagerService::Stub::AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadFromFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIWorldGraphManagerService::Stub::deleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpcIWorldGraphManager::deleteFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIWorldGraphManager::deleteFileRequest, ::grpcIWorldGraphManager::deleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deleteFile_, context, request, response);
}

void grpcIWorldGraphManagerService::Stub::async::deleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpcIWorldGraphManager::deleteFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIWorldGraphManager::deleteFileRequest, ::grpcIWorldGraphManager::deleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteFile_, context, request, response, std::move(f));
}

void grpcIWorldGraphManagerService::Stub::async::deleteFile(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpcIWorldGraphManager::deleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::deleteFileResponse>* grpcIWorldGraphManagerService::Stub::PrepareAsyncdeleteFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIWorldGraphManager::deleteFileResponse, ::grpcIWorldGraphManager::deleteFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deleteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIWorldGraphManager::deleteFileResponse>* grpcIWorldGraphManagerService::Stub::AsyncdeleteFileRaw(::grpc::ClientContext* context, const ::grpcIWorldGraphManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeleteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIWorldGraphManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getRelocalizationInformationRequest, ::grpcIWorldGraphManager::getRelocalizationInformationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* req,
             ::grpcIWorldGraphManager::getRelocalizationInformationResponse* resp) {
               return service->getRelocalizationInformation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getWorldElementRequest, ::grpcIWorldGraphManager::getWorldElementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getWorldElementRequest* req,
             ::grpcIWorldGraphManager::getWorldElementResponse* resp) {
               return service->getWorldElement(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getWorldElementsRequest, ::grpcIWorldGraphManager::getWorldElementsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getWorldElementsRequest* req,
             ::grpcIWorldGraphManager::getWorldElementsResponse* resp) {
               return service->getWorldElements(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* req,
             ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* resp) {
               return service->getWorldElementByKeyValue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getWorldElementByKeyRequest, ::grpcIWorldGraphManager::getWorldElementByKeyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* req,
             ::grpcIWorldGraphManager::getWorldElementByKeyResponse* resp) {
               return service->getWorldElementByKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::addTrackableRequest, ::grpcIWorldGraphManager::addTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::addTrackableRequest* req,
             ::grpcIWorldGraphManager::addTrackableResponse* resp) {
               return service->addTrackable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getTrackableRequest, ::grpcIWorldGraphManager::getTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getTrackableRequest* req,
             ::grpcIWorldGraphManager::getTrackableResponse* resp) {
               return service->getTrackable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::removeTrackableRequest, ::grpcIWorldGraphManager::removeTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::removeTrackableRequest* req,
             ::grpcIWorldGraphManager::removeTrackableResponse* resp) {
               return service->removeTrackable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getTrackablesRequest, ::grpcIWorldGraphManager::getTrackablesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getTrackablesRequest* req,
             ::grpcIWorldGraphManager::getTrackablesResponse* resp) {
               return service->getTrackables(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::modifyTrackableRequest, ::grpcIWorldGraphManager::modifyTrackableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::modifyTrackableRequest* req,
             ::grpcIWorldGraphManager::modifyTrackableResponse* resp) {
               return service->modifyTrackable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::addWorldAnchorRequest, ::grpcIWorldGraphManager::addWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::addWorldAnchorRequest* req,
             ::grpcIWorldGraphManager::addWorldAnchorResponse* resp) {
               return service->addWorldAnchor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getWorldAnchorRequest, ::grpcIWorldGraphManager::getWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getWorldAnchorRequest* req,
             ::grpcIWorldGraphManager::getWorldAnchorResponse* resp) {
               return service->getWorldAnchor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::removeWorldAnchorRequest, ::grpcIWorldGraphManager::removeWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::removeWorldAnchorRequest* req,
             ::grpcIWorldGraphManager::removeWorldAnchorResponse* resp) {
               return service->removeWorldAnchor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getWorldAnchorsRequest, ::grpcIWorldGraphManager::getWorldAnchorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getWorldAnchorsRequest* req,
             ::grpcIWorldGraphManager::getWorldAnchorsResponse* resp) {
               return service->getWorldAnchors(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::modifyWorldAnchorRequest, ::grpcIWorldGraphManager::modifyWorldAnchorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* req,
             ::grpcIWorldGraphManager::modifyWorldAnchorResponse* resp) {
               return service->modifyWorldAnchor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::addWorldLinkRequest, ::grpcIWorldGraphManager::addWorldLinkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::addWorldLinkRequest* req,
             ::grpcIWorldGraphManager::addWorldLinkResponse* resp) {
               return service->addWorldLink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getWorldLink_grpc0Request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* req,
             ::grpcIWorldGraphManager::getWorldLink_grpc0Response* resp) {
               return service->getWorldLink_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getWorldLink_grpc1Request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* req,
             ::grpcIWorldGraphManager::getWorldLink_grpc1Response* resp) {
               return service->getWorldLink_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::removeWorldLink_grpc0Request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* req,
             ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* resp) {
               return service->removeWorldLink_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::removeWorldLink_grpc1Request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* req,
             ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* resp) {
               return service->removeWorldLink_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::getWorldLinksRequest, ::grpcIWorldGraphManager::getWorldLinksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::getWorldLinksRequest* req,
             ::grpcIWorldGraphManager::getWorldLinksResponse* resp) {
               return service->getWorldLinks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::modifyWorldLinkRequest, ::grpcIWorldGraphManager::modifyWorldLinkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::modifyWorldLinkRequest* req,
             ::grpcIWorldGraphManager::modifyWorldLinkResponse* resp) {
               return service->modifyWorldLink(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::saveToFileRequest, ::grpcIWorldGraphManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::saveToFileRequest* req,
             ::grpcIWorldGraphManager::saveToFileResponse* resp) {
               return service->saveToFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::loadFromFileRequest, ::grpcIWorldGraphManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::loadFromFileRequest* req,
             ::grpcIWorldGraphManager::loadFromFileResponse* resp) {
               return service->loadFromFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIWorldGraphManagerService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIWorldGraphManagerService::Service, ::grpcIWorldGraphManager::deleteFileRequest, ::grpcIWorldGraphManager::deleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIWorldGraphManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIWorldGraphManager::deleteFileRequest* req,
             ::grpcIWorldGraphManager::deleteFileResponse* resp) {
               return service->deleteFile(ctx, req, resp);
             }, this)));
}

grpcIWorldGraphManagerService::Service::~Service() {
}

::grpc::Status grpcIWorldGraphManagerService::Service::getRelocalizationInformation(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getRelocalizationInformationRequest* request, ::grpcIWorldGraphManager::getRelocalizationInformationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getWorldElement(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldElementRequest* request, ::grpcIWorldGraphManager::getWorldElementResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getWorldElements(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldElementsRequest* request, ::grpcIWorldGraphManager::getWorldElementsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getWorldElementByKeyValue(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyValueRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getWorldElementByKey(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldElementByKeyRequest* request, ::grpcIWorldGraphManager::getWorldElementByKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::addTrackable(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::addTrackableRequest* request, ::grpcIWorldGraphManager::addTrackableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getTrackable(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getTrackableRequest* request, ::grpcIWorldGraphManager::getTrackableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::removeTrackable(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::removeTrackableRequest* request, ::grpcIWorldGraphManager::removeTrackableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getTrackables(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getTrackablesRequest* request, ::grpcIWorldGraphManager::getTrackablesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::modifyTrackable(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::modifyTrackableRequest* request, ::grpcIWorldGraphManager::modifyTrackableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::addWorldAnchor(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::addWorldAnchorRequest* request, ::grpcIWorldGraphManager::addWorldAnchorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getWorldAnchor(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldAnchorRequest* request, ::grpcIWorldGraphManager::getWorldAnchorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::removeWorldAnchor(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::removeWorldAnchorRequest* request, ::grpcIWorldGraphManager::removeWorldAnchorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getWorldAnchors(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldAnchorsRequest* request, ::grpcIWorldGraphManager::getWorldAnchorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::modifyWorldAnchor(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::modifyWorldAnchorRequest* request, ::grpcIWorldGraphManager::modifyWorldAnchorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::addWorldLink(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::addWorldLinkRequest* request, ::grpcIWorldGraphManager::addWorldLinkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getWorldLink_grpc0(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getWorldLink_grpc1(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::getWorldLink_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::removeWorldLink_grpc0(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc0Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::removeWorldLink_grpc1(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::removeWorldLink_grpc1Request* request, ::grpcIWorldGraphManager::removeWorldLink_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::getWorldLinks(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::getWorldLinksRequest* request, ::grpcIWorldGraphManager::getWorldLinksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::modifyWorldLink(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::modifyWorldLinkRequest* request, ::grpcIWorldGraphManager::modifyWorldLinkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::saveToFile(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::saveToFileRequest* request, ::grpcIWorldGraphManager::saveToFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::loadFromFile(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::loadFromFileRequest* request, ::grpcIWorldGraphManager::loadFromFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIWorldGraphManagerService::Service::deleteFile(::grpc::ServerContext* context, const ::grpcIWorldGraphManager::deleteFileRequest* request, ::grpcIWorldGraphManager::deleteFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIWorldGraphManager

