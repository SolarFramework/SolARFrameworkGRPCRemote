// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIServiceManagerService.proto

#include "grpcIServiceManagerService.pb.h"
#include "grpcIServiceManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace grpcIServiceManager {

static const char* grpcIServiceManagerService_method_names[] = {
  "/grpcIServiceManager.grpcIServiceManagerService/registerService",
  "/grpcIServiceManager.grpcIServiceManagerService/unregisterService",
  "/grpcIServiceManager.grpcIServiceManagerService/getService",
  "/grpcIServiceManager.grpcIServiceManagerService/getAndLockService",
  "/grpcIServiceManager.grpcIServiceManagerService/unlockService",
};

std::unique_ptr< grpcIServiceManagerService::Stub> grpcIServiceManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIServiceManagerService::Stub> stub(new grpcIServiceManagerService::Stub(channel, options));
  return stub;
}

grpcIServiceManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_registerService_(grpcIServiceManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unregisterService_(grpcIServiceManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getService_(grpcIServiceManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAndLockService_(grpcIServiceManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unlockService_(grpcIServiceManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIServiceManagerService::Stub::registerService(::grpc::ClientContext* context, const ::grpcIServiceManager::registerServiceRequest& request, ::grpcIServiceManager::registerServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceManager::registerServiceRequest, ::grpcIServiceManager::registerServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerService_, context, request, response);
}

void grpcIServiceManagerService::Stub::async::registerService(::grpc::ClientContext* context, const ::grpcIServiceManager::registerServiceRequest* request, ::grpcIServiceManager::registerServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceManager::registerServiceRequest, ::grpcIServiceManager::registerServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerService_, context, request, response, std::move(f));
}

void grpcIServiceManagerService::Stub::async::registerService(::grpc::ClientContext* context, const ::grpcIServiceManager::registerServiceRequest* request, ::grpcIServiceManager::registerServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::registerServiceResponse>* grpcIServiceManagerService::Stub::PrepareAsyncregisterServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::registerServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceManager::registerServiceResponse, ::grpcIServiceManager::registerServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::registerServiceResponse>* grpcIServiceManagerService::Stub::AsyncregisterServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::registerServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIServiceManagerService::Stub::unregisterService(::grpc::ClientContext* context, const ::grpcIServiceManager::unregisterServiceRequest& request, ::grpcIServiceManager::unregisterServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceManager::unregisterServiceRequest, ::grpcIServiceManager::unregisterServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregisterService_, context, request, response);
}

void grpcIServiceManagerService::Stub::async::unregisterService(::grpc::ClientContext* context, const ::grpcIServiceManager::unregisterServiceRequest* request, ::grpcIServiceManager::unregisterServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceManager::unregisterServiceRequest, ::grpcIServiceManager::unregisterServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterService_, context, request, response, std::move(f));
}

void grpcIServiceManagerService::Stub::async::unregisterService(::grpc::ClientContext* context, const ::grpcIServiceManager::unregisterServiceRequest* request, ::grpcIServiceManager::unregisterServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::unregisterServiceResponse>* grpcIServiceManagerService::Stub::PrepareAsyncunregisterServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::unregisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceManager::unregisterServiceResponse, ::grpcIServiceManager::unregisterServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregisterService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::unregisterServiceResponse>* grpcIServiceManagerService::Stub::AsyncunregisterServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::unregisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregisterServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIServiceManagerService::Stub::getService(::grpc::ClientContext* context, const ::grpcIServiceManager::getServiceRequest& request, ::grpcIServiceManager::getServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceManager::getServiceRequest, ::grpcIServiceManager::getServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getService_, context, request, response);
}

void grpcIServiceManagerService::Stub::async::getService(::grpc::ClientContext* context, const ::grpcIServiceManager::getServiceRequest* request, ::grpcIServiceManager::getServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceManager::getServiceRequest, ::grpcIServiceManager::getServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getService_, context, request, response, std::move(f));
}

void grpcIServiceManagerService::Stub::async::getService(::grpc::ClientContext* context, const ::grpcIServiceManager::getServiceRequest* request, ::grpcIServiceManager::getServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::getServiceResponse>* grpcIServiceManagerService::Stub::PrepareAsyncgetServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::getServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceManager::getServiceResponse, ::grpcIServiceManager::getServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::getServiceResponse>* grpcIServiceManagerService::Stub::AsyncgetServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::getServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIServiceManagerService::Stub::getAndLockService(::grpc::ClientContext* context, const ::grpcIServiceManager::getAndLockServiceRequest& request, ::grpcIServiceManager::getAndLockServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceManager::getAndLockServiceRequest, ::grpcIServiceManager::getAndLockServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAndLockService_, context, request, response);
}

void grpcIServiceManagerService::Stub::async::getAndLockService(::grpc::ClientContext* context, const ::grpcIServiceManager::getAndLockServiceRequest* request, ::grpcIServiceManager::getAndLockServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceManager::getAndLockServiceRequest, ::grpcIServiceManager::getAndLockServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAndLockService_, context, request, response, std::move(f));
}

void grpcIServiceManagerService::Stub::async::getAndLockService(::grpc::ClientContext* context, const ::grpcIServiceManager::getAndLockServiceRequest* request, ::grpcIServiceManager::getAndLockServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAndLockService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::getAndLockServiceResponse>* grpcIServiceManagerService::Stub::PrepareAsyncgetAndLockServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::getAndLockServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceManager::getAndLockServiceResponse, ::grpcIServiceManager::getAndLockServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAndLockService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::getAndLockServiceResponse>* grpcIServiceManagerService::Stub::AsyncgetAndLockServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::getAndLockServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAndLockServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIServiceManagerService::Stub::unlockService(::grpc::ClientContext* context, const ::grpcIServiceManager::unlockServiceRequest& request, ::grpcIServiceManager::unlockServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIServiceManager::unlockServiceRequest, ::grpcIServiceManager::unlockServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unlockService_, context, request, response);
}

void grpcIServiceManagerService::Stub::async::unlockService(::grpc::ClientContext* context, const ::grpcIServiceManager::unlockServiceRequest* request, ::grpcIServiceManager::unlockServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIServiceManager::unlockServiceRequest, ::grpcIServiceManager::unlockServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unlockService_, context, request, response, std::move(f));
}

void grpcIServiceManagerService::Stub::async::unlockService(::grpc::ClientContext* context, const ::grpcIServiceManager::unlockServiceRequest* request, ::grpcIServiceManager::unlockServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unlockService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::unlockServiceResponse>* grpcIServiceManagerService::Stub::PrepareAsyncunlockServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::unlockServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIServiceManager::unlockServiceResponse, ::grpcIServiceManager::unlockServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unlockService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIServiceManager::unlockServiceResponse>* grpcIServiceManagerService::Stub::AsyncunlockServiceRaw(::grpc::ClientContext* context, const ::grpcIServiceManager::unlockServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunlockServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIServiceManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceManagerService::Service, ::grpcIServiceManager::registerServiceRequest, ::grpcIServiceManager::registerServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceManager::registerServiceRequest* req,
             ::grpcIServiceManager::registerServiceResponse* resp) {
               return service->registerService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceManagerService::Service, ::grpcIServiceManager::unregisterServiceRequest, ::grpcIServiceManager::unregisterServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceManager::unregisterServiceRequest* req,
             ::grpcIServiceManager::unregisterServiceResponse* resp) {
               return service->unregisterService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceManagerService::Service, ::grpcIServiceManager::getServiceRequest, ::grpcIServiceManager::getServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceManager::getServiceRequest* req,
             ::grpcIServiceManager::getServiceResponse* resp) {
               return service->getService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceManagerService::Service, ::grpcIServiceManager::getAndLockServiceRequest, ::grpcIServiceManager::getAndLockServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceManager::getAndLockServiceRequest* req,
             ::grpcIServiceManager::getAndLockServiceResponse* resp) {
               return service->getAndLockService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIServiceManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIServiceManagerService::Service, ::grpcIServiceManager::unlockServiceRequest, ::grpcIServiceManager::unlockServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIServiceManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIServiceManager::unlockServiceRequest* req,
             ::grpcIServiceManager::unlockServiceResponse* resp) {
               return service->unlockService(ctx, req, resp);
             }, this)));
}

grpcIServiceManagerService::Service::~Service() {
}

::grpc::Status grpcIServiceManagerService::Service::registerService(::grpc::ServerContext* context, const ::grpcIServiceManager::registerServiceRequest* request, ::grpcIServiceManager::registerServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIServiceManagerService::Service::unregisterService(::grpc::ServerContext* context, const ::grpcIServiceManager::unregisterServiceRequest* request, ::grpcIServiceManager::unregisterServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIServiceManagerService::Service::getService(::grpc::ServerContext* context, const ::grpcIServiceManager::getServiceRequest* request, ::grpcIServiceManager::getServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIServiceManagerService::Service::getAndLockService(::grpc::ServerContext* context, const ::grpcIServiceManager::getAndLockServiceRequest* request, ::grpcIServiceManager::getAndLockServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIServiceManagerService::Service::unlockService(::grpc::ServerContext* context, const ::grpcIServiceManager::unlockServiceRequest* request, ::grpcIServiceManager::unlockServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIServiceManager

