// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIARDeviceService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIARDeviceService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIARDeviceService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIARDeviceService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIARDeviceService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIARDeviceService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIARDeviceService_2eproto_metadata_getter(int index);
namespace grpcIARDevice {
class getCameraParametersResponse;
struct getCameraParametersResponseDefaultTypeInternal;
extern getCameraParametersResponseDefaultTypeInternal _getCameraParametersResponse_default_instance_;
class getDataRequest;
struct getDataRequestDefaultTypeInternal;
extern getDataRequestDefaultTypeInternal _getDataRequest_default_instance_;
class getDataResponse;
struct getDataResponseDefaultTypeInternal;
extern getDataResponseDefaultTypeInternal _getDataResponse_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
}  // namespace grpcIARDevice
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIARDevice::getCameraParametersResponse* Arena::CreateMaybeMessage<::grpcIARDevice::getCameraParametersResponse>(Arena*);
template<> ::grpcIARDevice::getDataRequest* Arena::CreateMaybeMessage<::grpcIARDevice::getDataRequest>(Arena*);
template<> ::grpcIARDevice::getDataResponse* Arena::CreateMaybeMessage<::grpcIARDevice::getDataResponse>(Arena*);
template<> ::grpcIARDevice::startResponse* Arena::CreateMaybeMessage<::grpcIARDevice::startResponse>(Arena*);
template<> ::grpcIARDevice::stopResponse* Arena::CreateMaybeMessage<::grpcIARDevice::stopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIARDevice {

// ===================================================================

class startResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIARDevice.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  virtual ~startResponse();
  explicit constexpr startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline startResponse* New() const final {
    return CreateMaybeMessage<startResponse>(nullptr);
  }

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const startResponse& from);
  void MergeFrom(const startResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIARDevice.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIARDeviceService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIARDevice.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIARDeviceService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIARDevice.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  virtual ~stopResponse();
  explicit constexpr stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stopResponse* New() const final {
    return CreateMaybeMessage<stopResponse>(nullptr);
  }

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stopResponse& from);
  void MergeFrom(const stopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIARDevice.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIARDeviceService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIARDevice.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIARDeviceService_2eproto;
};
// -------------------------------------------------------------------

class getDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIARDevice.getDataRequest) */ {
 public:
  inline getDataRequest() : getDataRequest(nullptr) {}
  virtual ~getDataRequest();
  explicit constexpr getDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDataRequest(const getDataRequest& from);
  getDataRequest(getDataRequest&& from) noexcept
    : getDataRequest() {
    *this = ::std::move(from);
  }

  inline getDataRequest& operator=(const getDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDataRequest& operator=(getDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDataRequest* internal_default_instance() {
    return reinterpret_cast<const getDataRequest*>(
               &_getDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(getDataRequest& a, getDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDataRequest* New() const final {
    return CreateMaybeMessage<getDataRequest>(nullptr);
  }

  getDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getDataRequest& from);
  void MergeFrom(const getDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIARDevice.getDataRequest";
  }
  protected:
  explicit getDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIARDeviceService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
    kPosesFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // bytes images = 1;
  void clear_images();
  const std::string& images() const;
  void set_images(const std::string& value);
  void set_images(std::string&& value);
  void set_images(const char* value);
  void set_images(const void* value, size_t size);
  std::string* mutable_images();
  std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 2;
  void clear_poses();
  const std::string& poses() const;
  void set_poses(const std::string& value);
  void set_poses(std::string&& value);
  void set_poses(const char* value);
  void set_poses(const void* value, size_t size);
  std::string* mutable_poses();
  std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const void* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // @@protoc_insertion_point(class_scope:grpcIARDevice.getDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIARDeviceService_2eproto;
};
// -------------------------------------------------------------------

class getDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIARDevice.getDataResponse) */ {
 public:
  inline getDataResponse() : getDataResponse(nullptr) {}
  virtual ~getDataResponse();
  explicit constexpr getDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDataResponse(const getDataResponse& from);
  getDataResponse(getDataResponse&& from) noexcept
    : getDataResponse() {
    *this = ::std::move(from);
  }

  inline getDataResponse& operator=(const getDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDataResponse& operator=(getDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDataResponse* internal_default_instance() {
    return reinterpret_cast<const getDataResponse*>(
               &_getDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(getDataResponse& a, getDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDataResponse* New() const final {
    return CreateMaybeMessage<getDataResponse>(nullptr);
  }

  getDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getDataResponse& from);
  void MergeFrom(const getDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIARDevice.getDataResponse";
  }
  protected:
  explicit getDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIARDeviceService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
    kPosesFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes images = 1;
  void clear_images();
  const std::string& images() const;
  void set_images(const std::string& value);
  void set_images(std::string&& value);
  void set_images(const char* value);
  void set_images(const void* value, size_t size);
  std::string* mutable_images();
  std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes poses = 2;
  void clear_poses();
  const std::string& poses() const;
  void set_poses(const std::string& value);
  void set_poses(std::string&& value);
  void set_poses(const char* value);
  void set_poses(const void* value, size_t size);
  std::string* mutable_poses();
  std::string* release_poses();
  void set_allocated_poses(std::string* poses);
  private:
  const std::string& _internal_poses() const;
  void _internal_set_poses(const std::string& value);
  std::string* _internal_mutable_poses();
  public:

  // bytes timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const void* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIARDevice.getDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr poses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIARDeviceService_2eproto;
};
// -------------------------------------------------------------------

class getCameraParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIARDevice.getCameraParametersResponse) */ {
 public:
  inline getCameraParametersResponse() : getCameraParametersResponse(nullptr) {}
  virtual ~getCameraParametersResponse();
  explicit constexpr getCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getCameraParametersResponse(const getCameraParametersResponse& from);
  getCameraParametersResponse(getCameraParametersResponse&& from) noexcept
    : getCameraParametersResponse() {
    *this = ::std::move(from);
  }

  inline getCameraParametersResponse& operator=(const getCameraParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getCameraParametersResponse& operator=(getCameraParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getCameraParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getCameraParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getCameraParametersResponse*>(
               &_getCameraParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(getCameraParametersResponse& a, getCameraParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getCameraParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getCameraParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getCameraParametersResponse* New() const final {
    return CreateMaybeMessage<getCameraParametersResponse>(nullptr);
  }

  getCameraParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getCameraParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getCameraParametersResponse& from);
  void MergeFrom(const getCameraParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getCameraParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIARDevice.getCameraParametersResponse";
  }
  protected:
  explicit getCameraParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIARDeviceService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(const std::string& value);
  void set_xpcfgrpcreturnvalue(std::string&& value);
  void set_xpcfgrpcreturnvalue(const char* value);
  void set_xpcfgrpcreturnvalue(const void* value, size_t size);
  std::string* mutable_xpcfgrpcreturnvalue();
  std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIARDevice.getCameraParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIARDeviceService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDataRequest

// bytes images = 1;
inline void getDataRequest::clear_images() {
  images_.ClearToEmpty();
}
inline const std::string& getDataRequest::images() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.getDataRequest.images)
  return _internal_images();
}
inline void getDataRequest::set_images(const std::string& value) {
  _internal_set_images(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.getDataRequest.images)
}
inline std::string* getDataRequest::mutable_images() {
  // @@protoc_insertion_point(field_mutable:grpcIARDevice.getDataRequest.images)
  return _internal_mutable_images();
}
inline const std::string& getDataRequest::_internal_images() const {
  return images_.Get();
}
inline void getDataRequest::_internal_set_images(const std::string& value) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataRequest::set_images(std::string&& value) {
  
  images_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIARDevice.getDataRequest.images)
}
inline void getDataRequest::set_images(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIARDevice.getDataRequest.images)
}
inline void getDataRequest::set_images(const void* value,
    size_t size) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIARDevice.getDataRequest.images)
}
inline std::string* getDataRequest::_internal_mutable_images() {
  
  return images_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataRequest::release_images() {
  // @@protoc_insertion_point(field_release:grpcIARDevice.getDataRequest.images)
  return images_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataRequest::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  images_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), images,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIARDevice.getDataRequest.images)
}

// bytes poses = 2;
inline void getDataRequest::clear_poses() {
  poses_.ClearToEmpty();
}
inline const std::string& getDataRequest::poses() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.getDataRequest.poses)
  return _internal_poses();
}
inline void getDataRequest::set_poses(const std::string& value) {
  _internal_set_poses(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.getDataRequest.poses)
}
inline std::string* getDataRequest::mutable_poses() {
  // @@protoc_insertion_point(field_mutable:grpcIARDevice.getDataRequest.poses)
  return _internal_mutable_poses();
}
inline const std::string& getDataRequest::_internal_poses() const {
  return poses_.Get();
}
inline void getDataRequest::_internal_set_poses(const std::string& value) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataRequest::set_poses(std::string&& value) {
  
  poses_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIARDevice.getDataRequest.poses)
}
inline void getDataRequest::set_poses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIARDevice.getDataRequest.poses)
}
inline void getDataRequest::set_poses(const void* value,
    size_t size) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIARDevice.getDataRequest.poses)
}
inline std::string* getDataRequest::_internal_mutable_poses() {
  
  return poses_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataRequest::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIARDevice.getDataRequest.poses)
  return poses_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataRequest::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  poses_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poses,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIARDevice.getDataRequest.poses)
}

// bytes timestamp = 3;
inline void getDataRequest::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& getDataRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.getDataRequest.timestamp)
  return _internal_timestamp();
}
inline void getDataRequest::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.getDataRequest.timestamp)
}
inline std::string* getDataRequest::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:grpcIARDevice.getDataRequest.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& getDataRequest::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void getDataRequest::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataRequest::set_timestamp(std::string&& value) {
  
  timestamp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIARDevice.getDataRequest.timestamp)
}
inline void getDataRequest::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIARDevice.getDataRequest.timestamp)
}
inline void getDataRequest::set_timestamp(const void* value,
    size_t size) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIARDevice.getDataRequest.timestamp)
}
inline std::string* getDataRequest::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataRequest::release_timestamp() {
  // @@protoc_insertion_point(field_release:grpcIARDevice.getDataRequest.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataRequest::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIARDevice.getDataRequest.timestamp)
}

// -------------------------------------------------------------------

// getDataResponse

// bytes images = 1;
inline void getDataResponse::clear_images() {
  images_.ClearToEmpty();
}
inline const std::string& getDataResponse::images() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.getDataResponse.images)
  return _internal_images();
}
inline void getDataResponse::set_images(const std::string& value) {
  _internal_set_images(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.getDataResponse.images)
}
inline std::string* getDataResponse::mutable_images() {
  // @@protoc_insertion_point(field_mutable:grpcIARDevice.getDataResponse.images)
  return _internal_mutable_images();
}
inline const std::string& getDataResponse::_internal_images() const {
  return images_.Get();
}
inline void getDataResponse::_internal_set_images(const std::string& value) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataResponse::set_images(std::string&& value) {
  
  images_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIARDevice.getDataResponse.images)
}
inline void getDataResponse::set_images(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIARDevice.getDataResponse.images)
}
inline void getDataResponse::set_images(const void* value,
    size_t size) {
  
  images_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIARDevice.getDataResponse.images)
}
inline std::string* getDataResponse::_internal_mutable_images() {
  
  return images_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataResponse::release_images() {
  // @@protoc_insertion_point(field_release:grpcIARDevice.getDataResponse.images)
  return images_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataResponse::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  images_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), images,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIARDevice.getDataResponse.images)
}

// bytes poses = 2;
inline void getDataResponse::clear_poses() {
  poses_.ClearToEmpty();
}
inline const std::string& getDataResponse::poses() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.getDataResponse.poses)
  return _internal_poses();
}
inline void getDataResponse::set_poses(const std::string& value) {
  _internal_set_poses(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.getDataResponse.poses)
}
inline std::string* getDataResponse::mutable_poses() {
  // @@protoc_insertion_point(field_mutable:grpcIARDevice.getDataResponse.poses)
  return _internal_mutable_poses();
}
inline const std::string& getDataResponse::_internal_poses() const {
  return poses_.Get();
}
inline void getDataResponse::_internal_set_poses(const std::string& value) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataResponse::set_poses(std::string&& value) {
  
  poses_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIARDevice.getDataResponse.poses)
}
inline void getDataResponse::set_poses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIARDevice.getDataResponse.poses)
}
inline void getDataResponse::set_poses(const void* value,
    size_t size) {
  
  poses_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIARDevice.getDataResponse.poses)
}
inline std::string* getDataResponse::_internal_mutable_poses() {
  
  return poses_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataResponse::release_poses() {
  // @@protoc_insertion_point(field_release:grpcIARDevice.getDataResponse.poses)
  return poses_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataResponse::set_allocated_poses(std::string* poses) {
  if (poses != nullptr) {
    
  } else {
    
  }
  poses_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), poses,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIARDevice.getDataResponse.poses)
}

// bytes timestamp = 3;
inline void getDataResponse::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& getDataResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.getDataResponse.timestamp)
  return _internal_timestamp();
}
inline void getDataResponse::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.getDataResponse.timestamp)
}
inline std::string* getDataResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:grpcIARDevice.getDataResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& getDataResponse::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void getDataResponse::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getDataResponse::set_timestamp(std::string&& value) {
  
  timestamp_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIARDevice.getDataResponse.timestamp)
}
inline void getDataResponse::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIARDevice.getDataResponse.timestamp)
}
inline void getDataResponse::set_timestamp(const void* value,
    size_t size) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIARDevice.getDataResponse.timestamp)
}
inline std::string* getDataResponse::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getDataResponse::release_timestamp() {
  // @@protoc_insertion_point(field_release:grpcIARDevice.getDataResponse.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getDataResponse::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIARDevice.getDataResponse.timestamp)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void getDataResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDataResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getDataResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.getDataResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDataResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getDataResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.getDataResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getCameraParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getCameraParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getCameraParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIARDevice.getCameraParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getCameraParametersResponse::set_xpcfgrpcreturnvalue(const std::string& value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIARDevice.getCameraParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getCameraParametersResponse::mutable_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_mutable:grpcIARDevice.getCameraParametersResponse.xpcfGrpcReturnValue)
  return _internal_mutable_xpcfgrpcreturnvalue();
}
inline const std::string& getCameraParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getCameraParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getCameraParametersResponse::set_xpcfgrpcreturnvalue(std::string&& value) {
  
  xpcfgrpcreturnvalue_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIARDevice.getCameraParametersResponse.xpcfGrpcReturnValue)
}
inline void getCameraParametersResponse::set_xpcfgrpcreturnvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIARDevice.getCameraParametersResponse.xpcfGrpcReturnValue)
}
inline void getCameraParametersResponse::set_xpcfgrpcreturnvalue(const void* value,
    size_t size) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIARDevice.getCameraParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getCameraParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getCameraParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIARDevice.getCameraParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getCameraParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIARDevice.getCameraParametersResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIARDevice

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIARDeviceService_2eproto
