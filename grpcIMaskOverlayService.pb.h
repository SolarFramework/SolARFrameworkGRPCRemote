// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMaskOverlayService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMaskOverlayService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMaskOverlayService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMaskOverlayService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMaskOverlayService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMaskOverlayService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcIMaskOverlayService_2eproto_metadata_getter(int index);
namespace grpcIMaskOverlay {
class draw_grpc0Request;
struct draw_grpc0RequestDefaultTypeInternal;
extern draw_grpc0RequestDefaultTypeInternal _draw_grpc0Request_default_instance_;
class draw_grpc0Response;
struct draw_grpc0ResponseDefaultTypeInternal;
extern draw_grpc0ResponseDefaultTypeInternal _draw_grpc0Response_default_instance_;
class draw_grpc1Request;
struct draw_grpc1RequestDefaultTypeInternal;
extern draw_grpc1RequestDefaultTypeInternal _draw_grpc1Request_default_instance_;
class draw_grpc1Response;
struct draw_grpc1ResponseDefaultTypeInternal;
extern draw_grpc1ResponseDefaultTypeInternal _draw_grpc1Response_default_instance_;
}  // namespace grpcIMaskOverlay
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMaskOverlay::draw_grpc0Request* Arena::CreateMaybeMessage<::grpcIMaskOverlay::draw_grpc0Request>(Arena*);
template<> ::grpcIMaskOverlay::draw_grpc0Response* Arena::CreateMaybeMessage<::grpcIMaskOverlay::draw_grpc0Response>(Arena*);
template<> ::grpcIMaskOverlay::draw_grpc1Request* Arena::CreateMaybeMessage<::grpcIMaskOverlay::draw_grpc1Request>(Arena*);
template<> ::grpcIMaskOverlay::draw_grpc1Response* Arena::CreateMaybeMessage<::grpcIMaskOverlay::draw_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMaskOverlay {

// ===================================================================

class draw_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMaskOverlay.draw_grpc0Request) */ {
 public:
  inline draw_grpc0Request() : draw_grpc0Request(nullptr) {}
  virtual ~draw_grpc0Request();
  explicit constexpr draw_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc0Request(const draw_grpc0Request& from);
  draw_grpc0Request(draw_grpc0Request&& from) noexcept
    : draw_grpc0Request() {
    *this = ::std::move(from);
  }

  inline draw_grpc0Request& operator=(const draw_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc0Request& operator=(draw_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const draw_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const draw_grpc0Request*>(
               &_draw_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(draw_grpc0Request& a, draw_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline draw_grpc0Request* New() const final {
    return CreateMaybeMessage<draw_grpc0Request>(nullptr);
  }

  draw_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<draw_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const draw_grpc0Request& from);
  void MergeFrom(const draw_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMaskOverlay.draw_grpc0Request";
  }
  protected:
  explicit draw_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMaskOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kBoxesFieldNumber = 3,
    kMasksFieldNumber = 4,
    kClassIdsFieldNumber = 5,
    kScoresFieldNumber = 6,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes boxes = 3;
  void clear_boxes();
  const std::string& boxes() const;
  void set_boxes(const std::string& value);
  void set_boxes(std::string&& value);
  void set_boxes(const char* value);
  void set_boxes(const void* value, size_t size);
  std::string* mutable_boxes();
  std::string* release_boxes();
  void set_allocated_boxes(std::string* boxes);
  private:
  const std::string& _internal_boxes() const;
  void _internal_set_boxes(const std::string& value);
  std::string* _internal_mutable_boxes();
  public:

  // bytes masks = 4;
  void clear_masks();
  const std::string& masks() const;
  void set_masks(const std::string& value);
  void set_masks(std::string&& value);
  void set_masks(const char* value);
  void set_masks(const void* value, size_t size);
  std::string* mutable_masks();
  std::string* release_masks();
  void set_allocated_masks(std::string* masks);
  private:
  const std::string& _internal_masks() const;
  void _internal_set_masks(const std::string& value);
  std::string* _internal_mutable_masks();
  public:

  // bytes classIds = 5;
  void clear_classids();
  const std::string& classids() const;
  void set_classids(const std::string& value);
  void set_classids(std::string&& value);
  void set_classids(const char* value);
  void set_classids(const void* value, size_t size);
  std::string* mutable_classids();
  std::string* release_classids();
  void set_allocated_classids(std::string* classids);
  private:
  const std::string& _internal_classids() const;
  void _internal_set_classids(const std::string& value);
  std::string* _internal_mutable_classids();
  public:

  // bytes scores = 6;
  void clear_scores();
  const std::string& scores() const;
  void set_scores(const std::string& value);
  void set_scores(std::string&& value);
  void set_scores(const char* value);
  void set_scores(const void* value, size_t size);
  std::string* mutable_scores();
  std::string* release_scores();
  void set_allocated_scores(std::string* scores);
  private:
  const std::string& _internal_scores() const;
  void _internal_set_scores(const std::string& value);
  std::string* _internal_mutable_scores();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMaskOverlay.draw_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boxes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr masks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scores_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMaskOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc0Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMaskOverlay.draw_grpc0Response) */ {
 public:
  inline draw_grpc0Response() : draw_grpc0Response(nullptr) {}
  virtual ~draw_grpc0Response();
  explicit constexpr draw_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc0Response(const draw_grpc0Response& from);
  draw_grpc0Response(draw_grpc0Response&& from) noexcept
    : draw_grpc0Response() {
    *this = ::std::move(from);
  }

  inline draw_grpc0Response& operator=(const draw_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc0Response& operator=(draw_grpc0Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const draw_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const draw_grpc0Response*>(
               &_draw_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(draw_grpc0Response& a, draw_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc0Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline draw_grpc0Response* New() const final {
    return CreateMaybeMessage<draw_grpc0Response>(nullptr);
  }

  draw_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<draw_grpc0Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const draw_grpc0Response& from);
  void MergeFrom(const draw_grpc0Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMaskOverlay.draw_grpc0Response";
  }
  protected:
  explicit draw_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMaskOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMaskOverlay.draw_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMaskOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMaskOverlay.draw_grpc1Request) */ {
 public:
  inline draw_grpc1Request() : draw_grpc1Request(nullptr) {}
  virtual ~draw_grpc1Request();
  explicit constexpr draw_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc1Request(const draw_grpc1Request& from);
  draw_grpc1Request(draw_grpc1Request&& from) noexcept
    : draw_grpc1Request() {
    *this = ::std::move(from);
  }

  inline draw_grpc1Request& operator=(const draw_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc1Request& operator=(draw_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const draw_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const draw_grpc1Request*>(
               &_draw_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(draw_grpc1Request& a, draw_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline draw_grpc1Request* New() const final {
    return CreateMaybeMessage<draw_grpc1Request>(nullptr);
  }

  draw_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<draw_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const draw_grpc1Request& from);
  void MergeFrom(const draw_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMaskOverlay.draw_grpc1Request";
  }
  protected:
  explicit draw_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMaskOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 2,
    kMaskFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes image = 2;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // bytes mask = 3;
  void clear_mask();
  const std::string& mask() const;
  void set_mask(const std::string& value);
  void set_mask(std::string&& value);
  void set_mask(const char* value);
  void set_mask(const void* value, size_t size);
  std::string* mutable_mask();
  std::string* release_mask();
  void set_allocated_mask(std::string* mask);
  private:
  const std::string& _internal_mask() const;
  void _internal_set_mask(const std::string& value);
  std::string* _internal_mutable_mask();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat() const;
  void set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMaskOverlay.draw_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  ::PROTOBUF_NAMESPACE_ID::int32 grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMaskOverlayService_2eproto;
};
// -------------------------------------------------------------------

class draw_grpc1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMaskOverlay.draw_grpc1Response) */ {
 public:
  inline draw_grpc1Response() : draw_grpc1Response(nullptr) {}
  virtual ~draw_grpc1Response();
  explicit constexpr draw_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  draw_grpc1Response(const draw_grpc1Response& from);
  draw_grpc1Response(draw_grpc1Response&& from) noexcept
    : draw_grpc1Response() {
    *this = ::std::move(from);
  }

  inline draw_grpc1Response& operator=(const draw_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline draw_grpc1Response& operator=(draw_grpc1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const draw_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const draw_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const draw_grpc1Response*>(
               &_draw_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(draw_grpc1Response& a, draw_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(draw_grpc1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(draw_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline draw_grpc1Response* New() const final {
    return CreateMaybeMessage<draw_grpc1Response>(nullptr);
  }

  draw_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<draw_grpc1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const draw_grpc1Response& from);
  void MergeFrom(const draw_grpc1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(draw_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMaskOverlay.draw_grpc1Response";
  }
  protected:
  explicit draw_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcIMaskOverlayService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIMaskOverlay.draw_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMaskOverlayService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// draw_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void draw_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 draw_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 draw_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void draw_grpc0Request::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void draw_grpc0Request::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc0Request.grpcServerCompressionFormat)
}

// bytes image = 2;
inline void draw_grpc0Request::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::image() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc0Request.image)
  return _internal_image();
}
inline void draw_grpc0Request::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc0Request.image)
}
inline std::string* draw_grpc0Request::mutable_image() {
  // @@protoc_insertion_point(field_mutable:grpcIMaskOverlay.draw_grpc0Request.image)
  return _internal_mutable_image();
}
inline const std::string& draw_grpc0Request::_internal_image() const {
  return image_.Get();
}
inline void draw_grpc0Request::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void draw_grpc0Request::set_image(std::string&& value) {
  
  image_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMaskOverlay.draw_grpc0Request.image)
}
inline void draw_grpc0Request::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMaskOverlay.draw_grpc0Request.image)
}
inline void draw_grpc0Request::set_image(const void* value,
    size_t size) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMaskOverlay.draw_grpc0Request.image)
}
inline std::string* draw_grpc0Request::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* draw_grpc0Request::release_image() {
  // @@protoc_insertion_point(field_release:grpcIMaskOverlay.draw_grpc0Request.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void draw_grpc0Request::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMaskOverlay.draw_grpc0Request.image)
}

// bytes boxes = 3;
inline void draw_grpc0Request::clear_boxes() {
  boxes_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::boxes() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc0Request.boxes)
  return _internal_boxes();
}
inline void draw_grpc0Request::set_boxes(const std::string& value) {
  _internal_set_boxes(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc0Request.boxes)
}
inline std::string* draw_grpc0Request::mutable_boxes() {
  // @@protoc_insertion_point(field_mutable:grpcIMaskOverlay.draw_grpc0Request.boxes)
  return _internal_mutable_boxes();
}
inline const std::string& draw_grpc0Request::_internal_boxes() const {
  return boxes_.Get();
}
inline void draw_grpc0Request::_internal_set_boxes(const std::string& value) {
  
  boxes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void draw_grpc0Request::set_boxes(std::string&& value) {
  
  boxes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMaskOverlay.draw_grpc0Request.boxes)
}
inline void draw_grpc0Request::set_boxes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boxes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMaskOverlay.draw_grpc0Request.boxes)
}
inline void draw_grpc0Request::set_boxes(const void* value,
    size_t size) {
  
  boxes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMaskOverlay.draw_grpc0Request.boxes)
}
inline std::string* draw_grpc0Request::_internal_mutable_boxes() {
  
  return boxes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* draw_grpc0Request::release_boxes() {
  // @@protoc_insertion_point(field_release:grpcIMaskOverlay.draw_grpc0Request.boxes)
  return boxes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void draw_grpc0Request::set_allocated_boxes(std::string* boxes) {
  if (boxes != nullptr) {
    
  } else {
    
  }
  boxes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boxes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMaskOverlay.draw_grpc0Request.boxes)
}

// bytes masks = 4;
inline void draw_grpc0Request::clear_masks() {
  masks_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::masks() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc0Request.masks)
  return _internal_masks();
}
inline void draw_grpc0Request::set_masks(const std::string& value) {
  _internal_set_masks(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc0Request.masks)
}
inline std::string* draw_grpc0Request::mutable_masks() {
  // @@protoc_insertion_point(field_mutable:grpcIMaskOverlay.draw_grpc0Request.masks)
  return _internal_mutable_masks();
}
inline const std::string& draw_grpc0Request::_internal_masks() const {
  return masks_.Get();
}
inline void draw_grpc0Request::_internal_set_masks(const std::string& value) {
  
  masks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void draw_grpc0Request::set_masks(std::string&& value) {
  
  masks_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMaskOverlay.draw_grpc0Request.masks)
}
inline void draw_grpc0Request::set_masks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  masks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMaskOverlay.draw_grpc0Request.masks)
}
inline void draw_grpc0Request::set_masks(const void* value,
    size_t size) {
  
  masks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMaskOverlay.draw_grpc0Request.masks)
}
inline std::string* draw_grpc0Request::_internal_mutable_masks() {
  
  return masks_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* draw_grpc0Request::release_masks() {
  // @@protoc_insertion_point(field_release:grpcIMaskOverlay.draw_grpc0Request.masks)
  return masks_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void draw_grpc0Request::set_allocated_masks(std::string* masks) {
  if (masks != nullptr) {
    
  } else {
    
  }
  masks_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), masks,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMaskOverlay.draw_grpc0Request.masks)
}

// bytes classIds = 5;
inline void draw_grpc0Request::clear_classids() {
  classids_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::classids() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc0Request.classIds)
  return _internal_classids();
}
inline void draw_grpc0Request::set_classids(const std::string& value) {
  _internal_set_classids(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc0Request.classIds)
}
inline std::string* draw_grpc0Request::mutable_classids() {
  // @@protoc_insertion_point(field_mutable:grpcIMaskOverlay.draw_grpc0Request.classIds)
  return _internal_mutable_classids();
}
inline const std::string& draw_grpc0Request::_internal_classids() const {
  return classids_.Get();
}
inline void draw_grpc0Request::_internal_set_classids(const std::string& value) {
  
  classids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void draw_grpc0Request::set_classids(std::string&& value) {
  
  classids_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMaskOverlay.draw_grpc0Request.classIds)
}
inline void draw_grpc0Request::set_classids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  classids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMaskOverlay.draw_grpc0Request.classIds)
}
inline void draw_grpc0Request::set_classids(const void* value,
    size_t size) {
  
  classids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMaskOverlay.draw_grpc0Request.classIds)
}
inline std::string* draw_grpc0Request::_internal_mutable_classids() {
  
  return classids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* draw_grpc0Request::release_classids() {
  // @@protoc_insertion_point(field_release:grpcIMaskOverlay.draw_grpc0Request.classIds)
  return classids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void draw_grpc0Request::set_allocated_classids(std::string* classids) {
  if (classids != nullptr) {
    
  } else {
    
  }
  classids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), classids,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMaskOverlay.draw_grpc0Request.classIds)
}

// bytes scores = 6;
inline void draw_grpc0Request::clear_scores() {
  scores_.ClearToEmpty();
}
inline const std::string& draw_grpc0Request::scores() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc0Request.scores)
  return _internal_scores();
}
inline void draw_grpc0Request::set_scores(const std::string& value) {
  _internal_set_scores(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc0Request.scores)
}
inline std::string* draw_grpc0Request::mutable_scores() {
  // @@protoc_insertion_point(field_mutable:grpcIMaskOverlay.draw_grpc0Request.scores)
  return _internal_mutable_scores();
}
inline const std::string& draw_grpc0Request::_internal_scores() const {
  return scores_.Get();
}
inline void draw_grpc0Request::_internal_set_scores(const std::string& value) {
  
  scores_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void draw_grpc0Request::set_scores(std::string&& value) {
  
  scores_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMaskOverlay.draw_grpc0Request.scores)
}
inline void draw_grpc0Request::set_scores(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scores_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMaskOverlay.draw_grpc0Request.scores)
}
inline void draw_grpc0Request::set_scores(const void* value,
    size_t size) {
  
  scores_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMaskOverlay.draw_grpc0Request.scores)
}
inline std::string* draw_grpc0Request::_internal_mutable_scores() {
  
  return scores_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* draw_grpc0Request::release_scores() {
  // @@protoc_insertion_point(field_release:grpcIMaskOverlay.draw_grpc0Request.scores)
  return scores_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void draw_grpc0Request::set_allocated_scores(std::string* scores) {
  if (scores != nullptr) {
    
  } else {
    
  }
  scores_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scores,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMaskOverlay.draw_grpc0Request.scores)
}

// -------------------------------------------------------------------

// draw_grpc0Response

// sint32 xpcfGrpcReturnValue = 1;
inline void draw_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 draw_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 draw_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void draw_grpc0Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void draw_grpc0Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// draw_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void draw_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 draw_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 draw_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void draw_grpc1Request::_internal_set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grpcservercompressionformat_ = value;
}
inline void draw_grpc1Request::set_grpcservercompressionformat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc1Request.grpcServerCompressionFormat)
}

// bytes image = 2;
inline void draw_grpc1Request::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& draw_grpc1Request::image() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc1Request.image)
  return _internal_image();
}
inline void draw_grpc1Request::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc1Request.image)
}
inline std::string* draw_grpc1Request::mutable_image() {
  // @@protoc_insertion_point(field_mutable:grpcIMaskOverlay.draw_grpc1Request.image)
  return _internal_mutable_image();
}
inline const std::string& draw_grpc1Request::_internal_image() const {
  return image_.Get();
}
inline void draw_grpc1Request::_internal_set_image(const std::string& value) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void draw_grpc1Request::set_image(std::string&& value) {
  
  image_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMaskOverlay.draw_grpc1Request.image)
}
inline void draw_grpc1Request::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMaskOverlay.draw_grpc1Request.image)
}
inline void draw_grpc1Request::set_image(const void* value,
    size_t size) {
  
  image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMaskOverlay.draw_grpc1Request.image)
}
inline std::string* draw_grpc1Request::_internal_mutable_image() {
  
  return image_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* draw_grpc1Request::release_image() {
  // @@protoc_insertion_point(field_release:grpcIMaskOverlay.draw_grpc1Request.image)
  return image_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void draw_grpc1Request::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMaskOverlay.draw_grpc1Request.image)
}

// bytes mask = 3;
inline void draw_grpc1Request::clear_mask() {
  mask_.ClearToEmpty();
}
inline const std::string& draw_grpc1Request::mask() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc1Request.mask)
  return _internal_mask();
}
inline void draw_grpc1Request::set_mask(const std::string& value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc1Request.mask)
}
inline std::string* draw_grpc1Request::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:grpcIMaskOverlay.draw_grpc1Request.mask)
  return _internal_mutable_mask();
}
inline const std::string& draw_grpc1Request::_internal_mask() const {
  return mask_.Get();
}
inline void draw_grpc1Request::_internal_set_mask(const std::string& value) {
  
  mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void draw_grpc1Request::set_mask(std::string&& value) {
  
  mask_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcIMaskOverlay.draw_grpc1Request.mask)
}
inline void draw_grpc1Request::set_mask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcIMaskOverlay.draw_grpc1Request.mask)
}
inline void draw_grpc1Request::set_mask(const void* value,
    size_t size) {
  
  mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcIMaskOverlay.draw_grpc1Request.mask)
}
inline std::string* draw_grpc1Request::_internal_mutable_mask() {
  
  return mask_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* draw_grpc1Request::release_mask() {
  // @@protoc_insertion_point(field_release:grpcIMaskOverlay.draw_grpc1Request.mask)
  return mask_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void draw_grpc1Request::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    
  } else {
    
  }
  mask_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mask,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcIMaskOverlay.draw_grpc1Request.mask)
}

// -------------------------------------------------------------------

// draw_grpc1Response

// sint32 xpcfGrpcReturnValue = 1;
inline void draw_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 draw_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 draw_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIMaskOverlay.draw_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void draw_grpc1Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void draw_grpc1Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIMaskOverlay.draw_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMaskOverlay

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMaskOverlayService_2eproto
