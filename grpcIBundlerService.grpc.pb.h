// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIBundlerService.proto
#ifndef GRPC_grpcIBundlerService_2eproto__INCLUDED
#define GRPC_grpcIBundlerService_2eproto__INCLUDED

#include "grpcIBundlerService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIBundler {

class grpcIBundlerService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIBundler.grpcIBundlerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status setMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpcIBundler::setMapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::setMapResponse>> AsyncsetMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::setMapResponse>>(AsyncsetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::setMapResponse>> PrepareAsyncsetMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::setMapResponse>>(PrepareAsyncsetMapRaw(context, request, cq));
    }
    virtual ::grpc::Status bundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpcIBundler::bundleAdjustmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::bundleAdjustmentResponse>> AsyncbundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::bundleAdjustmentResponse>>(AsyncbundleAdjustmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::bundleAdjustmentResponse>> PrepareAsyncbundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::bundleAdjustmentResponse>>(PrepareAsyncbundleAdjustmentRaw(context, request, cq));
    }
    virtual ::grpc::Status optimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpcIBundler::optimizeSim3Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::optimizeSim3Response>> AsyncoptimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::optimizeSim3Response>>(AsyncoptimizeSim3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::optimizeSim3Response>> PrepareAsyncoptimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::optimizeSim3Response>>(PrepareAsyncoptimizeSim3Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void setMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest* request, ::grpcIBundler::setMapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest* request, ::grpcIBundler::setMapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void bundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest* request, ::grpcIBundler::bundleAdjustmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void bundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest* request, ::grpcIBundler::bundleAdjustmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void optimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request* request, ::grpcIBundler::optimizeSim3Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void optimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request* request, ::grpcIBundler::optimizeSim3Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::setMapResponse>* AsyncsetMapRaw(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::setMapResponse>* PrepareAsyncsetMapRaw(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::bundleAdjustmentResponse>* AsyncbundleAdjustmentRaw(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::bundleAdjustmentResponse>* PrepareAsyncbundleAdjustmentRaw(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::optimizeSim3Response>* AsyncoptimizeSim3Raw(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIBundler::optimizeSim3Response>* PrepareAsyncoptimizeSim3Raw(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status setMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpcIBundler::setMapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::setMapResponse>> AsyncsetMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::setMapResponse>>(AsyncsetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::setMapResponse>> PrepareAsyncsetMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::setMapResponse>>(PrepareAsyncsetMapRaw(context, request, cq));
    }
    ::grpc::Status bundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpcIBundler::bundleAdjustmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::bundleAdjustmentResponse>> AsyncbundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::bundleAdjustmentResponse>>(AsyncbundleAdjustmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::bundleAdjustmentResponse>> PrepareAsyncbundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::bundleAdjustmentResponse>>(PrepareAsyncbundleAdjustmentRaw(context, request, cq));
    }
    ::grpc::Status optimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpcIBundler::optimizeSim3Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::optimizeSim3Response>> AsyncoptimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::optimizeSim3Response>>(AsyncoptimizeSim3Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::optimizeSim3Response>> PrepareAsyncoptimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIBundler::optimizeSim3Response>>(PrepareAsyncoptimizeSim3Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void setMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest* request, ::grpcIBundler::setMapResponse* response, std::function<void(::grpc::Status)>) override;
      void setMap(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest* request, ::grpcIBundler::setMapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void bundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest* request, ::grpcIBundler::bundleAdjustmentResponse* response, std::function<void(::grpc::Status)>) override;
      void bundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest* request, ::grpcIBundler::bundleAdjustmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void optimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request* request, ::grpcIBundler::optimizeSim3Response* response, std::function<void(::grpc::Status)>) override;
      void optimizeSim3(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request* request, ::grpcIBundler::optimizeSim3Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIBundler::setMapResponse>* AsyncsetMapRaw(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIBundler::setMapResponse>* PrepareAsyncsetMapRaw(::grpc::ClientContext* context, const ::grpcIBundler::setMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIBundler::bundleAdjustmentResponse>* AsyncbundleAdjustmentRaw(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIBundler::bundleAdjustmentResponse>* PrepareAsyncbundleAdjustmentRaw(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIBundler::optimizeSim3Response>* AsyncoptimizeSim3Raw(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIBundler::optimizeSim3Response>* PrepareAsyncoptimizeSim3Raw(::grpc::ClientContext* context, const ::grpcIBundler::optimizeSim3Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_setMap_;
    const ::grpc::internal::RpcMethod rpcmethod_bundleAdjustment_;
    const ::grpc::internal::RpcMethod rpcmethod_optimizeSim3_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status setMap(::grpc::ServerContext* context, const ::grpcIBundler::setMapRequest* request, ::grpcIBundler::setMapResponse* response);
    virtual ::grpc::Status bundleAdjustment(::grpc::ServerContext* context, const ::grpcIBundler::bundleAdjustmentRequest* request, ::grpcIBundler::bundleAdjustmentResponse* response);
    virtual ::grpc::Status optimizeSim3(::grpc::ServerContext* context, const ::grpcIBundler::optimizeSim3Request* request, ::grpcIBundler::optimizeSim3Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_setMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setMap() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMap(::grpc::ServerContext* /*context*/, const ::grpcIBundler::setMapRequest* /*request*/, ::grpcIBundler::setMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetMap(::grpc::ServerContext* context, ::grpcIBundler::setMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIBundler::setMapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_bundleAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_bundleAdjustment() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_bundleAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bundleAdjustment(::grpc::ServerContext* /*context*/, const ::grpcIBundler::bundleAdjustmentRequest* /*request*/, ::grpcIBundler::bundleAdjustmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbundleAdjustment(::grpc::ServerContext* context, ::grpcIBundler::bundleAdjustmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIBundler::bundleAdjustmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_optimizeSim3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_optimizeSim3() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_optimizeSim3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status optimizeSim3(::grpc::ServerContext* /*context*/, const ::grpcIBundler::optimizeSim3Request* /*request*/, ::grpcIBundler::optimizeSim3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestoptimizeSim3(::grpc::ServerContext* context, ::grpcIBundler::optimizeSim3Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIBundler::optimizeSim3Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setMap<WithAsyncMethod_bundleAdjustment<WithAsyncMethod_optimizeSim3<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_setMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setMap() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIBundler::setMapRequest, ::grpcIBundler::setMapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIBundler::setMapRequest* request, ::grpcIBundler::setMapResponse* response) { return this->setMap(context, request, response); }));}
    void SetMessageAllocatorFor_setMap(
        ::grpc::MessageAllocator< ::grpcIBundler::setMapRequest, ::grpcIBundler::setMapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIBundler::setMapRequest, ::grpcIBundler::setMapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMap(::grpc::ServerContext* /*context*/, const ::grpcIBundler::setMapRequest* /*request*/, ::grpcIBundler::setMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIBundler::setMapRequest* /*request*/, ::grpcIBundler::setMapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_bundleAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_bundleAdjustment() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIBundler::bundleAdjustmentRequest, ::grpcIBundler::bundleAdjustmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIBundler::bundleAdjustmentRequest* request, ::grpcIBundler::bundleAdjustmentResponse* response) { return this->bundleAdjustment(context, request, response); }));}
    void SetMessageAllocatorFor_bundleAdjustment(
        ::grpc::MessageAllocator< ::grpcIBundler::bundleAdjustmentRequest, ::grpcIBundler::bundleAdjustmentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIBundler::bundleAdjustmentRequest, ::grpcIBundler::bundleAdjustmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_bundleAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bundleAdjustment(::grpc::ServerContext* /*context*/, const ::grpcIBundler::bundleAdjustmentRequest* /*request*/, ::grpcIBundler::bundleAdjustmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* bundleAdjustment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIBundler::bundleAdjustmentRequest* /*request*/, ::grpcIBundler::bundleAdjustmentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_optimizeSim3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_optimizeSim3() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIBundler::optimizeSim3Request, ::grpcIBundler::optimizeSim3Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIBundler::optimizeSim3Request* request, ::grpcIBundler::optimizeSim3Response* response) { return this->optimizeSim3(context, request, response); }));}
    void SetMessageAllocatorFor_optimizeSim3(
        ::grpc::MessageAllocator< ::grpcIBundler::optimizeSim3Request, ::grpcIBundler::optimizeSim3Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIBundler::optimizeSim3Request, ::grpcIBundler::optimizeSim3Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_optimizeSim3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status optimizeSim3(::grpc::ServerContext* /*context*/, const ::grpcIBundler::optimizeSim3Request* /*request*/, ::grpcIBundler::optimizeSim3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* optimizeSim3(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIBundler::optimizeSim3Request* /*request*/, ::grpcIBundler::optimizeSim3Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_setMap<WithCallbackMethod_bundleAdjustment<WithCallbackMethod_optimizeSim3<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_setMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setMap() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMap(::grpc::ServerContext* /*context*/, const ::grpcIBundler::setMapRequest* /*request*/, ::grpcIBundler::setMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_bundleAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_bundleAdjustment() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_bundleAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bundleAdjustment(::grpc::ServerContext* /*context*/, const ::grpcIBundler::bundleAdjustmentRequest* /*request*/, ::grpcIBundler::bundleAdjustmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_optimizeSim3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_optimizeSim3() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_optimizeSim3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status optimizeSim3(::grpc::ServerContext* /*context*/, const ::grpcIBundler::optimizeSim3Request* /*request*/, ::grpcIBundler::optimizeSim3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_setMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setMap() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_setMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMap(::grpc::ServerContext* /*context*/, const ::grpcIBundler::setMapRequest* /*request*/, ::grpcIBundler::setMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_bundleAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_bundleAdjustment() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_bundleAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bundleAdjustment(::grpc::ServerContext* /*context*/, const ::grpcIBundler::bundleAdjustmentRequest* /*request*/, ::grpcIBundler::bundleAdjustmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestbundleAdjustment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_optimizeSim3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_optimizeSim3() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_optimizeSim3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status optimizeSim3(::grpc::ServerContext* /*context*/, const ::grpcIBundler::optimizeSim3Request* /*request*/, ::grpcIBundler::optimizeSim3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestoptimizeSim3(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setMap() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_setMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setMap(::grpc::ServerContext* /*context*/, const ::grpcIBundler::setMapRequest* /*request*/, ::grpcIBundler::setMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_bundleAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_bundleAdjustment() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->bundleAdjustment(context, request, response); }));
    }
    ~WithRawCallbackMethod_bundleAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status bundleAdjustment(::grpc::ServerContext* /*context*/, const ::grpcIBundler::bundleAdjustmentRequest* /*request*/, ::grpcIBundler::bundleAdjustmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* bundleAdjustment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_optimizeSim3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_optimizeSim3() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->optimizeSim3(context, request, response); }));
    }
    ~WithRawCallbackMethod_optimizeSim3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status optimizeSim3(::grpc::ServerContext* /*context*/, const ::grpcIBundler::optimizeSim3Request* /*request*/, ::grpcIBundler::optimizeSim3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* optimizeSim3(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setMap() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIBundler::setMapRequest, ::grpcIBundler::setMapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIBundler::setMapRequest, ::grpcIBundler::setMapResponse>* streamer) {
                       return this->StreamedsetMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setMap(::grpc::ServerContext* /*context*/, const ::grpcIBundler::setMapRequest* /*request*/, ::grpcIBundler::setMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIBundler::setMapRequest,::grpcIBundler::setMapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_bundleAdjustment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_bundleAdjustment() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIBundler::bundleAdjustmentRequest, ::grpcIBundler::bundleAdjustmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIBundler::bundleAdjustmentRequest, ::grpcIBundler::bundleAdjustmentResponse>* streamer) {
                       return this->StreamedbundleAdjustment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_bundleAdjustment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status bundleAdjustment(::grpc::ServerContext* /*context*/, const ::grpcIBundler::bundleAdjustmentRequest* /*request*/, ::grpcIBundler::bundleAdjustmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedbundleAdjustment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIBundler::bundleAdjustmentRequest,::grpcIBundler::bundleAdjustmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_optimizeSim3 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_optimizeSim3() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIBundler::optimizeSim3Request, ::grpcIBundler::optimizeSim3Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIBundler::optimizeSim3Request, ::grpcIBundler::optimizeSim3Response>* streamer) {
                       return this->StreamedoptimizeSim3(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_optimizeSim3() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status optimizeSim3(::grpc::ServerContext* /*context*/, const ::grpcIBundler::optimizeSim3Request* /*request*/, ::grpcIBundler::optimizeSim3Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedoptimizeSim3(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIBundler::optimizeSim3Request,::grpcIBundler::optimizeSim3Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_setMap<WithStreamedUnaryMethod_bundleAdjustment<WithStreamedUnaryMethod_optimizeSim3<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_setMap<WithStreamedUnaryMethod_bundleAdjustment<WithStreamedUnaryMethod_optimizeSim3<Service > > > StreamedService;
};

}  // namespace grpcIBundler


#endif  // GRPC_grpcIBundlerService_2eproto__INCLUDED
