// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIKeypointDetectorRegionService.proto

#include "grpcIKeypointDetectorRegionService.pb.h"
#include "grpcIKeypointDetectorRegionService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIKeypointDetectorRegion {

static const char* grpcIKeypointDetectorRegionService_method_names[] = {
  "/grpcIKeypointDetectorRegion.grpcIKeypointDetectorRegionService/setType",
  "/grpcIKeypointDetectorRegion.grpcIKeypointDetectorRegionService/getType",
  "/grpcIKeypointDetectorRegion.grpcIKeypointDetectorRegionService/detect",
};

std::unique_ptr< grpcIKeypointDetectorRegionService::Stub> grpcIKeypointDetectorRegionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIKeypointDetectorRegionService::Stub> stub(new grpcIKeypointDetectorRegionService::Stub(channel, options));
  return stub;
}

grpcIKeypointDetectorRegionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_setType_(grpcIKeypointDetectorRegionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getType_(grpcIKeypointDetectorRegionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_detect_(grpcIKeypointDetectorRegionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIKeypointDetectorRegionService::Stub::setType(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::setTypeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeypointDetectorRegion::setTypeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setType_, context, request, response);
}

void grpcIKeypointDetectorRegionService::Stub::async::setType(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::setTypeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeypointDetectorRegion::setTypeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setType_, context, request, response, std::move(f));
}

void grpcIKeypointDetectorRegionService::Stub::async::setType(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::setTypeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIKeypointDetectorRegionService::Stub::PrepareAsyncsetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::setTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIKeypointDetectorRegion::setTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIKeypointDetectorRegionService::Stub::AsyncsetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::setTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeypointDetectorRegionService::Stub::getType(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::getTypeRequest& request, ::grpcIKeypointDetectorRegion::getTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeypointDetectorRegion::getTypeRequest, ::grpcIKeypointDetectorRegion::getTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getType_, context, request, response);
}

void grpcIKeypointDetectorRegionService::Stub::async::getType(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::getTypeRequest* request, ::grpcIKeypointDetectorRegion::getTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeypointDetectorRegion::getTypeRequest, ::grpcIKeypointDetectorRegion::getTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getType_, context, request, response, std::move(f));
}

void grpcIKeypointDetectorRegionService::Stub::async::getType(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::getTypeRequest* request, ::grpcIKeypointDetectorRegion::getTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetectorRegion::getTypeResponse>* grpcIKeypointDetectorRegionService::Stub::PrepareAsyncgetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::getTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeypointDetectorRegion::getTypeResponse, ::grpcIKeypointDetectorRegion::getTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetectorRegion::getTypeResponse>* grpcIKeypointDetectorRegionService::Stub::AsyncgetTypeRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::getTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIKeypointDetectorRegionService::Stub::detect(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::detectRequest& request, ::grpcIKeypointDetectorRegion::detectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIKeypointDetectorRegion::detectRequest, ::grpcIKeypointDetectorRegion::detectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_detect_, context, request, response);
}

void grpcIKeypointDetectorRegionService::Stub::async::detect(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::detectRequest* request, ::grpcIKeypointDetectorRegion::detectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIKeypointDetectorRegion::detectRequest, ::grpcIKeypointDetectorRegion::detectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_detect_, context, request, response, std::move(f));
}

void grpcIKeypointDetectorRegionService::Stub::async::detect(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::detectRequest* request, ::grpcIKeypointDetectorRegion::detectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_detect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetectorRegion::detectResponse>* grpcIKeypointDetectorRegionService::Stub::PrepareAsyncdetectRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::detectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIKeypointDetectorRegion::detectResponse, ::grpcIKeypointDetectorRegion::detectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_detect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIKeypointDetectorRegion::detectResponse>* grpcIKeypointDetectorRegionService::Stub::AsyncdetectRaw(::grpc::ClientContext* context, const ::grpcIKeypointDetectorRegion::detectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdetectRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIKeypointDetectorRegionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeypointDetectorRegionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeypointDetectorRegionService::Service, ::grpcIKeypointDetectorRegion::setTypeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeypointDetectorRegionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeypointDetectorRegion::setTypeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeypointDetectorRegionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeypointDetectorRegionService::Service, ::grpcIKeypointDetectorRegion::getTypeRequest, ::grpcIKeypointDetectorRegion::getTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeypointDetectorRegionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeypointDetectorRegion::getTypeRequest* req,
             ::grpcIKeypointDetectorRegion::getTypeResponse* resp) {
               return service->getType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIKeypointDetectorRegionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIKeypointDetectorRegionService::Service, ::grpcIKeypointDetectorRegion::detectRequest, ::grpcIKeypointDetectorRegion::detectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIKeypointDetectorRegionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIKeypointDetectorRegion::detectRequest* req,
             ::grpcIKeypointDetectorRegion::detectResponse* resp) {
               return service->detect(ctx, req, resp);
             }, this)));
}

grpcIKeypointDetectorRegionService::Service::~Service() {
}

::grpc::Status grpcIKeypointDetectorRegionService::Service::setType(::grpc::ServerContext* context, const ::grpcIKeypointDetectorRegion::setTypeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeypointDetectorRegionService::Service::getType(::grpc::ServerContext* context, const ::grpcIKeypointDetectorRegion::getTypeRequest* request, ::grpcIKeypointDetectorRegion::getTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIKeypointDetectorRegionService::Service::detect(::grpc::ServerContext* context, const ::grpcIKeypointDetectorRegion::detectRequest* request, ::grpcIKeypointDetectorRegion::detectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIKeypointDetectorRegion

