// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcISBPatternReIndexerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcISBPatternReIndexerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcISBPatternReIndexerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcISBPatternReIndexerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcISBPatternReIndexerService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcISBPatternReIndexerService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcISBPatternReIndexerService_2eproto_metadata_getter(int index);
namespace grpcISBPatternReIndexer {
class reindexRequest;
struct reindexRequestDefaultTypeInternal;
extern reindexRequestDefaultTypeInternal _reindexRequest_default_instance_;
class reindexResponse;
struct reindexResponseDefaultTypeInternal;
extern reindexResponseDefaultTypeInternal _reindexResponse_default_instance_;
}  // namespace grpcISBPatternReIndexer
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcISBPatternReIndexer::reindexRequest* Arena::CreateMaybeMessage<::grpcISBPatternReIndexer::reindexRequest>(Arena*);
template<> ::grpcISBPatternReIndexer::reindexResponse* Arena::CreateMaybeMessage<::grpcISBPatternReIndexer::reindexResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcISBPatternReIndexer {

// ===================================================================

class reindexRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcISBPatternReIndexer.reindexRequest) */ {
 public:
  inline reindexRequest() : reindexRequest(nullptr) {}
  virtual ~reindexRequest();
  explicit constexpr reindexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reindexRequest(const reindexRequest& from);
  reindexRequest(reindexRequest&& from) noexcept
    : reindexRequest() {
    *this = ::std::move(from);
  }

  inline reindexRequest& operator=(const reindexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline reindexRequest& operator=(reindexRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const reindexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const reindexRequest* internal_default_instance() {
    return reinterpret_cast<const reindexRequest*>(
               &_reindexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(reindexRequest& a, reindexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(reindexRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reindexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline reindexRequest* New() const final {
    return CreateMaybeMessage<reindexRequest>(nullptr);
  }

  reindexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<reindexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const reindexRequest& from);
  void MergeFrom(const reindexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reindexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcISBPatternReIndexer.reindexRequest";
  }
  protected:
  explicit reindexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcISBPatternReIndexerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateContoursFieldNumber = 1,
    kMatchesFieldNumber = 2,
    kPatternPointsFieldNumber = 3,
    kImagePointsFieldNumber = 4,
  };
  // bytes candidateContours = 1;
  void clear_candidatecontours();
  const std::string& candidatecontours() const;
  void set_candidatecontours(const std::string& value);
  void set_candidatecontours(std::string&& value);
  void set_candidatecontours(const char* value);
  void set_candidatecontours(const void* value, size_t size);
  std::string* mutable_candidatecontours();
  std::string* release_candidatecontours();
  void set_allocated_candidatecontours(std::string* candidatecontours);
  private:
  const std::string& _internal_candidatecontours() const;
  void _internal_set_candidatecontours(const std::string& value);
  std::string* _internal_mutable_candidatecontours();
  public:

  // bytes matches = 2;
  void clear_matches();
  const std::string& matches() const;
  void set_matches(const std::string& value);
  void set_matches(std::string&& value);
  void set_matches(const char* value);
  void set_matches(const void* value, size_t size);
  std::string* mutable_matches();
  std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes patternPoints = 3;
  void clear_patternpoints();
  const std::string& patternpoints() const;
  void set_patternpoints(const std::string& value);
  void set_patternpoints(std::string&& value);
  void set_patternpoints(const char* value);
  void set_patternpoints(const void* value, size_t size);
  std::string* mutable_patternpoints();
  std::string* release_patternpoints();
  void set_allocated_patternpoints(std::string* patternpoints);
  private:
  const std::string& _internal_patternpoints() const;
  void _internal_set_patternpoints(const std::string& value);
  std::string* _internal_mutable_patternpoints();
  public:

  // bytes imagePoints = 4;
  void clear_imagepoints();
  const std::string& imagepoints() const;
  void set_imagepoints(const std::string& value);
  void set_imagepoints(std::string&& value);
  void set_imagepoints(const char* value);
  void set_imagepoints(const void* value, size_t size);
  std::string* mutable_imagepoints();
  std::string* release_imagepoints();
  void set_allocated_imagepoints(std::string* imagepoints);
  private:
  const std::string& _internal_imagepoints() const;
  void _internal_set_imagepoints(const std::string& value);
  std::string* _internal_mutable_imagepoints();
  public:

  // @@protoc_insertion_point(class_scope:grpcISBPatternReIndexer.reindexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidatecontours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patternpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagepoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcISBPatternReIndexerService_2eproto;
};
// -------------------------------------------------------------------

class reindexResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcISBPatternReIndexer.reindexResponse) */ {
 public:
  inline reindexResponse() : reindexResponse(nullptr) {}
  virtual ~reindexResponse();
  explicit constexpr reindexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reindexResponse(const reindexResponse& from);
  reindexResponse(reindexResponse&& from) noexcept
    : reindexResponse() {
    *this = ::std::move(from);
  }

  inline reindexResponse& operator=(const reindexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline reindexResponse& operator=(reindexResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const reindexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const reindexResponse* internal_default_instance() {
    return reinterpret_cast<const reindexResponse*>(
               &_reindexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(reindexResponse& a, reindexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(reindexResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reindexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline reindexResponse* New() const final {
    return CreateMaybeMessage<reindexResponse>(nullptr);
  }

  reindexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<reindexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const reindexResponse& from);
  void MergeFrom(const reindexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reindexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcISBPatternReIndexer.reindexResponse";
  }
  protected:
  explicit reindexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcISBPatternReIndexerService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternPointsFieldNumber = 1,
    kImagePointsFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes patternPoints = 1;
  void clear_patternpoints();
  const std::string& patternpoints() const;
  void set_patternpoints(const std::string& value);
  void set_patternpoints(std::string&& value);
  void set_patternpoints(const char* value);
  void set_patternpoints(const void* value, size_t size);
  std::string* mutable_patternpoints();
  std::string* release_patternpoints();
  void set_allocated_patternpoints(std::string* patternpoints);
  private:
  const std::string& _internal_patternpoints() const;
  void _internal_set_patternpoints(const std::string& value);
  std::string* _internal_mutable_patternpoints();
  public:

  // bytes imagePoints = 2;
  void clear_imagepoints();
  const std::string& imagepoints() const;
  void set_imagepoints(const std::string& value);
  void set_imagepoints(std::string&& value);
  void set_imagepoints(const char* value);
  void set_imagepoints(const void* value, size_t size);
  std::string* mutable_imagepoints();
  std::string* release_imagepoints();
  void set_allocated_imagepoints(std::string* imagepoints);
  private:
  const std::string& _internal_imagepoints() const;
  void _internal_set_imagepoints(const std::string& value);
  std::string* _internal_mutable_imagepoints();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcISBPatternReIndexer.reindexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patternpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagepoints_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcISBPatternReIndexerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// reindexRequest

// bytes candidateContours = 1;
inline void reindexRequest::clear_candidatecontours() {
  candidatecontours_.ClearToEmpty();
}
inline const std::string& reindexRequest::candidatecontours() const {
  // @@protoc_insertion_point(field_get:grpcISBPatternReIndexer.reindexRequest.candidateContours)
  return _internal_candidatecontours();
}
inline void reindexRequest::set_candidatecontours(const std::string& value) {
  _internal_set_candidatecontours(value);
  // @@protoc_insertion_point(field_set:grpcISBPatternReIndexer.reindexRequest.candidateContours)
}
inline std::string* reindexRequest::mutable_candidatecontours() {
  // @@protoc_insertion_point(field_mutable:grpcISBPatternReIndexer.reindexRequest.candidateContours)
  return _internal_mutable_candidatecontours();
}
inline const std::string& reindexRequest::_internal_candidatecontours() const {
  return candidatecontours_.Get();
}
inline void reindexRequest::_internal_set_candidatecontours(const std::string& value) {
  
  candidatecontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexRequest::set_candidatecontours(std::string&& value) {
  
  candidatecontours_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcISBPatternReIndexer.reindexRequest.candidateContours)
}
inline void reindexRequest::set_candidatecontours(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidatecontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcISBPatternReIndexer.reindexRequest.candidateContours)
}
inline void reindexRequest::set_candidatecontours(const void* value,
    size_t size) {
  
  candidatecontours_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcISBPatternReIndexer.reindexRequest.candidateContours)
}
inline std::string* reindexRequest::_internal_mutable_candidatecontours() {
  
  return candidatecontours_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexRequest::release_candidatecontours() {
  // @@protoc_insertion_point(field_release:grpcISBPatternReIndexer.reindexRequest.candidateContours)
  return candidatecontours_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexRequest::set_allocated_candidatecontours(std::string* candidatecontours) {
  if (candidatecontours != nullptr) {
    
  } else {
    
  }
  candidatecontours_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidatecontours,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcISBPatternReIndexer.reindexRequest.candidateContours)
}

// bytes matches = 2;
inline void reindexRequest::clear_matches() {
  matches_.ClearToEmpty();
}
inline const std::string& reindexRequest::matches() const {
  // @@protoc_insertion_point(field_get:grpcISBPatternReIndexer.reindexRequest.matches)
  return _internal_matches();
}
inline void reindexRequest::set_matches(const std::string& value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:grpcISBPatternReIndexer.reindexRequest.matches)
}
inline std::string* reindexRequest::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:grpcISBPatternReIndexer.reindexRequest.matches)
  return _internal_mutable_matches();
}
inline const std::string& reindexRequest::_internal_matches() const {
  return matches_.Get();
}
inline void reindexRequest::_internal_set_matches(const std::string& value) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexRequest::set_matches(std::string&& value) {
  
  matches_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcISBPatternReIndexer.reindexRequest.matches)
}
inline void reindexRequest::set_matches(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcISBPatternReIndexer.reindexRequest.matches)
}
inline void reindexRequest::set_matches(const void* value,
    size_t size) {
  
  matches_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcISBPatternReIndexer.reindexRequest.matches)
}
inline std::string* reindexRequest::_internal_mutable_matches() {
  
  return matches_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexRequest::release_matches() {
  // @@protoc_insertion_point(field_release:grpcISBPatternReIndexer.reindexRequest.matches)
  return matches_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexRequest::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  matches_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), matches,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcISBPatternReIndexer.reindexRequest.matches)
}

// bytes patternPoints = 3;
inline void reindexRequest::clear_patternpoints() {
  patternpoints_.ClearToEmpty();
}
inline const std::string& reindexRequest::patternpoints() const {
  // @@protoc_insertion_point(field_get:grpcISBPatternReIndexer.reindexRequest.patternPoints)
  return _internal_patternpoints();
}
inline void reindexRequest::set_patternpoints(const std::string& value) {
  _internal_set_patternpoints(value);
  // @@protoc_insertion_point(field_set:grpcISBPatternReIndexer.reindexRequest.patternPoints)
}
inline std::string* reindexRequest::mutable_patternpoints() {
  // @@protoc_insertion_point(field_mutable:grpcISBPatternReIndexer.reindexRequest.patternPoints)
  return _internal_mutable_patternpoints();
}
inline const std::string& reindexRequest::_internal_patternpoints() const {
  return patternpoints_.Get();
}
inline void reindexRequest::_internal_set_patternpoints(const std::string& value) {
  
  patternpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexRequest::set_patternpoints(std::string&& value) {
  
  patternpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcISBPatternReIndexer.reindexRequest.patternPoints)
}
inline void reindexRequest::set_patternpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patternpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcISBPatternReIndexer.reindexRequest.patternPoints)
}
inline void reindexRequest::set_patternpoints(const void* value,
    size_t size) {
  
  patternpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcISBPatternReIndexer.reindexRequest.patternPoints)
}
inline std::string* reindexRequest::_internal_mutable_patternpoints() {
  
  return patternpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexRequest::release_patternpoints() {
  // @@protoc_insertion_point(field_release:grpcISBPatternReIndexer.reindexRequest.patternPoints)
  return patternpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexRequest::set_allocated_patternpoints(std::string* patternpoints) {
  if (patternpoints != nullptr) {
    
  } else {
    
  }
  patternpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patternpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcISBPatternReIndexer.reindexRequest.patternPoints)
}

// bytes imagePoints = 4;
inline void reindexRequest::clear_imagepoints() {
  imagepoints_.ClearToEmpty();
}
inline const std::string& reindexRequest::imagepoints() const {
  // @@protoc_insertion_point(field_get:grpcISBPatternReIndexer.reindexRequest.imagePoints)
  return _internal_imagepoints();
}
inline void reindexRequest::set_imagepoints(const std::string& value) {
  _internal_set_imagepoints(value);
  // @@protoc_insertion_point(field_set:grpcISBPatternReIndexer.reindexRequest.imagePoints)
}
inline std::string* reindexRequest::mutable_imagepoints() {
  // @@protoc_insertion_point(field_mutable:grpcISBPatternReIndexer.reindexRequest.imagePoints)
  return _internal_mutable_imagepoints();
}
inline const std::string& reindexRequest::_internal_imagepoints() const {
  return imagepoints_.Get();
}
inline void reindexRequest::_internal_set_imagepoints(const std::string& value) {
  
  imagepoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexRequest::set_imagepoints(std::string&& value) {
  
  imagepoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcISBPatternReIndexer.reindexRequest.imagePoints)
}
inline void reindexRequest::set_imagepoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagepoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcISBPatternReIndexer.reindexRequest.imagePoints)
}
inline void reindexRequest::set_imagepoints(const void* value,
    size_t size) {
  
  imagepoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcISBPatternReIndexer.reindexRequest.imagePoints)
}
inline std::string* reindexRequest::_internal_mutable_imagepoints() {
  
  return imagepoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexRequest::release_imagepoints() {
  // @@protoc_insertion_point(field_release:grpcISBPatternReIndexer.reindexRequest.imagePoints)
  return imagepoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexRequest::set_allocated_imagepoints(std::string* imagepoints) {
  if (imagepoints != nullptr) {
    
  } else {
    
  }
  imagepoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagepoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcISBPatternReIndexer.reindexRequest.imagePoints)
}

// -------------------------------------------------------------------

// reindexResponse

// bytes patternPoints = 1;
inline void reindexResponse::clear_patternpoints() {
  patternpoints_.ClearToEmpty();
}
inline const std::string& reindexResponse::patternpoints() const {
  // @@protoc_insertion_point(field_get:grpcISBPatternReIndexer.reindexResponse.patternPoints)
  return _internal_patternpoints();
}
inline void reindexResponse::set_patternpoints(const std::string& value) {
  _internal_set_patternpoints(value);
  // @@protoc_insertion_point(field_set:grpcISBPatternReIndexer.reindexResponse.patternPoints)
}
inline std::string* reindexResponse::mutable_patternpoints() {
  // @@protoc_insertion_point(field_mutable:grpcISBPatternReIndexer.reindexResponse.patternPoints)
  return _internal_mutable_patternpoints();
}
inline const std::string& reindexResponse::_internal_patternpoints() const {
  return patternpoints_.Get();
}
inline void reindexResponse::_internal_set_patternpoints(const std::string& value) {
  
  patternpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexResponse::set_patternpoints(std::string&& value) {
  
  patternpoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcISBPatternReIndexer.reindexResponse.patternPoints)
}
inline void reindexResponse::set_patternpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  patternpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcISBPatternReIndexer.reindexResponse.patternPoints)
}
inline void reindexResponse::set_patternpoints(const void* value,
    size_t size) {
  
  patternpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcISBPatternReIndexer.reindexResponse.patternPoints)
}
inline std::string* reindexResponse::_internal_mutable_patternpoints() {
  
  return patternpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexResponse::release_patternpoints() {
  // @@protoc_insertion_point(field_release:grpcISBPatternReIndexer.reindexResponse.patternPoints)
  return patternpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexResponse::set_allocated_patternpoints(std::string* patternpoints) {
  if (patternpoints != nullptr) {
    
  } else {
    
  }
  patternpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patternpoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcISBPatternReIndexer.reindexResponse.patternPoints)
}

// bytes imagePoints = 2;
inline void reindexResponse::clear_imagepoints() {
  imagepoints_.ClearToEmpty();
}
inline const std::string& reindexResponse::imagepoints() const {
  // @@protoc_insertion_point(field_get:grpcISBPatternReIndexer.reindexResponse.imagePoints)
  return _internal_imagepoints();
}
inline void reindexResponse::set_imagepoints(const std::string& value) {
  _internal_set_imagepoints(value);
  // @@protoc_insertion_point(field_set:grpcISBPatternReIndexer.reindexResponse.imagePoints)
}
inline std::string* reindexResponse::mutable_imagepoints() {
  // @@protoc_insertion_point(field_mutable:grpcISBPatternReIndexer.reindexResponse.imagePoints)
  return _internal_mutable_imagepoints();
}
inline const std::string& reindexResponse::_internal_imagepoints() const {
  return imagepoints_.Get();
}
inline void reindexResponse::_internal_set_imagepoints(const std::string& value) {
  
  imagepoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void reindexResponse::set_imagepoints(std::string&& value) {
  
  imagepoints_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcISBPatternReIndexer.reindexResponse.imagePoints)
}
inline void reindexResponse::set_imagepoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imagepoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcISBPatternReIndexer.reindexResponse.imagePoints)
}
inline void reindexResponse::set_imagepoints(const void* value,
    size_t size) {
  
  imagepoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcISBPatternReIndexer.reindexResponse.imagePoints)
}
inline std::string* reindexResponse::_internal_mutable_imagepoints() {
  
  return imagepoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* reindexResponse::release_imagepoints() {
  // @@protoc_insertion_point(field_release:grpcISBPatternReIndexer.reindexResponse.imagePoints)
  return imagepoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reindexResponse::set_allocated_imagepoints(std::string* imagepoints) {
  if (imagepoints != nullptr) {
    
  } else {
    
  }
  imagepoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagepoints,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcISBPatternReIndexer.reindexResponse.imagePoints)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void reindexResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 reindexResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 reindexResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcISBPatternReIndexer.reindexResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void reindexResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void reindexResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcISBPatternReIndexer.reindexResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcISBPatternReIndexer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcISBPatternReIndexerService_2eproto
