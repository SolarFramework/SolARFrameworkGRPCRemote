// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIImageConvertorService.proto

#include "grpcIImageConvertorService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIImageConvertor {
PROTOBUF_CONSTEXPR convert_grpc0Request::convert_grpc0Request(
    ::_pbi::ConstantInitialized)
  : imgsrc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , imgdst_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct convert_grpc0RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR convert_grpc0RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~convert_grpc0RequestDefaultTypeInternal() {}
  union {
    convert_grpc0Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 convert_grpc0RequestDefaultTypeInternal _convert_grpc0Request_default_instance_;
PROTOBUF_CONSTEXPR convert_grpc0Response::convert_grpc0Response(
    ::_pbi::ConstantInitialized)
  : imgdst_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct convert_grpc0ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR convert_grpc0ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~convert_grpc0ResponseDefaultTypeInternal() {}
  union {
    convert_grpc0Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 convert_grpc0ResponseDefaultTypeInternal _convert_grpc0Response_default_instance_;
PROTOBUF_CONSTEXPR convert_grpc1Request::convert_grpc1Request(
    ::_pbi::ConstantInitialized)
  : imgsrc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , imgdst_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0)
  , destlayout_(0){}
struct convert_grpc1RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR convert_grpc1RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~convert_grpc1RequestDefaultTypeInternal() {}
  union {
    convert_grpc1Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 convert_grpc1RequestDefaultTypeInternal _convert_grpc1Request_default_instance_;
PROTOBUF_CONSTEXPR convert_grpc1Response::convert_grpc1Response(
    ::_pbi::ConstantInitialized)
  : imgdst_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct convert_grpc1ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR convert_grpc1ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~convert_grpc1ResponseDefaultTypeInternal() {}
  union {
    convert_grpc1Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 convert_grpc1ResponseDefaultTypeInternal _convert_grpc1Response_default_instance_;
PROTOBUF_CONSTEXPR convertLookUpTableRequest::convertLookUpTableRequest(
    ::_pbi::ConstantInitialized)
  : imgsrc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , imgdst_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct convertLookUpTableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR convertLookUpTableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~convertLookUpTableRequestDefaultTypeInternal() {}
  union {
    convertLookUpTableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 convertLookUpTableRequestDefaultTypeInternal _convertLookUpTableRequest_default_instance_;
PROTOBUF_CONSTEXPR convertLookUpTableResponse::convertLookUpTableResponse(
    ::_pbi::ConstantInitialized)
  : imgdst_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct convertLookUpTableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR convertLookUpTableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~convertLookUpTableResponseDefaultTypeInternal() {}
  union {
    convertLookUpTableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 convertLookUpTableResponseDefaultTypeInternal _convertLookUpTableResponse_default_instance_;
}  // namespace grpcIImageConvertor
static ::_pb::Metadata file_level_metadata_grpcIImageConvertorService_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIImageConvertorService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIImageConvertorService_2eproto = nullptr;

const uint32_t TableStruct_grpcIImageConvertorService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc0Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc0Request, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc0Request, imgsrc_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc0Request, imgdst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc0Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc0Response, imgdst_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc0Response, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc1Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc1Request, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc1Request, imgsrc_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc1Request, destlayout_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc1Request, imgdst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc1Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc1Response, imgdst_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convert_grpc1Response, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convertLookUpTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convertLookUpTableRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convertLookUpTableRequest, imgsrc_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convertLookUpTableRequest, imgdst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convertLookUpTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convertLookUpTableResponse, imgdst_),
  PROTOBUF_FIELD_OFFSET(::grpcIImageConvertor::convertLookUpTableResponse, xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIImageConvertor::convert_grpc0Request)},
  { 9, -1, -1, sizeof(::grpcIImageConvertor::convert_grpc0Response)},
  { 17, -1, -1, sizeof(::grpcIImageConvertor::convert_grpc1Request)},
  { 27, -1, -1, sizeof(::grpcIImageConvertor::convert_grpc1Response)},
  { 35, -1, -1, sizeof(::grpcIImageConvertor::convertLookUpTableRequest)},
  { 44, -1, -1, sizeof(::grpcIImageConvertor::convertLookUpTableResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIImageConvertor::_convert_grpc0Request_default_instance_._instance,
  &::grpcIImageConvertor::_convert_grpc0Response_default_instance_._instance,
  &::grpcIImageConvertor::_convert_grpc1Request_default_instance_._instance,
  &::grpcIImageConvertor::_convert_grpc1Response_default_instance_._instance,
  &::grpcIImageConvertor::_convertLookUpTableRequest_default_instance_._instance,
  &::grpcIImageConvertor::_convertLookUpTableResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIImageConvertorService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n grpcIImageConvertorService.proto\022\023grpc"
  "IImageConvertor\032\033google/protobuf/empty.p"
  "roto\"[\n\024convert_grpc0Request\022#\n\033grpcServ"
  "erCompressionFormat\030\001 \001(\005\022\016\n\006imgSrc\030\002 \001("
  "\014\022\016\n\006imgDst\030\003 \001(\014\"D\n\025convert_grpc0Respon"
  "se\022\016\n\006imgDst\030\001 \001(\014\022\033\n\023xpcfGrpcReturnValu"
  "e\030\002 \001(\021\"o\n\024convert_grpc1Request\022#\n\033grpcS"
  "erverCompressionFormat\030\001 \001(\005\022\016\n\006imgSrc\030\002"
  " \001(\014\022\022\n\ndestLayout\030\003 \001(\021\022\016\n\006imgDst\030\004 \001(\014"
  "\"D\n\025convert_grpc1Response\022\016\n\006imgDst\030\001 \001("
  "\014\022\033\n\023xpcfGrpcReturnValue\030\002 \001(\021\"`\n\031conver"
  "tLookUpTableRequest\022#\n\033grpcServerCompres"
  "sionFormat\030\001 \001(\005\022\016\n\006imgSrc\030\002 \001(\014\022\016\n\006imgD"
  "st\030\003 \001(\014\"I\n\032convertLookUpTableResponse\022\016"
  "\n\006imgDst\030\001 \001(\014\022\033\n\023xpcfGrpcReturnValue\030\002 "
  "\001(\0212\351\002\n\032grpcIImageConvertorService\022h\n\rco"
  "nvert_grpc0\022).grpcIImageConvertor.conver"
  "t_grpc0Request\032*.grpcIImageConvertor.con"
  "vert_grpc0Response\"\000\022h\n\rconvert_grpc1\022)."
  "grpcIImageConvertor.convert_grpc1Request"
  "\032*.grpcIImageConvertor.convert_grpc1Resp"
  "onse\"\000\022w\n\022convertLookUpTable\022..grpcIImag"
  "eConvertor.convertLookUpTableRequest\032/.g"
  "rpcIImageConvertor.convertLookUpTableRes"
  "ponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIImageConvertorService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIImageConvertorService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIImageConvertorService_2eproto = {
    false, false, 975, descriptor_table_protodef_grpcIImageConvertorService_2eproto,
    "grpcIImageConvertorService.proto",
    &descriptor_table_grpcIImageConvertorService_2eproto_once, descriptor_table_grpcIImageConvertorService_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_grpcIImageConvertorService_2eproto::offsets,
    file_level_metadata_grpcIImageConvertorService_2eproto, file_level_enum_descriptors_grpcIImageConvertorService_2eproto,
    file_level_service_descriptors_grpcIImageConvertorService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIImageConvertorService_2eproto_getter() {
  return &descriptor_table_grpcIImageConvertorService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIImageConvertorService_2eproto(&descriptor_table_grpcIImageConvertorService_2eproto);
namespace grpcIImageConvertor {

// ===================================================================

class convert_grpc0Request::_Internal {
 public:
};

convert_grpc0Request::convert_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageConvertor.convert_grpc0Request)
}
convert_grpc0Request::convert_grpc0Request(const convert_grpc0Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imgsrc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imgsrc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imgsrc().empty()) {
    imgsrc_.Set(from._internal_imgsrc(), 
      GetArenaForAllocation());
  }
  imgdst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imgdst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imgdst().empty()) {
    imgdst_.Set(from._internal_imgdst(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageConvertor.convert_grpc0Request)
}

inline void convert_grpc0Request::SharedCtor() {
imgsrc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imgsrc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
imgdst_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imgdst_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

convert_grpc0Request::~convert_grpc0Request() {
  // @@protoc_insertion_point(destructor:grpcIImageConvertor.convert_grpc0Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void convert_grpc0Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imgsrc_.Destroy();
  imgdst_.Destroy();
}

void convert_grpc0Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void convert_grpc0Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageConvertor.convert_grpc0Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgsrc_.ClearToEmpty();
  imgdst_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* convert_grpc0Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes imgSrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_imgsrc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes imgDst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_imgdst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* convert_grpc0Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageConvertor.convert_grpc0Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes imgSrc = 2;
  if (!this->_internal_imgsrc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_imgsrc(), target);
  }

  // bytes imgDst = 3;
  if (!this->_internal_imgdst().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_imgdst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageConvertor.convert_grpc0Request)
  return target;
}

size_t convert_grpc0Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageConvertor.convert_grpc0Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes imgSrc = 2;
  if (!this->_internal_imgsrc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgsrc());
  }

  // bytes imgDst = 3;
  if (!this->_internal_imgdst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgdst());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData convert_grpc0Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    convert_grpc0Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*convert_grpc0Request::GetClassData() const { return &_class_data_; }

void convert_grpc0Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<convert_grpc0Request *>(to)->MergeFrom(
      static_cast<const convert_grpc0Request &>(from));
}


void convert_grpc0Request::MergeFrom(const convert_grpc0Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageConvertor.convert_grpc0Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imgsrc().empty()) {
    _internal_set_imgsrc(from._internal_imgsrc());
  }
  if (!from._internal_imgdst().empty()) {
    _internal_set_imgdst(from._internal_imgdst());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void convert_grpc0Request::CopyFrom(const convert_grpc0Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageConvertor.convert_grpc0Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool convert_grpc0Request::IsInitialized() const {
  return true;
}

void convert_grpc0Request::InternalSwap(convert_grpc0Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imgsrc_, lhs_arena,
      &other->imgsrc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imgdst_, lhs_arena,
      &other->imgdst_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata convert_grpc0Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageConvertorService_2eproto_getter, &descriptor_table_grpcIImageConvertorService_2eproto_once,
      file_level_metadata_grpcIImageConvertorService_2eproto[0]);
}

// ===================================================================

class convert_grpc0Response::_Internal {
 public:
};

convert_grpc0Response::convert_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageConvertor.convert_grpc0Response)
}
convert_grpc0Response::convert_grpc0Response(const convert_grpc0Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imgdst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imgdst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imgdst().empty()) {
    imgdst_.Set(from._internal_imgdst(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageConvertor.convert_grpc0Response)
}

inline void convert_grpc0Response::SharedCtor() {
imgdst_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imgdst_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

convert_grpc0Response::~convert_grpc0Response() {
  // @@protoc_insertion_point(destructor:grpcIImageConvertor.convert_grpc0Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void convert_grpc0Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imgdst_.Destroy();
}

void convert_grpc0Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void convert_grpc0Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageConvertor.convert_grpc0Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgdst_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* convert_grpc0Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes imgDst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_imgdst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* convert_grpc0Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageConvertor.convert_grpc0Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes imgDst = 1;
  if (!this->_internal_imgdst().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_imgdst(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageConvertor.convert_grpc0Response)
  return target;
}

size_t convert_grpc0Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageConvertor.convert_grpc0Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes imgDst = 1;
  if (!this->_internal_imgdst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgdst());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData convert_grpc0Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    convert_grpc0Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*convert_grpc0Response::GetClassData() const { return &_class_data_; }

void convert_grpc0Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<convert_grpc0Response *>(to)->MergeFrom(
      static_cast<const convert_grpc0Response &>(from));
}


void convert_grpc0Response::MergeFrom(const convert_grpc0Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageConvertor.convert_grpc0Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imgdst().empty()) {
    _internal_set_imgdst(from._internal_imgdst());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void convert_grpc0Response::CopyFrom(const convert_grpc0Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageConvertor.convert_grpc0Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool convert_grpc0Response::IsInitialized() const {
  return true;
}

void convert_grpc0Response::InternalSwap(convert_grpc0Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imgdst_, lhs_arena,
      &other->imgdst_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata convert_grpc0Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageConvertorService_2eproto_getter, &descriptor_table_grpcIImageConvertorService_2eproto_once,
      file_level_metadata_grpcIImageConvertorService_2eproto[1]);
}

// ===================================================================

class convert_grpc1Request::_Internal {
 public:
};

convert_grpc1Request::convert_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageConvertor.convert_grpc1Request)
}
convert_grpc1Request::convert_grpc1Request(const convert_grpc1Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imgsrc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imgsrc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imgsrc().empty()) {
    imgsrc_.Set(from._internal_imgsrc(), 
      GetArenaForAllocation());
  }
  imgdst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imgdst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imgdst().empty()) {
    imgdst_.Set(from._internal_imgdst(), 
      GetArenaForAllocation());
  }
  ::memcpy(&grpcservercompressionformat_, &from.grpcservercompressionformat_,
    static_cast<size_t>(reinterpret_cast<char*>(&destlayout_) -
    reinterpret_cast<char*>(&grpcservercompressionformat_)) + sizeof(destlayout_));
  // @@protoc_insertion_point(copy_constructor:grpcIImageConvertor.convert_grpc1Request)
}

inline void convert_grpc1Request::SharedCtor() {
imgsrc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imgsrc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
imgdst_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imgdst_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&grpcservercompressionformat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&destlayout_) -
    reinterpret_cast<char*>(&grpcservercompressionformat_)) + sizeof(destlayout_));
}

convert_grpc1Request::~convert_grpc1Request() {
  // @@protoc_insertion_point(destructor:grpcIImageConvertor.convert_grpc1Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void convert_grpc1Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imgsrc_.Destroy();
  imgdst_.Destroy();
}

void convert_grpc1Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void convert_grpc1Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageConvertor.convert_grpc1Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgsrc_.ClearToEmpty();
  imgdst_.ClearToEmpty();
  ::memset(&grpcservercompressionformat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destlayout_) -
      reinterpret_cast<char*>(&grpcservercompressionformat_)) + sizeof(destlayout_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* convert_grpc1Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes imgSrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_imgsrc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 destLayout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          destlayout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes imgDst = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_imgdst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* convert_grpc1Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageConvertor.convert_grpc1Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes imgSrc = 2;
  if (!this->_internal_imgsrc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_imgsrc(), target);
  }

  // sint32 destLayout = 3;
  if (this->_internal_destlayout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_destlayout(), target);
  }

  // bytes imgDst = 4;
  if (!this->_internal_imgdst().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_imgdst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageConvertor.convert_grpc1Request)
  return target;
}

size_t convert_grpc1Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageConvertor.convert_grpc1Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes imgSrc = 2;
  if (!this->_internal_imgsrc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgsrc());
  }

  // bytes imgDst = 4;
  if (!this->_internal_imgdst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgdst());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  // sint32 destLayout = 3;
  if (this->_internal_destlayout() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_destlayout());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData convert_grpc1Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    convert_grpc1Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*convert_grpc1Request::GetClassData() const { return &_class_data_; }

void convert_grpc1Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<convert_grpc1Request *>(to)->MergeFrom(
      static_cast<const convert_grpc1Request &>(from));
}


void convert_grpc1Request::MergeFrom(const convert_grpc1Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageConvertor.convert_grpc1Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imgsrc().empty()) {
    _internal_set_imgsrc(from._internal_imgsrc());
  }
  if (!from._internal_imgdst().empty()) {
    _internal_set_imgdst(from._internal_imgdst());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  if (from._internal_destlayout() != 0) {
    _internal_set_destlayout(from._internal_destlayout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void convert_grpc1Request::CopyFrom(const convert_grpc1Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageConvertor.convert_grpc1Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool convert_grpc1Request::IsInitialized() const {
  return true;
}

void convert_grpc1Request::InternalSwap(convert_grpc1Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imgsrc_, lhs_arena,
      &other->imgsrc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imgdst_, lhs_arena,
      &other->imgdst_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(convert_grpc1Request, destlayout_)
      + sizeof(convert_grpc1Request::destlayout_)
      - PROTOBUF_FIELD_OFFSET(convert_grpc1Request, grpcservercompressionformat_)>(
          reinterpret_cast<char*>(&grpcservercompressionformat_),
          reinterpret_cast<char*>(&other->grpcservercompressionformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata convert_grpc1Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageConvertorService_2eproto_getter, &descriptor_table_grpcIImageConvertorService_2eproto_once,
      file_level_metadata_grpcIImageConvertorService_2eproto[2]);
}

// ===================================================================

class convert_grpc1Response::_Internal {
 public:
};

convert_grpc1Response::convert_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageConvertor.convert_grpc1Response)
}
convert_grpc1Response::convert_grpc1Response(const convert_grpc1Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imgdst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imgdst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imgdst().empty()) {
    imgdst_.Set(from._internal_imgdst(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageConvertor.convert_grpc1Response)
}

inline void convert_grpc1Response::SharedCtor() {
imgdst_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imgdst_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

convert_grpc1Response::~convert_grpc1Response() {
  // @@protoc_insertion_point(destructor:grpcIImageConvertor.convert_grpc1Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void convert_grpc1Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imgdst_.Destroy();
}

void convert_grpc1Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void convert_grpc1Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageConvertor.convert_grpc1Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgdst_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* convert_grpc1Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes imgDst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_imgdst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* convert_grpc1Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageConvertor.convert_grpc1Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes imgDst = 1;
  if (!this->_internal_imgdst().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_imgdst(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageConvertor.convert_grpc1Response)
  return target;
}

size_t convert_grpc1Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageConvertor.convert_grpc1Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes imgDst = 1;
  if (!this->_internal_imgdst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgdst());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData convert_grpc1Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    convert_grpc1Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*convert_grpc1Response::GetClassData() const { return &_class_data_; }

void convert_grpc1Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<convert_grpc1Response *>(to)->MergeFrom(
      static_cast<const convert_grpc1Response &>(from));
}


void convert_grpc1Response::MergeFrom(const convert_grpc1Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageConvertor.convert_grpc1Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imgdst().empty()) {
    _internal_set_imgdst(from._internal_imgdst());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void convert_grpc1Response::CopyFrom(const convert_grpc1Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageConvertor.convert_grpc1Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool convert_grpc1Response::IsInitialized() const {
  return true;
}

void convert_grpc1Response::InternalSwap(convert_grpc1Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imgdst_, lhs_arena,
      &other->imgdst_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata convert_grpc1Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageConvertorService_2eproto_getter, &descriptor_table_grpcIImageConvertorService_2eproto_once,
      file_level_metadata_grpcIImageConvertorService_2eproto[3]);
}

// ===================================================================

class convertLookUpTableRequest::_Internal {
 public:
};

convertLookUpTableRequest::convertLookUpTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageConvertor.convertLookUpTableRequest)
}
convertLookUpTableRequest::convertLookUpTableRequest(const convertLookUpTableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imgsrc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imgsrc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imgsrc().empty()) {
    imgsrc_.Set(from._internal_imgsrc(), 
      GetArenaForAllocation());
  }
  imgdst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imgdst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imgdst().empty()) {
    imgdst_.Set(from._internal_imgdst(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageConvertor.convertLookUpTableRequest)
}

inline void convertLookUpTableRequest::SharedCtor() {
imgsrc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imgsrc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
imgdst_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imgdst_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

convertLookUpTableRequest::~convertLookUpTableRequest() {
  // @@protoc_insertion_point(destructor:grpcIImageConvertor.convertLookUpTableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void convertLookUpTableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imgsrc_.Destroy();
  imgdst_.Destroy();
}

void convertLookUpTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void convertLookUpTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageConvertor.convertLookUpTableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgsrc_.ClearToEmpty();
  imgdst_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* convertLookUpTableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes imgSrc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_imgsrc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes imgDst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_imgdst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* convertLookUpTableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageConvertor.convertLookUpTableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes imgSrc = 2;
  if (!this->_internal_imgsrc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_imgsrc(), target);
  }

  // bytes imgDst = 3;
  if (!this->_internal_imgdst().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_imgdst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageConvertor.convertLookUpTableRequest)
  return target;
}

size_t convertLookUpTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageConvertor.convertLookUpTableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes imgSrc = 2;
  if (!this->_internal_imgsrc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgsrc());
  }

  // bytes imgDst = 3;
  if (!this->_internal_imgdst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgdst());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData convertLookUpTableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    convertLookUpTableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*convertLookUpTableRequest::GetClassData() const { return &_class_data_; }

void convertLookUpTableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<convertLookUpTableRequest *>(to)->MergeFrom(
      static_cast<const convertLookUpTableRequest &>(from));
}


void convertLookUpTableRequest::MergeFrom(const convertLookUpTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageConvertor.convertLookUpTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imgsrc().empty()) {
    _internal_set_imgsrc(from._internal_imgsrc());
  }
  if (!from._internal_imgdst().empty()) {
    _internal_set_imgdst(from._internal_imgdst());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void convertLookUpTableRequest::CopyFrom(const convertLookUpTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageConvertor.convertLookUpTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool convertLookUpTableRequest::IsInitialized() const {
  return true;
}

void convertLookUpTableRequest::InternalSwap(convertLookUpTableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imgsrc_, lhs_arena,
      &other->imgsrc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imgdst_, lhs_arena,
      &other->imgdst_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata convertLookUpTableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageConvertorService_2eproto_getter, &descriptor_table_grpcIImageConvertorService_2eproto_once,
      file_level_metadata_grpcIImageConvertorService_2eproto[4]);
}

// ===================================================================

class convertLookUpTableResponse::_Internal {
 public:
};

convertLookUpTableResponse::convertLookUpTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIImageConvertor.convertLookUpTableResponse)
}
convertLookUpTableResponse::convertLookUpTableResponse(const convertLookUpTableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imgdst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imgdst_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imgdst().empty()) {
    imgdst_.Set(from._internal_imgdst(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIImageConvertor.convertLookUpTableResponse)
}

inline void convertLookUpTableResponse::SharedCtor() {
imgdst_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imgdst_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

convertLookUpTableResponse::~convertLookUpTableResponse() {
  // @@protoc_insertion_point(destructor:grpcIImageConvertor.convertLookUpTableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void convertLookUpTableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  imgdst_.Destroy();
}

void convertLookUpTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void convertLookUpTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIImageConvertor.convertLookUpTableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgdst_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* convertLookUpTableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes imgDst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_imgdst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* convertLookUpTableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIImageConvertor.convertLookUpTableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes imgDst = 1;
  if (!this->_internal_imgdst().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_imgdst(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIImageConvertor.convertLookUpTableResponse)
  return target;
}

size_t convertLookUpTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIImageConvertor.convertLookUpTableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes imgDst = 1;
  if (!this->_internal_imgdst().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgdst());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData convertLookUpTableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    convertLookUpTableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*convertLookUpTableResponse::GetClassData() const { return &_class_data_; }

void convertLookUpTableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<convertLookUpTableResponse *>(to)->MergeFrom(
      static_cast<const convertLookUpTableResponse &>(from));
}


void convertLookUpTableResponse::MergeFrom(const convertLookUpTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIImageConvertor.convertLookUpTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_imgdst().empty()) {
    _internal_set_imgdst(from._internal_imgdst());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void convertLookUpTableResponse::CopyFrom(const convertLookUpTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIImageConvertor.convertLookUpTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool convertLookUpTableResponse::IsInitialized() const {
  return true;
}

void convertLookUpTableResponse::InternalSwap(convertLookUpTableResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imgdst_, lhs_arena,
      &other->imgdst_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata convertLookUpTableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIImageConvertorService_2eproto_getter, &descriptor_table_grpcIImageConvertorService_2eproto_once,
      file_level_metadata_grpcIImageConvertorService_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIImageConvertor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIImageConvertor::convert_grpc0Request*
Arena::CreateMaybeMessage< ::grpcIImageConvertor::convert_grpc0Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageConvertor::convert_grpc0Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageConvertor::convert_grpc0Response*
Arena::CreateMaybeMessage< ::grpcIImageConvertor::convert_grpc0Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageConvertor::convert_grpc0Response >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageConvertor::convert_grpc1Request*
Arena::CreateMaybeMessage< ::grpcIImageConvertor::convert_grpc1Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageConvertor::convert_grpc1Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageConvertor::convert_grpc1Response*
Arena::CreateMaybeMessage< ::grpcIImageConvertor::convert_grpc1Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageConvertor::convert_grpc1Response >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageConvertor::convertLookUpTableRequest*
Arena::CreateMaybeMessage< ::grpcIImageConvertor::convertLookUpTableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageConvertor::convertLookUpTableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIImageConvertor::convertLookUpTableResponse*
Arena::CreateMaybeMessage< ::grpcIImageConvertor::convertLookUpTableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIImageConvertor::convertLookUpTableResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
