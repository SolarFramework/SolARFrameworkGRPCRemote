// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIBundlerService.proto

#include "grpcIBundlerService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcIBundler {
PROTOBUF_CONSTEXPR setMapRequest::setMapRequest(
    ::_pbi::ConstantInitialized)
  : map_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct setMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setMapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setMapRequestDefaultTypeInternal() {}
  union {
    setMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setMapRequestDefaultTypeInternal _setMapRequest_default_instance_;
PROTOBUF_CONSTEXPR setMapResponse::setMapResponse(
    ::_pbi::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct setMapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setMapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setMapResponseDefaultTypeInternal() {}
  union {
    setMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setMapResponseDefaultTypeInternal _setMapResponse_default_instance_;
PROTOBUF_CONSTEXPR bundleAdjustmentRequest::bundleAdjustmentRequest(
    ::_pbi::ConstantInitialized)
  : selectkeyframes_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct bundleAdjustmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR bundleAdjustmentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~bundleAdjustmentRequestDefaultTypeInternal() {}
  union {
    bundleAdjustmentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 bundleAdjustmentRequestDefaultTypeInternal _bundleAdjustmentRequest_default_instance_;
PROTOBUF_CONSTEXPR bundleAdjustmentResponse::bundleAdjustmentResponse(
    ::_pbi::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct bundleAdjustmentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR bundleAdjustmentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~bundleAdjustmentResponseDefaultTypeInternal() {}
  union {
    bundleAdjustmentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 bundleAdjustmentResponseDefaultTypeInternal _bundleAdjustmentResponse_default_instance_;
PROTOBUF_CONSTEXPR optimizeSim3Request::optimizeSim3Request(
    ::_pbi::ConstantInitialized)
  : keyframe1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , keyframe2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , matches_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pts3d1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pts3d2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pose_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct optimizeSim3RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR optimizeSim3RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~optimizeSim3RequestDefaultTypeInternal() {}
  union {
    optimizeSim3Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 optimizeSim3RequestDefaultTypeInternal _optimizeSim3Request_default_instance_;
PROTOBUF_CONSTEXPR optimizeSim3Response::optimizeSim3Response(
    ::_pbi::ConstantInitialized)
  : pose_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct optimizeSim3ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR optimizeSim3ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~optimizeSim3ResponseDefaultTypeInternal() {}
  union {
    optimizeSim3Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 optimizeSim3ResponseDefaultTypeInternal _optimizeSim3Response_default_instance_;
}  // namespace grpcIBundler
static ::_pb::Metadata file_level_metadata_grpcIBundlerService_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcIBundlerService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcIBundlerService_2eproto = nullptr;

const uint32_t TableStruct_grpcIBundlerService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::setMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::setMapRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::setMapRequest, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::setMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::setMapResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::bundleAdjustmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::bundleAdjustmentRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::bundleAdjustmentRequest, selectkeyframes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::bundleAdjustmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::bundleAdjustmentResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Request, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Request, keyframe1_),
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Request, keyframe2_),
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Request, matches_),
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Request, pts3d1_),
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Request, pts3d2_),
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Request, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Response, pose_),
  PROTOBUF_FIELD_OFFSET(::grpcIBundler::optimizeSim3Response, xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcIBundler::setMapRequest)},
  { 8, -1, -1, sizeof(::grpcIBundler::setMapResponse)},
  { 15, -1, -1, sizeof(::grpcIBundler::bundleAdjustmentRequest)},
  { 23, -1, -1, sizeof(::grpcIBundler::bundleAdjustmentResponse)},
  { 30, -1, -1, sizeof(::grpcIBundler::optimizeSim3Request)},
  { 43, -1, -1, sizeof(::grpcIBundler::optimizeSim3Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcIBundler::_setMapRequest_default_instance_._instance,
  &::grpcIBundler::_setMapResponse_default_instance_._instance,
  &::grpcIBundler::_bundleAdjustmentRequest_default_instance_._instance,
  &::grpcIBundler::_bundleAdjustmentResponse_default_instance_._instance,
  &::grpcIBundler::_optimizeSim3Request_default_instance_._instance,
  &::grpcIBundler::_optimizeSim3Response_default_instance_._instance,
};

const char descriptor_table_protodef_grpcIBundlerService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031grpcIBundlerService.proto\022\014grpcIBundle"
  "r\032\033google/protobuf/empty.proto\"A\n\rsetMap"
  "Request\022#\n\033grpcServerCompressionFormat\030\001"
  " \001(\005\022\013\n\003map\030\002 \001(\014\"-\n\016setMapResponse\022\033\n\023x"
  "pcfGrpcReturnValue\030\001 \001(\021\"W\n\027bundleAdjust"
  "mentRequest\022#\n\033grpcServerCompressionForm"
  "at\030\001 \001(\005\022\027\n\017selectKeyframes\030\002 \001(\014\"7\n\030bun"
  "dleAdjustmentResponse\022\033\n\023xpcfGrpcReturnV"
  "alue\030\001 \001(\001\"\237\001\n\023optimizeSim3Request\022#\n\033gr"
  "pcServerCompressionFormat\030\001 \001(\005\022\021\n\tkeyfr"
  "ame1\030\002 \001(\014\022\021\n\tkeyframe2\030\003 \001(\014\022\017\n\007matches"
  "\030\004 \001(\014\022\016\n\006pts3D1\030\005 \001(\014\022\016\n\006pts3D2\030\006 \001(\014\022\014"
  "\n\004pose\030\007 \001(\014\"A\n\024optimizeSim3Response\022\014\n\004"
  "pose\030\001 \001(\014\022\033\n\023xpcfGrpcReturnValue\030\002 \001(\0012"
  "\232\002\n\023grpcIBundlerService\022E\n\006setMap\022\033.grpc"
  "IBundler.setMapRequest\032\034.grpcIBundler.se"
  "tMapResponse\"\000\022c\n\020bundleAdjustment\022%.grp"
  "cIBundler.bundleAdjustmentRequest\032&.grpc"
  "IBundler.bundleAdjustmentResponse\"\000\022W\n\014o"
  "ptimizeSim3\022!.grpcIBundler.optimizeSim3R"
  "equest\032\".grpcIBundler.optimizeSim3Respon"
  "se\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcIBundlerService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcIBundlerService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcIBundlerService_2eproto = {
    false, false, 852, descriptor_table_protodef_grpcIBundlerService_2eproto,
    "grpcIBundlerService.proto",
    &descriptor_table_grpcIBundlerService_2eproto_once, descriptor_table_grpcIBundlerService_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_grpcIBundlerService_2eproto::offsets,
    file_level_metadata_grpcIBundlerService_2eproto, file_level_enum_descriptors_grpcIBundlerService_2eproto,
    file_level_service_descriptors_grpcIBundlerService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcIBundlerService_2eproto_getter() {
  return &descriptor_table_grpcIBundlerService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcIBundlerService_2eproto(&descriptor_table_grpcIBundlerService_2eproto);
namespace grpcIBundler {

// ===================================================================

class setMapRequest::_Internal {
 public:
};

setMapRequest::setMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIBundler.setMapRequest)
}
setMapRequest::setMapRequest(const setMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map().empty()) {
    map_.Set(from._internal_map(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIBundler.setMapRequest)
}

inline void setMapRequest::SharedCtor() {
map_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

setMapRequest::~setMapRequest() {
  // @@protoc_insertion_point(destructor:grpcIBundler.setMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_.Destroy();
}

void setMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIBundler.setMapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_map();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setMapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIBundler.setMapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes map = 2;
  if (!this->_internal_map().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIBundler.setMapRequest)
  return target;
}

size_t setMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIBundler.setMapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes map = 2;
  if (!this->_internal_map().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_map());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    setMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setMapRequest::GetClassData() const { return &_class_data_; }

void setMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<setMapRequest *>(to)->MergeFrom(
      static_cast<const setMapRequest &>(from));
}


void setMapRequest::MergeFrom(const setMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIBundler.setMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map().empty()) {
    _internal_set_map(from._internal_map());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setMapRequest::CopyFrom(const setMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIBundler.setMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setMapRequest::IsInitialized() const {
  return true;
}

void setMapRequest::InternalSwap(setMapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &map_, lhs_arena,
      &other->map_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIBundlerService_2eproto_getter, &descriptor_table_grpcIBundlerService_2eproto_once,
      file_level_metadata_grpcIBundlerService_2eproto[0]);
}

// ===================================================================

class setMapResponse::_Internal {
 public:
};

setMapResponse::setMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIBundler.setMapResponse)
}
setMapResponse::setMapResponse(const setMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIBundler.setMapResponse)
}

inline void setMapResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

setMapResponse::~setMapResponse() {
  // @@protoc_insertion_point(destructor:grpcIBundler.setMapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void setMapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIBundler.setMapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setMapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setMapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIBundler.setMapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIBundler.setMapResponse)
  return target;
}

size_t setMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIBundler.setMapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setMapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    setMapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setMapResponse::GetClassData() const { return &_class_data_; }

void setMapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<setMapResponse *>(to)->MergeFrom(
      static_cast<const setMapResponse &>(from));
}


void setMapResponse::MergeFrom(const setMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIBundler.setMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setMapResponse::CopyFrom(const setMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIBundler.setMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setMapResponse::IsInitialized() const {
  return true;
}

void setMapResponse::InternalSwap(setMapResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setMapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIBundlerService_2eproto_getter, &descriptor_table_grpcIBundlerService_2eproto_once,
      file_level_metadata_grpcIBundlerService_2eproto[1]);
}

// ===================================================================

class bundleAdjustmentRequest::_Internal {
 public:
};

bundleAdjustmentRequest::bundleAdjustmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIBundler.bundleAdjustmentRequest)
}
bundleAdjustmentRequest::bundleAdjustmentRequest(const bundleAdjustmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  selectkeyframes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    selectkeyframes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_selectkeyframes().empty()) {
    selectkeyframes_.Set(from._internal_selectkeyframes(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIBundler.bundleAdjustmentRequest)
}

inline void bundleAdjustmentRequest::SharedCtor() {
selectkeyframes_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  selectkeyframes_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

bundleAdjustmentRequest::~bundleAdjustmentRequest() {
  // @@protoc_insertion_point(destructor:grpcIBundler.bundleAdjustmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void bundleAdjustmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  selectkeyframes_.Destroy();
}

void bundleAdjustmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void bundleAdjustmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIBundler.bundleAdjustmentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selectkeyframes_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bundleAdjustmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes selectKeyframes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_selectkeyframes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* bundleAdjustmentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIBundler.bundleAdjustmentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes selectKeyframes = 2;
  if (!this->_internal_selectkeyframes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_selectkeyframes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIBundler.bundleAdjustmentRequest)
  return target;
}

size_t bundleAdjustmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIBundler.bundleAdjustmentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes selectKeyframes = 2;
  if (!this->_internal_selectkeyframes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_selectkeyframes());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData bundleAdjustmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    bundleAdjustmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*bundleAdjustmentRequest::GetClassData() const { return &_class_data_; }

void bundleAdjustmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<bundleAdjustmentRequest *>(to)->MergeFrom(
      static_cast<const bundleAdjustmentRequest &>(from));
}


void bundleAdjustmentRequest::MergeFrom(const bundleAdjustmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIBundler.bundleAdjustmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_selectkeyframes().empty()) {
    _internal_set_selectkeyframes(from._internal_selectkeyframes());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void bundleAdjustmentRequest::CopyFrom(const bundleAdjustmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIBundler.bundleAdjustmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bundleAdjustmentRequest::IsInitialized() const {
  return true;
}

void bundleAdjustmentRequest::InternalSwap(bundleAdjustmentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &selectkeyframes_, lhs_arena,
      &other->selectkeyframes_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bundleAdjustmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIBundlerService_2eproto_getter, &descriptor_table_grpcIBundlerService_2eproto_once,
      file_level_metadata_grpcIBundlerService_2eproto[2]);
}

// ===================================================================

class bundleAdjustmentResponse::_Internal {
 public:
};

bundleAdjustmentResponse::bundleAdjustmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIBundler.bundleAdjustmentResponse)
}
bundleAdjustmentResponse::bundleAdjustmentResponse(const bundleAdjustmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIBundler.bundleAdjustmentResponse)
}

inline void bundleAdjustmentResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

bundleAdjustmentResponse::~bundleAdjustmentResponse() {
  // @@protoc_insertion_point(destructor:grpcIBundler.bundleAdjustmentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void bundleAdjustmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void bundleAdjustmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void bundleAdjustmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIBundler.bundleAdjustmentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bundleAdjustmentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* bundleAdjustmentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIBundler.bundleAdjustmentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double xpcfGrpcReturnValue = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_xpcfgrpcreturnvalue = this->_internal_xpcfgrpcreturnvalue();
  uint64_t raw_xpcfgrpcreturnvalue;
  memcpy(&raw_xpcfgrpcreturnvalue, &tmp_xpcfgrpcreturnvalue, sizeof(tmp_xpcfgrpcreturnvalue));
  if (raw_xpcfgrpcreturnvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIBundler.bundleAdjustmentResponse)
  return target;
}

size_t bundleAdjustmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIBundler.bundleAdjustmentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double xpcfGrpcReturnValue = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_xpcfgrpcreturnvalue = this->_internal_xpcfgrpcreturnvalue();
  uint64_t raw_xpcfgrpcreturnvalue;
  memcpy(&raw_xpcfgrpcreturnvalue, &tmp_xpcfgrpcreturnvalue, sizeof(tmp_xpcfgrpcreturnvalue));
  if (raw_xpcfgrpcreturnvalue != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData bundleAdjustmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    bundleAdjustmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*bundleAdjustmentResponse::GetClassData() const { return &_class_data_; }

void bundleAdjustmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<bundleAdjustmentResponse *>(to)->MergeFrom(
      static_cast<const bundleAdjustmentResponse &>(from));
}


void bundleAdjustmentResponse::MergeFrom(const bundleAdjustmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIBundler.bundleAdjustmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_xpcfgrpcreturnvalue = from._internal_xpcfgrpcreturnvalue();
  uint64_t raw_xpcfgrpcreturnvalue;
  memcpy(&raw_xpcfgrpcreturnvalue, &tmp_xpcfgrpcreturnvalue, sizeof(tmp_xpcfgrpcreturnvalue));
  if (raw_xpcfgrpcreturnvalue != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void bundleAdjustmentResponse::CopyFrom(const bundleAdjustmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIBundler.bundleAdjustmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bundleAdjustmentResponse::IsInitialized() const {
  return true;
}

void bundleAdjustmentResponse::InternalSwap(bundleAdjustmentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bundleAdjustmentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIBundlerService_2eproto_getter, &descriptor_table_grpcIBundlerService_2eproto_once,
      file_level_metadata_grpcIBundlerService_2eproto[3]);
}

// ===================================================================

class optimizeSim3Request::_Internal {
 public:
};

optimizeSim3Request::optimizeSim3Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIBundler.optimizeSim3Request)
}
optimizeSim3Request::optimizeSim3Request(const optimizeSim3Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keyframe1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keyframe1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyframe1().empty()) {
    keyframe1_.Set(from._internal_keyframe1(), 
      GetArenaForAllocation());
  }
  keyframe2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    keyframe2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyframe2().empty()) {
    keyframe2_.Set(from._internal_keyframe2(), 
      GetArenaForAllocation());
  }
  matches_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    matches_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_matches().empty()) {
    matches_.Set(from._internal_matches(), 
      GetArenaForAllocation());
  }
  pts3d1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pts3d1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pts3d1().empty()) {
    pts3d1_.Set(from._internal_pts3d1(), 
      GetArenaForAllocation());
  }
  pts3d2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pts3d2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pts3d2().empty()) {
    pts3d2_.Set(from._internal_pts3d2(), 
      GetArenaForAllocation());
  }
  pose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pose().empty()) {
    pose_.Set(from._internal_pose(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcIBundler.optimizeSim3Request)
}

inline void optimizeSim3Request::SharedCtor() {
keyframe1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keyframe1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
keyframe2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  keyframe2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
matches_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  matches_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pts3d1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pts3d1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pts3d2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pts3d2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pose_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pose_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

optimizeSim3Request::~optimizeSim3Request() {
  // @@protoc_insertion_point(destructor:grpcIBundler.optimizeSim3Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void optimizeSim3Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  keyframe1_.Destroy();
  keyframe2_.Destroy();
  matches_.Destroy();
  pts3d1_.Destroy();
  pts3d2_.Destroy();
  pose_.Destroy();
}

void optimizeSim3Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void optimizeSim3Request::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIBundler.optimizeSim3Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyframe1_.ClearToEmpty();
  keyframe2_.ClearToEmpty();
  matches_.ClearToEmpty();
  pts3d1_.ClearToEmpty();
  pts3d2_.ClearToEmpty();
  pose_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* optimizeSim3Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keyframe1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_keyframe1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keyframe2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_keyframe2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes matches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_matches();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pts3D1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pts3d1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pts3D2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pts3d2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pose = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_pose();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* optimizeSim3Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIBundler.optimizeSim3Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes keyframe1 = 2;
  if (!this->_internal_keyframe1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_keyframe1(), target);
  }

  // bytes keyframe2 = 3;
  if (!this->_internal_keyframe2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_keyframe2(), target);
  }

  // bytes matches = 4;
  if (!this->_internal_matches().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_matches(), target);
  }

  // bytes pts3D1 = 5;
  if (!this->_internal_pts3d1().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_pts3d1(), target);
  }

  // bytes pts3D2 = 6;
  if (!this->_internal_pts3d2().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_pts3d2(), target);
  }

  // bytes pose = 7;
  if (!this->_internal_pose().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_pose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIBundler.optimizeSim3Request)
  return target;
}

size_t optimizeSim3Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIBundler.optimizeSim3Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes keyframe1 = 2;
  if (!this->_internal_keyframe1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keyframe1());
  }

  // bytes keyframe2 = 3;
  if (!this->_internal_keyframe2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keyframe2());
  }

  // bytes matches = 4;
  if (!this->_internal_matches().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_matches());
  }

  // bytes pts3D1 = 5;
  if (!this->_internal_pts3d1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pts3d1());
  }

  // bytes pts3D2 = 6;
  if (!this->_internal_pts3d2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pts3d2());
  }

  // bytes pose = 7;
  if (!this->_internal_pose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pose());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData optimizeSim3Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    optimizeSim3Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*optimizeSim3Request::GetClassData() const { return &_class_data_; }

void optimizeSim3Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<optimizeSim3Request *>(to)->MergeFrom(
      static_cast<const optimizeSim3Request &>(from));
}


void optimizeSim3Request::MergeFrom(const optimizeSim3Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIBundler.optimizeSim3Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_keyframe1().empty()) {
    _internal_set_keyframe1(from._internal_keyframe1());
  }
  if (!from._internal_keyframe2().empty()) {
    _internal_set_keyframe2(from._internal_keyframe2());
  }
  if (!from._internal_matches().empty()) {
    _internal_set_matches(from._internal_matches());
  }
  if (!from._internal_pts3d1().empty()) {
    _internal_set_pts3d1(from._internal_pts3d1());
  }
  if (!from._internal_pts3d2().empty()) {
    _internal_set_pts3d2(from._internal_pts3d2());
  }
  if (!from._internal_pose().empty()) {
    _internal_set_pose(from._internal_pose());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void optimizeSim3Request::CopyFrom(const optimizeSim3Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIBundler.optimizeSim3Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool optimizeSim3Request::IsInitialized() const {
  return true;
}

void optimizeSim3Request::InternalSwap(optimizeSim3Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &keyframe1_, lhs_arena,
      &other->keyframe1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &keyframe2_, lhs_arena,
      &other->keyframe2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &matches_, lhs_arena,
      &other->matches_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pts3d1_, lhs_arena,
      &other->pts3d1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pts3d2_, lhs_arena,
      &other->pts3d2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pose_, lhs_arena,
      &other->pose_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata optimizeSim3Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIBundlerService_2eproto_getter, &descriptor_table_grpcIBundlerService_2eproto_once,
      file_level_metadata_grpcIBundlerService_2eproto[4]);
}

// ===================================================================

class optimizeSim3Response::_Internal {
 public:
};

optimizeSim3Response::optimizeSim3Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcIBundler.optimizeSim3Response)
}
optimizeSim3Response::optimizeSim3Response(const optimizeSim3Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pose().empty()) {
    pose_.Set(from._internal_pose(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcIBundler.optimizeSim3Response)
}

inline void optimizeSim3Response::SharedCtor() {
pose_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pose_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

optimizeSim3Response::~optimizeSim3Response() {
  // @@protoc_insertion_point(destructor:grpcIBundler.optimizeSim3Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void optimizeSim3Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pose_.Destroy();
}

void optimizeSim3Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void optimizeSim3Response::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcIBundler.optimizeSim3Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* optimizeSim3Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pose();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* optimizeSim3Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcIBundler.optimizeSim3Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pose = 1;
  if (!this->_internal_pose().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pose(), target);
  }

  // double xpcfGrpcReturnValue = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_xpcfgrpcreturnvalue = this->_internal_xpcfgrpcreturnvalue();
  uint64_t raw_xpcfgrpcreturnvalue;
  memcpy(&raw_xpcfgrpcreturnvalue, &tmp_xpcfgrpcreturnvalue, sizeof(tmp_xpcfgrpcreturnvalue));
  if (raw_xpcfgrpcreturnvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcIBundler.optimizeSim3Response)
  return target;
}

size_t optimizeSim3Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcIBundler.optimizeSim3Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pose = 1;
  if (!this->_internal_pose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pose());
  }

  // double xpcfGrpcReturnValue = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_xpcfgrpcreturnvalue = this->_internal_xpcfgrpcreturnvalue();
  uint64_t raw_xpcfgrpcreturnvalue;
  memcpy(&raw_xpcfgrpcreturnvalue, &tmp_xpcfgrpcreturnvalue, sizeof(tmp_xpcfgrpcreturnvalue));
  if (raw_xpcfgrpcreturnvalue != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData optimizeSim3Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    optimizeSim3Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*optimizeSim3Response::GetClassData() const { return &_class_data_; }

void optimizeSim3Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<optimizeSim3Response *>(to)->MergeFrom(
      static_cast<const optimizeSim3Response &>(from));
}


void optimizeSim3Response::MergeFrom(const optimizeSim3Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcIBundler.optimizeSim3Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pose().empty()) {
    _internal_set_pose(from._internal_pose());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_xpcfgrpcreturnvalue = from._internal_xpcfgrpcreturnvalue();
  uint64_t raw_xpcfgrpcreturnvalue;
  memcpy(&raw_xpcfgrpcreturnvalue, &tmp_xpcfgrpcreturnvalue, sizeof(tmp_xpcfgrpcreturnvalue));
  if (raw_xpcfgrpcreturnvalue != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void optimizeSim3Response::CopyFrom(const optimizeSim3Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcIBundler.optimizeSim3Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool optimizeSim3Response::IsInitialized() const {
  return true;
}

void optimizeSim3Response::InternalSwap(optimizeSim3Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pose_, lhs_arena,
      &other->pose_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata optimizeSim3Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcIBundlerService_2eproto_getter, &descriptor_table_grpcIBundlerService_2eproto_once,
      file_level_metadata_grpcIBundlerService_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcIBundler
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcIBundler::setMapRequest*
Arena::CreateMaybeMessage< ::grpcIBundler::setMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIBundler::setMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIBundler::setMapResponse*
Arena::CreateMaybeMessage< ::grpcIBundler::setMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIBundler::setMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIBundler::bundleAdjustmentRequest*
Arena::CreateMaybeMessage< ::grpcIBundler::bundleAdjustmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIBundler::bundleAdjustmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIBundler::bundleAdjustmentResponse*
Arena::CreateMaybeMessage< ::grpcIBundler::bundleAdjustmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIBundler::bundleAdjustmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIBundler::optimizeSim3Request*
Arena::CreateMaybeMessage< ::grpcIBundler::optimizeSim3Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIBundler::optimizeSim3Request >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcIBundler::optimizeSim3Response*
Arena::CreateMaybeMessage< ::grpcIBundler::optimizeSim3Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcIBundler::optimizeSim3Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
