// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMapManagerService.proto

#include "grpcIMapManagerService.pb.h"
#include "grpcIMapManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIMapManager {

static const char* grpcIMapManagerService_method_names[] = {
  "/grpcIMapManager.grpcIMapManagerService/init",
  "/grpcIMapManager.grpcIMapManagerService/createMap",
  "/grpcIMapManager.grpcIMapManagerService/deleteMap",
  "/grpcIMapManager.grpcIMapManagerService/getAllMaps",
  "/grpcIMapManager.grpcIMapManagerService/registerMapUpdateService",
  "/grpcIMapManager.grpcIMapManagerService/unregisterMapUpdateService",
  "/grpcIMapManager.grpcIMapManagerService/increaseMapClients",
  "/grpcIMapManager.grpcIMapManagerService/decreaseMapClients",
};

std::unique_ptr< grpcIMapManagerService::Stub> grpcIMapManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIMapManagerService::Stub> stub(new grpcIMapManagerService::Stub(channel, options));
  return stub;
}

grpcIMapManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_init_(grpcIMapManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_createMap_(grpcIMapManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteMap_(grpcIMapManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllMaps_(grpcIMapManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_registerMapUpdateService_(grpcIMapManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unregisterMapUpdateService_(grpcIMapManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_increaseMapClients_(grpcIMapManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_decreaseMapClients_(grpcIMapManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIMapManagerService::Stub::init(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpcIMapManager::initResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::initRequest, ::grpcIMapManager::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_init_, context, request, response);
}

void grpcIMapManagerService::Stub::async::init(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest* request, ::grpcIMapManager::initResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::initRequest, ::grpcIMapManager::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::async::init(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest* request, ::grpcIMapManager::initResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::initResponse>* grpcIMapManagerService::Stub::PrepareAsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::initResponse, ::grpcIMapManager::initRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::initResponse>* grpcIMapManagerService::Stub::AsyncinitRaw(::grpc::ClientContext* context, const ::grpcIMapManager::initRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::createMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpcIMapManager::createMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::createMapRequest, ::grpcIMapManager::createMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createMap_, context, request, response);
}

void grpcIMapManagerService::Stub::async::createMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest* request, ::grpcIMapManager::createMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::createMapRequest, ::grpcIMapManager::createMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createMap_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::async::createMap(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest* request, ::grpcIMapManager::createMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::createMapResponse>* grpcIMapManagerService::Stub::PrepareAsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::createMapResponse, ::grpcIMapManager::createMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::createMapResponse>* grpcIMapManagerService::Stub::AsynccreateMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::createMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::deleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpcIMapManager::deleteMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::deleteMapRequest, ::grpcIMapManager::deleteMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deleteMap_, context, request, response);
}

void grpcIMapManagerService::Stub::async::deleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest* request, ::grpcIMapManager::deleteMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::deleteMapRequest, ::grpcIMapManager::deleteMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteMap_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::async::deleteMap(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest* request, ::grpcIMapManager::deleteMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteMapResponse>* grpcIMapManagerService::Stub::PrepareAsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::deleteMapResponse, ::grpcIMapManager::deleteMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deleteMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteMapResponse>* grpcIMapManagerService::Stub::AsyncdeleteMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::deleteMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeleteMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::getAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpcIMapManager::getAllMapsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::getAllMapsRequest, ::grpcIMapManager::getAllMapsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllMaps_, context, request, response);
}

void grpcIMapManagerService::Stub::async::getAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest* request, ::grpcIMapManager::getAllMapsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::getAllMapsRequest, ::grpcIMapManager::getAllMapsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllMaps_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::async::getAllMaps(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest* request, ::grpcIMapManager::getAllMapsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllMaps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getAllMapsResponse>* grpcIMapManagerService::Stub::PrepareAsyncgetAllMapsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::getAllMapsResponse, ::grpcIMapManager::getAllMapsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllMaps_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getAllMapsResponse>* grpcIMapManagerService::Stub::AsyncgetAllMapsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getAllMapsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllMapsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpcIMapManager::registerMapUpdateServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::registerMapUpdateServiceRequest, ::grpcIMapManager::registerMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerMapUpdateService_, context, request, response);
}

void grpcIMapManagerService::Stub::async::registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpcIMapManager::registerMapUpdateServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::registerMapUpdateServiceRequest, ::grpcIMapManager::registerMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerMapUpdateService_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::async::registerMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpcIMapManager::registerMapUpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerMapUpdateService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::registerMapUpdateServiceResponse>* grpcIMapManagerService::Stub::PrepareAsyncregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::registerMapUpdateServiceResponse, ::grpcIMapManager::registerMapUpdateServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerMapUpdateService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::registerMapUpdateServiceResponse>* grpcIMapManagerService::Stub::AsyncregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterMapUpdateServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::unregisterMapUpdateServiceRequest, ::grpcIMapManager::unregisterMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unregisterMapUpdateService_, context, request, response);
}

void grpcIMapManagerService::Stub::async::unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::unregisterMapUpdateServiceRequest, ::grpcIMapManager::unregisterMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterMapUpdateService_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::async::unregisterMapUpdateService(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unregisterMapUpdateService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::unregisterMapUpdateServiceResponse>* grpcIMapManagerService::Stub::PrepareAsyncunregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::unregisterMapUpdateServiceResponse, ::grpcIMapManager::unregisterMapUpdateServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unregisterMapUpdateService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::unregisterMapUpdateServiceResponse>* grpcIMapManagerService::Stub::AsyncunregisterMapUpdateServiceRaw(::grpc::ClientContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunregisterMapUpdateServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpcIMapManager::increaseMapClientsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::increaseMapClientsRequest, ::grpcIMapManager::increaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_increaseMapClients_, context, request, response);
}

void grpcIMapManagerService::Stub::async::increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest* request, ::grpcIMapManager::increaseMapClientsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::increaseMapClientsRequest, ::grpcIMapManager::increaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_increaseMapClients_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::async::increaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest* request, ::grpcIMapManager::increaseMapClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_increaseMapClients_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::increaseMapClientsResponse>* grpcIMapManagerService::Stub::PrepareAsyncincreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::increaseMapClientsResponse, ::grpcIMapManager::increaseMapClientsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_increaseMapClients_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::increaseMapClientsResponse>* grpcIMapManagerService::Stub::AsyncincreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::increaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncincreaseMapClientsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpcIMapManager::decreaseMapClientsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::decreaseMapClientsRequest, ::grpcIMapManager::decreaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_decreaseMapClients_, context, request, response);
}

void grpcIMapManagerService::Stub::async::decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpcIMapManager::decreaseMapClientsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::decreaseMapClientsRequest, ::grpcIMapManager::decreaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_decreaseMapClients_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::async::decreaseMapClients(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpcIMapManager::decreaseMapClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_decreaseMapClients_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::decreaseMapClientsResponse>* grpcIMapManagerService::Stub::PrepareAsyncdecreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::decreaseMapClientsResponse, ::grpcIMapManager::decreaseMapClientsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_decreaseMapClients_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::decreaseMapClientsResponse>* grpcIMapManagerService::Stub::AsyncdecreaseMapClientsRaw(::grpc::ClientContext* context, const ::grpcIMapManager::decreaseMapClientsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdecreaseMapClientsRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIMapManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::initRequest, ::grpcIMapManager::initResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::initRequest* req,
             ::grpcIMapManager::initResponse* resp) {
               return service->init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::createMapRequest, ::grpcIMapManager::createMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::createMapRequest* req,
             ::grpcIMapManager::createMapResponse* resp) {
               return service->createMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::deleteMapRequest, ::grpcIMapManager::deleteMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::deleteMapRequest* req,
             ::grpcIMapManager::deleteMapResponse* resp) {
               return service->deleteMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::getAllMapsRequest, ::grpcIMapManager::getAllMapsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::getAllMapsRequest* req,
             ::grpcIMapManager::getAllMapsResponse* resp) {
               return service->getAllMaps(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::registerMapUpdateServiceRequest, ::grpcIMapManager::registerMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::registerMapUpdateServiceRequest* req,
             ::grpcIMapManager::registerMapUpdateServiceResponse* resp) {
               return service->registerMapUpdateService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::unregisterMapUpdateServiceRequest, ::grpcIMapManager::unregisterMapUpdateServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::unregisterMapUpdateServiceRequest* req,
             ::grpcIMapManager::unregisterMapUpdateServiceResponse* resp) {
               return service->unregisterMapUpdateService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::increaseMapClientsRequest, ::grpcIMapManager::increaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::increaseMapClientsRequest* req,
             ::grpcIMapManager::increaseMapClientsResponse* resp) {
               return service->increaseMapClients(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::decreaseMapClientsRequest, ::grpcIMapManager::decreaseMapClientsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::decreaseMapClientsRequest* req,
             ::grpcIMapManager::decreaseMapClientsResponse* resp) {
               return service->decreaseMapClients(ctx, req, resp);
             }, this)));
}

grpcIMapManagerService::Service::~Service() {
}

::grpc::Status grpcIMapManagerService::Service::init(::grpc::ServerContext* context, const ::grpcIMapManager::initRequest* request, ::grpcIMapManager::initResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::createMap(::grpc::ServerContext* context, const ::grpcIMapManager::createMapRequest* request, ::grpcIMapManager::createMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::deleteMap(::grpc::ServerContext* context, const ::grpcIMapManager::deleteMapRequest* request, ::grpcIMapManager::deleteMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::getAllMaps(::grpc::ServerContext* context, const ::grpcIMapManager::getAllMapsRequest* request, ::grpcIMapManager::getAllMapsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::registerMapUpdateService(::grpc::ServerContext* context, const ::grpcIMapManager::registerMapUpdateServiceRequest* request, ::grpcIMapManager::registerMapUpdateServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::unregisterMapUpdateService(::grpc::ServerContext* context, const ::grpcIMapManager::unregisterMapUpdateServiceRequest* request, ::grpcIMapManager::unregisterMapUpdateServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::increaseMapClients(::grpc::ServerContext* context, const ::grpcIMapManager::increaseMapClientsRequest* request, ::grpcIMapManager::increaseMapClientsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::decreaseMapClients(::grpc::ServerContext* context, const ::grpcIMapManager::decreaseMapClientsRequest* request, ::grpcIMapManager::decreaseMapClientsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIMapManager

