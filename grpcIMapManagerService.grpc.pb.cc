// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIMapManagerService.proto

#include "grpcIMapManagerService.pb.h"
#include "grpcIMapManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIMapManager {

static const char* grpcIMapManagerService_method_names[] = {
  "/grpcIMapManager.grpcIMapManagerService/setMap",
  "/grpcIMapManager.grpcIMapManagerService/getMap",
  "/grpcIMapManager.grpcIMapManagerService/getSubmap",
  "/grpcIMapManager.grpcIMapManagerService/getLocalPointCloud_grpc0",
  "/grpcIMapManager.grpcIMapManagerService/getLocalPointCloud_grpc1",
  "/grpcIMapManager.grpcIMapManagerService/addCloudPoint",
  "/grpcIMapManager.grpcIMapManagerService/removeCloudPoint",
  "/grpcIMapManager.grpcIMapManagerService/addKeyframe",
  "/grpcIMapManager.grpcIMapManagerService/removeKeyframe",
  "/grpcIMapManager.grpcIMapManagerService/addCameraParameters",
  "/grpcIMapManager.grpcIMapManagerService/removeCameraParameters",
  "/grpcIMapManager.grpcIMapManagerService/getCameraParameters_grpc0",
  "/grpcIMapManager.grpcIMapManagerService/getCameraParameters_grpc1",
  "/grpcIMapManager.grpcIMapManagerService/pointCloudPruning",
  "/grpcIMapManager.grpcIMapManagerService/keyframePruning",
  "/grpcIMapManager.grpcIMapManagerService/visibilityPruning",
  "/grpcIMapManager.grpcIMapManagerService/saveToFile",
  "/grpcIMapManager.grpcIMapManagerService/loadFromFile",
  "/grpcIMapManager.grpcIMapManagerService/deleteFile",
};

std::unique_ptr< grpcIMapManagerService::Stub> grpcIMapManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIMapManagerService::Stub> stub(new grpcIMapManagerService::Stub(channel));
  return stub;
}

grpcIMapManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setMap_(grpcIMapManagerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMap_(grpcIMapManagerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getSubmap_(grpcIMapManagerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getLocalPointCloud_grpc0_(grpcIMapManagerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getLocalPointCloud_grpc1_(grpcIMapManagerService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addCloudPoint_(grpcIMapManagerService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeCloudPoint_(grpcIMapManagerService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addKeyframe_(grpcIMapManagerService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeKeyframe_(grpcIMapManagerService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addCameraParameters_(grpcIMapManagerService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeCameraParameters_(grpcIMapManagerService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCameraParameters_grpc0_(grpcIMapManagerService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getCameraParameters_grpc1_(grpcIMapManagerService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_pointCloudPruning_(grpcIMapManagerService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_keyframePruning_(grpcIMapManagerService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_visibilityPruning_(grpcIMapManagerService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveToFile_(grpcIMapManagerService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadFromFile_(grpcIMapManagerService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteFile_(grpcIMapManagerService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIMapManagerService::Stub::setMap(::grpc::ClientContext* context, const ::grpcIMapManager::setMapRequest& request, ::grpcIMapManager::setMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::setMapRequest, ::grpcIMapManager::setMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setMap_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::setMap(::grpc::ClientContext* context, const ::grpcIMapManager::setMapRequest* request, ::grpcIMapManager::setMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::setMapRequest, ::grpcIMapManager::setMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMap_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::setMap(::grpc::ClientContext* context, const ::grpcIMapManager::setMapRequest* request, ::grpcIMapManager::setMapResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::setMapResponse>* grpcIMapManagerService::Stub::PrepareAsyncsetMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::setMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::setMapResponse, ::grpcIMapManager::setMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::setMapResponse>* grpcIMapManagerService::Stub::AsyncsetMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::setMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::getMap(::grpc::ClientContext* context, const ::grpcIMapManager::getMapRequest& request, ::grpcIMapManager::getMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::getMapRequest, ::grpcIMapManager::getMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMap_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::getMap(::grpc::ClientContext* context, const ::grpcIMapManager::getMapRequest* request, ::grpcIMapManager::getMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::getMapRequest, ::grpcIMapManager::getMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMap_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::getMap(::grpc::ClientContext* context, const ::grpcIMapManager::getMapRequest* request, ::grpcIMapManager::getMapResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getMapResponse>* grpcIMapManagerService::Stub::PrepareAsyncgetMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::getMapResponse, ::grpcIMapManager::getMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getMapResponse>* grpcIMapManagerService::Stub::AsyncgetMapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::getSubmap(::grpc::ClientContext* context, const ::grpcIMapManager::getSubmapRequest& request, ::grpcIMapManager::getSubmapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::getSubmapRequest, ::grpcIMapManager::getSubmapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getSubmap_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::getSubmap(::grpc::ClientContext* context, const ::grpcIMapManager::getSubmapRequest* request, ::grpcIMapManager::getSubmapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::getSubmapRequest, ::grpcIMapManager::getSubmapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSubmap_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::getSubmap(::grpc::ClientContext* context, const ::grpcIMapManager::getSubmapRequest* request, ::grpcIMapManager::getSubmapResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getSubmap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getSubmapResponse>* grpcIMapManagerService::Stub::PrepareAsyncgetSubmapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getSubmapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::getSubmapResponse, ::grpcIMapManager::getSubmapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getSubmap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getSubmapResponse>* grpcIMapManagerService::Stub::AsyncgetSubmapRaw(::grpc::ClientContext* context, const ::grpcIMapManager::getSubmapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetSubmapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::getLocalPointCloud_grpc0(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc0Request& request, ::grpcIMapManager::getLocalPointCloud_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::getLocalPointCloud_grpc0Request, ::grpcIMapManager::getLocalPointCloud_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLocalPointCloud_grpc0_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::getLocalPointCloud_grpc0(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc0Request* request, ::grpcIMapManager::getLocalPointCloud_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::getLocalPointCloud_grpc0Request, ::grpcIMapManager::getLocalPointCloud_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocalPointCloud_grpc0_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::getLocalPointCloud_grpc0(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc0Request* request, ::grpcIMapManager::getLocalPointCloud_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocalPointCloud_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getLocalPointCloud_grpc0Response>* grpcIMapManagerService::Stub::PrepareAsyncgetLocalPointCloud_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::getLocalPointCloud_grpc0Response, ::grpcIMapManager::getLocalPointCloud_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLocalPointCloud_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getLocalPointCloud_grpc0Response>* grpcIMapManagerService::Stub::AsyncgetLocalPointCloud_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLocalPointCloud_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::getLocalPointCloud_grpc1(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc1Request& request, ::grpcIMapManager::getLocalPointCloud_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::getLocalPointCloud_grpc1Request, ::grpcIMapManager::getLocalPointCloud_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLocalPointCloud_grpc1_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::getLocalPointCloud_grpc1(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc1Request* request, ::grpcIMapManager::getLocalPointCloud_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::getLocalPointCloud_grpc1Request, ::grpcIMapManager::getLocalPointCloud_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocalPointCloud_grpc1_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::getLocalPointCloud_grpc1(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc1Request* request, ::grpcIMapManager::getLocalPointCloud_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocalPointCloud_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getLocalPointCloud_grpc1Response>* grpcIMapManagerService::Stub::PrepareAsyncgetLocalPointCloud_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::getLocalPointCloud_grpc1Response, ::grpcIMapManager::getLocalPointCloud_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLocalPointCloud_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getLocalPointCloud_grpc1Response>* grpcIMapManagerService::Stub::AsyncgetLocalPointCloud_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLocalPointCloud_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::addCloudPoint(::grpc::ClientContext* context, const ::grpcIMapManager::addCloudPointRequest& request, ::grpcIMapManager::addCloudPointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::addCloudPointRequest, ::grpcIMapManager::addCloudPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addCloudPoint_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::addCloudPoint(::grpc::ClientContext* context, const ::grpcIMapManager::addCloudPointRequest* request, ::grpcIMapManager::addCloudPointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::addCloudPointRequest, ::grpcIMapManager::addCloudPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addCloudPoint_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::addCloudPoint(::grpc::ClientContext* context, const ::grpcIMapManager::addCloudPointRequest* request, ::grpcIMapManager::addCloudPointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addCloudPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::addCloudPointResponse>* grpcIMapManagerService::Stub::PrepareAsyncaddCloudPointRaw(::grpc::ClientContext* context, const ::grpcIMapManager::addCloudPointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::addCloudPointResponse, ::grpcIMapManager::addCloudPointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addCloudPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::addCloudPointResponse>* grpcIMapManagerService::Stub::AsyncaddCloudPointRaw(::grpc::ClientContext* context, const ::grpcIMapManager::addCloudPointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddCloudPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::removeCloudPoint(::grpc::ClientContext* context, const ::grpcIMapManager::removeCloudPointRequest& request, ::grpcIMapManager::removeCloudPointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::removeCloudPointRequest, ::grpcIMapManager::removeCloudPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeCloudPoint_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::removeCloudPoint(::grpc::ClientContext* context, const ::grpcIMapManager::removeCloudPointRequest* request, ::grpcIMapManager::removeCloudPointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::removeCloudPointRequest, ::grpcIMapManager::removeCloudPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeCloudPoint_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::removeCloudPoint(::grpc::ClientContext* context, const ::grpcIMapManager::removeCloudPointRequest* request, ::grpcIMapManager::removeCloudPointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeCloudPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::removeCloudPointResponse>* grpcIMapManagerService::Stub::PrepareAsyncremoveCloudPointRaw(::grpc::ClientContext* context, const ::grpcIMapManager::removeCloudPointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::removeCloudPointResponse, ::grpcIMapManager::removeCloudPointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeCloudPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::removeCloudPointResponse>* grpcIMapManagerService::Stub::AsyncremoveCloudPointRaw(::grpc::ClientContext* context, const ::grpcIMapManager::removeCloudPointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveCloudPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::addKeyframe(::grpc::ClientContext* context, const ::grpcIMapManager::addKeyframeRequest& request, ::grpcIMapManager::addKeyframeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::addKeyframeRequest, ::grpcIMapManager::addKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addKeyframe_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::addKeyframe(::grpc::ClientContext* context, const ::grpcIMapManager::addKeyframeRequest* request, ::grpcIMapManager::addKeyframeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::addKeyframeRequest, ::grpcIMapManager::addKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addKeyframe_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::addKeyframe(::grpc::ClientContext* context, const ::grpcIMapManager::addKeyframeRequest* request, ::grpcIMapManager::addKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addKeyframe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::addKeyframeResponse>* grpcIMapManagerService::Stub::PrepareAsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIMapManager::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::addKeyframeResponse, ::grpcIMapManager::addKeyframeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addKeyframe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::addKeyframeResponse>* grpcIMapManagerService::Stub::AsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIMapManager::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddKeyframeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::removeKeyframe(::grpc::ClientContext* context, const ::grpcIMapManager::removeKeyframeRequest& request, ::grpcIMapManager::removeKeyframeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::removeKeyframeRequest, ::grpcIMapManager::removeKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeKeyframe_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::removeKeyframe(::grpc::ClientContext* context, const ::grpcIMapManager::removeKeyframeRequest* request, ::grpcIMapManager::removeKeyframeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::removeKeyframeRequest, ::grpcIMapManager::removeKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeKeyframe_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::removeKeyframe(::grpc::ClientContext* context, const ::grpcIMapManager::removeKeyframeRequest* request, ::grpcIMapManager::removeKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeKeyframe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::removeKeyframeResponse>* grpcIMapManagerService::Stub::PrepareAsyncremoveKeyframeRaw(::grpc::ClientContext* context, const ::grpcIMapManager::removeKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::removeKeyframeResponse, ::grpcIMapManager::removeKeyframeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeKeyframe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::removeKeyframeResponse>* grpcIMapManagerService::Stub::AsyncremoveKeyframeRaw(::grpc::ClientContext* context, const ::grpcIMapManager::removeKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveKeyframeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::addCameraParameters(::grpc::ClientContext* context, const ::grpcIMapManager::addCameraParametersRequest& request, ::grpcIMapManager::addCameraParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::addCameraParametersRequest, ::grpcIMapManager::addCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addCameraParameters_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::addCameraParameters(::grpc::ClientContext* context, const ::grpcIMapManager::addCameraParametersRequest* request, ::grpcIMapManager::addCameraParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::addCameraParametersRequest, ::grpcIMapManager::addCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addCameraParameters_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::addCameraParameters(::grpc::ClientContext* context, const ::grpcIMapManager::addCameraParametersRequest* request, ::grpcIMapManager::addCameraParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::addCameraParametersResponse>* grpcIMapManagerService::Stub::PrepareAsyncaddCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIMapManager::addCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::addCameraParametersResponse, ::grpcIMapManager::addCameraParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::addCameraParametersResponse>* grpcIMapManagerService::Stub::AsyncaddCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIMapManager::addCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::removeCameraParameters(::grpc::ClientContext* context, const ::grpcIMapManager::removeCameraParametersRequest& request, ::grpcIMapManager::removeCameraParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::removeCameraParametersRequest, ::grpcIMapManager::removeCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_removeCameraParameters_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::removeCameraParameters(::grpc::ClientContext* context, const ::grpcIMapManager::removeCameraParametersRequest* request, ::grpcIMapManager::removeCameraParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::removeCameraParametersRequest, ::grpcIMapManager::removeCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeCameraParameters_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::removeCameraParameters(::grpc::ClientContext* context, const ::grpcIMapManager::removeCameraParametersRequest* request, ::grpcIMapManager::removeCameraParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_removeCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::removeCameraParametersResponse>* grpcIMapManagerService::Stub::PrepareAsyncremoveCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIMapManager::removeCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::removeCameraParametersResponse, ::grpcIMapManager::removeCameraParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_removeCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::removeCameraParametersResponse>* grpcIMapManagerService::Stub::AsyncremoveCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIMapManager::removeCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncremoveCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::getCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc0Request& request, ::grpcIMapManager::getCameraParameters_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::getCameraParameters_grpc0Request, ::grpcIMapManager::getCameraParameters_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCameraParameters_grpc0_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::getCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc0Request* request, ::grpcIMapManager::getCameraParameters_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::getCameraParameters_grpc0Request, ::grpcIMapManager::getCameraParameters_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_grpc0_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::getCameraParameters_grpc0(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc0Request* request, ::grpcIMapManager::getCameraParameters_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getCameraParameters_grpc0Response>* grpcIMapManagerService::Stub::PrepareAsyncgetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::getCameraParameters_grpc0Response, ::grpcIMapManager::getCameraParameters_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCameraParameters_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getCameraParameters_grpc0Response>* grpcIMapManagerService::Stub::AsyncgetCameraParameters_grpc0Raw(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCameraParameters_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::getCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc1Request& request, ::grpcIMapManager::getCameraParameters_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::getCameraParameters_grpc1Request, ::grpcIMapManager::getCameraParameters_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getCameraParameters_grpc1_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::getCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc1Request* request, ::grpcIMapManager::getCameraParameters_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::getCameraParameters_grpc1Request, ::grpcIMapManager::getCameraParameters_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_grpc1_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::getCameraParameters_grpc1(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc1Request* request, ::grpcIMapManager::getCameraParameters_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getCameraParameters_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getCameraParameters_grpc1Response>* grpcIMapManagerService::Stub::PrepareAsyncgetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::getCameraParameters_grpc1Response, ::grpcIMapManager::getCameraParameters_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getCameraParameters_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::getCameraParameters_grpc1Response>* grpcIMapManagerService::Stub::AsyncgetCameraParameters_grpc1Raw(::grpc::ClientContext* context, const ::grpcIMapManager::getCameraParameters_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetCameraParameters_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::pointCloudPruning(::grpc::ClientContext* context, const ::grpcIMapManager::pointCloudPruningRequest& request, ::grpcIMapManager::pointCloudPruningResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::pointCloudPruningRequest, ::grpcIMapManager::pointCloudPruningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_pointCloudPruning_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::pointCloudPruning(::grpc::ClientContext* context, const ::grpcIMapManager::pointCloudPruningRequest* request, ::grpcIMapManager::pointCloudPruningResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::pointCloudPruningRequest, ::grpcIMapManager::pointCloudPruningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pointCloudPruning_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::pointCloudPruning(::grpc::ClientContext* context, const ::grpcIMapManager::pointCloudPruningRequest* request, ::grpcIMapManager::pointCloudPruningResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_pointCloudPruning_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::pointCloudPruningResponse>* grpcIMapManagerService::Stub::PrepareAsyncpointCloudPruningRaw(::grpc::ClientContext* context, const ::grpcIMapManager::pointCloudPruningRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::pointCloudPruningResponse, ::grpcIMapManager::pointCloudPruningRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_pointCloudPruning_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::pointCloudPruningResponse>* grpcIMapManagerService::Stub::AsyncpointCloudPruningRaw(::grpc::ClientContext* context, const ::grpcIMapManager::pointCloudPruningRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpointCloudPruningRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::keyframePruning(::grpc::ClientContext* context, const ::grpcIMapManager::keyframePruningRequest& request, ::grpcIMapManager::keyframePruningResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::keyframePruningRequest, ::grpcIMapManager::keyframePruningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_keyframePruning_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::keyframePruning(::grpc::ClientContext* context, const ::grpcIMapManager::keyframePruningRequest* request, ::grpcIMapManager::keyframePruningResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::keyframePruningRequest, ::grpcIMapManager::keyframePruningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_keyframePruning_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::keyframePruning(::grpc::ClientContext* context, const ::grpcIMapManager::keyframePruningRequest* request, ::grpcIMapManager::keyframePruningResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_keyframePruning_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::keyframePruningResponse>* grpcIMapManagerService::Stub::PrepareAsynckeyframePruningRaw(::grpc::ClientContext* context, const ::grpcIMapManager::keyframePruningRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::keyframePruningResponse, ::grpcIMapManager::keyframePruningRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_keyframePruning_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::keyframePruningResponse>* grpcIMapManagerService::Stub::AsynckeyframePruningRaw(::grpc::ClientContext* context, const ::grpcIMapManager::keyframePruningRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynckeyframePruningRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::visibilityPruning(::grpc::ClientContext* context, const ::grpcIMapManager::visibilityPruningRequest& request, ::grpcIMapManager::visibilityPruningResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::visibilityPruningRequest, ::grpcIMapManager::visibilityPruningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_visibilityPruning_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::visibilityPruning(::grpc::ClientContext* context, const ::grpcIMapManager::visibilityPruningRequest* request, ::grpcIMapManager::visibilityPruningResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::visibilityPruningRequest, ::grpcIMapManager::visibilityPruningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_visibilityPruning_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::visibilityPruning(::grpc::ClientContext* context, const ::grpcIMapManager::visibilityPruningRequest* request, ::grpcIMapManager::visibilityPruningResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_visibilityPruning_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::visibilityPruningResponse>* grpcIMapManagerService::Stub::PrepareAsyncvisibilityPruningRaw(::grpc::ClientContext* context, const ::grpcIMapManager::visibilityPruningRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::visibilityPruningResponse, ::grpcIMapManager::visibilityPruningRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_visibilityPruning_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::visibilityPruningResponse>* grpcIMapManagerService::Stub::AsyncvisibilityPruningRaw(::grpc::ClientContext* context, const ::grpcIMapManager::visibilityPruningRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncvisibilityPruningRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::saveToFile(::grpc::ClientContext* context, const ::grpcIMapManager::saveToFileRequest& request, ::grpcIMapManager::saveToFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::saveToFileRequest, ::grpcIMapManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveToFile_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::saveToFile(::grpc::ClientContext* context, const ::grpcIMapManager::saveToFileRequest* request, ::grpcIMapManager::saveToFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::saveToFileRequest, ::grpcIMapManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::saveToFile(::grpc::ClientContext* context, const ::grpcIMapManager::saveToFileRequest* request, ::grpcIMapManager::saveToFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::saveToFileResponse>* grpcIMapManagerService::Stub::PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIMapManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::saveToFileResponse, ::grpcIMapManager::saveToFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveToFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::saveToFileResponse>* grpcIMapManagerService::Stub::AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIMapManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveToFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::loadFromFile(::grpc::ClientContext* context, const ::grpcIMapManager::loadFromFileRequest& request, ::grpcIMapManager::loadFromFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::loadFromFileRequest, ::grpcIMapManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadFromFile_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::loadFromFile(::grpc::ClientContext* context, const ::grpcIMapManager::loadFromFileRequest* request, ::grpcIMapManager::loadFromFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::loadFromFileRequest, ::grpcIMapManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::loadFromFile(::grpc::ClientContext* context, const ::grpcIMapManager::loadFromFileRequest* request, ::grpcIMapManager::loadFromFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::loadFromFileResponse>* grpcIMapManagerService::Stub::PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIMapManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::loadFromFileResponse, ::grpcIMapManager::loadFromFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadFromFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::loadFromFileResponse>* grpcIMapManagerService::Stub::AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIMapManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadFromFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIMapManagerService::Stub::deleteFile(::grpc::ClientContext* context, const ::grpcIMapManager::deleteFileRequest& request, ::grpcIMapManager::deleteFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIMapManager::deleteFileRequest, ::grpcIMapManager::deleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deleteFile_, context, request, response);
}

void grpcIMapManagerService::Stub::experimental_async::deleteFile(::grpc::ClientContext* context, const ::grpcIMapManager::deleteFileRequest* request, ::grpcIMapManager::deleteFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIMapManager::deleteFileRequest, ::grpcIMapManager::deleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteFile_, context, request, response, std::move(f));
}

void grpcIMapManagerService::Stub::experimental_async::deleteFile(::grpc::ClientContext* context, const ::grpcIMapManager::deleteFileRequest* request, ::grpcIMapManager::deleteFileResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deleteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteFileResponse>* grpcIMapManagerService::Stub::PrepareAsyncdeleteFileRaw(::grpc::ClientContext* context, const ::grpcIMapManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIMapManager::deleteFileResponse, ::grpcIMapManager::deleteFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deleteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIMapManager::deleteFileResponse>* grpcIMapManagerService::Stub::AsyncdeleteFileRaw(::grpc::ClientContext* context, const ::grpcIMapManager::deleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeleteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIMapManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::setMapRequest, ::grpcIMapManager::setMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::setMapRequest* req,
             ::grpcIMapManager::setMapResponse* resp) {
               return service->setMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::getMapRequest, ::grpcIMapManager::getMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::getMapRequest* req,
             ::grpcIMapManager::getMapResponse* resp) {
               return service->getMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::getSubmapRequest, ::grpcIMapManager::getSubmapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::getSubmapRequest* req,
             ::grpcIMapManager::getSubmapResponse* resp) {
               return service->getSubmap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::getLocalPointCloud_grpc0Request, ::grpcIMapManager::getLocalPointCloud_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::getLocalPointCloud_grpc0Request* req,
             ::grpcIMapManager::getLocalPointCloud_grpc0Response* resp) {
               return service->getLocalPointCloud_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::getLocalPointCloud_grpc1Request, ::grpcIMapManager::getLocalPointCloud_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::getLocalPointCloud_grpc1Request* req,
             ::grpcIMapManager::getLocalPointCloud_grpc1Response* resp) {
               return service->getLocalPointCloud_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::addCloudPointRequest, ::grpcIMapManager::addCloudPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::addCloudPointRequest* req,
             ::grpcIMapManager::addCloudPointResponse* resp) {
               return service->addCloudPoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::removeCloudPointRequest, ::grpcIMapManager::removeCloudPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::removeCloudPointRequest* req,
             ::grpcIMapManager::removeCloudPointResponse* resp) {
               return service->removeCloudPoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::addKeyframeRequest, ::grpcIMapManager::addKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::addKeyframeRequest* req,
             ::grpcIMapManager::addKeyframeResponse* resp) {
               return service->addKeyframe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::removeKeyframeRequest, ::grpcIMapManager::removeKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::removeKeyframeRequest* req,
             ::grpcIMapManager::removeKeyframeResponse* resp) {
               return service->removeKeyframe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::addCameraParametersRequest, ::grpcIMapManager::addCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::addCameraParametersRequest* req,
             ::grpcIMapManager::addCameraParametersResponse* resp) {
               return service->addCameraParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::removeCameraParametersRequest, ::grpcIMapManager::removeCameraParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::removeCameraParametersRequest* req,
             ::grpcIMapManager::removeCameraParametersResponse* resp) {
               return service->removeCameraParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::getCameraParameters_grpc0Request, ::grpcIMapManager::getCameraParameters_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::getCameraParameters_grpc0Request* req,
             ::grpcIMapManager::getCameraParameters_grpc0Response* resp) {
               return service->getCameraParameters_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::getCameraParameters_grpc1Request, ::grpcIMapManager::getCameraParameters_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::getCameraParameters_grpc1Request* req,
             ::grpcIMapManager::getCameraParameters_grpc1Response* resp) {
               return service->getCameraParameters_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::pointCloudPruningRequest, ::grpcIMapManager::pointCloudPruningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::pointCloudPruningRequest* req,
             ::grpcIMapManager::pointCloudPruningResponse* resp) {
               return service->pointCloudPruning(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::keyframePruningRequest, ::grpcIMapManager::keyframePruningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::keyframePruningRequest* req,
             ::grpcIMapManager::keyframePruningResponse* resp) {
               return service->keyframePruning(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::visibilityPruningRequest, ::grpcIMapManager::visibilityPruningResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::visibilityPruningRequest* req,
             ::grpcIMapManager::visibilityPruningResponse* resp) {
               return service->visibilityPruning(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::saveToFileRequest, ::grpcIMapManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::saveToFileRequest* req,
             ::grpcIMapManager::saveToFileResponse* resp) {
               return service->saveToFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::loadFromFileRequest, ::grpcIMapManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::loadFromFileRequest* req,
             ::grpcIMapManager::loadFromFileResponse* resp) {
               return service->loadFromFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIMapManagerService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIMapManagerService::Service, ::grpcIMapManager::deleteFileRequest, ::grpcIMapManager::deleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIMapManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIMapManager::deleteFileRequest* req,
             ::grpcIMapManager::deleteFileResponse* resp) {
               return service->deleteFile(ctx, req, resp);
             }, this)));
}

grpcIMapManagerService::Service::~Service() {
}

::grpc::Status grpcIMapManagerService::Service::setMap(::grpc::ServerContext* context, const ::grpcIMapManager::setMapRequest* request, ::grpcIMapManager::setMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::getMap(::grpc::ServerContext* context, const ::grpcIMapManager::getMapRequest* request, ::grpcIMapManager::getMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::getSubmap(::grpc::ServerContext* context, const ::grpcIMapManager::getSubmapRequest* request, ::grpcIMapManager::getSubmapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::getLocalPointCloud_grpc0(::grpc::ServerContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc0Request* request, ::grpcIMapManager::getLocalPointCloud_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::getLocalPointCloud_grpc1(::grpc::ServerContext* context, const ::grpcIMapManager::getLocalPointCloud_grpc1Request* request, ::grpcIMapManager::getLocalPointCloud_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::addCloudPoint(::grpc::ServerContext* context, const ::grpcIMapManager::addCloudPointRequest* request, ::grpcIMapManager::addCloudPointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::removeCloudPoint(::grpc::ServerContext* context, const ::grpcIMapManager::removeCloudPointRequest* request, ::grpcIMapManager::removeCloudPointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::addKeyframe(::grpc::ServerContext* context, const ::grpcIMapManager::addKeyframeRequest* request, ::grpcIMapManager::addKeyframeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::removeKeyframe(::grpc::ServerContext* context, const ::grpcIMapManager::removeKeyframeRequest* request, ::grpcIMapManager::removeKeyframeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::addCameraParameters(::grpc::ServerContext* context, const ::grpcIMapManager::addCameraParametersRequest* request, ::grpcIMapManager::addCameraParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::removeCameraParameters(::grpc::ServerContext* context, const ::grpcIMapManager::removeCameraParametersRequest* request, ::grpcIMapManager::removeCameraParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::getCameraParameters_grpc0(::grpc::ServerContext* context, const ::grpcIMapManager::getCameraParameters_grpc0Request* request, ::grpcIMapManager::getCameraParameters_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::getCameraParameters_grpc1(::grpc::ServerContext* context, const ::grpcIMapManager::getCameraParameters_grpc1Request* request, ::grpcIMapManager::getCameraParameters_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::pointCloudPruning(::grpc::ServerContext* context, const ::grpcIMapManager::pointCloudPruningRequest* request, ::grpcIMapManager::pointCloudPruningResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::keyframePruning(::grpc::ServerContext* context, const ::grpcIMapManager::keyframePruningRequest* request, ::grpcIMapManager::keyframePruningResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::visibilityPruning(::grpc::ServerContext* context, const ::grpcIMapManager::visibilityPruningRequest* request, ::grpcIMapManager::visibilityPruningResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::saveToFile(::grpc::ServerContext* context, const ::grpcIMapManager::saveToFileRequest* request, ::grpcIMapManager::saveToFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::loadFromFile(::grpc::ServerContext* context, const ::grpcIMapManager::loadFromFileRequest* request, ::grpcIMapManager::loadFromFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIMapManagerService::Service::deleteFile(::grpc::ServerContext* context, const ::grpcIMapManager::deleteFileRequest* request, ::grpcIMapManager::deleteFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIMapManager

