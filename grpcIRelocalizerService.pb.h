// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIRelocalizerService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIRelocalizerService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIRelocalizerService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIRelocalizerService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIRelocalizerService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIRelocalizerService_2eproto;
namespace grpcIRelocalizer {
class addKeyframeRequest;
struct addKeyframeRequestDefaultTypeInternal;
extern addKeyframeRequestDefaultTypeInternal _addKeyframeRequest_default_instance_;
class addKeyframeResponse;
struct addKeyframeResponseDefaultTypeInternal;
extern addKeyframeResponseDefaultTypeInternal _addKeyframeResponse_default_instance_;
class relocalizeRequest;
struct relocalizeRequestDefaultTypeInternal;
extern relocalizeRequestDefaultTypeInternal _relocalizeRequest_default_instance_;
class relocalizeResponse;
struct relocalizeResponseDefaultTypeInternal;
extern relocalizeResponseDefaultTypeInternal _relocalizeResponse_default_instance_;
}  // namespace grpcIRelocalizer
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIRelocalizer::addKeyframeRequest* Arena::CreateMaybeMessage<::grpcIRelocalizer::addKeyframeRequest>(Arena*);
template<> ::grpcIRelocalizer::addKeyframeResponse* Arena::CreateMaybeMessage<::grpcIRelocalizer::addKeyframeResponse>(Arena*);
template<> ::grpcIRelocalizer::relocalizeRequest* Arena::CreateMaybeMessage<::grpcIRelocalizer::relocalizeRequest>(Arena*);
template<> ::grpcIRelocalizer::relocalizeResponse* Arena::CreateMaybeMessage<::grpcIRelocalizer::relocalizeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIRelocalizer {

// ===================================================================

class addKeyframeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizer.addKeyframeRequest) */ {
 public:
  inline addKeyframeRequest() : addKeyframeRequest(nullptr) {}
  ~addKeyframeRequest() override;
  explicit constexpr addKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframeRequest(const addKeyframeRequest& from);
  addKeyframeRequest(addKeyframeRequest&& from) noexcept
    : addKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline addKeyframeRequest& operator=(const addKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframeRequest& operator=(addKeyframeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const addKeyframeRequest*>(
               &_addKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(addKeyframeRequest& a, addKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addKeyframeRequest* New() const final {
    return new addKeyframeRequest();
  }

  addKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addKeyframeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addKeyframeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addKeyframeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizer.addKeyframeRequest";
  }
  protected:
  explicit addKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframeFieldNumber = 1,
  };
  // bytes keyframe = 1;
  void clear_keyframe();
  const std::string& keyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyframe();
  PROTOBUF_MUST_USE_RESULT std::string* release_keyframe();
  void set_allocated_keyframe(std::string* keyframe);
  private:
  const std::string& _internal_keyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyframe(const std::string& value);
  std::string* _internal_mutable_keyframe();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizer.addKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRelocalizerService_2eproto;
};
// -------------------------------------------------------------------

class addKeyframeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizer.addKeyframeResponse) */ {
 public:
  inline addKeyframeResponse() : addKeyframeResponse(nullptr) {}
  ~addKeyframeResponse() override;
  explicit constexpr addKeyframeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addKeyframeResponse(const addKeyframeResponse& from);
  addKeyframeResponse(addKeyframeResponse&& from) noexcept
    : addKeyframeResponse() {
    *this = ::std::move(from);
  }

  inline addKeyframeResponse& operator=(const addKeyframeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline addKeyframeResponse& operator=(addKeyframeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addKeyframeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const addKeyframeResponse* internal_default_instance() {
    return reinterpret_cast<const addKeyframeResponse*>(
               &_addKeyframeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(addKeyframeResponse& a, addKeyframeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(addKeyframeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addKeyframeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline addKeyframeResponse* New() const final {
    return new addKeyframeResponse();
  }

  addKeyframeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<addKeyframeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addKeyframeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addKeyframeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addKeyframeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizer.addKeyframeResponse";
  }
  protected:
  explicit addKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizer.addKeyframeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRelocalizerService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizer.relocalizeRequest) */ {
 public:
  inline relocalizeRequest() : relocalizeRequest(nullptr) {}
  ~relocalizeRequest() override;
  explicit constexpr relocalizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeRequest(const relocalizeRequest& from);
  relocalizeRequest(relocalizeRequest&& from) noexcept
    : relocalizeRequest() {
    *this = ::std::move(from);
  }

  inline relocalizeRequest& operator=(const relocalizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeRequest& operator=(relocalizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeRequest* internal_default_instance() {
    return reinterpret_cast<const relocalizeRequest*>(
               &_relocalizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(relocalizeRequest& a, relocalizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline relocalizeRequest* New() const final {
    return new relocalizeRequest();
  }

  relocalizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<relocalizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const relocalizeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizer.relocalizeRequest";
  }
  protected:
  explicit relocalizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // bytes frame = 1;
  void clear_frame();
  const std::string& frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame();
  PROTOBUF_MUST_USE_RESULT std::string* release_frame();
  void set_allocated_frame(std::string* frame);
  private:
  const std::string& _internal_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame(const std::string& value);
  std::string* _internal_mutable_frame();
  public:

  // bytes pose = 2;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_MUST_USE_RESULT std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizer.relocalizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRelocalizerService_2eproto;
};
// -------------------------------------------------------------------

class relocalizeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRelocalizer.relocalizeResponse) */ {
 public:
  inline relocalizeResponse() : relocalizeResponse(nullptr) {}
  ~relocalizeResponse() override;
  explicit constexpr relocalizeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  relocalizeResponse(const relocalizeResponse& from);
  relocalizeResponse(relocalizeResponse&& from) noexcept
    : relocalizeResponse() {
    *this = ::std::move(from);
  }

  inline relocalizeResponse& operator=(const relocalizeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline relocalizeResponse& operator=(relocalizeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const relocalizeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const relocalizeResponse* internal_default_instance() {
    return reinterpret_cast<const relocalizeResponse*>(
               &_relocalizeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(relocalizeResponse& a, relocalizeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(relocalizeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(relocalizeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline relocalizeResponse* New() const final {
    return new relocalizeResponse();
  }

  relocalizeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<relocalizeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const relocalizeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const relocalizeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relocalizeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRelocalizer.relocalizeResponse";
  }
  protected:
  explicit relocalizeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pose = 1;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_MUST_USE_RESULT std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRelocalizer.relocalizeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRelocalizerService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// addKeyframeRequest

// bytes keyframe = 1;
inline void addKeyframeRequest::clear_keyframe() {
  keyframe_.ClearToEmpty();
}
inline const std::string& addKeyframeRequest::keyframe() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizer.addKeyframeRequest.keyframe)
  return _internal_keyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addKeyframeRequest::set_keyframe(ArgT0&& arg0, ArgT... args) {
 
 keyframe_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizer.addKeyframeRequest.keyframe)
}
inline std::string* addKeyframeRequest::mutable_keyframe() {
  std::string* _s = _internal_mutable_keyframe();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizer.addKeyframeRequest.keyframe)
  return _s;
}
inline const std::string& addKeyframeRequest::_internal_keyframe() const {
  return keyframe_.Get();
}
inline void addKeyframeRequest::_internal_set_keyframe(const std::string& value) {
  
  keyframe_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* addKeyframeRequest::_internal_mutable_keyframe() {
  
  return keyframe_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* addKeyframeRequest::release_keyframe() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizer.addKeyframeRequest.keyframe)
  return keyframe_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void addKeyframeRequest::set_allocated_keyframe(std::string* keyframe) {
  if (keyframe != nullptr) {
    
  } else {
    
  }
  keyframe_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyframe,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizer.addKeyframeRequest.keyframe)
}

// -------------------------------------------------------------------

// addKeyframeResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void addKeyframeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addKeyframeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 addKeyframeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizer.addKeyframeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void addKeyframeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void addKeyframeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizer.addKeyframeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// relocalizeRequest

// bytes frame = 1;
inline void relocalizeRequest::clear_frame() {
  frame_.ClearToEmpty();
}
inline const std::string& relocalizeRequest::frame() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizer.relocalizeRequest.frame)
  return _internal_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeRequest::set_frame(ArgT0&& arg0, ArgT... args) {
 
 frame_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizer.relocalizeRequest.frame)
}
inline std::string* relocalizeRequest::mutable_frame() {
  std::string* _s = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizer.relocalizeRequest.frame)
  return _s;
}
inline const std::string& relocalizeRequest::_internal_frame() const {
  return frame_.Get();
}
inline void relocalizeRequest::_internal_set_frame(const std::string& value) {
  
  frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* relocalizeRequest::_internal_mutable_frame() {
  
  return frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* relocalizeRequest::release_frame() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizer.relocalizeRequest.frame)
  return frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void relocalizeRequest::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizer.relocalizeRequest.frame)
}

// bytes pose = 2;
inline void relocalizeRequest::clear_pose() {
  pose_.ClearToEmpty();
}
inline const std::string& relocalizeRequest::pose() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizer.relocalizeRequest.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeRequest::set_pose(ArgT0&& arg0, ArgT... args) {
 
 pose_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizer.relocalizeRequest.pose)
}
inline std::string* relocalizeRequest::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizer.relocalizeRequest.pose)
  return _s;
}
inline const std::string& relocalizeRequest::_internal_pose() const {
  return pose_.Get();
}
inline void relocalizeRequest::_internal_set_pose(const std::string& value) {
  
  pose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* relocalizeRequest::_internal_mutable_pose() {
  
  return pose_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* relocalizeRequest::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizer.relocalizeRequest.pose)
  return pose_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void relocalizeRequest::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  pose_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pose,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizer.relocalizeRequest.pose)
}

// -------------------------------------------------------------------

// relocalizeResponse

// bytes pose = 1;
inline void relocalizeResponse::clear_pose() {
  pose_.ClearToEmpty();
}
inline const std::string& relocalizeResponse::pose() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizer.relocalizeResponse.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void relocalizeResponse::set_pose(ArgT0&& arg0, ArgT... args) {
 
 pose_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRelocalizer.relocalizeResponse.pose)
}
inline std::string* relocalizeResponse::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcIRelocalizer.relocalizeResponse.pose)
  return _s;
}
inline const std::string& relocalizeResponse::_internal_pose() const {
  return pose_.Get();
}
inline void relocalizeResponse::_internal_set_pose(const std::string& value) {
  
  pose_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* relocalizeResponse::_internal_mutable_pose() {
  
  return pose_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* relocalizeResponse::release_pose() {
  // @@protoc_insertion_point(field_release:grpcIRelocalizer.relocalizeResponse.pose)
  return pose_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void relocalizeResponse::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  pose_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pose,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRelocalizer.relocalizeResponse.pose)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void relocalizeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 relocalizeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 relocalizeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRelocalizer.relocalizeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void relocalizeResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void relocalizeResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRelocalizer.relocalizeResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIRelocalizer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIRelocalizerService_2eproto
