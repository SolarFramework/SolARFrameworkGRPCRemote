syntax = "proto3";

import "google/protobuf/empty.proto";

package grpcIRGBDCamera;

message startRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message startResponse
{
sint32 xpcfGrpcReturnValue = 1;
}

message stopRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message stopResponse
{
sint32 xpcfGrpcReturnValue = 1;
}

message getNextImageRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes img = 2;
}

message getNextImageResponse
{
bytes img = 1;
sint32 xpcfGrpcReturnValue = 2;
}

message setResolutionRequest
{
bytes resolution = 1;
}

message setIntrinsicParametersRequest
{
bytes intrinsic_parameters = 1;
}

message setDistortionParametersRequest
{
bytes distortion_parameters = 1;
}

message setParametersRequest
{
bytes parameters = 1;
}

message getResolutionRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getResolutionResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getIntrinsicsParametersRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getIntrinsicsParametersResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getParametersRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getParametersResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getDistortionParametersRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getDistortionParametersResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getNextDepthFrameRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes img = 2;
}

message getNextDepthFrameResponse
{
bytes img = 1;
sint32 xpcfGrpcReturnValue = 2;
}

message getPointCloudRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes pc = 2;
}

message getPointCloudResponse
{
bytes pc = 1;
sint32 xpcfGrpcReturnValue = 2;
}

message setDepthResolutionRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes resolution = 2;
}

message setDepthResolutionResponse
{
sint32 xpcfGrpcReturnValue = 1;
}

message setIntrinsicDepthParametersRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes intrinsic_parameters = 2;
}

message setIntrinsicDepthParametersResponse
{
sint32 xpcfGrpcReturnValue = 1;
}

message setDistortionDepthParametersRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes distortion_parameters = 2;
}

message setDistortionDepthParametersResponse
{
sint32 xpcfGrpcReturnValue = 1;
}

message getDepthResolutionRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getDepthResolutionResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getDepthMinDistanceRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getDepthMinDistanceResponse
{
float xpcfGrpcReturnValue = 1;
}

message getIntrinsicsDepthParametersRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getIntrinsicsDepthParametersResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getDistortionDepthParametersRequest
{
int32 grpcServerCompressionFormat  = 1;
}

message getDistortionDepthParametersResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getNextRGBDFrameRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes colorImg = 2;
bytes depthImg = 3;
}

message getNextRGBDFrameResponse
{
bytes colorImg = 1;
bytes depthImg = 2;
sint32 xpcfGrpcReturnValue = 3;
}

message alignDepthToColorRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes alignedDepthImg = 2;
}

message alignDepthToColorResponse
{
bytes alignedDepthImg = 1;
sint32 xpcfGrpcReturnValue = 2;
}

message alignColorToDepthRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes alignedColorImg = 2;
}

message alignColorToDepthResponse
{
bytes alignedColorImg = 1;
sint32 xpcfGrpcReturnValue = 2;
}

message getPixelToWorldRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes inPixel = 2;
}

message getPixelToWorldResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getWorldToPixelRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes in3DPoint = 2;
}

message getWorldToPixelResponse
{
bytes xpcfGrpcReturnValue = 1;
}

message getWorldToPixelsRequest
{
int32 grpcServerCompressionFormat  = 1;
bytes in3DPoints = 2;
}

message getWorldToPixelsResponse
{
bytes xpcfGrpcReturnValue = 1;
}

service grpcIRGBDCameraService {
rpc start(startRequest) returns(startResponse) {}
rpc stop(stopRequest) returns(stopResponse) {}
rpc getNextImage(getNextImageRequest) returns(getNextImageResponse) {}
rpc setResolution(setResolutionRequest) returns(google.protobuf.Empty) {}
rpc setIntrinsicParameters(setIntrinsicParametersRequest) returns(google.protobuf.Empty) {}
rpc setDistortionParameters(setDistortionParametersRequest) returns(google.protobuf.Empty) {}
rpc setParameters(setParametersRequest) returns(google.protobuf.Empty) {}
rpc getResolution(getResolutionRequest) returns(getResolutionResponse) {}
rpc getIntrinsicsParameters(getIntrinsicsParametersRequest) returns(getIntrinsicsParametersResponse) {}
rpc getParameters(getParametersRequest) returns(getParametersResponse) {}
rpc getDistortionParameters(getDistortionParametersRequest) returns(getDistortionParametersResponse) {}
rpc getNextDepthFrame(getNextDepthFrameRequest) returns(getNextDepthFrameResponse) {}
rpc getPointCloud(getPointCloudRequest) returns(getPointCloudResponse) {}
rpc setDepthResolution(setDepthResolutionRequest) returns(setDepthResolutionResponse) {}
rpc setIntrinsicDepthParameters(setIntrinsicDepthParametersRequest) returns(setIntrinsicDepthParametersResponse) {}
rpc setDistortionDepthParameters(setDistortionDepthParametersRequest) returns(setDistortionDepthParametersResponse) {}
rpc getDepthResolution(getDepthResolutionRequest) returns(getDepthResolutionResponse) {}
rpc getDepthMinDistance(getDepthMinDistanceRequest) returns(getDepthMinDistanceResponse) {}
rpc getIntrinsicsDepthParameters(getIntrinsicsDepthParametersRequest) returns(getIntrinsicsDepthParametersResponse) {}
rpc getDistortionDepthParameters(getDistortionDepthParametersRequest) returns(getDistortionDepthParametersResponse) {}
rpc getNextRGBDFrame(getNextRGBDFrameRequest) returns(getNextRGBDFrameResponse) {}
rpc alignDepthToColor(alignDepthToColorRequest) returns(alignDepthToColorResponse) {}
rpc alignColorToDepth(alignColorToDepthRequest) returns(alignColorToDepthResponse) {}
rpc getPixelToWorld(getPixelToWorldRequest) returns(getPixelToWorldResponse) {}
rpc getWorldToPixel(getWorldToPixelRequest) returns(getWorldToPixelResponse) {}
rpc getWorldToPixels(getWorldToPixelsRequest) returns(getWorldToPixelsResponse) {}
}

