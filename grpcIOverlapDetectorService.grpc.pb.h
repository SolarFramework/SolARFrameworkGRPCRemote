// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIOverlapDetectorService.proto
#ifndef GRPC_grpcIOverlapDetectorService_2eproto__INCLUDED
#define GRPC_grpcIOverlapDetectorService_2eproto__INCLUDED

#include "grpcIOverlapDetectorService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIOverlapDetector {

class grpcIOverlapDetectorService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIOverlapDetector.grpcIOverlapDetectorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status setCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetCameraParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status detect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpcIOverlapDetector::detect_grpc0Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc0Response>> Asyncdetect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc0Response>>(Asyncdetect_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc0Response>> PrepareAsyncdetect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc0Response>>(PrepareAsyncdetect_grpc0Raw(context, request, cq));
    }
    virtual ::grpc::Status detect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpcIOverlapDetector::detect_grpc1Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc1Response>> Asyncdetect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc1Response>>(Asyncdetect_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc1Response>> PrepareAsyncdetect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc1Response>>(PrepareAsyncdetect_grpc1Raw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void setCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void detect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request* request, ::grpcIOverlapDetector::detect_grpc0Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request* request, ::grpcIOverlapDetector::detect_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void detect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request* request, ::grpcIOverlapDetector::detect_grpc1Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void detect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request* request, ::grpcIOverlapDetector::detect_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc0Response>* Asyncdetect_grpc0Raw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc0Response>* PrepareAsyncdetect_grpc0Raw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc1Response>* Asyncdetect_grpc1Raw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIOverlapDetector::detect_grpc1Response>* PrepareAsyncdetect_grpc1Raw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status setCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetCameraParametersRaw(context, request, cq));
    }
    ::grpc::Status detect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpcIOverlapDetector::detect_grpc0Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc0Response>> Asyncdetect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc0Response>>(Asyncdetect_grpc0Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc0Response>> PrepareAsyncdetect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc0Response>>(PrepareAsyncdetect_grpc0Raw(context, request, cq));
    }
    ::grpc::Status detect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpcIOverlapDetector::detect_grpc1Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc1Response>> Asyncdetect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc1Response>>(Asyncdetect_grpc1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc1Response>> PrepareAsyncdetect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc1Response>>(PrepareAsyncdetect_grpc1Raw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void setCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void setCameraParameters(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void detect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request* request, ::grpcIOverlapDetector::detect_grpc0Response* response, std::function<void(::grpc::Status)>) override;
      void detect_grpc0(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request* request, ::grpcIOverlapDetector::detect_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void detect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request* request, ::grpcIOverlapDetector::detect_grpc1Response* response, std::function<void(::grpc::Status)>) override;
      void detect_grpc1(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request* request, ::grpcIOverlapDetector::detect_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetCameraParametersRaw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc0Response>* Asyncdetect_grpc0Raw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc0Response>* PrepareAsyncdetect_grpc0Raw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc0Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc1Response>* Asyncdetect_grpc1Raw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIOverlapDetector::detect_grpc1Response>* PrepareAsyncdetect_grpc1Raw(::grpc::ClientContext* context, const ::grpcIOverlapDetector::detect_grpc1Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_setCameraParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_detect_grpc0_;
    const ::grpc::internal::RpcMethod rpcmethod_detect_grpc1_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status setCameraParameters(::grpc::ServerContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status detect_grpc0(::grpc::ServerContext* context, const ::grpcIOverlapDetector::detect_grpc0Request* request, ::grpcIOverlapDetector::detect_grpc0Response* response);
    virtual ::grpc::Status detect_grpc1(::grpc::ServerContext* context, const ::grpcIOverlapDetector::detect_grpc1Request* request, ::grpcIOverlapDetector::detect_grpc1Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::setCameraParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters(::grpc::ServerContext* context, ::grpcIOverlapDetector::setCameraParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_detect_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_detect_grpc0() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_detect_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc0Request* /*request*/, ::grpcIOverlapDetector::detect_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdetect_grpc0(::grpc::ServerContext* context, ::grpcIOverlapDetector::detect_grpc0Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIOverlapDetector::detect_grpc0Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_detect_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_detect_grpc1() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_detect_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc1Request* /*request*/, ::grpcIOverlapDetector::detect_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdetect_grpc1(::grpc::ServerContext* context, ::grpcIOverlapDetector::detect_grpc1Request* request, ::grpc::ServerAsyncResponseWriter< ::grpcIOverlapDetector::detect_grpc1Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setCameraParameters<WithAsyncMethod_detect_grpc0<WithAsyncMethod_detect_grpc1<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIOverlapDetector::setCameraParametersRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIOverlapDetector::setCameraParametersRequest* request, ::google::protobuf::Empty* response) { return this->setCameraParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setCameraParameters(
        ::grpc::MessageAllocator< ::grpcIOverlapDetector::setCameraParametersRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIOverlapDetector::setCameraParametersRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::setCameraParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIOverlapDetector::setCameraParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_detect_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_detect_grpc0() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIOverlapDetector::detect_grpc0Request, ::grpcIOverlapDetector::detect_grpc0Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIOverlapDetector::detect_grpc0Request* request, ::grpcIOverlapDetector::detect_grpc0Response* response) { return this->detect_grpc0(context, request, response); }));}
    void SetMessageAllocatorFor_detect_grpc0(
        ::grpc::MessageAllocator< ::grpcIOverlapDetector::detect_grpc0Request, ::grpcIOverlapDetector::detect_grpc0Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIOverlapDetector::detect_grpc0Request, ::grpcIOverlapDetector::detect_grpc0Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_detect_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc0Request* /*request*/, ::grpcIOverlapDetector::detect_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* detect_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc0Request* /*request*/, ::grpcIOverlapDetector::detect_grpc0Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_detect_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_detect_grpc1() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIOverlapDetector::detect_grpc1Request, ::grpcIOverlapDetector::detect_grpc1Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpcIOverlapDetector::detect_grpc1Request* request, ::grpcIOverlapDetector::detect_grpc1Response* response) { return this->detect_grpc1(context, request, response); }));}
    void SetMessageAllocatorFor_detect_grpc1(
        ::grpc::MessageAllocator< ::grpcIOverlapDetector::detect_grpc1Request, ::grpcIOverlapDetector::detect_grpc1Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIOverlapDetector::detect_grpc1Request, ::grpcIOverlapDetector::detect_grpc1Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_detect_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc1Request* /*request*/, ::grpcIOverlapDetector::detect_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* detect_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc1Request* /*request*/, ::grpcIOverlapDetector::detect_grpc1Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_setCameraParameters<WithCallbackMethod_detect_grpc0<WithCallbackMethod_detect_grpc1<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::setCameraParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_detect_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_detect_grpc0() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_detect_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc0Request* /*request*/, ::grpcIOverlapDetector::detect_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_detect_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_detect_grpc1() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_detect_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc1Request* /*request*/, ::grpcIOverlapDetector::detect_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::setCameraParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetCameraParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_detect_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_detect_grpc0() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_detect_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc0Request* /*request*/, ::grpcIOverlapDetector::detect_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdetect_grpc0(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_detect_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_detect_grpc1() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_detect_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc1Request* /*request*/, ::grpcIOverlapDetector::detect_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestdetect_grpc1(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setCameraParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::setCameraParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* setCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_detect_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_detect_grpc0() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->detect_grpc0(context, request, response); }));
    }
    ~WithRawCallbackMethod_detect_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc0Request* /*request*/, ::grpcIOverlapDetector::detect_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* detect_grpc0(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_detect_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_detect_grpc1() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->detect_grpc1(context, request, response); }));
    }
    ~WithRawCallbackMethod_detect_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status detect_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc1Request* /*request*/, ::grpcIOverlapDetector::detect_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* detect_grpc1(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setCameraParameters() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIOverlapDetector::setCameraParametersRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIOverlapDetector::setCameraParametersRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetCameraParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setCameraParameters(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::setCameraParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetCameraParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIOverlapDetector::setCameraParametersRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_detect_grpc0 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_detect_grpc0() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIOverlapDetector::detect_grpc0Request, ::grpcIOverlapDetector::detect_grpc0Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIOverlapDetector::detect_grpc0Request, ::grpcIOverlapDetector::detect_grpc0Response>* streamer) {
                       return this->Streameddetect_grpc0(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_detect_grpc0() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status detect_grpc0(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc0Request* /*request*/, ::grpcIOverlapDetector::detect_grpc0Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddetect_grpc0(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIOverlapDetector::detect_grpc0Request,::grpcIOverlapDetector::detect_grpc0Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_detect_grpc1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_detect_grpc1() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIOverlapDetector::detect_grpc1Request, ::grpcIOverlapDetector::detect_grpc1Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIOverlapDetector::detect_grpc1Request, ::grpcIOverlapDetector::detect_grpc1Response>* streamer) {
                       return this->Streameddetect_grpc1(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_detect_grpc1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status detect_grpc1(::grpc::ServerContext* /*context*/, const ::grpcIOverlapDetector::detect_grpc1Request* /*request*/, ::grpcIOverlapDetector::detect_grpc1Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streameddetect_grpc1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIOverlapDetector::detect_grpc1Request,::grpcIOverlapDetector::detect_grpc1Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_setCameraParameters<WithStreamedUnaryMethod_detect_grpc0<WithStreamedUnaryMethod_detect_grpc1<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_setCameraParameters<WithStreamedUnaryMethod_detect_grpc0<WithStreamedUnaryMethod_detect_grpc1<Service > > > StreamedService;
};

}  // namespace grpcIOverlapDetector


#endif  // GRPC_grpcIOverlapDetectorService_2eproto__INCLUDED
