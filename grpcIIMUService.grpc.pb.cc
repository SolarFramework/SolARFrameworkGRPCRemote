// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIIMUService.proto

#include "grpcIIMUService.pb.h"
#include "grpcIIMUService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIIMU {

static const char* grpcIIMUService_method_names[] = {
  "/grpcIIMU.grpcIIMUService/start",
  "/grpcIIMU.grpcIIMUService/stop",
  "/grpcIIMU.grpcIIMUService/getGyroscopeData",
  "/grpcIIMU.grpcIIMUService/getAccelerometerData",
  "/grpcIIMU.grpcIIMUService/getMagnetometerData",
  "/grpcIIMU.grpcIIMUService/getAllSensorsData",
  "/grpcIIMU.grpcIIMUService/isGyroscopeAvailable",
  "/grpcIIMU.grpcIIMUService/isAccelerometerAvailable",
  "/grpcIIMU.grpcIIMUService/isMagnetometerAvailable",
};

std::unique_ptr< grpcIIMUService::Stub> grpcIIMUService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIIMUService::Stub> stub(new grpcIIMUService::Stub(channel));
  return stub;
}

grpcIIMUService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_start_(grpcIIMUService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcIIMUService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getGyroscopeData_(grpcIIMUService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAccelerometerData_(grpcIIMUService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getMagnetometerData_(grpcIIMUService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllSensorsData_(grpcIIMUService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isGyroscopeAvailable_(grpcIIMUService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isAccelerometerAvailable_(grpcIIMUService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isMagnetometerAvailable_(grpcIIMUService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIIMUService::Stub::start(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIIMU::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcIIMUService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcIIMUService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::startResponse>* grpcIIMUService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIIMU::startResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::startResponse>* grpcIIMUService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIIMUService::Stub::stop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIIMU::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcIIMUService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcIIMUService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::stopResponse>* grpcIIMUService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIIMU::stopResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::stopResponse>* grpcIIMUService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIIMUService::Stub::getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpcIIMU::getGyroscopeDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIIMU::getGyroscopeDataRequest, ::grpcIIMU::getGyroscopeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getGyroscopeData_, context, request, response);
}

void grpcIIMUService::Stub::experimental_async::getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIIMU::getGyroscopeDataRequest, ::grpcIIMU::getGyroscopeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGyroscopeData_, context, request, response, std::move(f));
}

void grpcIIMUService::Stub::experimental_async::getGyroscopeData(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getGyroscopeData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::getGyroscopeDataResponse>* grpcIIMUService::Stub::PrepareAsyncgetGyroscopeDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIIMU::getGyroscopeDataResponse, ::grpcIIMU::getGyroscopeDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getGyroscopeData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::getGyroscopeDataResponse>* grpcIIMUService::Stub::AsyncgetGyroscopeDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getGyroscopeDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetGyroscopeDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIIMUService::Stub::getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpcIIMU::getAccelerometerDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIIMU::getAccelerometerDataRequest, ::grpcIIMU::getAccelerometerDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAccelerometerData_, context, request, response);
}

void grpcIIMUService::Stub::experimental_async::getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIIMU::getAccelerometerDataRequest, ::grpcIIMU::getAccelerometerDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAccelerometerData_, context, request, response, std::move(f));
}

void grpcIIMUService::Stub::experimental_async::getAccelerometerData(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAccelerometerData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAccelerometerDataResponse>* grpcIIMUService::Stub::PrepareAsyncgetAccelerometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIIMU::getAccelerometerDataResponse, ::grpcIIMU::getAccelerometerDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAccelerometerData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAccelerometerDataResponse>* grpcIIMUService::Stub::AsyncgetAccelerometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAccelerometerDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAccelerometerDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIIMUService::Stub::getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpcIIMU::getMagnetometerDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIIMU::getMagnetometerDataRequest, ::grpcIIMU::getMagnetometerDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getMagnetometerData_, context, request, response);
}

void grpcIIMUService::Stub::experimental_async::getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIIMU::getMagnetometerDataRequest, ::grpcIIMU::getMagnetometerDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMagnetometerData_, context, request, response, std::move(f));
}

void grpcIIMUService::Stub::experimental_async::getMagnetometerData(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getMagnetometerData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::getMagnetometerDataResponse>* grpcIIMUService::Stub::PrepareAsyncgetMagnetometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIIMU::getMagnetometerDataResponse, ::grpcIIMU::getMagnetometerDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getMagnetometerData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::getMagnetometerDataResponse>* grpcIIMUService::Stub::AsyncgetMagnetometerDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getMagnetometerDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetMagnetometerDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIIMUService::Stub::getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpcIIMU::getAllSensorsDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIIMU::getAllSensorsDataRequest, ::grpcIIMU::getAllSensorsDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllSensorsData_, context, request, response);
}

void grpcIIMUService::Stub::experimental_async::getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIIMU::getAllSensorsDataRequest, ::grpcIIMU::getAllSensorsDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllSensorsData_, context, request, response, std::move(f));
}

void grpcIIMUService::Stub::experimental_async::getAllSensorsData(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllSensorsData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAllSensorsDataResponse>* grpcIIMUService::Stub::PrepareAsyncgetAllSensorsDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIIMU::getAllSensorsDataResponse, ::grpcIIMU::getAllSensorsDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllSensorsData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::getAllSensorsDataResponse>* grpcIIMUService::Stub::AsyncgetAllSensorsDataRaw(::grpc::ClientContext* context, const ::grpcIIMU::getAllSensorsDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllSensorsDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIIMUService::Stub::isGyroscopeAvailable(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIIMU::isGyroscopeAvailableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::isGyroscopeAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isGyroscopeAvailable_, context, request, response);
}

void grpcIIMUService::Stub::experimental_async::isGyroscopeAvailable(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::isGyroscopeAvailableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::isGyroscopeAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isGyroscopeAvailable_, context, request, response, std::move(f));
}

void grpcIIMUService::Stub::experimental_async::isGyroscopeAvailable(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::isGyroscopeAvailableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isGyroscopeAvailable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::isGyroscopeAvailableResponse>* grpcIIMUService::Stub::PrepareAsyncisGyroscopeAvailableRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIIMU::isGyroscopeAvailableResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isGyroscopeAvailable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::isGyroscopeAvailableResponse>* grpcIIMUService::Stub::AsyncisGyroscopeAvailableRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisGyroscopeAvailableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIIMUService::Stub::isAccelerometerAvailable(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIIMU::isAccelerometerAvailableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::isAccelerometerAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isAccelerometerAvailable_, context, request, response);
}

void grpcIIMUService::Stub::experimental_async::isAccelerometerAvailable(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::isAccelerometerAvailableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::isAccelerometerAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isAccelerometerAvailable_, context, request, response, std::move(f));
}

void grpcIIMUService::Stub::experimental_async::isAccelerometerAvailable(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::isAccelerometerAvailableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isAccelerometerAvailable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::isAccelerometerAvailableResponse>* grpcIIMUService::Stub::PrepareAsyncisAccelerometerAvailableRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIIMU::isAccelerometerAvailableResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isAccelerometerAvailable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::isAccelerometerAvailableResponse>* grpcIIMUService::Stub::AsyncisAccelerometerAvailableRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisAccelerometerAvailableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIIMUService::Stub::isMagnetometerAvailable(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIIMU::isMagnetometerAvailableResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::isMagnetometerAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isMagnetometerAvailable_, context, request, response);
}

void grpcIIMUService::Stub::experimental_async::isMagnetometerAvailable(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::isMagnetometerAvailableResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIIMU::isMagnetometerAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isMagnetometerAvailable_, context, request, response, std::move(f));
}

void grpcIIMUService::Stub::experimental_async::isMagnetometerAvailable(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::isMagnetometerAvailableResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isMagnetometerAvailable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::isMagnetometerAvailableResponse>* grpcIIMUService::Stub::PrepareAsyncisMagnetometerAvailableRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIIMU::isMagnetometerAvailableResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isMagnetometerAvailable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIIMU::isMagnetometerAvailableResponse>* grpcIIMUService::Stub::AsyncisMagnetometerAvailableRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisMagnetometerAvailableRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIIMUService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIIMUService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIIMUService::Service, ::google::protobuf::Empty, ::grpcIIMU::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIIMUService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIIMU::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIIMUService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIIMUService::Service, ::google::protobuf::Empty, ::grpcIIMU::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIIMUService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIIMU::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIIMUService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIIMUService::Service, ::grpcIIMU::getGyroscopeDataRequest, ::grpcIIMU::getGyroscopeDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIIMUService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIIMU::getGyroscopeDataRequest* req,
             ::grpcIIMU::getGyroscopeDataResponse* resp) {
               return service->getGyroscopeData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIIMUService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIIMUService::Service, ::grpcIIMU::getAccelerometerDataRequest, ::grpcIIMU::getAccelerometerDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIIMUService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIIMU::getAccelerometerDataRequest* req,
             ::grpcIIMU::getAccelerometerDataResponse* resp) {
               return service->getAccelerometerData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIIMUService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIIMUService::Service, ::grpcIIMU::getMagnetometerDataRequest, ::grpcIIMU::getMagnetometerDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIIMUService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIIMU::getMagnetometerDataRequest* req,
             ::grpcIIMU::getMagnetometerDataResponse* resp) {
               return service->getMagnetometerData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIIMUService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIIMUService::Service, ::grpcIIMU::getAllSensorsDataRequest, ::grpcIIMU::getAllSensorsDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIIMUService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIIMU::getAllSensorsDataRequest* req,
             ::grpcIIMU::getAllSensorsDataResponse* resp) {
               return service->getAllSensorsData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIIMUService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIIMUService::Service, ::google::protobuf::Empty, ::grpcIIMU::isGyroscopeAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIIMUService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIIMU::isGyroscopeAvailableResponse* resp) {
               return service->isGyroscopeAvailable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIIMUService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIIMUService::Service, ::google::protobuf::Empty, ::grpcIIMU::isAccelerometerAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIIMUService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIIMU::isAccelerometerAvailableResponse* resp) {
               return service->isAccelerometerAvailable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIIMUService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIIMUService::Service, ::google::protobuf::Empty, ::grpcIIMU::isMagnetometerAvailableResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIIMUService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIIMU::isMagnetometerAvailableResponse* resp) {
               return service->isMagnetometerAvailable(ctx, req, resp);
             }, this)));
}

grpcIIMUService::Service::~Service() {
}

::grpc::Status grpcIIMUService::Service::start(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIIMUService::Service::stop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIIMUService::Service::getGyroscopeData(::grpc::ServerContext* context, const ::grpcIIMU::getGyroscopeDataRequest* request, ::grpcIIMU::getGyroscopeDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIIMUService::Service::getAccelerometerData(::grpc::ServerContext* context, const ::grpcIIMU::getAccelerometerDataRequest* request, ::grpcIIMU::getAccelerometerDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIIMUService::Service::getMagnetometerData(::grpc::ServerContext* context, const ::grpcIIMU::getMagnetometerDataRequest* request, ::grpcIIMU::getMagnetometerDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIIMUService::Service::getAllSensorsData(::grpc::ServerContext* context, const ::grpcIIMU::getAllSensorsDataRequest* request, ::grpcIIMU::getAllSensorsDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIIMUService::Service::isGyroscopeAvailable(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::isGyroscopeAvailableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIIMUService::Service::isAccelerometerAvailable(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::isAccelerometerAvailableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIIMUService::Service::isMagnetometerAvailable(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIIMU::isMagnetometerAvailableResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIIMU

