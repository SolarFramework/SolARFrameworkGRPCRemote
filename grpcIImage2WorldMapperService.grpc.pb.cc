// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIImage2WorldMapperService.proto

#include "grpcIImage2WorldMapperService.pb.h"
#include "grpcIImage2WorldMapperService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIImage2WorldMapper {

static const char* grpcIImage2WorldMapperService_method_names[] = {
  "/grpcIImage2WorldMapper.grpcIImage2WorldMapperService/map",
};

std::unique_ptr< grpcIImage2WorldMapperService::Stub> grpcIImage2WorldMapperService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIImage2WorldMapperService::Stub> stub(new grpcIImage2WorldMapperService::Stub(channel));
  return stub;
}

grpcIImage2WorldMapperService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_map_(grpcIImage2WorldMapperService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIImage2WorldMapperService::Stub::map(::grpc::ClientContext* context, const ::grpcIImage2WorldMapper::mapRequest& request, ::grpcIImage2WorldMapper::mapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIImage2WorldMapper::mapRequest, ::grpcIImage2WorldMapper::mapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_map_, context, request, response);
}

void grpcIImage2WorldMapperService::Stub::experimental_async::map(::grpc::ClientContext* context, const ::grpcIImage2WorldMapper::mapRequest* request, ::grpcIImage2WorldMapper::mapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIImage2WorldMapper::mapRequest, ::grpcIImage2WorldMapper::mapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_map_, context, request, response, std::move(f));
}

void grpcIImage2WorldMapperService::Stub::experimental_async::map(::grpc::ClientContext* context, const ::grpcIImage2WorldMapper::mapRequest* request, ::grpcIImage2WorldMapper::mapResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_map_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIImage2WorldMapper::mapResponse>* grpcIImage2WorldMapperService::Stub::PrepareAsyncmapRaw(::grpc::ClientContext* context, const ::grpcIImage2WorldMapper::mapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIImage2WorldMapper::mapResponse, ::grpcIImage2WorldMapper::mapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_map_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIImage2WorldMapper::mapResponse>* grpcIImage2WorldMapperService::Stub::AsyncmapRaw(::grpc::ClientContext* context, const ::grpcIImage2WorldMapper::mapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmapRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIImage2WorldMapperService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIImage2WorldMapperService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIImage2WorldMapperService::Service, ::grpcIImage2WorldMapper::mapRequest, ::grpcIImage2WorldMapper::mapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIImage2WorldMapperService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIImage2WorldMapper::mapRequest* req,
             ::grpcIImage2WorldMapper::mapResponse* resp) {
               return service->map(ctx, req, resp);
             }, this)));
}

grpcIImage2WorldMapperService::Service::~Service() {
}

::grpc::Status grpcIImage2WorldMapperService::Service::map(::grpc::ServerContext* context, const ::grpcIImage2WorldMapper::mapRequest* request, ::grpcIImage2WorldMapper::mapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIImage2WorldMapper

