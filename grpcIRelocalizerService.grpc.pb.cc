// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIRelocalizerService.proto

#include "grpcIRelocalizerService.pb.h"
#include "grpcIRelocalizerService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIRelocalizer {

static const char* grpcIRelocalizerService_method_names[] = {
  "/grpcIRelocalizer.grpcIRelocalizerService/addKeyframe",
  "/grpcIRelocalizer.grpcIRelocalizerService/relocalize",
};

std::unique_ptr< grpcIRelocalizerService::Stub> grpcIRelocalizerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIRelocalizerService::Stub> stub(new grpcIRelocalizerService::Stub(channel));
  return stub;
}

grpcIRelocalizerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_addKeyframe_(grpcIRelocalizerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_relocalize_(grpcIRelocalizerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIRelocalizerService::Stub::addKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpcIRelocalizer::addKeyframeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRelocalizer::addKeyframeRequest, ::grpcIRelocalizer::addKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addKeyframe_, context, request, response);
}

void grpcIRelocalizerService::Stub::experimental_async::addKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest* request, ::grpcIRelocalizer::addKeyframeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRelocalizer::addKeyframeRequest, ::grpcIRelocalizer::addKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addKeyframe_, context, request, response, std::move(f));
}

void grpcIRelocalizerService::Stub::experimental_async::addKeyframe(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest* request, ::grpcIRelocalizer::addKeyframeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addKeyframe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::addKeyframeResponse>* grpcIRelocalizerService::Stub::PrepareAsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRelocalizer::addKeyframeResponse, ::grpcIRelocalizer::addKeyframeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addKeyframe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::addKeyframeResponse>* grpcIRelocalizerService::Stub::AsyncaddKeyframeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::addKeyframeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddKeyframeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIRelocalizerService::Stub::relocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpcIRelocalizer::relocalizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIRelocalizer::relocalizeRequest, ::grpcIRelocalizer::relocalizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_relocalize_, context, request, response);
}

void grpcIRelocalizerService::Stub::experimental_async::relocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest* request, ::grpcIRelocalizer::relocalizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIRelocalizer::relocalizeRequest, ::grpcIRelocalizer::relocalizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalize_, context, request, response, std::move(f));
}

void grpcIRelocalizerService::Stub::experimental_async::relocalize(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest* request, ::grpcIRelocalizer::relocalizeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_relocalize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::relocalizeResponse>* grpcIRelocalizerService::Stub::PrepareAsyncrelocalizeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIRelocalizer::relocalizeResponse, ::grpcIRelocalizer::relocalizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_relocalize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIRelocalizer::relocalizeResponse>* grpcIRelocalizerService::Stub::AsyncrelocalizeRaw(::grpc::ClientContext* context, const ::grpcIRelocalizer::relocalizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrelocalizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIRelocalizerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRelocalizerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRelocalizerService::Service, ::grpcIRelocalizer::addKeyframeRequest, ::grpcIRelocalizer::addKeyframeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRelocalizerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRelocalizer::addKeyframeRequest* req,
             ::grpcIRelocalizer::addKeyframeResponse* resp) {
               return service->addKeyframe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIRelocalizerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIRelocalizerService::Service, ::grpcIRelocalizer::relocalizeRequest, ::grpcIRelocalizer::relocalizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIRelocalizerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIRelocalizer::relocalizeRequest* req,
             ::grpcIRelocalizer::relocalizeResponse* resp) {
               return service->relocalize(ctx, req, resp);
             }, this)));
}

grpcIRelocalizerService::Service::~Service() {
}

::grpc::Status grpcIRelocalizerService::Service::addKeyframe(::grpc::ServerContext* context, const ::grpcIRelocalizer::addKeyframeRequest* request, ::grpcIRelocalizer::addKeyframeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIRelocalizerService::Service::relocalize(::grpc::ServerContext* context, const ::grpcIRelocalizer::relocalizeRequest* request, ::grpcIRelocalizer::relocalizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIRelocalizer

