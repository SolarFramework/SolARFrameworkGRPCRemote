// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIBundlerService.proto

#include "grpcIBundlerService.pb.h"
#include "grpcIBundlerService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIBundler {

static const char* grpcIBundlerService_method_names[] = {
  "/grpcIBundler.grpcIBundlerService/setMapper",
  "/grpcIBundler.grpcIBundlerService/bundleAdjustment",
};

std::unique_ptr< grpcIBundlerService::Stub> grpcIBundlerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIBundlerService::Stub> stub(new grpcIBundlerService::Stub(channel));
  return stub;
}

grpcIBundlerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setMapper_(grpcIBundlerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_bundleAdjustment_(grpcIBundlerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIBundlerService::Stub::setMapper(::grpc::ClientContext* context, const ::grpcIBundler::setMapperRequest& request, ::grpcIBundler::setMapperResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIBundler::setMapperRequest, ::grpcIBundler::setMapperResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setMapper_, context, request, response);
}

void grpcIBundlerService::Stub::experimental_async::setMapper(::grpc::ClientContext* context, const ::grpcIBundler::setMapperRequest* request, ::grpcIBundler::setMapperResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIBundler::setMapperRequest, ::grpcIBundler::setMapperResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMapper_, context, request, response, std::move(f));
}

void grpcIBundlerService::Stub::experimental_async::setMapper(::grpc::ClientContext* context, const ::grpcIBundler::setMapperRequest* request, ::grpcIBundler::setMapperResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMapper_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIBundler::setMapperResponse>* grpcIBundlerService::Stub::PrepareAsyncsetMapperRaw(::grpc::ClientContext* context, const ::grpcIBundler::setMapperRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIBundler::setMapperResponse, ::grpcIBundler::setMapperRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setMapper_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIBundler::setMapperResponse>* grpcIBundlerService::Stub::AsyncsetMapperRaw(::grpc::ClientContext* context, const ::grpcIBundler::setMapperRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetMapperRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIBundlerService::Stub::bundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpcIBundler::bundleAdjustmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIBundler::bundleAdjustmentRequest, ::grpcIBundler::bundleAdjustmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_bundleAdjustment_, context, request, response);
}

void grpcIBundlerService::Stub::experimental_async::bundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest* request, ::grpcIBundler::bundleAdjustmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIBundler::bundleAdjustmentRequest, ::grpcIBundler::bundleAdjustmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bundleAdjustment_, context, request, response, std::move(f));
}

void grpcIBundlerService::Stub::experimental_async::bundleAdjustment(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest* request, ::grpcIBundler::bundleAdjustmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_bundleAdjustment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIBundler::bundleAdjustmentResponse>* grpcIBundlerService::Stub::PrepareAsyncbundleAdjustmentRaw(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIBundler::bundleAdjustmentResponse, ::grpcIBundler::bundleAdjustmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_bundleAdjustment_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIBundler::bundleAdjustmentResponse>* grpcIBundlerService::Stub::AsyncbundleAdjustmentRaw(::grpc::ClientContext* context, const ::grpcIBundler::bundleAdjustmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncbundleAdjustmentRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIBundlerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIBundlerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIBundlerService::Service, ::grpcIBundler::setMapperRequest, ::grpcIBundler::setMapperResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIBundlerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIBundler::setMapperRequest* req,
             ::grpcIBundler::setMapperResponse* resp) {
               return service->setMapper(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIBundlerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIBundlerService::Service, ::grpcIBundler::bundleAdjustmentRequest, ::grpcIBundler::bundleAdjustmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIBundlerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIBundler::bundleAdjustmentRequest* req,
             ::grpcIBundler::bundleAdjustmentResponse* resp) {
               return service->bundleAdjustment(ctx, req, resp);
             }, this)));
}

grpcIBundlerService::Service::~Service() {
}

::grpc::Status grpcIBundlerService::Service::setMapper(::grpc::ServerContext* context, const ::grpcIBundler::setMapperRequest* request, ::grpcIBundler::setMapperResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIBundlerService::Service::bundleAdjustment(::grpc::ServerContext* context, const ::grpcIBundler::bundleAdjustmentRequest* request, ::grpcIBundler::bundleAdjustmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIBundler

