// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIMapFilterService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIMapFilterService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIMapFilterService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIMapFilterService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIMapFilterService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIMapFilterService_2eproto;
namespace grpcIMapFilter {
class filter_grpc0Request;
struct filter_grpc0RequestDefaultTypeInternal;
extern filter_grpc0RequestDefaultTypeInternal _filter_grpc0Request_default_instance_;
class filter_grpc0Response;
struct filter_grpc0ResponseDefaultTypeInternal;
extern filter_grpc0ResponseDefaultTypeInternal _filter_grpc0Response_default_instance_;
class filter_grpc1Request;
struct filter_grpc1RequestDefaultTypeInternal;
extern filter_grpc1RequestDefaultTypeInternal _filter_grpc1Request_default_instance_;
class filter_grpc1Response;
struct filter_grpc1ResponseDefaultTypeInternal;
extern filter_grpc1ResponseDefaultTypeInternal _filter_grpc1Response_default_instance_;
}  // namespace grpcIMapFilter
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIMapFilter::filter_grpc0Request* Arena::CreateMaybeMessage<::grpcIMapFilter::filter_grpc0Request>(Arena*);
template<> ::grpcIMapFilter::filter_grpc0Response* Arena::CreateMaybeMessage<::grpcIMapFilter::filter_grpc0Response>(Arena*);
template<> ::grpcIMapFilter::filter_grpc1Request* Arena::CreateMaybeMessage<::grpcIMapFilter::filter_grpc1Request>(Arena*);
template<> ::grpcIMapFilter::filter_grpc1Response* Arena::CreateMaybeMessage<::grpcIMapFilter::filter_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIMapFilter {

// ===================================================================

class filter_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapFilter.filter_grpc0Request) */ {
 public:
  inline filter_grpc0Request() : filter_grpc0Request(nullptr) {}
  ~filter_grpc0Request() override;
  explicit constexpr filter_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  filter_grpc0Request(const filter_grpc0Request& from);
  filter_grpc0Request(filter_grpc0Request&& from) noexcept
    : filter_grpc0Request() {
    *this = ::std::move(from);
  }

  inline filter_grpc0Request& operator=(const filter_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline filter_grpc0Request& operator=(filter_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const filter_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const filter_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const filter_grpc0Request*>(
               &_filter_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(filter_grpc0Request& a, filter_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(filter_grpc0Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(filter_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline filter_grpc0Request* New() const final {
    return new filter_grpc0Request();
  }

  filter_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<filter_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const filter_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const filter_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(filter_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapFilter.filter_grpc0Request";
  }
  protected:
  explicit filter_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPose1FieldNumber = 1,
    kPose2FieldNumber = 2,
    kInputFieldNumber = 3,
    kOutputFieldNumber = 4,
  };
  // bytes pose1 = 1;
  void clear_pose1();
  const std::string& pose1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose1();
  PROTOBUF_MUST_USE_RESULT std::string* release_pose1();
  void set_allocated_pose1(std::string* pose1);
  private:
  const std::string& _internal_pose1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose1(const std::string& value);
  std::string* _internal_mutable_pose1();
  public:

  // bytes pose2 = 2;
  void clear_pose2();
  const std::string& pose2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose2();
  PROTOBUF_MUST_USE_RESULT std::string* release_pose2();
  void set_allocated_pose2(std::string* pose2);
  private:
  const std::string& _internal_pose2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose2(const std::string& value);
  std::string* _internal_mutable_pose2();
  public:

  // bytes input = 3;
  void clear_input();
  const std::string& input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input();
  PROTOBUF_MUST_USE_RESULT std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // bytes output = 4;
  void clear_output();
  const std::string& output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output();
  PROTOBUF_MUST_USE_RESULT std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapFilter.filter_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapFilterService_2eproto;
};
// -------------------------------------------------------------------

class filter_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapFilter.filter_grpc0Response) */ {
 public:
  inline filter_grpc0Response() : filter_grpc0Response(nullptr) {}
  ~filter_grpc0Response() override;
  explicit constexpr filter_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  filter_grpc0Response(const filter_grpc0Response& from);
  filter_grpc0Response(filter_grpc0Response&& from) noexcept
    : filter_grpc0Response() {
    *this = ::std::move(from);
  }

  inline filter_grpc0Response& operator=(const filter_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline filter_grpc0Response& operator=(filter_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const filter_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const filter_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const filter_grpc0Response*>(
               &_filter_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(filter_grpc0Response& a, filter_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(filter_grpc0Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(filter_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline filter_grpc0Response* New() const final {
    return new filter_grpc0Response();
  }

  filter_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<filter_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const filter_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const filter_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(filter_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapFilter.filter_grpc0Response";
  }
  protected:
  explicit filter_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 1,
  };
  // bytes output = 1;
  void clear_output();
  const std::string& output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output();
  PROTOBUF_MUST_USE_RESULT std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapFilter.filter_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapFilterService_2eproto;
};
// -------------------------------------------------------------------

class filter_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapFilter.filter_grpc1Request) */ {
 public:
  inline filter_grpc1Request() : filter_grpc1Request(nullptr) {}
  ~filter_grpc1Request() override;
  explicit constexpr filter_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  filter_grpc1Request(const filter_grpc1Request& from);
  filter_grpc1Request(filter_grpc1Request&& from) noexcept
    : filter_grpc1Request() {
    *this = ::std::move(from);
  }

  inline filter_grpc1Request& operator=(const filter_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline filter_grpc1Request& operator=(filter_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const filter_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const filter_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const filter_grpc1Request*>(
               &_filter_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(filter_grpc1Request& a, filter_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(filter_grpc1Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(filter_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline filter_grpc1Request* New() const final {
    return new filter_grpc1Request();
  }

  filter_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<filter_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const filter_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const filter_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(filter_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapFilter.filter_grpc1Request";
  }
  protected:
  explicit filter_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPose1FieldNumber = 1,
    kPose2FieldNumber = 2,
    kInputFieldNumber = 3,
    kOutputFieldNumber = 4,
    kIndexFieldNumber = 5,
  };
  // bytes pose1 = 1;
  void clear_pose1();
  const std::string& pose1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose1();
  PROTOBUF_MUST_USE_RESULT std::string* release_pose1();
  void set_allocated_pose1(std::string* pose1);
  private:
  const std::string& _internal_pose1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose1(const std::string& value);
  std::string* _internal_mutable_pose1();
  public:

  // bytes pose2 = 2;
  void clear_pose2();
  const std::string& pose2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose2();
  PROTOBUF_MUST_USE_RESULT std::string* release_pose2();
  void set_allocated_pose2(std::string* pose2);
  private:
  const std::string& _internal_pose2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose2(const std::string& value);
  std::string* _internal_mutable_pose2();
  public:

  // bytes input = 3;
  void clear_input();
  const std::string& input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input();
  PROTOBUF_MUST_USE_RESULT std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // bytes output = 4;
  void clear_output();
  const std::string& output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output();
  PROTOBUF_MUST_USE_RESULT std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // bytes index = 5;
  void clear_index();
  const std::string& index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index();
  PROTOBUF_MUST_USE_RESULT std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapFilter.filter_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapFilterService_2eproto;
};
// -------------------------------------------------------------------

class filter_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIMapFilter.filter_grpc1Response) */ {
 public:
  inline filter_grpc1Response() : filter_grpc1Response(nullptr) {}
  ~filter_grpc1Response() override;
  explicit constexpr filter_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  filter_grpc1Response(const filter_grpc1Response& from);
  filter_grpc1Response(filter_grpc1Response&& from) noexcept
    : filter_grpc1Response() {
    *this = ::std::move(from);
  }

  inline filter_grpc1Response& operator=(const filter_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline filter_grpc1Response& operator=(filter_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const filter_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const filter_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const filter_grpc1Response*>(
               &_filter_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(filter_grpc1Response& a, filter_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(filter_grpc1Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(filter_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline filter_grpc1Response* New() const final {
    return new filter_grpc1Response();
  }

  filter_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<filter_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const filter_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const filter_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(filter_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIMapFilter.filter_grpc1Response";
  }
  protected:
  explicit filter_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // bytes output = 1;
  void clear_output();
  const std::string& output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output();
  PROTOBUF_MUST_USE_RESULT std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // bytes index = 2;
  void clear_index();
  const std::string& index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index();
  PROTOBUF_MUST_USE_RESULT std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // @@protoc_insertion_point(class_scope:grpcIMapFilter.filter_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIMapFilterService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// filter_grpc0Request

// bytes pose1 = 1;
inline void filter_grpc0Request::clear_pose1() {
  pose1_.ClearToEmpty();
}
inline const std::string& filter_grpc0Request::pose1() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc0Request.pose1)
  return _internal_pose1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc0Request::set_pose1(ArgT0&& arg0, ArgT... args) {
 
 pose1_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc0Request.pose1)
}
inline std::string* filter_grpc0Request::mutable_pose1() {
  std::string* _s = _internal_mutable_pose1();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc0Request.pose1)
  return _s;
}
inline const std::string& filter_grpc0Request::_internal_pose1() const {
  return pose1_.Get();
}
inline void filter_grpc0Request::_internal_set_pose1(const std::string& value) {
  
  pose1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc0Request::_internal_mutable_pose1() {
  
  return pose1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc0Request::release_pose1() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc0Request.pose1)
  return pose1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc0Request::set_allocated_pose1(std::string* pose1) {
  if (pose1 != nullptr) {
    
  } else {
    
  }
  pose1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pose1,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc0Request.pose1)
}

// bytes pose2 = 2;
inline void filter_grpc0Request::clear_pose2() {
  pose2_.ClearToEmpty();
}
inline const std::string& filter_grpc0Request::pose2() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc0Request.pose2)
  return _internal_pose2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc0Request::set_pose2(ArgT0&& arg0, ArgT... args) {
 
 pose2_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc0Request.pose2)
}
inline std::string* filter_grpc0Request::mutable_pose2() {
  std::string* _s = _internal_mutable_pose2();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc0Request.pose2)
  return _s;
}
inline const std::string& filter_grpc0Request::_internal_pose2() const {
  return pose2_.Get();
}
inline void filter_grpc0Request::_internal_set_pose2(const std::string& value) {
  
  pose2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc0Request::_internal_mutable_pose2() {
  
  return pose2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc0Request::release_pose2() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc0Request.pose2)
  return pose2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc0Request::set_allocated_pose2(std::string* pose2) {
  if (pose2 != nullptr) {
    
  } else {
    
  }
  pose2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pose2,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc0Request.pose2)
}

// bytes input = 3;
inline void filter_grpc0Request::clear_input() {
  input_.ClearToEmpty();
}
inline const std::string& filter_grpc0Request::input() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc0Request.input)
  return _internal_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc0Request::set_input(ArgT0&& arg0, ArgT... args) {
 
 input_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc0Request.input)
}
inline std::string* filter_grpc0Request::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc0Request.input)
  return _s;
}
inline const std::string& filter_grpc0Request::_internal_input() const {
  return input_.Get();
}
inline void filter_grpc0Request::_internal_set_input(const std::string& value) {
  
  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc0Request::_internal_mutable_input() {
  
  return input_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc0Request::release_input() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc0Request.input)
  return input_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc0Request::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  input_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc0Request.input)
}

// bytes output = 4;
inline void filter_grpc0Request::clear_output() {
  output_.ClearToEmpty();
}
inline const std::string& filter_grpc0Request::output() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc0Request.output)
  return _internal_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc0Request::set_output(ArgT0&& arg0, ArgT... args) {
 
 output_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc0Request.output)
}
inline std::string* filter_grpc0Request::mutable_output() {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc0Request.output)
  return _s;
}
inline const std::string& filter_grpc0Request::_internal_output() const {
  return output_.Get();
}
inline void filter_grpc0Request::_internal_set_output(const std::string& value) {
  
  output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc0Request::_internal_mutable_output() {
  
  return output_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc0Request::release_output() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc0Request.output)
  return output_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc0Request::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  output_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc0Request.output)
}

// -------------------------------------------------------------------

// filter_grpc0Response

// bytes output = 1;
inline void filter_grpc0Response::clear_output() {
  output_.ClearToEmpty();
}
inline const std::string& filter_grpc0Response::output() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc0Response.output)
  return _internal_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc0Response::set_output(ArgT0&& arg0, ArgT... args) {
 
 output_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc0Response.output)
}
inline std::string* filter_grpc0Response::mutable_output() {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc0Response.output)
  return _s;
}
inline const std::string& filter_grpc0Response::_internal_output() const {
  return output_.Get();
}
inline void filter_grpc0Response::_internal_set_output(const std::string& value) {
  
  output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc0Response::_internal_mutable_output() {
  
  return output_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc0Response::release_output() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc0Response.output)
  return output_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc0Response::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  output_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc0Response.output)
}

// -------------------------------------------------------------------

// filter_grpc1Request

// bytes pose1 = 1;
inline void filter_grpc1Request::clear_pose1() {
  pose1_.ClearToEmpty();
}
inline const std::string& filter_grpc1Request::pose1() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc1Request.pose1)
  return _internal_pose1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc1Request::set_pose1(ArgT0&& arg0, ArgT... args) {
 
 pose1_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc1Request.pose1)
}
inline std::string* filter_grpc1Request::mutable_pose1() {
  std::string* _s = _internal_mutable_pose1();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc1Request.pose1)
  return _s;
}
inline const std::string& filter_grpc1Request::_internal_pose1() const {
  return pose1_.Get();
}
inline void filter_grpc1Request::_internal_set_pose1(const std::string& value) {
  
  pose1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::_internal_mutable_pose1() {
  
  return pose1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::release_pose1() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc1Request.pose1)
  return pose1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc1Request::set_allocated_pose1(std::string* pose1) {
  if (pose1 != nullptr) {
    
  } else {
    
  }
  pose1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pose1,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc1Request.pose1)
}

// bytes pose2 = 2;
inline void filter_grpc1Request::clear_pose2() {
  pose2_.ClearToEmpty();
}
inline const std::string& filter_grpc1Request::pose2() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc1Request.pose2)
  return _internal_pose2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc1Request::set_pose2(ArgT0&& arg0, ArgT... args) {
 
 pose2_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc1Request.pose2)
}
inline std::string* filter_grpc1Request::mutable_pose2() {
  std::string* _s = _internal_mutable_pose2();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc1Request.pose2)
  return _s;
}
inline const std::string& filter_grpc1Request::_internal_pose2() const {
  return pose2_.Get();
}
inline void filter_grpc1Request::_internal_set_pose2(const std::string& value) {
  
  pose2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::_internal_mutable_pose2() {
  
  return pose2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::release_pose2() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc1Request.pose2)
  return pose2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc1Request::set_allocated_pose2(std::string* pose2) {
  if (pose2 != nullptr) {
    
  } else {
    
  }
  pose2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pose2,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc1Request.pose2)
}

// bytes input = 3;
inline void filter_grpc1Request::clear_input() {
  input_.ClearToEmpty();
}
inline const std::string& filter_grpc1Request::input() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc1Request.input)
  return _internal_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc1Request::set_input(ArgT0&& arg0, ArgT... args) {
 
 input_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc1Request.input)
}
inline std::string* filter_grpc1Request::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc1Request.input)
  return _s;
}
inline const std::string& filter_grpc1Request::_internal_input() const {
  return input_.Get();
}
inline void filter_grpc1Request::_internal_set_input(const std::string& value) {
  
  input_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::_internal_mutable_input() {
  
  return input_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::release_input() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc1Request.input)
  return input_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc1Request::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  input_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc1Request.input)
}

// bytes output = 4;
inline void filter_grpc1Request::clear_output() {
  output_.ClearToEmpty();
}
inline const std::string& filter_grpc1Request::output() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc1Request.output)
  return _internal_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc1Request::set_output(ArgT0&& arg0, ArgT... args) {
 
 output_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc1Request.output)
}
inline std::string* filter_grpc1Request::mutable_output() {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc1Request.output)
  return _s;
}
inline const std::string& filter_grpc1Request::_internal_output() const {
  return output_.Get();
}
inline void filter_grpc1Request::_internal_set_output(const std::string& value) {
  
  output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::_internal_mutable_output() {
  
  return output_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::release_output() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc1Request.output)
  return output_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc1Request::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  output_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc1Request.output)
}

// bytes index = 5;
inline void filter_grpc1Request::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& filter_grpc1Request::index() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc1Request.index)
  return _internal_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc1Request::set_index(ArgT0&& arg0, ArgT... args) {
 
 index_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc1Request.index)
}
inline std::string* filter_grpc1Request::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc1Request.index)
  return _s;
}
inline const std::string& filter_grpc1Request::_internal_index() const {
  return index_.Get();
}
inline void filter_grpc1Request::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc1Request::release_index() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc1Request.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc1Request::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc1Request.index)
}

// -------------------------------------------------------------------

// filter_grpc1Response

// bytes output = 1;
inline void filter_grpc1Response::clear_output() {
  output_.ClearToEmpty();
}
inline const std::string& filter_grpc1Response::output() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc1Response.output)
  return _internal_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc1Response::set_output(ArgT0&& arg0, ArgT... args) {
 
 output_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc1Response.output)
}
inline std::string* filter_grpc1Response::mutable_output() {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc1Response.output)
  return _s;
}
inline const std::string& filter_grpc1Response::_internal_output() const {
  return output_.Get();
}
inline void filter_grpc1Response::_internal_set_output(const std::string& value) {
  
  output_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc1Response::_internal_mutable_output() {
  
  return output_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc1Response::release_output() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc1Response.output)
  return output_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc1Response::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  output_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc1Response.output)
}

// bytes index = 2;
inline void filter_grpc1Response::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& filter_grpc1Response::index() const {
  // @@protoc_insertion_point(field_get:grpcIMapFilter.filter_grpc1Response.index)
  return _internal_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void filter_grpc1Response::set_index(ArgT0&& arg0, ArgT... args) {
 
 index_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIMapFilter.filter_grpc1Response.index)
}
inline std::string* filter_grpc1Response::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:grpcIMapFilter.filter_grpc1Response.index)
  return _s;
}
inline const std::string& filter_grpc1Response::_internal_index() const {
  return index_.Get();
}
inline void filter_grpc1Response::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* filter_grpc1Response::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* filter_grpc1Response::release_index() {
  // @@protoc_insertion_point(field_release:grpcIMapFilter.filter_grpc1Response.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void filter_grpc1Response::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIMapFilter.filter_grpc1Response.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIMapFilter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIMapFilterService_2eproto
