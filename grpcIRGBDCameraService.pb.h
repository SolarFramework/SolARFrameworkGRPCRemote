// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIRGBDCameraService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIRGBDCameraService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIRGBDCameraService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIRGBDCameraService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIRGBDCameraService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIRGBDCameraService_2eproto;
namespace grpcIRGBDCamera {
class alignColorToDepthRequest;
struct alignColorToDepthRequestDefaultTypeInternal;
extern alignColorToDepthRequestDefaultTypeInternal _alignColorToDepthRequest_default_instance_;
class alignColorToDepthResponse;
struct alignColorToDepthResponseDefaultTypeInternal;
extern alignColorToDepthResponseDefaultTypeInternal _alignColorToDepthResponse_default_instance_;
class alignDepthToColorRequest;
struct alignDepthToColorRequestDefaultTypeInternal;
extern alignDepthToColorRequestDefaultTypeInternal _alignDepthToColorRequest_default_instance_;
class alignDepthToColorResponse;
struct alignDepthToColorResponseDefaultTypeInternal;
extern alignDepthToColorResponseDefaultTypeInternal _alignDepthToColorResponse_default_instance_;
class getDepthMinDistanceResponse;
struct getDepthMinDistanceResponseDefaultTypeInternal;
extern getDepthMinDistanceResponseDefaultTypeInternal _getDepthMinDistanceResponse_default_instance_;
class getDepthResolutionResponse;
struct getDepthResolutionResponseDefaultTypeInternal;
extern getDepthResolutionResponseDefaultTypeInternal _getDepthResolutionResponse_default_instance_;
class getDistortionDepthParametersResponse;
struct getDistortionDepthParametersResponseDefaultTypeInternal;
extern getDistortionDepthParametersResponseDefaultTypeInternal _getDistortionDepthParametersResponse_default_instance_;
class getDistortionParametersResponse;
struct getDistortionParametersResponseDefaultTypeInternal;
extern getDistortionParametersResponseDefaultTypeInternal _getDistortionParametersResponse_default_instance_;
class getIntrinsicsDepthParametersResponse;
struct getIntrinsicsDepthParametersResponseDefaultTypeInternal;
extern getIntrinsicsDepthParametersResponseDefaultTypeInternal _getIntrinsicsDepthParametersResponse_default_instance_;
class getIntrinsicsParametersResponse;
struct getIntrinsicsParametersResponseDefaultTypeInternal;
extern getIntrinsicsParametersResponseDefaultTypeInternal _getIntrinsicsParametersResponse_default_instance_;
class getNextDepthFrameRequest;
struct getNextDepthFrameRequestDefaultTypeInternal;
extern getNextDepthFrameRequestDefaultTypeInternal _getNextDepthFrameRequest_default_instance_;
class getNextDepthFrameResponse;
struct getNextDepthFrameResponseDefaultTypeInternal;
extern getNextDepthFrameResponseDefaultTypeInternal _getNextDepthFrameResponse_default_instance_;
class getNextImageRequest;
struct getNextImageRequestDefaultTypeInternal;
extern getNextImageRequestDefaultTypeInternal _getNextImageRequest_default_instance_;
class getNextImageResponse;
struct getNextImageResponseDefaultTypeInternal;
extern getNextImageResponseDefaultTypeInternal _getNextImageResponse_default_instance_;
class getNextRGBDFrameRequest;
struct getNextRGBDFrameRequestDefaultTypeInternal;
extern getNextRGBDFrameRequestDefaultTypeInternal _getNextRGBDFrameRequest_default_instance_;
class getNextRGBDFrameResponse;
struct getNextRGBDFrameResponseDefaultTypeInternal;
extern getNextRGBDFrameResponseDefaultTypeInternal _getNextRGBDFrameResponse_default_instance_;
class getParametersResponse;
struct getParametersResponseDefaultTypeInternal;
extern getParametersResponseDefaultTypeInternal _getParametersResponse_default_instance_;
class getPixelToWorldRequest;
struct getPixelToWorldRequestDefaultTypeInternal;
extern getPixelToWorldRequestDefaultTypeInternal _getPixelToWorldRequest_default_instance_;
class getPixelToWorldResponse;
struct getPixelToWorldResponseDefaultTypeInternal;
extern getPixelToWorldResponseDefaultTypeInternal _getPixelToWorldResponse_default_instance_;
class getPointCloudRequest;
struct getPointCloudRequestDefaultTypeInternal;
extern getPointCloudRequestDefaultTypeInternal _getPointCloudRequest_default_instance_;
class getPointCloudResponse;
struct getPointCloudResponseDefaultTypeInternal;
extern getPointCloudResponseDefaultTypeInternal _getPointCloudResponse_default_instance_;
class getResolutionResponse;
struct getResolutionResponseDefaultTypeInternal;
extern getResolutionResponseDefaultTypeInternal _getResolutionResponse_default_instance_;
class getWorldToPixelRequest;
struct getWorldToPixelRequestDefaultTypeInternal;
extern getWorldToPixelRequestDefaultTypeInternal _getWorldToPixelRequest_default_instance_;
class getWorldToPixelResponse;
struct getWorldToPixelResponseDefaultTypeInternal;
extern getWorldToPixelResponseDefaultTypeInternal _getWorldToPixelResponse_default_instance_;
class getWorldToPixelsRequest;
struct getWorldToPixelsRequestDefaultTypeInternal;
extern getWorldToPixelsRequestDefaultTypeInternal _getWorldToPixelsRequest_default_instance_;
class getWorldToPixelsResponse;
struct getWorldToPixelsResponseDefaultTypeInternal;
extern getWorldToPixelsResponseDefaultTypeInternal _getWorldToPixelsResponse_default_instance_;
class setDepthResolutionRequest;
struct setDepthResolutionRequestDefaultTypeInternal;
extern setDepthResolutionRequestDefaultTypeInternal _setDepthResolutionRequest_default_instance_;
class setDepthResolutionResponse;
struct setDepthResolutionResponseDefaultTypeInternal;
extern setDepthResolutionResponseDefaultTypeInternal _setDepthResolutionResponse_default_instance_;
class setDistortionDepthParametersRequest;
struct setDistortionDepthParametersRequestDefaultTypeInternal;
extern setDistortionDepthParametersRequestDefaultTypeInternal _setDistortionDepthParametersRequest_default_instance_;
class setDistortionDepthParametersResponse;
struct setDistortionDepthParametersResponseDefaultTypeInternal;
extern setDistortionDepthParametersResponseDefaultTypeInternal _setDistortionDepthParametersResponse_default_instance_;
class setDistortionParametersRequest;
struct setDistortionParametersRequestDefaultTypeInternal;
extern setDistortionParametersRequestDefaultTypeInternal _setDistortionParametersRequest_default_instance_;
class setIntrinsicDepthParametersRequest;
struct setIntrinsicDepthParametersRequestDefaultTypeInternal;
extern setIntrinsicDepthParametersRequestDefaultTypeInternal _setIntrinsicDepthParametersRequest_default_instance_;
class setIntrinsicDepthParametersResponse;
struct setIntrinsicDepthParametersResponseDefaultTypeInternal;
extern setIntrinsicDepthParametersResponseDefaultTypeInternal _setIntrinsicDepthParametersResponse_default_instance_;
class setIntrinsicParametersRequest;
struct setIntrinsicParametersRequestDefaultTypeInternal;
extern setIntrinsicParametersRequestDefaultTypeInternal _setIntrinsicParametersRequest_default_instance_;
class setParametersRequest;
struct setParametersRequestDefaultTypeInternal;
extern setParametersRequestDefaultTypeInternal _setParametersRequest_default_instance_;
class setResolutionRequest;
struct setResolutionRequestDefaultTypeInternal;
extern setResolutionRequestDefaultTypeInternal _setResolutionRequest_default_instance_;
class startResponse;
struct startResponseDefaultTypeInternal;
extern startResponseDefaultTypeInternal _startResponse_default_instance_;
class stopResponse;
struct stopResponseDefaultTypeInternal;
extern stopResponseDefaultTypeInternal _stopResponse_default_instance_;
}  // namespace grpcIRGBDCamera
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIRGBDCamera::alignColorToDepthRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::alignColorToDepthRequest>(Arena*);
template<> ::grpcIRGBDCamera::alignColorToDepthResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::alignColorToDepthResponse>(Arena*);
template<> ::grpcIRGBDCamera::alignDepthToColorRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::alignDepthToColorRequest>(Arena*);
template<> ::grpcIRGBDCamera::alignDepthToColorResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::alignDepthToColorResponse>(Arena*);
template<> ::grpcIRGBDCamera::getDepthMinDistanceResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getDepthMinDistanceResponse>(Arena*);
template<> ::grpcIRGBDCamera::getDepthResolutionResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getDepthResolutionResponse>(Arena*);
template<> ::grpcIRGBDCamera::getDistortionDepthParametersResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getDistortionDepthParametersResponse>(Arena*);
template<> ::grpcIRGBDCamera::getDistortionParametersResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getDistortionParametersResponse>(Arena*);
template<> ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>(Arena*);
template<> ::grpcIRGBDCamera::getIntrinsicsParametersResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getIntrinsicsParametersResponse>(Arena*);
template<> ::grpcIRGBDCamera::getNextDepthFrameRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getNextDepthFrameRequest>(Arena*);
template<> ::grpcIRGBDCamera::getNextDepthFrameResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getNextDepthFrameResponse>(Arena*);
template<> ::grpcIRGBDCamera::getNextImageRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getNextImageRequest>(Arena*);
template<> ::grpcIRGBDCamera::getNextImageResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getNextImageResponse>(Arena*);
template<> ::grpcIRGBDCamera::getNextRGBDFrameRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getNextRGBDFrameRequest>(Arena*);
template<> ::grpcIRGBDCamera::getNextRGBDFrameResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getNextRGBDFrameResponse>(Arena*);
template<> ::grpcIRGBDCamera::getParametersResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getParametersResponse>(Arena*);
template<> ::grpcIRGBDCamera::getPixelToWorldRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getPixelToWorldRequest>(Arena*);
template<> ::grpcIRGBDCamera::getPixelToWorldResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getPixelToWorldResponse>(Arena*);
template<> ::grpcIRGBDCamera::getPointCloudRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getPointCloudRequest>(Arena*);
template<> ::grpcIRGBDCamera::getPointCloudResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getPointCloudResponse>(Arena*);
template<> ::grpcIRGBDCamera::getResolutionResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getResolutionResponse>(Arena*);
template<> ::grpcIRGBDCamera::getWorldToPixelRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getWorldToPixelRequest>(Arena*);
template<> ::grpcIRGBDCamera::getWorldToPixelResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getWorldToPixelResponse>(Arena*);
template<> ::grpcIRGBDCamera::getWorldToPixelsRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getWorldToPixelsRequest>(Arena*);
template<> ::grpcIRGBDCamera::getWorldToPixelsResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::getWorldToPixelsResponse>(Arena*);
template<> ::grpcIRGBDCamera::setDepthResolutionRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setDepthResolutionRequest>(Arena*);
template<> ::grpcIRGBDCamera::setDepthResolutionResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setDepthResolutionResponse>(Arena*);
template<> ::grpcIRGBDCamera::setDistortionDepthParametersRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setDistortionDepthParametersRequest>(Arena*);
template<> ::grpcIRGBDCamera::setDistortionDepthParametersResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setDistortionDepthParametersResponse>(Arena*);
template<> ::grpcIRGBDCamera::setDistortionParametersRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setDistortionParametersRequest>(Arena*);
template<> ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setIntrinsicDepthParametersRequest>(Arena*);
template<> ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>(Arena*);
template<> ::grpcIRGBDCamera::setIntrinsicParametersRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setIntrinsicParametersRequest>(Arena*);
template<> ::grpcIRGBDCamera::setParametersRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setParametersRequest>(Arena*);
template<> ::grpcIRGBDCamera::setResolutionRequest* Arena::CreateMaybeMessage<::grpcIRGBDCamera::setResolutionRequest>(Arena*);
template<> ::grpcIRGBDCamera::startResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::startResponse>(Arena*);
template<> ::grpcIRGBDCamera::stopResponse* Arena::CreateMaybeMessage<::grpcIRGBDCamera::stopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIRGBDCamera {

// ===================================================================

class startResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.startResponse) */ {
 public:
  inline startResponse() : startResponse(nullptr) {}
  ~startResponse() override;
  explicit constexpr startResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  startResponse(const startResponse& from);
  startResponse(startResponse&& from) noexcept
    : startResponse() {
    *this = ::std::move(from);
  }

  inline startResponse& operator=(const startResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline startResponse& operator=(startResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const startResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const startResponse* internal_default_instance() {
    return reinterpret_cast<const startResponse*>(
               &_startResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(startResponse& a, startResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(startResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(startResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline startResponse* New() const final {
    return new startResponse();
  }

  startResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<startResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const startResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const startResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(startResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.startResponse";
  }
  protected:
  explicit startResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.startResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class stopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.stopResponse) */ {
 public:
  inline stopResponse() : stopResponse(nullptr) {}
  ~stopResponse() override;
  explicit constexpr stopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  stopResponse(const stopResponse& from);
  stopResponse(stopResponse&& from) noexcept
    : stopResponse() {
    *this = ::std::move(from);
  }

  inline stopResponse& operator=(const stopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline stopResponse& operator=(stopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const stopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const stopResponse* internal_default_instance() {
    return reinterpret_cast<const stopResponse*>(
               &_stopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(stopResponse& a, stopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(stopResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stopResponse* New() const final {
    return new stopResponse();
  }

  stopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const stopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const stopResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.stopResponse";
  }
  protected:
  explicit stopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.stopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getNextImageRequest) */ {
 public:
  inline getNextImageRequest() : getNextImageRequest(nullptr) {}
  ~getNextImageRequest() override;
  explicit constexpr getNextImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextImageRequest(const getNextImageRequest& from);
  getNextImageRequest(getNextImageRequest&& from) noexcept
    : getNextImageRequest() {
    *this = ::std::move(from);
  }

  inline getNextImageRequest& operator=(const getNextImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextImageRequest& operator=(getNextImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNextImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextImageRequest* internal_default_instance() {
    return reinterpret_cast<const getNextImageRequest*>(
               &_getNextImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(getNextImageRequest& a, getNextImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextImageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextImageRequest* New() const final {
    return new getNextImageRequest();
  }

  getNextImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNextImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNextImageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getNextImageRequest";
  }
  protected:
  explicit getNextImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
  };
  // bytes img = 1;
  void clear_img();
  const std::string& img() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img();
  PROTOBUF_MUST_USE_RESULT std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getNextImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextImageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getNextImageResponse) */ {
 public:
  inline getNextImageResponse() : getNextImageResponse(nullptr) {}
  ~getNextImageResponse() override;
  explicit constexpr getNextImageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextImageResponse(const getNextImageResponse& from);
  getNextImageResponse(getNextImageResponse&& from) noexcept
    : getNextImageResponse() {
    *this = ::std::move(from);
  }

  inline getNextImageResponse& operator=(const getNextImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextImageResponse& operator=(getNextImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNextImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextImageResponse* internal_default_instance() {
    return reinterpret_cast<const getNextImageResponse*>(
               &_getNextImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(getNextImageResponse& a, getNextImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextImageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextImageResponse* New() const final {
    return new getNextImageResponse();
  }

  getNextImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextImageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNextImageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNextImageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getNextImageResponse";
  }
  protected:
  explicit getNextImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes img = 1;
  void clear_img();
  const std::string& img() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img();
  PROTOBUF_MUST_USE_RESULT std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getNextImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setResolutionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setResolutionRequest) */ {
 public:
  inline setResolutionRequest() : setResolutionRequest(nullptr) {}
  ~setResolutionRequest() override;
  explicit constexpr setResolutionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setResolutionRequest(const setResolutionRequest& from);
  setResolutionRequest(setResolutionRequest&& from) noexcept
    : setResolutionRequest() {
    *this = ::std::move(from);
  }

  inline setResolutionRequest& operator=(const setResolutionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setResolutionRequest& operator=(setResolutionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setResolutionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setResolutionRequest* internal_default_instance() {
    return reinterpret_cast<const setResolutionRequest*>(
               &_setResolutionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(setResolutionRequest& a, setResolutionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setResolutionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setResolutionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setResolutionRequest* New() const final {
    return new setResolutionRequest();
  }

  setResolutionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setResolutionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setResolutionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setResolutionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setResolutionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setResolutionRequest";
  }
  protected:
  explicit setResolutionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionFieldNumber = 1,
  };
  // bytes resolution = 1;
  void clear_resolution();
  const std::string& resolution() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resolution(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resolution();
  PROTOBUF_MUST_USE_RESULT std::string* release_resolution();
  void set_allocated_resolution(std::string* resolution);
  private:
  const std::string& _internal_resolution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution(const std::string& value);
  std::string* _internal_mutable_resolution();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setResolutionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setIntrinsicParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setIntrinsicParametersRequest) */ {
 public:
  inline setIntrinsicParametersRequest() : setIntrinsicParametersRequest(nullptr) {}
  ~setIntrinsicParametersRequest() override;
  explicit constexpr setIntrinsicParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setIntrinsicParametersRequest(const setIntrinsicParametersRequest& from);
  setIntrinsicParametersRequest(setIntrinsicParametersRequest&& from) noexcept
    : setIntrinsicParametersRequest() {
    *this = ::std::move(from);
  }

  inline setIntrinsicParametersRequest& operator=(const setIntrinsicParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setIntrinsicParametersRequest& operator=(setIntrinsicParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setIntrinsicParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setIntrinsicParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setIntrinsicParametersRequest*>(
               &_setIntrinsicParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(setIntrinsicParametersRequest& a, setIntrinsicParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setIntrinsicParametersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setIntrinsicParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setIntrinsicParametersRequest* New() const final {
    return new setIntrinsicParametersRequest();
  }

  setIntrinsicParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setIntrinsicParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setIntrinsicParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setIntrinsicParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setIntrinsicParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setIntrinsicParametersRequest";
  }
  protected:
  explicit setIntrinsicParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntrinsicParametersFieldNumber = 1,
  };
  // bytes intrinsic_parameters = 1;
  void clear_intrinsic_parameters();
  const std::string& intrinsic_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intrinsic_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intrinsic_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_intrinsic_parameters();
  void set_allocated_intrinsic_parameters(std::string* intrinsic_parameters);
  private:
  const std::string& _internal_intrinsic_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intrinsic_parameters(const std::string& value);
  std::string* _internal_mutable_intrinsic_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setIntrinsicParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsic_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setDistortionParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setDistortionParametersRequest) */ {
 public:
  inline setDistortionParametersRequest() : setDistortionParametersRequest(nullptr) {}
  ~setDistortionParametersRequest() override;
  explicit constexpr setDistortionParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDistortionParametersRequest(const setDistortionParametersRequest& from);
  setDistortionParametersRequest(setDistortionParametersRequest&& from) noexcept
    : setDistortionParametersRequest() {
    *this = ::std::move(from);
  }

  inline setDistortionParametersRequest& operator=(const setDistortionParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDistortionParametersRequest& operator=(setDistortionParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setDistortionParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDistortionParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setDistortionParametersRequest*>(
               &_setDistortionParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(setDistortionParametersRequest& a, setDistortionParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setDistortionParametersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDistortionParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDistortionParametersRequest* New() const final {
    return new setDistortionParametersRequest();
  }

  setDistortionParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDistortionParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setDistortionParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setDistortionParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDistortionParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setDistortionParametersRequest";
  }
  protected:
  explicit setDistortionParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistortionParametersFieldNumber = 1,
  };
  // bytes distortion_parameters = 1;
  void clear_distortion_parameters();
  const std::string& distortion_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_distortion_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_distortion_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_distortion_parameters();
  void set_allocated_distortion_parameters(std::string* distortion_parameters);
  private:
  const std::string& _internal_distortion_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distortion_parameters(const std::string& value);
  std::string* _internal_mutable_distortion_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setDistortionParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distortion_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setParametersRequest) */ {
 public:
  inline setParametersRequest() : setParametersRequest(nullptr) {}
  ~setParametersRequest() override;
  explicit constexpr setParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setParametersRequest(const setParametersRequest& from);
  setParametersRequest(setParametersRequest&& from) noexcept
    : setParametersRequest() {
    *this = ::std::move(from);
  }

  inline setParametersRequest& operator=(const setParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setParametersRequest& operator=(setParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setParametersRequest*>(
               &_setParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(setParametersRequest& a, setParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setParametersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setParametersRequest* New() const final {
    return new setParametersRequest();
  }

  setParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setParametersRequest";
  }
  protected:
  explicit setParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
  };
  // bytes parameters = 1;
  void clear_parameters();
  const std::string& parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_parameters();
  void set_allocated_parameters(std::string* parameters);
  private:
  const std::string& _internal_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parameters(const std::string& value);
  std::string* _internal_mutable_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getResolutionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getResolutionResponse) */ {
 public:
  inline getResolutionResponse() : getResolutionResponse(nullptr) {}
  ~getResolutionResponse() override;
  explicit constexpr getResolutionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getResolutionResponse(const getResolutionResponse& from);
  getResolutionResponse(getResolutionResponse&& from) noexcept
    : getResolutionResponse() {
    *this = ::std::move(from);
  }

  inline getResolutionResponse& operator=(const getResolutionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getResolutionResponse& operator=(getResolutionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getResolutionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getResolutionResponse* internal_default_instance() {
    return reinterpret_cast<const getResolutionResponse*>(
               &_getResolutionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(getResolutionResponse& a, getResolutionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getResolutionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getResolutionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getResolutionResponse* New() const final {
    return new getResolutionResponse();
  }

  getResolutionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getResolutionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getResolutionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getResolutionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getResolutionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getResolutionResponse";
  }
  protected:
  explicit getResolutionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getResolutionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getIntrinsicsParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getIntrinsicsParametersResponse) */ {
 public:
  inline getIntrinsicsParametersResponse() : getIntrinsicsParametersResponse(nullptr) {}
  ~getIntrinsicsParametersResponse() override;
  explicit constexpr getIntrinsicsParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getIntrinsicsParametersResponse(const getIntrinsicsParametersResponse& from);
  getIntrinsicsParametersResponse(getIntrinsicsParametersResponse&& from) noexcept
    : getIntrinsicsParametersResponse() {
    *this = ::std::move(from);
  }

  inline getIntrinsicsParametersResponse& operator=(const getIntrinsicsParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getIntrinsicsParametersResponse& operator=(getIntrinsicsParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getIntrinsicsParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getIntrinsicsParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getIntrinsicsParametersResponse*>(
               &_getIntrinsicsParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(getIntrinsicsParametersResponse& a, getIntrinsicsParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getIntrinsicsParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getIntrinsicsParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getIntrinsicsParametersResponse* New() const final {
    return new getIntrinsicsParametersResponse();
  }

  getIntrinsicsParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getIntrinsicsParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getIntrinsicsParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getIntrinsicsParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getIntrinsicsParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getIntrinsicsParametersResponse";
  }
  protected:
  explicit getIntrinsicsParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getIntrinsicsParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getParametersResponse) */ {
 public:
  inline getParametersResponse() : getParametersResponse(nullptr) {}
  ~getParametersResponse() override;
  explicit constexpr getParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getParametersResponse(const getParametersResponse& from);
  getParametersResponse(getParametersResponse&& from) noexcept
    : getParametersResponse() {
    *this = ::std::move(from);
  }

  inline getParametersResponse& operator=(const getParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getParametersResponse& operator=(getParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getParametersResponse*>(
               &_getParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(getParametersResponse& a, getParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getParametersResponse* New() const final {
    return new getParametersResponse();
  }

  getParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getParametersResponse";
  }
  protected:
  explicit getParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getDistortionParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getDistortionParametersResponse) */ {
 public:
  inline getDistortionParametersResponse() : getDistortionParametersResponse(nullptr) {}
  ~getDistortionParametersResponse() override;
  explicit constexpr getDistortionParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDistortionParametersResponse(const getDistortionParametersResponse& from);
  getDistortionParametersResponse(getDistortionParametersResponse&& from) noexcept
    : getDistortionParametersResponse() {
    *this = ::std::move(from);
  }

  inline getDistortionParametersResponse& operator=(const getDistortionParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDistortionParametersResponse& operator=(getDistortionParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDistortionParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDistortionParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getDistortionParametersResponse*>(
               &_getDistortionParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(getDistortionParametersResponse& a, getDistortionParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDistortionParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDistortionParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDistortionParametersResponse* New() const final {
    return new getDistortionParametersResponse();
  }

  getDistortionParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDistortionParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDistortionParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getDistortionParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDistortionParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getDistortionParametersResponse";
  }
  protected:
  explicit getDistortionParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getDistortionParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextDepthFrameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getNextDepthFrameRequest) */ {
 public:
  inline getNextDepthFrameRequest() : getNextDepthFrameRequest(nullptr) {}
  ~getNextDepthFrameRequest() override;
  explicit constexpr getNextDepthFrameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextDepthFrameRequest(const getNextDepthFrameRequest& from);
  getNextDepthFrameRequest(getNextDepthFrameRequest&& from) noexcept
    : getNextDepthFrameRequest() {
    *this = ::std::move(from);
  }

  inline getNextDepthFrameRequest& operator=(const getNextDepthFrameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextDepthFrameRequest& operator=(getNextDepthFrameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNextDepthFrameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextDepthFrameRequest* internal_default_instance() {
    return reinterpret_cast<const getNextDepthFrameRequest*>(
               &_getNextDepthFrameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(getNextDepthFrameRequest& a, getNextDepthFrameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextDepthFrameRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextDepthFrameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextDepthFrameRequest* New() const final {
    return new getNextDepthFrameRequest();
  }

  getNextDepthFrameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextDepthFrameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNextDepthFrameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNextDepthFrameRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextDepthFrameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getNextDepthFrameRequest";
  }
  protected:
  explicit getNextDepthFrameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
  };
  // bytes img = 1;
  void clear_img();
  const std::string& img() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img();
  PROTOBUF_MUST_USE_RESULT std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getNextDepthFrameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextDepthFrameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getNextDepthFrameResponse) */ {
 public:
  inline getNextDepthFrameResponse() : getNextDepthFrameResponse(nullptr) {}
  ~getNextDepthFrameResponse() override;
  explicit constexpr getNextDepthFrameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextDepthFrameResponse(const getNextDepthFrameResponse& from);
  getNextDepthFrameResponse(getNextDepthFrameResponse&& from) noexcept
    : getNextDepthFrameResponse() {
    *this = ::std::move(from);
  }

  inline getNextDepthFrameResponse& operator=(const getNextDepthFrameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextDepthFrameResponse& operator=(getNextDepthFrameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNextDepthFrameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextDepthFrameResponse* internal_default_instance() {
    return reinterpret_cast<const getNextDepthFrameResponse*>(
               &_getNextDepthFrameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(getNextDepthFrameResponse& a, getNextDepthFrameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextDepthFrameResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextDepthFrameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextDepthFrameResponse* New() const final {
    return new getNextDepthFrameResponse();
  }

  getNextDepthFrameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextDepthFrameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNextDepthFrameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNextDepthFrameResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextDepthFrameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getNextDepthFrameResponse";
  }
  protected:
  explicit getNextDepthFrameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes img = 1;
  void clear_img();
  const std::string& img() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img();
  PROTOBUF_MUST_USE_RESULT std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getNextDepthFrameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getPointCloudRequest) */ {
 public:
  inline getPointCloudRequest() : getPointCloudRequest(nullptr) {}
  ~getPointCloudRequest() override;
  explicit constexpr getPointCloudRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudRequest(const getPointCloudRequest& from);
  getPointCloudRequest(getPointCloudRequest&& from) noexcept
    : getPointCloudRequest() {
    *this = ::std::move(from);
  }

  inline getPointCloudRequest& operator=(const getPointCloudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudRequest& operator=(getPointCloudRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudRequest* internal_default_instance() {
    return reinterpret_cast<const getPointCloudRequest*>(
               &_getPointCloudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(getPointCloudRequest& a, getPointCloudRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointCloudRequest* New() const final {
    return new getPointCloudRequest();
  }

  getPointCloudRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointCloudRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getPointCloudRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getPointCloudRequest";
  }
  protected:
  explicit getPointCloudRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcFieldNumber = 1,
  };
  // bytes pc = 1;
  void clear_pc();
  const std::string& pc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pc();
  PROTOBUF_MUST_USE_RESULT std::string* release_pc();
  void set_allocated_pc(std::string* pc);
  private:
  const std::string& _internal_pc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pc(const std::string& value);
  std::string* _internal_mutable_pc();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getPointCloudRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getPointCloudResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getPointCloudResponse) */ {
 public:
  inline getPointCloudResponse() : getPointCloudResponse(nullptr) {}
  ~getPointCloudResponse() override;
  explicit constexpr getPointCloudResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPointCloudResponse(const getPointCloudResponse& from);
  getPointCloudResponse(getPointCloudResponse&& from) noexcept
    : getPointCloudResponse() {
    *this = ::std::move(from);
  }

  inline getPointCloudResponse& operator=(const getPointCloudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPointCloudResponse& operator=(getPointCloudResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPointCloudResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPointCloudResponse* internal_default_instance() {
    return reinterpret_cast<const getPointCloudResponse*>(
               &_getPointCloudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(getPointCloudResponse& a, getPointCloudResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPointCloudResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPointCloudResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPointCloudResponse* New() const final {
    return new getPointCloudResponse();
  }

  getPointCloudResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPointCloudResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPointCloudResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getPointCloudResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPointCloudResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getPointCloudResponse";
  }
  protected:
  explicit getPointCloudResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes pc = 1;
  void clear_pc();
  const std::string& pc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pc();
  PROTOBUF_MUST_USE_RESULT std::string* release_pc();
  void set_allocated_pc(std::string* pc);
  private:
  const std::string& _internal_pc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pc(const std::string& value);
  std::string* _internal_mutable_pc();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getPointCloudResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pc_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setDepthResolutionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setDepthResolutionRequest) */ {
 public:
  inline setDepthResolutionRequest() : setDepthResolutionRequest(nullptr) {}
  ~setDepthResolutionRequest() override;
  explicit constexpr setDepthResolutionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDepthResolutionRequest(const setDepthResolutionRequest& from);
  setDepthResolutionRequest(setDepthResolutionRequest&& from) noexcept
    : setDepthResolutionRequest() {
    *this = ::std::move(from);
  }

  inline setDepthResolutionRequest& operator=(const setDepthResolutionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDepthResolutionRequest& operator=(setDepthResolutionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setDepthResolutionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDepthResolutionRequest* internal_default_instance() {
    return reinterpret_cast<const setDepthResolutionRequest*>(
               &_setDepthResolutionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(setDepthResolutionRequest& a, setDepthResolutionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setDepthResolutionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDepthResolutionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDepthResolutionRequest* New() const final {
    return new setDepthResolutionRequest();
  }

  setDepthResolutionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDepthResolutionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setDepthResolutionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setDepthResolutionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDepthResolutionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setDepthResolutionRequest";
  }
  protected:
  explicit setDepthResolutionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionFieldNumber = 1,
  };
  // bytes resolution = 1;
  void clear_resolution();
  const std::string& resolution() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resolution(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resolution();
  PROTOBUF_MUST_USE_RESULT std::string* release_resolution();
  void set_allocated_resolution(std::string* resolution);
  private:
  const std::string& _internal_resolution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution(const std::string& value);
  std::string* _internal_mutable_resolution();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setDepthResolutionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setDepthResolutionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setDepthResolutionResponse) */ {
 public:
  inline setDepthResolutionResponse() : setDepthResolutionResponse(nullptr) {}
  ~setDepthResolutionResponse() override;
  explicit constexpr setDepthResolutionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDepthResolutionResponse(const setDepthResolutionResponse& from);
  setDepthResolutionResponse(setDepthResolutionResponse&& from) noexcept
    : setDepthResolutionResponse() {
    *this = ::std::move(from);
  }

  inline setDepthResolutionResponse& operator=(const setDepthResolutionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDepthResolutionResponse& operator=(setDepthResolutionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setDepthResolutionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDepthResolutionResponse* internal_default_instance() {
    return reinterpret_cast<const setDepthResolutionResponse*>(
               &_setDepthResolutionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(setDepthResolutionResponse& a, setDepthResolutionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setDepthResolutionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDepthResolutionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDepthResolutionResponse* New() const final {
    return new setDepthResolutionResponse();
  }

  setDepthResolutionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDepthResolutionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setDepthResolutionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setDepthResolutionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDepthResolutionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setDepthResolutionResponse";
  }
  protected:
  explicit setDepthResolutionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setDepthResolutionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setIntrinsicDepthParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setIntrinsicDepthParametersRequest) */ {
 public:
  inline setIntrinsicDepthParametersRequest() : setIntrinsicDepthParametersRequest(nullptr) {}
  ~setIntrinsicDepthParametersRequest() override;
  explicit constexpr setIntrinsicDepthParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setIntrinsicDepthParametersRequest(const setIntrinsicDepthParametersRequest& from);
  setIntrinsicDepthParametersRequest(setIntrinsicDepthParametersRequest&& from) noexcept
    : setIntrinsicDepthParametersRequest() {
    *this = ::std::move(from);
  }

  inline setIntrinsicDepthParametersRequest& operator=(const setIntrinsicDepthParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setIntrinsicDepthParametersRequest& operator=(setIntrinsicDepthParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setIntrinsicDepthParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setIntrinsicDepthParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setIntrinsicDepthParametersRequest*>(
               &_setIntrinsicDepthParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(setIntrinsicDepthParametersRequest& a, setIntrinsicDepthParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setIntrinsicDepthParametersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setIntrinsicDepthParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setIntrinsicDepthParametersRequest* New() const final {
    return new setIntrinsicDepthParametersRequest();
  }

  setIntrinsicDepthParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setIntrinsicDepthParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setIntrinsicDepthParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setIntrinsicDepthParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setIntrinsicDepthParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setIntrinsicDepthParametersRequest";
  }
  protected:
  explicit setIntrinsicDepthParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntrinsicParametersFieldNumber = 1,
  };
  // bytes intrinsic_parameters = 1;
  void clear_intrinsic_parameters();
  const std::string& intrinsic_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_intrinsic_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_intrinsic_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_intrinsic_parameters();
  void set_allocated_intrinsic_parameters(std::string* intrinsic_parameters);
  private:
  const std::string& _internal_intrinsic_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_intrinsic_parameters(const std::string& value);
  std::string* _internal_mutable_intrinsic_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setIntrinsicDepthParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intrinsic_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setIntrinsicDepthParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setIntrinsicDepthParametersResponse) */ {
 public:
  inline setIntrinsicDepthParametersResponse() : setIntrinsicDepthParametersResponse(nullptr) {}
  ~setIntrinsicDepthParametersResponse() override;
  explicit constexpr setIntrinsicDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setIntrinsicDepthParametersResponse(const setIntrinsicDepthParametersResponse& from);
  setIntrinsicDepthParametersResponse(setIntrinsicDepthParametersResponse&& from) noexcept
    : setIntrinsicDepthParametersResponse() {
    *this = ::std::move(from);
  }

  inline setIntrinsicDepthParametersResponse& operator=(const setIntrinsicDepthParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setIntrinsicDepthParametersResponse& operator=(setIntrinsicDepthParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setIntrinsicDepthParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setIntrinsicDepthParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setIntrinsicDepthParametersResponse*>(
               &_setIntrinsicDepthParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(setIntrinsicDepthParametersResponse& a, setIntrinsicDepthParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setIntrinsicDepthParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setIntrinsicDepthParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setIntrinsicDepthParametersResponse* New() const final {
    return new setIntrinsicDepthParametersResponse();
  }

  setIntrinsicDepthParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setIntrinsicDepthParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setIntrinsicDepthParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setIntrinsicDepthParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setIntrinsicDepthParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setIntrinsicDepthParametersResponse";
  }
  protected:
  explicit setIntrinsicDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setIntrinsicDepthParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setDistortionDepthParametersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setDistortionDepthParametersRequest) */ {
 public:
  inline setDistortionDepthParametersRequest() : setDistortionDepthParametersRequest(nullptr) {}
  ~setDistortionDepthParametersRequest() override;
  explicit constexpr setDistortionDepthParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDistortionDepthParametersRequest(const setDistortionDepthParametersRequest& from);
  setDistortionDepthParametersRequest(setDistortionDepthParametersRequest&& from) noexcept
    : setDistortionDepthParametersRequest() {
    *this = ::std::move(from);
  }

  inline setDistortionDepthParametersRequest& operator=(const setDistortionDepthParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDistortionDepthParametersRequest& operator=(setDistortionDepthParametersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setDistortionDepthParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDistortionDepthParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setDistortionDepthParametersRequest*>(
               &_setDistortionDepthParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(setDistortionDepthParametersRequest& a, setDistortionDepthParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setDistortionDepthParametersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDistortionDepthParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDistortionDepthParametersRequest* New() const final {
    return new setDistortionDepthParametersRequest();
  }

  setDistortionDepthParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDistortionDepthParametersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setDistortionDepthParametersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setDistortionDepthParametersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDistortionDepthParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setDistortionDepthParametersRequest";
  }
  protected:
  explicit setDistortionDepthParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistortionParametersFieldNumber = 1,
  };
  // bytes distortion_parameters = 1;
  void clear_distortion_parameters();
  const std::string& distortion_parameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_distortion_parameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_distortion_parameters();
  PROTOBUF_MUST_USE_RESULT std::string* release_distortion_parameters();
  void set_allocated_distortion_parameters(std::string* distortion_parameters);
  private:
  const std::string& _internal_distortion_parameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_distortion_parameters(const std::string& value);
  std::string* _internal_mutable_distortion_parameters();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setDistortionDepthParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distortion_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class setDistortionDepthParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.setDistortionDepthParametersResponse) */ {
 public:
  inline setDistortionDepthParametersResponse() : setDistortionDepthParametersResponse(nullptr) {}
  ~setDistortionDepthParametersResponse() override;
  explicit constexpr setDistortionDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setDistortionDepthParametersResponse(const setDistortionDepthParametersResponse& from);
  setDistortionDepthParametersResponse(setDistortionDepthParametersResponse&& from) noexcept
    : setDistortionDepthParametersResponse() {
    *this = ::std::move(from);
  }

  inline setDistortionDepthParametersResponse& operator=(const setDistortionDepthParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setDistortionDepthParametersResponse& operator=(setDistortionDepthParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setDistortionDepthParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setDistortionDepthParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setDistortionDepthParametersResponse*>(
               &_setDistortionDepthParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(setDistortionDepthParametersResponse& a, setDistortionDepthParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setDistortionDepthParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setDistortionDepthParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setDistortionDepthParametersResponse* New() const final {
    return new setDistortionDepthParametersResponse();
  }

  setDistortionDepthParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setDistortionDepthParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setDistortionDepthParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setDistortionDepthParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setDistortionDepthParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.setDistortionDepthParametersResponse";
  }
  protected:
  explicit setDistortionDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // sint32 xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.setDistortionDepthParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getDepthResolutionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getDepthResolutionResponse) */ {
 public:
  inline getDepthResolutionResponse() : getDepthResolutionResponse(nullptr) {}
  ~getDepthResolutionResponse() override;
  explicit constexpr getDepthResolutionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDepthResolutionResponse(const getDepthResolutionResponse& from);
  getDepthResolutionResponse(getDepthResolutionResponse&& from) noexcept
    : getDepthResolutionResponse() {
    *this = ::std::move(from);
  }

  inline getDepthResolutionResponse& operator=(const getDepthResolutionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDepthResolutionResponse& operator=(getDepthResolutionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDepthResolutionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDepthResolutionResponse* internal_default_instance() {
    return reinterpret_cast<const getDepthResolutionResponse*>(
               &_getDepthResolutionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(getDepthResolutionResponse& a, getDepthResolutionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDepthResolutionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDepthResolutionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDepthResolutionResponse* New() const final {
    return new getDepthResolutionResponse();
  }

  getDepthResolutionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDepthResolutionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDepthResolutionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getDepthResolutionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDepthResolutionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getDepthResolutionResponse";
  }
  protected:
  explicit getDepthResolutionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getDepthResolutionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getDepthMinDistanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getDepthMinDistanceResponse) */ {
 public:
  inline getDepthMinDistanceResponse() : getDepthMinDistanceResponse(nullptr) {}
  ~getDepthMinDistanceResponse() override;
  explicit constexpr getDepthMinDistanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDepthMinDistanceResponse(const getDepthMinDistanceResponse& from);
  getDepthMinDistanceResponse(getDepthMinDistanceResponse&& from) noexcept
    : getDepthMinDistanceResponse() {
    *this = ::std::move(from);
  }

  inline getDepthMinDistanceResponse& operator=(const getDepthMinDistanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDepthMinDistanceResponse& operator=(getDepthMinDistanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDepthMinDistanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDepthMinDistanceResponse* internal_default_instance() {
    return reinterpret_cast<const getDepthMinDistanceResponse*>(
               &_getDepthMinDistanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(getDepthMinDistanceResponse& a, getDepthMinDistanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDepthMinDistanceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDepthMinDistanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDepthMinDistanceResponse* New() const final {
    return new getDepthMinDistanceResponse();
  }

  getDepthMinDistanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDepthMinDistanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDepthMinDistanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getDepthMinDistanceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDepthMinDistanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getDepthMinDistanceResponse";
  }
  protected:
  explicit getDepthMinDistanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // float xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  float xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(float value);
  private:
  float _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getDepthMinDistanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getIntrinsicsDepthParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getIntrinsicsDepthParametersResponse) */ {
 public:
  inline getIntrinsicsDepthParametersResponse() : getIntrinsicsDepthParametersResponse(nullptr) {}
  ~getIntrinsicsDepthParametersResponse() override;
  explicit constexpr getIntrinsicsDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getIntrinsicsDepthParametersResponse(const getIntrinsicsDepthParametersResponse& from);
  getIntrinsicsDepthParametersResponse(getIntrinsicsDepthParametersResponse&& from) noexcept
    : getIntrinsicsDepthParametersResponse() {
    *this = ::std::move(from);
  }

  inline getIntrinsicsDepthParametersResponse& operator=(const getIntrinsicsDepthParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getIntrinsicsDepthParametersResponse& operator=(getIntrinsicsDepthParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getIntrinsicsDepthParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getIntrinsicsDepthParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getIntrinsicsDepthParametersResponse*>(
               &_getIntrinsicsDepthParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(getIntrinsicsDepthParametersResponse& a, getIntrinsicsDepthParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getIntrinsicsDepthParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getIntrinsicsDepthParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getIntrinsicsDepthParametersResponse* New() const final {
    return new getIntrinsicsDepthParametersResponse();
  }

  getIntrinsicsDepthParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getIntrinsicsDepthParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getIntrinsicsDepthParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getIntrinsicsDepthParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getIntrinsicsDepthParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getIntrinsicsDepthParametersResponse";
  }
  protected:
  explicit getIntrinsicsDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getIntrinsicsDepthParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getDistortionDepthParametersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getDistortionDepthParametersResponse) */ {
 public:
  inline getDistortionDepthParametersResponse() : getDistortionDepthParametersResponse(nullptr) {}
  ~getDistortionDepthParametersResponse() override;
  explicit constexpr getDistortionDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getDistortionDepthParametersResponse(const getDistortionDepthParametersResponse& from);
  getDistortionDepthParametersResponse(getDistortionDepthParametersResponse&& from) noexcept
    : getDistortionDepthParametersResponse() {
    *this = ::std::move(from);
  }

  inline getDistortionDepthParametersResponse& operator=(const getDistortionDepthParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getDistortionDepthParametersResponse& operator=(getDistortionDepthParametersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getDistortionDepthParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getDistortionDepthParametersResponse* internal_default_instance() {
    return reinterpret_cast<const getDistortionDepthParametersResponse*>(
               &_getDistortionDepthParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(getDistortionDepthParametersResponse& a, getDistortionDepthParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getDistortionDepthParametersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getDistortionDepthParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getDistortionDepthParametersResponse* New() const final {
    return new getDistortionDepthParametersResponse();
  }

  getDistortionDepthParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getDistortionDepthParametersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getDistortionDepthParametersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getDistortionDepthParametersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getDistortionDepthParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getDistortionDepthParametersResponse";
  }
  protected:
  explicit getDistortionDepthParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getDistortionDepthParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextRGBDFrameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getNextRGBDFrameRequest) */ {
 public:
  inline getNextRGBDFrameRequest() : getNextRGBDFrameRequest(nullptr) {}
  ~getNextRGBDFrameRequest() override;
  explicit constexpr getNextRGBDFrameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextRGBDFrameRequest(const getNextRGBDFrameRequest& from);
  getNextRGBDFrameRequest(getNextRGBDFrameRequest&& from) noexcept
    : getNextRGBDFrameRequest() {
    *this = ::std::move(from);
  }

  inline getNextRGBDFrameRequest& operator=(const getNextRGBDFrameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextRGBDFrameRequest& operator=(getNextRGBDFrameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNextRGBDFrameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextRGBDFrameRequest* internal_default_instance() {
    return reinterpret_cast<const getNextRGBDFrameRequest*>(
               &_getNextRGBDFrameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(getNextRGBDFrameRequest& a, getNextRGBDFrameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextRGBDFrameRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextRGBDFrameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextRGBDFrameRequest* New() const final {
    return new getNextRGBDFrameRequest();
  }

  getNextRGBDFrameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextRGBDFrameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNextRGBDFrameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNextRGBDFrameRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextRGBDFrameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getNextRGBDFrameRequest";
  }
  protected:
  explicit getNextRGBDFrameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorImgFieldNumber = 1,
    kDepthImgFieldNumber = 2,
  };
  // bytes colorImg = 1;
  void clear_colorimg();
  const std::string& colorimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_colorimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_colorimg();
  PROTOBUF_MUST_USE_RESULT std::string* release_colorimg();
  void set_allocated_colorimg(std::string* colorimg);
  private:
  const std::string& _internal_colorimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_colorimg(const std::string& value);
  std::string* _internal_mutable_colorimg();
  public:

  // bytes depthImg = 2;
  void clear_depthimg();
  const std::string& depthimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_depthimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_depthimg();
  PROTOBUF_MUST_USE_RESULT std::string* release_depthimg();
  void set_allocated_depthimg(std::string* depthimg);
  private:
  const std::string& _internal_depthimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depthimg(const std::string& value);
  std::string* _internal_mutable_depthimg();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getNextRGBDFrameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr colorimg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depthimg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getNextRGBDFrameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getNextRGBDFrameResponse) */ {
 public:
  inline getNextRGBDFrameResponse() : getNextRGBDFrameResponse(nullptr) {}
  ~getNextRGBDFrameResponse() override;
  explicit constexpr getNextRGBDFrameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getNextRGBDFrameResponse(const getNextRGBDFrameResponse& from);
  getNextRGBDFrameResponse(getNextRGBDFrameResponse&& from) noexcept
    : getNextRGBDFrameResponse() {
    *this = ::std::move(from);
  }

  inline getNextRGBDFrameResponse& operator=(const getNextRGBDFrameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getNextRGBDFrameResponse& operator=(getNextRGBDFrameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getNextRGBDFrameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getNextRGBDFrameResponse* internal_default_instance() {
    return reinterpret_cast<const getNextRGBDFrameResponse*>(
               &_getNextRGBDFrameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(getNextRGBDFrameResponse& a, getNextRGBDFrameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getNextRGBDFrameResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getNextRGBDFrameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getNextRGBDFrameResponse* New() const final {
    return new getNextRGBDFrameResponse();
  }

  getNextRGBDFrameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getNextRGBDFrameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getNextRGBDFrameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getNextRGBDFrameResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getNextRGBDFrameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getNextRGBDFrameResponse";
  }
  protected:
  explicit getNextRGBDFrameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorImgFieldNumber = 1,
    kDepthImgFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes colorImg = 1;
  void clear_colorimg();
  const std::string& colorimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_colorimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_colorimg();
  PROTOBUF_MUST_USE_RESULT std::string* release_colorimg();
  void set_allocated_colorimg(std::string* colorimg);
  private:
  const std::string& _internal_colorimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_colorimg(const std::string& value);
  std::string* _internal_mutable_colorimg();
  public:

  // bytes depthImg = 2;
  void clear_depthimg();
  const std::string& depthimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_depthimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_depthimg();
  PROTOBUF_MUST_USE_RESULT std::string* release_depthimg();
  void set_allocated_depthimg(std::string* depthimg);
  private:
  const std::string& _internal_depthimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depthimg(const std::string& value);
  std::string* _internal_mutable_depthimg();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getNextRGBDFrameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr colorimg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depthimg_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class alignDepthToColorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.alignDepthToColorRequest) */ {
 public:
  inline alignDepthToColorRequest() : alignDepthToColorRequest(nullptr) {}
  ~alignDepthToColorRequest() override;
  explicit constexpr alignDepthToColorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  alignDepthToColorRequest(const alignDepthToColorRequest& from);
  alignDepthToColorRequest(alignDepthToColorRequest&& from) noexcept
    : alignDepthToColorRequest() {
    *this = ::std::move(from);
  }

  inline alignDepthToColorRequest& operator=(const alignDepthToColorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline alignDepthToColorRequest& operator=(alignDepthToColorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const alignDepthToColorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const alignDepthToColorRequest* internal_default_instance() {
    return reinterpret_cast<const alignDepthToColorRequest*>(
               &_alignDepthToColorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(alignDepthToColorRequest& a, alignDepthToColorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(alignDepthToColorRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(alignDepthToColorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline alignDepthToColorRequest* New() const final {
    return new alignDepthToColorRequest();
  }

  alignDepthToColorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<alignDepthToColorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const alignDepthToColorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const alignDepthToColorRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(alignDepthToColorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.alignDepthToColorRequest";
  }
  protected:
  explicit alignDepthToColorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlignedDepthImgFieldNumber = 1,
  };
  // bytes alignedDepthImg = 1;
  void clear_aligneddepthimg();
  const std::string& aligneddepthimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aligneddepthimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aligneddepthimg();
  PROTOBUF_MUST_USE_RESULT std::string* release_aligneddepthimg();
  void set_allocated_aligneddepthimg(std::string* aligneddepthimg);
  private:
  const std::string& _internal_aligneddepthimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aligneddepthimg(const std::string& value);
  std::string* _internal_mutable_aligneddepthimg();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.alignDepthToColorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aligneddepthimg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class alignDepthToColorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.alignDepthToColorResponse) */ {
 public:
  inline alignDepthToColorResponse() : alignDepthToColorResponse(nullptr) {}
  ~alignDepthToColorResponse() override;
  explicit constexpr alignDepthToColorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  alignDepthToColorResponse(const alignDepthToColorResponse& from);
  alignDepthToColorResponse(alignDepthToColorResponse&& from) noexcept
    : alignDepthToColorResponse() {
    *this = ::std::move(from);
  }

  inline alignDepthToColorResponse& operator=(const alignDepthToColorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline alignDepthToColorResponse& operator=(alignDepthToColorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const alignDepthToColorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const alignDepthToColorResponse* internal_default_instance() {
    return reinterpret_cast<const alignDepthToColorResponse*>(
               &_alignDepthToColorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(alignDepthToColorResponse& a, alignDepthToColorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(alignDepthToColorResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(alignDepthToColorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline alignDepthToColorResponse* New() const final {
    return new alignDepthToColorResponse();
  }

  alignDepthToColorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<alignDepthToColorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const alignDepthToColorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const alignDepthToColorResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(alignDepthToColorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.alignDepthToColorResponse";
  }
  protected:
  explicit alignDepthToColorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlignedDepthImgFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes alignedDepthImg = 1;
  void clear_aligneddepthimg();
  const std::string& aligneddepthimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aligneddepthimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aligneddepthimg();
  PROTOBUF_MUST_USE_RESULT std::string* release_aligneddepthimg();
  void set_allocated_aligneddepthimg(std::string* aligneddepthimg);
  private:
  const std::string& _internal_aligneddepthimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aligneddepthimg(const std::string& value);
  std::string* _internal_mutable_aligneddepthimg();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.alignDepthToColorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aligneddepthimg_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class alignColorToDepthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.alignColorToDepthRequest) */ {
 public:
  inline alignColorToDepthRequest() : alignColorToDepthRequest(nullptr) {}
  ~alignColorToDepthRequest() override;
  explicit constexpr alignColorToDepthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  alignColorToDepthRequest(const alignColorToDepthRequest& from);
  alignColorToDepthRequest(alignColorToDepthRequest&& from) noexcept
    : alignColorToDepthRequest() {
    *this = ::std::move(from);
  }

  inline alignColorToDepthRequest& operator=(const alignColorToDepthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline alignColorToDepthRequest& operator=(alignColorToDepthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const alignColorToDepthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const alignColorToDepthRequest* internal_default_instance() {
    return reinterpret_cast<const alignColorToDepthRequest*>(
               &_alignColorToDepthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(alignColorToDepthRequest& a, alignColorToDepthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(alignColorToDepthRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(alignColorToDepthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline alignColorToDepthRequest* New() const final {
    return new alignColorToDepthRequest();
  }

  alignColorToDepthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<alignColorToDepthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const alignColorToDepthRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const alignColorToDepthRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(alignColorToDepthRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.alignColorToDepthRequest";
  }
  protected:
  explicit alignColorToDepthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlignedColorImgFieldNumber = 1,
  };
  // bytes alignedColorImg = 1;
  void clear_alignedcolorimg();
  const std::string& alignedcolorimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alignedcolorimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alignedcolorimg();
  PROTOBUF_MUST_USE_RESULT std::string* release_alignedcolorimg();
  void set_allocated_alignedcolorimg(std::string* alignedcolorimg);
  private:
  const std::string& _internal_alignedcolorimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alignedcolorimg(const std::string& value);
  std::string* _internal_mutable_alignedcolorimg();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.alignColorToDepthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alignedcolorimg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class alignColorToDepthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.alignColorToDepthResponse) */ {
 public:
  inline alignColorToDepthResponse() : alignColorToDepthResponse(nullptr) {}
  ~alignColorToDepthResponse() override;
  explicit constexpr alignColorToDepthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  alignColorToDepthResponse(const alignColorToDepthResponse& from);
  alignColorToDepthResponse(alignColorToDepthResponse&& from) noexcept
    : alignColorToDepthResponse() {
    *this = ::std::move(from);
  }

  inline alignColorToDepthResponse& operator=(const alignColorToDepthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline alignColorToDepthResponse& operator=(alignColorToDepthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const alignColorToDepthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const alignColorToDepthResponse* internal_default_instance() {
    return reinterpret_cast<const alignColorToDepthResponse*>(
               &_alignColorToDepthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(alignColorToDepthResponse& a, alignColorToDepthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(alignColorToDepthResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(alignColorToDepthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline alignColorToDepthResponse* New() const final {
    return new alignColorToDepthResponse();
  }

  alignColorToDepthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<alignColorToDepthResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const alignColorToDepthResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const alignColorToDepthResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(alignColorToDepthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.alignColorToDepthResponse";
  }
  protected:
  explicit alignColorToDepthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlignedColorImgFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes alignedColorImg = 1;
  void clear_alignedcolorimg();
  const std::string& alignedcolorimg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alignedcolorimg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alignedcolorimg();
  PROTOBUF_MUST_USE_RESULT std::string* release_alignedcolorimg();
  void set_allocated_alignedcolorimg(std::string* alignedcolorimg);
  private:
  const std::string& _internal_alignedcolorimg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alignedcolorimg(const std::string& value);
  std::string* _internal_mutable_alignedcolorimg();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.alignColorToDepthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alignedcolorimg_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getPixelToWorldRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getPixelToWorldRequest) */ {
 public:
  inline getPixelToWorldRequest() : getPixelToWorldRequest(nullptr) {}
  ~getPixelToWorldRequest() override;
  explicit constexpr getPixelToWorldRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPixelToWorldRequest(const getPixelToWorldRequest& from);
  getPixelToWorldRequest(getPixelToWorldRequest&& from) noexcept
    : getPixelToWorldRequest() {
    *this = ::std::move(from);
  }

  inline getPixelToWorldRequest& operator=(const getPixelToWorldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPixelToWorldRequest& operator=(getPixelToWorldRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPixelToWorldRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPixelToWorldRequest* internal_default_instance() {
    return reinterpret_cast<const getPixelToWorldRequest*>(
               &_getPixelToWorldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(getPixelToWorldRequest& a, getPixelToWorldRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getPixelToWorldRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPixelToWorldRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPixelToWorldRequest* New() const final {
    return new getPixelToWorldRequest();
  }

  getPixelToWorldRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPixelToWorldRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPixelToWorldRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getPixelToWorldRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPixelToWorldRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getPixelToWorldRequest";
  }
  protected:
  explicit getPixelToWorldRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInPixelFieldNumber = 1,
  };
  // bytes inPixel = 1;
  void clear_inpixel();
  const std::string& inpixel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inpixel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inpixel();
  PROTOBUF_MUST_USE_RESULT std::string* release_inpixel();
  void set_allocated_inpixel(std::string* inpixel);
  private:
  const std::string& _internal_inpixel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inpixel(const std::string& value);
  std::string* _internal_mutable_inpixel();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getPixelToWorldRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inpixel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getPixelToWorldResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getPixelToWorldResponse) */ {
 public:
  inline getPixelToWorldResponse() : getPixelToWorldResponse(nullptr) {}
  ~getPixelToWorldResponse() override;
  explicit constexpr getPixelToWorldResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getPixelToWorldResponse(const getPixelToWorldResponse& from);
  getPixelToWorldResponse(getPixelToWorldResponse&& from) noexcept
    : getPixelToWorldResponse() {
    *this = ::std::move(from);
  }

  inline getPixelToWorldResponse& operator=(const getPixelToWorldResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getPixelToWorldResponse& operator=(getPixelToWorldResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getPixelToWorldResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getPixelToWorldResponse* internal_default_instance() {
    return reinterpret_cast<const getPixelToWorldResponse*>(
               &_getPixelToWorldResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(getPixelToWorldResponse& a, getPixelToWorldResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getPixelToWorldResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getPixelToWorldResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getPixelToWorldResponse* New() const final {
    return new getPixelToWorldResponse();
  }

  getPixelToWorldResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getPixelToWorldResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getPixelToWorldResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getPixelToWorldResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getPixelToWorldResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getPixelToWorldResponse";
  }
  protected:
  explicit getPixelToWorldResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getPixelToWorldResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getWorldToPixelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getWorldToPixelRequest) */ {
 public:
  inline getWorldToPixelRequest() : getWorldToPixelRequest(nullptr) {}
  ~getWorldToPixelRequest() override;
  explicit constexpr getWorldToPixelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldToPixelRequest(const getWorldToPixelRequest& from);
  getWorldToPixelRequest(getWorldToPixelRequest&& from) noexcept
    : getWorldToPixelRequest() {
    *this = ::std::move(from);
  }

  inline getWorldToPixelRequest& operator=(const getWorldToPixelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldToPixelRequest& operator=(getWorldToPixelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldToPixelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldToPixelRequest* internal_default_instance() {
    return reinterpret_cast<const getWorldToPixelRequest*>(
               &_getWorldToPixelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(getWorldToPixelRequest& a, getWorldToPixelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldToPixelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldToPixelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getWorldToPixelRequest* New() const final {
    return new getWorldToPixelRequest();
  }

  getWorldToPixelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getWorldToPixelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldToPixelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getWorldToPixelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldToPixelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getWorldToPixelRequest";
  }
  protected:
  explicit getWorldToPixelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIn3DPointFieldNumber = 1,
  };
  // bytes in3DPoint = 1;
  void clear_in3dpoint();
  const std::string& in3dpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_in3dpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_in3dpoint();
  PROTOBUF_MUST_USE_RESULT std::string* release_in3dpoint();
  void set_allocated_in3dpoint(std::string* in3dpoint);
  private:
  const std::string& _internal_in3dpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_in3dpoint(const std::string& value);
  std::string* _internal_mutable_in3dpoint();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getWorldToPixelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr in3dpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getWorldToPixelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getWorldToPixelResponse) */ {
 public:
  inline getWorldToPixelResponse() : getWorldToPixelResponse(nullptr) {}
  ~getWorldToPixelResponse() override;
  explicit constexpr getWorldToPixelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldToPixelResponse(const getWorldToPixelResponse& from);
  getWorldToPixelResponse(getWorldToPixelResponse&& from) noexcept
    : getWorldToPixelResponse() {
    *this = ::std::move(from);
  }

  inline getWorldToPixelResponse& operator=(const getWorldToPixelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldToPixelResponse& operator=(getWorldToPixelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldToPixelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldToPixelResponse* internal_default_instance() {
    return reinterpret_cast<const getWorldToPixelResponse*>(
               &_getWorldToPixelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(getWorldToPixelResponse& a, getWorldToPixelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldToPixelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldToPixelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getWorldToPixelResponse* New() const final {
    return new getWorldToPixelResponse();
  }

  getWorldToPixelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getWorldToPixelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldToPixelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getWorldToPixelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldToPixelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getWorldToPixelResponse";
  }
  protected:
  explicit getWorldToPixelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getWorldToPixelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getWorldToPixelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getWorldToPixelsRequest) */ {
 public:
  inline getWorldToPixelsRequest() : getWorldToPixelsRequest(nullptr) {}
  ~getWorldToPixelsRequest() override;
  explicit constexpr getWorldToPixelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldToPixelsRequest(const getWorldToPixelsRequest& from);
  getWorldToPixelsRequest(getWorldToPixelsRequest&& from) noexcept
    : getWorldToPixelsRequest() {
    *this = ::std::move(from);
  }

  inline getWorldToPixelsRequest& operator=(const getWorldToPixelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldToPixelsRequest& operator=(getWorldToPixelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldToPixelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldToPixelsRequest* internal_default_instance() {
    return reinterpret_cast<const getWorldToPixelsRequest*>(
               &_getWorldToPixelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(getWorldToPixelsRequest& a, getWorldToPixelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldToPixelsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldToPixelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getWorldToPixelsRequest* New() const final {
    return new getWorldToPixelsRequest();
  }

  getWorldToPixelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getWorldToPixelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldToPixelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getWorldToPixelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldToPixelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getWorldToPixelsRequest";
  }
  protected:
  explicit getWorldToPixelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIn3DPointsFieldNumber = 1,
  };
  // bytes in3DPoints = 1;
  void clear_in3dpoints();
  const std::string& in3dpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_in3dpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_in3dpoints();
  PROTOBUF_MUST_USE_RESULT std::string* release_in3dpoints();
  void set_allocated_in3dpoints(std::string* in3dpoints);
  private:
  const std::string& _internal_in3dpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_in3dpoints(const std::string& value);
  std::string* _internal_mutable_in3dpoints();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getWorldToPixelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr in3dpoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// -------------------------------------------------------------------

class getWorldToPixelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIRGBDCamera.getWorldToPixelsResponse) */ {
 public:
  inline getWorldToPixelsResponse() : getWorldToPixelsResponse(nullptr) {}
  ~getWorldToPixelsResponse() override;
  explicit constexpr getWorldToPixelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  getWorldToPixelsResponse(const getWorldToPixelsResponse& from);
  getWorldToPixelsResponse(getWorldToPixelsResponse&& from) noexcept
    : getWorldToPixelsResponse() {
    *this = ::std::move(from);
  }

  inline getWorldToPixelsResponse& operator=(const getWorldToPixelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline getWorldToPixelsResponse& operator=(getWorldToPixelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const getWorldToPixelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const getWorldToPixelsResponse* internal_default_instance() {
    return reinterpret_cast<const getWorldToPixelsResponse*>(
               &_getWorldToPixelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(getWorldToPixelsResponse& a, getWorldToPixelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(getWorldToPixelsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getWorldToPixelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getWorldToPixelsResponse* New() const final {
    return new getWorldToPixelsResponse();
  }

  getWorldToPixelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getWorldToPixelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const getWorldToPixelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const getWorldToPixelsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getWorldToPixelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIRGBDCamera.getWorldToPixelsResponse";
  }
  protected:
  explicit getWorldToPixelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bytes xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  const std::string& xpcfgrpcreturnvalue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xpcfgrpcreturnvalue();
  PROTOBUF_MUST_USE_RESULT std::string* release_xpcfgrpcreturnvalue();
  void set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue);
  private:
  const std::string& _internal_xpcfgrpcreturnvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xpcfgrpcreturnvalue(const std::string& value);
  std::string* _internal_mutable_xpcfgrpcreturnvalue();
  public:

  // @@protoc_insertion_point(class_scope:grpcIRGBDCamera.getWorldToPixelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIRGBDCameraService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// startResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void startResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 startResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.startResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void startResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void startResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.startResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// stopResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void stopResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 stopResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.stopResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void stopResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void stopResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.stopResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNextImageRequest

// bytes img = 1;
inline void getNextImageRequest::clear_img() {
  img_.ClearToEmpty();
}
inline const std::string& getNextImageRequest::img() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextImageRequest.img)
  return _internal_img();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextImageRequest::set_img(ArgT0&& arg0, ArgT... args) {
 
 img_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextImageRequest.img)
}
inline std::string* getNextImageRequest::mutable_img() {
  std::string* _s = _internal_mutable_img();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getNextImageRequest.img)
  return _s;
}
inline const std::string& getNextImageRequest::_internal_img() const {
  return img_.Get();
}
inline void getNextImageRequest::_internal_set_img(const std::string& value) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextImageRequest::_internal_mutable_img() {
  
  return img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextImageRequest::release_img() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getNextImageRequest.img)
  return img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextImageRequest::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getNextImageRequest.img)
}

// -------------------------------------------------------------------

// getNextImageResponse

// bytes img = 1;
inline void getNextImageResponse::clear_img() {
  img_.ClearToEmpty();
}
inline const std::string& getNextImageResponse::img() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextImageResponse.img)
  return _internal_img();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextImageResponse::set_img(ArgT0&& arg0, ArgT... args) {
 
 img_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextImageResponse.img)
}
inline std::string* getNextImageResponse::mutable_img() {
  std::string* _s = _internal_mutable_img();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getNextImageResponse.img)
  return _s;
}
inline const std::string& getNextImageResponse::_internal_img() const {
  return img_.Get();
}
inline void getNextImageResponse::_internal_set_img(const std::string& value) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextImageResponse::_internal_mutable_img() {
  
  return img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextImageResponse::release_img() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getNextImageResponse.img)
  return img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextImageResponse::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getNextImageResponse.img)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getNextImageResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextImageResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextImageResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextImageResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNextImageResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNextImageResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextImageResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setResolutionRequest

// bytes resolution = 1;
inline void setResolutionRequest::clear_resolution() {
  resolution_.ClearToEmpty();
}
inline const std::string& setResolutionRequest::resolution() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setResolutionRequest.resolution)
  return _internal_resolution();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setResolutionRequest::set_resolution(ArgT0&& arg0, ArgT... args) {
 
 resolution_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setResolutionRequest.resolution)
}
inline std::string* setResolutionRequest::mutable_resolution() {
  std::string* _s = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.setResolutionRequest.resolution)
  return _s;
}
inline const std::string& setResolutionRequest::_internal_resolution() const {
  return resolution_.Get();
}
inline void setResolutionRequest::_internal_set_resolution(const std::string& value) {
  
  resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setResolutionRequest::_internal_mutable_resolution() {
  
  return resolution_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setResolutionRequest::release_resolution() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.setResolutionRequest.resolution)
  return resolution_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setResolutionRequest::set_allocated_resolution(std::string* resolution) {
  if (resolution != nullptr) {
    
  } else {
    
  }
  resolution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resolution,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.setResolutionRequest.resolution)
}

// -------------------------------------------------------------------

// setIntrinsicParametersRequest

// bytes intrinsic_parameters = 1;
inline void setIntrinsicParametersRequest::clear_intrinsic_parameters() {
  intrinsic_parameters_.ClearToEmpty();
}
inline const std::string& setIntrinsicParametersRequest::intrinsic_parameters() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setIntrinsicParametersRequest.intrinsic_parameters)
  return _internal_intrinsic_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setIntrinsicParametersRequest::set_intrinsic_parameters(ArgT0&& arg0, ArgT... args) {
 
 intrinsic_parameters_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setIntrinsicParametersRequest.intrinsic_parameters)
}
inline std::string* setIntrinsicParametersRequest::mutable_intrinsic_parameters() {
  std::string* _s = _internal_mutable_intrinsic_parameters();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.setIntrinsicParametersRequest.intrinsic_parameters)
  return _s;
}
inline const std::string& setIntrinsicParametersRequest::_internal_intrinsic_parameters() const {
  return intrinsic_parameters_.Get();
}
inline void setIntrinsicParametersRequest::_internal_set_intrinsic_parameters(const std::string& value) {
  
  intrinsic_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setIntrinsicParametersRequest::_internal_mutable_intrinsic_parameters() {
  
  return intrinsic_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setIntrinsicParametersRequest::release_intrinsic_parameters() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.setIntrinsicParametersRequest.intrinsic_parameters)
  return intrinsic_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setIntrinsicParametersRequest::set_allocated_intrinsic_parameters(std::string* intrinsic_parameters) {
  if (intrinsic_parameters != nullptr) {
    
  } else {
    
  }
  intrinsic_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intrinsic_parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.setIntrinsicParametersRequest.intrinsic_parameters)
}

// -------------------------------------------------------------------

// setDistortionParametersRequest

// bytes distortion_parameters = 1;
inline void setDistortionParametersRequest::clear_distortion_parameters() {
  distortion_parameters_.ClearToEmpty();
}
inline const std::string& setDistortionParametersRequest::distortion_parameters() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setDistortionParametersRequest.distortion_parameters)
  return _internal_distortion_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setDistortionParametersRequest::set_distortion_parameters(ArgT0&& arg0, ArgT... args) {
 
 distortion_parameters_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setDistortionParametersRequest.distortion_parameters)
}
inline std::string* setDistortionParametersRequest::mutable_distortion_parameters() {
  std::string* _s = _internal_mutable_distortion_parameters();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.setDistortionParametersRequest.distortion_parameters)
  return _s;
}
inline const std::string& setDistortionParametersRequest::_internal_distortion_parameters() const {
  return distortion_parameters_.Get();
}
inline void setDistortionParametersRequest::_internal_set_distortion_parameters(const std::string& value) {
  
  distortion_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setDistortionParametersRequest::_internal_mutable_distortion_parameters() {
  
  return distortion_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setDistortionParametersRequest::release_distortion_parameters() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.setDistortionParametersRequest.distortion_parameters)
  return distortion_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setDistortionParametersRequest::set_allocated_distortion_parameters(std::string* distortion_parameters) {
  if (distortion_parameters != nullptr) {
    
  } else {
    
  }
  distortion_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distortion_parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.setDistortionParametersRequest.distortion_parameters)
}

// -------------------------------------------------------------------

// setParametersRequest

// bytes parameters = 1;
inline void setParametersRequest::clear_parameters() {
  parameters_.ClearToEmpty();
}
inline const std::string& setParametersRequest::parameters() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setParametersRequest.parameters)
  return _internal_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setParametersRequest::set_parameters(ArgT0&& arg0, ArgT... args) {
 
 parameters_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setParametersRequest.parameters)
}
inline std::string* setParametersRequest::mutable_parameters() {
  std::string* _s = _internal_mutable_parameters();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.setParametersRequest.parameters)
  return _s;
}
inline const std::string& setParametersRequest::_internal_parameters() const {
  return parameters_.Get();
}
inline void setParametersRequest::_internal_set_parameters(const std::string& value) {
  
  parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setParametersRequest::_internal_mutable_parameters() {
  
  return parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setParametersRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.setParametersRequest.parameters)
  return parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setParametersRequest::set_allocated_parameters(std::string* parameters) {
  if (parameters != nullptr) {
    
  } else {
    
  }
  parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.setParametersRequest.parameters)
}

// -------------------------------------------------------------------

// getResolutionResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getResolutionResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getResolutionResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getResolutionResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getResolutionResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getResolutionResponse.xpcfGrpcReturnValue)
}
inline std::string* getResolutionResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getResolutionResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getResolutionResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getResolutionResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getResolutionResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getResolutionResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getResolutionResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getResolutionResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getResolutionResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getIntrinsicsParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getIntrinsicsParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getIntrinsicsParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getIntrinsicsParametersResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getIntrinsicsParametersResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getIntrinsicsParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getIntrinsicsParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getIntrinsicsParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getIntrinsicsParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getIntrinsicsParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getIntrinsicsParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getParametersResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getParametersResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getParametersResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDistortionParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getDistortionParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getDistortionParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDistortionParametersResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getDistortionParametersResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getDistortionParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getDistortionParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getDistortionParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getDistortionParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getDistortionParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getDistortionParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNextDepthFrameRequest

// bytes img = 1;
inline void getNextDepthFrameRequest::clear_img() {
  img_.ClearToEmpty();
}
inline const std::string& getNextDepthFrameRequest::img() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextDepthFrameRequest.img)
  return _internal_img();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextDepthFrameRequest::set_img(ArgT0&& arg0, ArgT... args) {
 
 img_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextDepthFrameRequest.img)
}
inline std::string* getNextDepthFrameRequest::mutable_img() {
  std::string* _s = _internal_mutable_img();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getNextDepthFrameRequest.img)
  return _s;
}
inline const std::string& getNextDepthFrameRequest::_internal_img() const {
  return img_.Get();
}
inline void getNextDepthFrameRequest::_internal_set_img(const std::string& value) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextDepthFrameRequest::_internal_mutable_img() {
  
  return img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextDepthFrameRequest::release_img() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getNextDepthFrameRequest.img)
  return img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextDepthFrameRequest::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getNextDepthFrameRequest.img)
}

// -------------------------------------------------------------------

// getNextDepthFrameResponse

// bytes img = 1;
inline void getNextDepthFrameResponse::clear_img() {
  img_.ClearToEmpty();
}
inline const std::string& getNextDepthFrameResponse::img() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextDepthFrameResponse.img)
  return _internal_img();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextDepthFrameResponse::set_img(ArgT0&& arg0, ArgT... args) {
 
 img_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextDepthFrameResponse.img)
}
inline std::string* getNextDepthFrameResponse::mutable_img() {
  std::string* _s = _internal_mutable_img();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getNextDepthFrameResponse.img)
  return _s;
}
inline const std::string& getNextDepthFrameResponse::_internal_img() const {
  return img_.Get();
}
inline void getNextDepthFrameResponse::_internal_set_img(const std::string& value) {
  
  img_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextDepthFrameResponse::_internal_mutable_img() {
  
  return img_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextDepthFrameResponse::release_img() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getNextDepthFrameResponse.img)
  return img_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextDepthFrameResponse::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getNextDepthFrameResponse.img)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getNextDepthFrameResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextDepthFrameResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextDepthFrameResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextDepthFrameResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNextDepthFrameResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNextDepthFrameResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextDepthFrameResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPointCloudRequest

// bytes pc = 1;
inline void getPointCloudRequest::clear_pc() {
  pc_.ClearToEmpty();
}
inline const std::string& getPointCloudRequest::pc() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getPointCloudRequest.pc)
  return _internal_pc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudRequest::set_pc(ArgT0&& arg0, ArgT... args) {
 
 pc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getPointCloudRequest.pc)
}
inline std::string* getPointCloudRequest::mutable_pc() {
  std::string* _s = _internal_mutable_pc();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getPointCloudRequest.pc)
  return _s;
}
inline const std::string& getPointCloudRequest::_internal_pc() const {
  return pc_.Get();
}
inline void getPointCloudRequest::_internal_set_pc(const std::string& value) {
  
  pc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getPointCloudRequest::_internal_mutable_pc() {
  
  return pc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getPointCloudRequest::release_pc() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getPointCloudRequest.pc)
  return pc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getPointCloudRequest::set_allocated_pc(std::string* pc) {
  if (pc != nullptr) {
    
  } else {
    
  }
  pc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getPointCloudRequest.pc)
}

// -------------------------------------------------------------------

// getPointCloudResponse

// bytes pc = 1;
inline void getPointCloudResponse::clear_pc() {
  pc_.ClearToEmpty();
}
inline const std::string& getPointCloudResponse::pc() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getPointCloudResponse.pc)
  return _internal_pc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPointCloudResponse::set_pc(ArgT0&& arg0, ArgT... args) {
 
 pc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getPointCloudResponse.pc)
}
inline std::string* getPointCloudResponse::mutable_pc() {
  std::string* _s = _internal_mutable_pc();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getPointCloudResponse.pc)
  return _s;
}
inline const std::string& getPointCloudResponse::_internal_pc() const {
  return pc_.Get();
}
inline void getPointCloudResponse::_internal_set_pc(const std::string& value) {
  
  pc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getPointCloudResponse::_internal_mutable_pc() {
  
  return pc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getPointCloudResponse::release_pc() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getPointCloudResponse.pc)
  return pc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getPointCloudResponse::set_allocated_pc(std::string* pc) {
  if (pc != nullptr) {
    
  } else {
    
  }
  pc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getPointCloudResponse.pc)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void getPointCloudResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getPointCloudResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getPointCloudResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getPointCloudResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getPointCloudResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getPointCloudResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getPointCloudResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setDepthResolutionRequest

// bytes resolution = 1;
inline void setDepthResolutionRequest::clear_resolution() {
  resolution_.ClearToEmpty();
}
inline const std::string& setDepthResolutionRequest::resolution() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setDepthResolutionRequest.resolution)
  return _internal_resolution();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setDepthResolutionRequest::set_resolution(ArgT0&& arg0, ArgT... args) {
 
 resolution_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setDepthResolutionRequest.resolution)
}
inline std::string* setDepthResolutionRequest::mutable_resolution() {
  std::string* _s = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.setDepthResolutionRequest.resolution)
  return _s;
}
inline const std::string& setDepthResolutionRequest::_internal_resolution() const {
  return resolution_.Get();
}
inline void setDepthResolutionRequest::_internal_set_resolution(const std::string& value) {
  
  resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setDepthResolutionRequest::_internal_mutable_resolution() {
  
  return resolution_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setDepthResolutionRequest::release_resolution() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.setDepthResolutionRequest.resolution)
  return resolution_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setDepthResolutionRequest::set_allocated_resolution(std::string* resolution) {
  if (resolution != nullptr) {
    
  } else {
    
  }
  resolution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resolution,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.setDepthResolutionRequest.resolution)
}

// -------------------------------------------------------------------

// setDepthResolutionResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setDepthResolutionResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDepthResolutionResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDepthResolutionResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setDepthResolutionResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setDepthResolutionResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setDepthResolutionResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setDepthResolutionResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setIntrinsicDepthParametersRequest

// bytes intrinsic_parameters = 1;
inline void setIntrinsicDepthParametersRequest::clear_intrinsic_parameters() {
  intrinsic_parameters_.ClearToEmpty();
}
inline const std::string& setIntrinsicDepthParametersRequest::intrinsic_parameters() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
  return _internal_intrinsic_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setIntrinsicDepthParametersRequest::set_intrinsic_parameters(ArgT0&& arg0, ArgT... args) {
 
 intrinsic_parameters_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
}
inline std::string* setIntrinsicDepthParametersRequest::mutable_intrinsic_parameters() {
  std::string* _s = _internal_mutable_intrinsic_parameters();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
  return _s;
}
inline const std::string& setIntrinsicDepthParametersRequest::_internal_intrinsic_parameters() const {
  return intrinsic_parameters_.Get();
}
inline void setIntrinsicDepthParametersRequest::_internal_set_intrinsic_parameters(const std::string& value) {
  
  intrinsic_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setIntrinsicDepthParametersRequest::_internal_mutable_intrinsic_parameters() {
  
  return intrinsic_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setIntrinsicDepthParametersRequest::release_intrinsic_parameters() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
  return intrinsic_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setIntrinsicDepthParametersRequest::set_allocated_intrinsic_parameters(std::string* intrinsic_parameters) {
  if (intrinsic_parameters != nullptr) {
    
  } else {
    
  }
  intrinsic_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intrinsic_parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.setIntrinsicDepthParametersRequest.intrinsic_parameters)
}

// -------------------------------------------------------------------

// setIntrinsicDepthParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setIntrinsicDepthParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setIntrinsicDepthParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setIntrinsicDepthParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setIntrinsicDepthParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setIntrinsicDepthParametersResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setIntrinsicDepthParametersResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setIntrinsicDepthParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setDistortionDepthParametersRequest

// bytes distortion_parameters = 1;
inline void setDistortionDepthParametersRequest::clear_distortion_parameters() {
  distortion_parameters_.ClearToEmpty();
}
inline const std::string& setDistortionDepthParametersRequest::distortion_parameters() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setDistortionDepthParametersRequest.distortion_parameters)
  return _internal_distortion_parameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setDistortionDepthParametersRequest::set_distortion_parameters(ArgT0&& arg0, ArgT... args) {
 
 distortion_parameters_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setDistortionDepthParametersRequest.distortion_parameters)
}
inline std::string* setDistortionDepthParametersRequest::mutable_distortion_parameters() {
  std::string* _s = _internal_mutable_distortion_parameters();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.setDistortionDepthParametersRequest.distortion_parameters)
  return _s;
}
inline const std::string& setDistortionDepthParametersRequest::_internal_distortion_parameters() const {
  return distortion_parameters_.Get();
}
inline void setDistortionDepthParametersRequest::_internal_set_distortion_parameters(const std::string& value) {
  
  distortion_parameters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* setDistortionDepthParametersRequest::_internal_mutable_distortion_parameters() {
  
  return distortion_parameters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* setDistortionDepthParametersRequest::release_distortion_parameters() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.setDistortionDepthParametersRequest.distortion_parameters)
  return distortion_parameters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void setDistortionDepthParametersRequest::set_allocated_distortion_parameters(std::string* distortion_parameters) {
  if (distortion_parameters != nullptr) {
    
  } else {
    
  }
  distortion_parameters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distortion_parameters,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.setDistortionDepthParametersRequest.distortion_parameters)
}

// -------------------------------------------------------------------

// setDistortionDepthParametersResponse

// sint32 xpcfGrpcReturnValue = 1;
inline void setDistortionDepthParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDistortionDepthParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 setDistortionDepthParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.setDistortionDepthParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setDistortionDepthParametersResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setDistortionDepthParametersResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.setDistortionDepthParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDepthResolutionResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getDepthResolutionResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getDepthResolutionResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDepthResolutionResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
}
inline std::string* getDepthResolutionResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getDepthResolutionResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getDepthResolutionResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getDepthResolutionResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getDepthResolutionResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getDepthResolutionResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getDepthResolutionResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDepthMinDistanceResponse

// float xpcfGrpcReturnValue = 1;
inline void getDepthMinDistanceResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline float getDepthMinDistanceResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline float getDepthMinDistanceResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getDepthMinDistanceResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getDepthMinDistanceResponse::_internal_set_xpcfgrpcreturnvalue(float value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getDepthMinDistanceResponse::set_xpcfgrpcreturnvalue(float value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getDepthMinDistanceResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getIntrinsicsDepthParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getIntrinsicsDepthParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getIntrinsicsDepthParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getIntrinsicsDepthParametersResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getIntrinsicsDepthParametersResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getIntrinsicsDepthParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getIntrinsicsDepthParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getIntrinsicsDepthParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getIntrinsicsDepthParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getIntrinsicsDepthParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getIntrinsicsDepthParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getDistortionDepthParametersResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getDistortionDepthParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getDistortionDepthParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getDistortionDepthParametersResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
}
inline std::string* getDistortionDepthParametersResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getDistortionDepthParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getDistortionDepthParametersResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getDistortionDepthParametersResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getDistortionDepthParametersResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getDistortionDepthParametersResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getDistortionDepthParametersResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getNextRGBDFrameRequest

// bytes colorImg = 1;
inline void getNextRGBDFrameRequest::clear_colorimg() {
  colorimg_.ClearToEmpty();
}
inline const std::string& getNextRGBDFrameRequest::colorimg() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextRGBDFrameRequest.colorImg)
  return _internal_colorimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextRGBDFrameRequest::set_colorimg(ArgT0&& arg0, ArgT... args) {
 
 colorimg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextRGBDFrameRequest.colorImg)
}
inline std::string* getNextRGBDFrameRequest::mutable_colorimg() {
  std::string* _s = _internal_mutable_colorimg();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getNextRGBDFrameRequest.colorImg)
  return _s;
}
inline const std::string& getNextRGBDFrameRequest::_internal_colorimg() const {
  return colorimg_.Get();
}
inline void getNextRGBDFrameRequest::_internal_set_colorimg(const std::string& value) {
  
  colorimg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextRGBDFrameRequest::_internal_mutable_colorimg() {
  
  return colorimg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextRGBDFrameRequest::release_colorimg() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getNextRGBDFrameRequest.colorImg)
  return colorimg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextRGBDFrameRequest::set_allocated_colorimg(std::string* colorimg) {
  if (colorimg != nullptr) {
    
  } else {
    
  }
  colorimg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), colorimg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getNextRGBDFrameRequest.colorImg)
}

// bytes depthImg = 2;
inline void getNextRGBDFrameRequest::clear_depthimg() {
  depthimg_.ClearToEmpty();
}
inline const std::string& getNextRGBDFrameRequest::depthimg() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextRGBDFrameRequest.depthImg)
  return _internal_depthimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextRGBDFrameRequest::set_depthimg(ArgT0&& arg0, ArgT... args) {
 
 depthimg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextRGBDFrameRequest.depthImg)
}
inline std::string* getNextRGBDFrameRequest::mutable_depthimg() {
  std::string* _s = _internal_mutable_depthimg();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getNextRGBDFrameRequest.depthImg)
  return _s;
}
inline const std::string& getNextRGBDFrameRequest::_internal_depthimg() const {
  return depthimg_.Get();
}
inline void getNextRGBDFrameRequest::_internal_set_depthimg(const std::string& value) {
  
  depthimg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextRGBDFrameRequest::_internal_mutable_depthimg() {
  
  return depthimg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextRGBDFrameRequest::release_depthimg() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getNextRGBDFrameRequest.depthImg)
  return depthimg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextRGBDFrameRequest::set_allocated_depthimg(std::string* depthimg) {
  if (depthimg != nullptr) {
    
  } else {
    
  }
  depthimg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depthimg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getNextRGBDFrameRequest.depthImg)
}

// -------------------------------------------------------------------

// getNextRGBDFrameResponse

// bytes colorImg = 1;
inline void getNextRGBDFrameResponse::clear_colorimg() {
  colorimg_.ClearToEmpty();
}
inline const std::string& getNextRGBDFrameResponse::colorimg() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextRGBDFrameResponse.colorImg)
  return _internal_colorimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextRGBDFrameResponse::set_colorimg(ArgT0&& arg0, ArgT... args) {
 
 colorimg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextRGBDFrameResponse.colorImg)
}
inline std::string* getNextRGBDFrameResponse::mutable_colorimg() {
  std::string* _s = _internal_mutable_colorimg();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getNextRGBDFrameResponse.colorImg)
  return _s;
}
inline const std::string& getNextRGBDFrameResponse::_internal_colorimg() const {
  return colorimg_.Get();
}
inline void getNextRGBDFrameResponse::_internal_set_colorimg(const std::string& value) {
  
  colorimg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextRGBDFrameResponse::_internal_mutable_colorimg() {
  
  return colorimg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextRGBDFrameResponse::release_colorimg() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getNextRGBDFrameResponse.colorImg)
  return colorimg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextRGBDFrameResponse::set_allocated_colorimg(std::string* colorimg) {
  if (colorimg != nullptr) {
    
  } else {
    
  }
  colorimg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), colorimg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getNextRGBDFrameResponse.colorImg)
}

// bytes depthImg = 2;
inline void getNextRGBDFrameResponse::clear_depthimg() {
  depthimg_.ClearToEmpty();
}
inline const std::string& getNextRGBDFrameResponse::depthimg() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextRGBDFrameResponse.depthImg)
  return _internal_depthimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getNextRGBDFrameResponse::set_depthimg(ArgT0&& arg0, ArgT... args) {
 
 depthimg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextRGBDFrameResponse.depthImg)
}
inline std::string* getNextRGBDFrameResponse::mutable_depthimg() {
  std::string* _s = _internal_mutable_depthimg();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getNextRGBDFrameResponse.depthImg)
  return _s;
}
inline const std::string& getNextRGBDFrameResponse::_internal_depthimg() const {
  return depthimg_.Get();
}
inline void getNextRGBDFrameResponse::_internal_set_depthimg(const std::string& value) {
  
  depthimg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getNextRGBDFrameResponse::_internal_mutable_depthimg() {
  
  return depthimg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getNextRGBDFrameResponse::release_depthimg() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getNextRGBDFrameResponse.depthImg)
  return depthimg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getNextRGBDFrameResponse::set_allocated_depthimg(std::string* depthimg) {
  if (depthimg != nullptr) {
    
  } else {
    
  }
  depthimg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depthimg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getNextRGBDFrameResponse.depthImg)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void getNextRGBDFrameResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextRGBDFrameResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 getNextRGBDFrameResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getNextRGBDFrameResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void getNextRGBDFrameResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void getNextRGBDFrameResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getNextRGBDFrameResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// alignDepthToColorRequest

// bytes alignedDepthImg = 1;
inline void alignDepthToColorRequest::clear_aligneddepthimg() {
  aligneddepthimg_.ClearToEmpty();
}
inline const std::string& alignDepthToColorRequest::aligneddepthimg() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.alignDepthToColorRequest.alignedDepthImg)
  return _internal_aligneddepthimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void alignDepthToColorRequest::set_aligneddepthimg(ArgT0&& arg0, ArgT... args) {
 
 aligneddepthimg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.alignDepthToColorRequest.alignedDepthImg)
}
inline std::string* alignDepthToColorRequest::mutable_aligneddepthimg() {
  std::string* _s = _internal_mutable_aligneddepthimg();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.alignDepthToColorRequest.alignedDepthImg)
  return _s;
}
inline const std::string& alignDepthToColorRequest::_internal_aligneddepthimg() const {
  return aligneddepthimg_.Get();
}
inline void alignDepthToColorRequest::_internal_set_aligneddepthimg(const std::string& value) {
  
  aligneddepthimg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* alignDepthToColorRequest::_internal_mutable_aligneddepthimg() {
  
  return aligneddepthimg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* alignDepthToColorRequest::release_aligneddepthimg() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.alignDepthToColorRequest.alignedDepthImg)
  return aligneddepthimg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void alignDepthToColorRequest::set_allocated_aligneddepthimg(std::string* aligneddepthimg) {
  if (aligneddepthimg != nullptr) {
    
  } else {
    
  }
  aligneddepthimg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aligneddepthimg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.alignDepthToColorRequest.alignedDepthImg)
}

// -------------------------------------------------------------------

// alignDepthToColorResponse

// bytes alignedDepthImg = 1;
inline void alignDepthToColorResponse::clear_aligneddepthimg() {
  aligneddepthimg_.ClearToEmpty();
}
inline const std::string& alignDepthToColorResponse::aligneddepthimg() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.alignDepthToColorResponse.alignedDepthImg)
  return _internal_aligneddepthimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void alignDepthToColorResponse::set_aligneddepthimg(ArgT0&& arg0, ArgT... args) {
 
 aligneddepthimg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.alignDepthToColorResponse.alignedDepthImg)
}
inline std::string* alignDepthToColorResponse::mutable_aligneddepthimg() {
  std::string* _s = _internal_mutable_aligneddepthimg();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.alignDepthToColorResponse.alignedDepthImg)
  return _s;
}
inline const std::string& alignDepthToColorResponse::_internal_aligneddepthimg() const {
  return aligneddepthimg_.Get();
}
inline void alignDepthToColorResponse::_internal_set_aligneddepthimg(const std::string& value) {
  
  aligneddepthimg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* alignDepthToColorResponse::_internal_mutable_aligneddepthimg() {
  
  return aligneddepthimg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* alignDepthToColorResponse::release_aligneddepthimg() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.alignDepthToColorResponse.alignedDepthImg)
  return aligneddepthimg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void alignDepthToColorResponse::set_allocated_aligneddepthimg(std::string* aligneddepthimg) {
  if (aligneddepthimg != nullptr) {
    
  } else {
    
  }
  aligneddepthimg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aligneddepthimg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.alignDepthToColorResponse.alignedDepthImg)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void alignDepthToColorResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 alignDepthToColorResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 alignDepthToColorResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.alignDepthToColorResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void alignDepthToColorResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void alignDepthToColorResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.alignDepthToColorResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// alignColorToDepthRequest

// bytes alignedColorImg = 1;
inline void alignColorToDepthRequest::clear_alignedcolorimg() {
  alignedcolorimg_.ClearToEmpty();
}
inline const std::string& alignColorToDepthRequest::alignedcolorimg() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.alignColorToDepthRequest.alignedColorImg)
  return _internal_alignedcolorimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void alignColorToDepthRequest::set_alignedcolorimg(ArgT0&& arg0, ArgT... args) {
 
 alignedcolorimg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.alignColorToDepthRequest.alignedColorImg)
}
inline std::string* alignColorToDepthRequest::mutable_alignedcolorimg() {
  std::string* _s = _internal_mutable_alignedcolorimg();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.alignColorToDepthRequest.alignedColorImg)
  return _s;
}
inline const std::string& alignColorToDepthRequest::_internal_alignedcolorimg() const {
  return alignedcolorimg_.Get();
}
inline void alignColorToDepthRequest::_internal_set_alignedcolorimg(const std::string& value) {
  
  alignedcolorimg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* alignColorToDepthRequest::_internal_mutable_alignedcolorimg() {
  
  return alignedcolorimg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* alignColorToDepthRequest::release_alignedcolorimg() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.alignColorToDepthRequest.alignedColorImg)
  return alignedcolorimg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void alignColorToDepthRequest::set_allocated_alignedcolorimg(std::string* alignedcolorimg) {
  if (alignedcolorimg != nullptr) {
    
  } else {
    
  }
  alignedcolorimg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alignedcolorimg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.alignColorToDepthRequest.alignedColorImg)
}

// -------------------------------------------------------------------

// alignColorToDepthResponse

// bytes alignedColorImg = 1;
inline void alignColorToDepthResponse::clear_alignedcolorimg() {
  alignedcolorimg_.ClearToEmpty();
}
inline const std::string& alignColorToDepthResponse::alignedcolorimg() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.alignColorToDepthResponse.alignedColorImg)
  return _internal_alignedcolorimg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void alignColorToDepthResponse::set_alignedcolorimg(ArgT0&& arg0, ArgT... args) {
 
 alignedcolorimg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.alignColorToDepthResponse.alignedColorImg)
}
inline std::string* alignColorToDepthResponse::mutable_alignedcolorimg() {
  std::string* _s = _internal_mutable_alignedcolorimg();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.alignColorToDepthResponse.alignedColorImg)
  return _s;
}
inline const std::string& alignColorToDepthResponse::_internal_alignedcolorimg() const {
  return alignedcolorimg_.Get();
}
inline void alignColorToDepthResponse::_internal_set_alignedcolorimg(const std::string& value) {
  
  alignedcolorimg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* alignColorToDepthResponse::_internal_mutable_alignedcolorimg() {
  
  return alignedcolorimg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* alignColorToDepthResponse::release_alignedcolorimg() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.alignColorToDepthResponse.alignedColorImg)
  return alignedcolorimg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void alignColorToDepthResponse::set_allocated_alignedcolorimg(std::string* alignedcolorimg) {
  if (alignedcolorimg != nullptr) {
    
  } else {
    
  }
  alignedcolorimg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alignedcolorimg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.alignColorToDepthResponse.alignedColorImg)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void alignColorToDepthResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 alignColorToDepthResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 alignColorToDepthResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.alignColorToDepthResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void alignColorToDepthResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void alignColorToDepthResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.alignColorToDepthResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getPixelToWorldRequest

// bytes inPixel = 1;
inline void getPixelToWorldRequest::clear_inpixel() {
  inpixel_.ClearToEmpty();
}
inline const std::string& getPixelToWorldRequest::inpixel() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getPixelToWorldRequest.inPixel)
  return _internal_inpixel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPixelToWorldRequest::set_inpixel(ArgT0&& arg0, ArgT... args) {
 
 inpixel_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getPixelToWorldRequest.inPixel)
}
inline std::string* getPixelToWorldRequest::mutable_inpixel() {
  std::string* _s = _internal_mutable_inpixel();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getPixelToWorldRequest.inPixel)
  return _s;
}
inline const std::string& getPixelToWorldRequest::_internal_inpixel() const {
  return inpixel_.Get();
}
inline void getPixelToWorldRequest::_internal_set_inpixel(const std::string& value) {
  
  inpixel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getPixelToWorldRequest::_internal_mutable_inpixel() {
  
  return inpixel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getPixelToWorldRequest::release_inpixel() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getPixelToWorldRequest.inPixel)
  return inpixel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getPixelToWorldRequest::set_allocated_inpixel(std::string* inpixel) {
  if (inpixel != nullptr) {
    
  } else {
    
  }
  inpixel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inpixel,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getPixelToWorldRequest.inPixel)
}

// -------------------------------------------------------------------

// getPixelToWorldResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getPixelToWorldResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getPixelToWorldResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getPixelToWorldResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getPixelToWorldResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getPixelToWorldResponse.xpcfGrpcReturnValue)
}
inline std::string* getPixelToWorldResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getPixelToWorldResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getPixelToWorldResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getPixelToWorldResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getPixelToWorldResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getPixelToWorldResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getPixelToWorldResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getPixelToWorldResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getPixelToWorldResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldToPixelRequest

// bytes in3DPoint = 1;
inline void getWorldToPixelRequest::clear_in3dpoint() {
  in3dpoint_.ClearToEmpty();
}
inline const std::string& getWorldToPixelRequest::in3dpoint() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getWorldToPixelRequest.in3DPoint)
  return _internal_in3dpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldToPixelRequest::set_in3dpoint(ArgT0&& arg0, ArgT... args) {
 
 in3dpoint_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getWorldToPixelRequest.in3DPoint)
}
inline std::string* getWorldToPixelRequest::mutable_in3dpoint() {
  std::string* _s = _internal_mutable_in3dpoint();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getWorldToPixelRequest.in3DPoint)
  return _s;
}
inline const std::string& getWorldToPixelRequest::_internal_in3dpoint() const {
  return in3dpoint_.Get();
}
inline void getWorldToPixelRequest::_internal_set_in3dpoint(const std::string& value) {
  
  in3dpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getWorldToPixelRequest::_internal_mutable_in3dpoint() {
  
  return in3dpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getWorldToPixelRequest::release_in3dpoint() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getWorldToPixelRequest.in3DPoint)
  return in3dpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getWorldToPixelRequest::set_allocated_in3dpoint(std::string* in3dpoint) {
  if (in3dpoint != nullptr) {
    
  } else {
    
  }
  in3dpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), in3dpoint,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getWorldToPixelRequest.in3DPoint)
}

// -------------------------------------------------------------------

// getWorldToPixelResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getWorldToPixelResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getWorldToPixelResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getWorldToPixelResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldToPixelResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getWorldToPixelResponse.xpcfGrpcReturnValue)
}
inline std::string* getWorldToPixelResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getWorldToPixelResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getWorldToPixelResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getWorldToPixelResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getWorldToPixelResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getWorldToPixelResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getWorldToPixelResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getWorldToPixelResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getWorldToPixelResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// getWorldToPixelsRequest

// bytes in3DPoints = 1;
inline void getWorldToPixelsRequest::clear_in3dpoints() {
  in3dpoints_.ClearToEmpty();
}
inline const std::string& getWorldToPixelsRequest::in3dpoints() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getWorldToPixelsRequest.in3DPoints)
  return _internal_in3dpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldToPixelsRequest::set_in3dpoints(ArgT0&& arg0, ArgT... args) {
 
 in3dpoints_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getWorldToPixelsRequest.in3DPoints)
}
inline std::string* getWorldToPixelsRequest::mutable_in3dpoints() {
  std::string* _s = _internal_mutable_in3dpoints();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getWorldToPixelsRequest.in3DPoints)
  return _s;
}
inline const std::string& getWorldToPixelsRequest::_internal_in3dpoints() const {
  return in3dpoints_.Get();
}
inline void getWorldToPixelsRequest::_internal_set_in3dpoints(const std::string& value) {
  
  in3dpoints_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getWorldToPixelsRequest::_internal_mutable_in3dpoints() {
  
  return in3dpoints_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getWorldToPixelsRequest::release_in3dpoints() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getWorldToPixelsRequest.in3DPoints)
  return in3dpoints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getWorldToPixelsRequest::set_allocated_in3dpoints(std::string* in3dpoints) {
  if (in3dpoints != nullptr) {
    
  } else {
    
  }
  in3dpoints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), in3dpoints,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getWorldToPixelsRequest.in3DPoints)
}

// -------------------------------------------------------------------

// getWorldToPixelsResponse

// bytes xpcfGrpcReturnValue = 1;
inline void getWorldToPixelsResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_.ClearToEmpty();
}
inline const std::string& getWorldToPixelsResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIRGBDCamera.getWorldToPixelsResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void getWorldToPixelsResponse::set_xpcfgrpcreturnvalue(ArgT0&& arg0, ArgT... args) {
 
 xpcfgrpcreturnvalue_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIRGBDCamera.getWorldToPixelsResponse.xpcfGrpcReturnValue)
}
inline std::string* getWorldToPixelsResponse::mutable_xpcfgrpcreturnvalue() {
  std::string* _s = _internal_mutable_xpcfgrpcreturnvalue();
  // @@protoc_insertion_point(field_mutable:grpcIRGBDCamera.getWorldToPixelsResponse.xpcfGrpcReturnValue)
  return _s;
}
inline const std::string& getWorldToPixelsResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_.Get();
}
inline void getWorldToPixelsResponse::_internal_set_xpcfgrpcreturnvalue(const std::string& value) {
  
  xpcfgrpcreturnvalue_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* getWorldToPixelsResponse::_internal_mutable_xpcfgrpcreturnvalue() {
  
  return xpcfgrpcreturnvalue_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* getWorldToPixelsResponse::release_xpcfgrpcreturnvalue() {
  // @@protoc_insertion_point(field_release:grpcIRGBDCamera.getWorldToPixelsResponse.xpcfGrpcReturnValue)
  return xpcfgrpcreturnvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void getWorldToPixelsResponse::set_allocated_xpcfgrpcreturnvalue(std::string* xpcfgrpcreturnvalue) {
  if (xpcfgrpcreturnvalue != nullptr) {
    
  } else {
    
  }
  xpcfgrpcreturnvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xpcfgrpcreturnvalue,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIRGBDCamera.getWorldToPixelsResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIRGBDCamera

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIRGBDCameraService_2eproto
