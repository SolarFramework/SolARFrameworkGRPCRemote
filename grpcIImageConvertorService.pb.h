// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIImageConvertorService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIImageConvertorService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIImageConvertorService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIImageConvertorService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIImageConvertorService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIImageConvertorService_2eproto;
namespace grpcIImageConvertor {
class convertLookUpTableRequest;
struct convertLookUpTableRequestDefaultTypeInternal;
extern convertLookUpTableRequestDefaultTypeInternal _convertLookUpTableRequest_default_instance_;
class convertLookUpTableResponse;
struct convertLookUpTableResponseDefaultTypeInternal;
extern convertLookUpTableResponseDefaultTypeInternal _convertLookUpTableResponse_default_instance_;
class convert_grpc0Request;
struct convert_grpc0RequestDefaultTypeInternal;
extern convert_grpc0RequestDefaultTypeInternal _convert_grpc0Request_default_instance_;
class convert_grpc0Response;
struct convert_grpc0ResponseDefaultTypeInternal;
extern convert_grpc0ResponseDefaultTypeInternal _convert_grpc0Response_default_instance_;
class convert_grpc1Request;
struct convert_grpc1RequestDefaultTypeInternal;
extern convert_grpc1RequestDefaultTypeInternal _convert_grpc1Request_default_instance_;
class convert_grpc1Response;
struct convert_grpc1ResponseDefaultTypeInternal;
extern convert_grpc1ResponseDefaultTypeInternal _convert_grpc1Response_default_instance_;
}  // namespace grpcIImageConvertor
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIImageConvertor::convertLookUpTableRequest* Arena::CreateMaybeMessage<::grpcIImageConvertor::convertLookUpTableRequest>(Arena*);
template<> ::grpcIImageConvertor::convertLookUpTableResponse* Arena::CreateMaybeMessage<::grpcIImageConvertor::convertLookUpTableResponse>(Arena*);
template<> ::grpcIImageConvertor::convert_grpc0Request* Arena::CreateMaybeMessage<::grpcIImageConvertor::convert_grpc0Request>(Arena*);
template<> ::grpcIImageConvertor::convert_grpc0Response* Arena::CreateMaybeMessage<::grpcIImageConvertor::convert_grpc0Response>(Arena*);
template<> ::grpcIImageConvertor::convert_grpc1Request* Arena::CreateMaybeMessage<::grpcIImageConvertor::convert_grpc1Request>(Arena*);
template<> ::grpcIImageConvertor::convert_grpc1Response* Arena::CreateMaybeMessage<::grpcIImageConvertor::convert_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIImageConvertor {

// ===================================================================

class convert_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImageConvertor.convert_grpc0Request) */ {
 public:
  inline convert_grpc0Request() : convert_grpc0Request(nullptr) {}
  ~convert_grpc0Request() override;
  explicit constexpr convert_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  convert_grpc0Request(const convert_grpc0Request& from);
  convert_grpc0Request(convert_grpc0Request&& from) noexcept
    : convert_grpc0Request() {
    *this = ::std::move(from);
  }

  inline convert_grpc0Request& operator=(const convert_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline convert_grpc0Request& operator=(convert_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const convert_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const convert_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const convert_grpc0Request*>(
               &_convert_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(convert_grpc0Request& a, convert_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(convert_grpc0Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(convert_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline convert_grpc0Request* New() const final {
    return new convert_grpc0Request();
  }

  convert_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<convert_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const convert_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const convert_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(convert_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImageConvertor.convert_grpc0Request";
  }
  protected:
  explicit convert_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgSrcFieldNumber = 1,
    kImgDstFieldNumber = 2,
  };
  // bytes imgSrc = 1;
  void clear_imgsrc();
  const std::string& imgsrc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgsrc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgsrc();
  PROTOBUF_MUST_USE_RESULT std::string* release_imgsrc();
  void set_allocated_imgsrc(std::string* imgsrc);
  private:
  const std::string& _internal_imgsrc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgsrc(const std::string& value);
  std::string* _internal_mutable_imgsrc();
  public:

  // bytes imgDst = 2;
  void clear_imgdst();
  const std::string& imgdst() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgdst(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgdst();
  PROTOBUF_MUST_USE_RESULT std::string* release_imgdst();
  void set_allocated_imgdst(std::string* imgdst);
  private:
  const std::string& _internal_imgdst() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgdst(const std::string& value);
  std::string* _internal_mutable_imgdst();
  public:

  // @@protoc_insertion_point(class_scope:grpcIImageConvertor.convert_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgsrc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgdst_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImageConvertorService_2eproto;
};
// -------------------------------------------------------------------

class convert_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImageConvertor.convert_grpc0Response) */ {
 public:
  inline convert_grpc0Response() : convert_grpc0Response(nullptr) {}
  ~convert_grpc0Response() override;
  explicit constexpr convert_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  convert_grpc0Response(const convert_grpc0Response& from);
  convert_grpc0Response(convert_grpc0Response&& from) noexcept
    : convert_grpc0Response() {
    *this = ::std::move(from);
  }

  inline convert_grpc0Response& operator=(const convert_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline convert_grpc0Response& operator=(convert_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const convert_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const convert_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const convert_grpc0Response*>(
               &_convert_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(convert_grpc0Response& a, convert_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(convert_grpc0Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(convert_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline convert_grpc0Response* New() const final {
    return new convert_grpc0Response();
  }

  convert_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<convert_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const convert_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const convert_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(convert_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImageConvertor.convert_grpc0Response";
  }
  protected:
  explicit convert_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgDstFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes imgDst = 1;
  void clear_imgdst();
  const std::string& imgdst() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgdst(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgdst();
  PROTOBUF_MUST_USE_RESULT std::string* release_imgdst();
  void set_allocated_imgdst(std::string* imgdst);
  private:
  const std::string& _internal_imgdst() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgdst(const std::string& value);
  std::string* _internal_mutable_imgdst();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIImageConvertor.convert_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgdst_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImageConvertorService_2eproto;
};
// -------------------------------------------------------------------

class convert_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImageConvertor.convert_grpc1Request) */ {
 public:
  inline convert_grpc1Request() : convert_grpc1Request(nullptr) {}
  ~convert_grpc1Request() override;
  explicit constexpr convert_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  convert_grpc1Request(const convert_grpc1Request& from);
  convert_grpc1Request(convert_grpc1Request&& from) noexcept
    : convert_grpc1Request() {
    *this = ::std::move(from);
  }

  inline convert_grpc1Request& operator=(const convert_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline convert_grpc1Request& operator=(convert_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const convert_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const convert_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const convert_grpc1Request*>(
               &_convert_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(convert_grpc1Request& a, convert_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(convert_grpc1Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(convert_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline convert_grpc1Request* New() const final {
    return new convert_grpc1Request();
  }

  convert_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<convert_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const convert_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const convert_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(convert_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImageConvertor.convert_grpc1Request";
  }
  protected:
  explicit convert_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgSrcFieldNumber = 1,
    kImgDstFieldNumber = 3,
    kDestLayoutFieldNumber = 2,
  };
  // bytes imgSrc = 1;
  void clear_imgsrc();
  const std::string& imgsrc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgsrc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgsrc();
  PROTOBUF_MUST_USE_RESULT std::string* release_imgsrc();
  void set_allocated_imgsrc(std::string* imgsrc);
  private:
  const std::string& _internal_imgsrc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgsrc(const std::string& value);
  std::string* _internal_mutable_imgsrc();
  public:

  // bytes imgDst = 3;
  void clear_imgdst();
  const std::string& imgdst() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgdst(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgdst();
  PROTOBUF_MUST_USE_RESULT std::string* release_imgdst();
  void set_allocated_imgdst(std::string* imgdst);
  private:
  const std::string& _internal_imgdst() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgdst(const std::string& value);
  std::string* _internal_mutable_imgdst();
  public:

  // sint32 destLayout = 2;
  void clear_destlayout();
  ::PROTOBUF_NAMESPACE_ID::int32 destlayout() const;
  void set_destlayout(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_destlayout() const;
  void _internal_set_destlayout(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIImageConvertor.convert_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgsrc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgdst_;
  ::PROTOBUF_NAMESPACE_ID::int32 destlayout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImageConvertorService_2eproto;
};
// -------------------------------------------------------------------

class convert_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImageConvertor.convert_grpc1Response) */ {
 public:
  inline convert_grpc1Response() : convert_grpc1Response(nullptr) {}
  ~convert_grpc1Response() override;
  explicit constexpr convert_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  convert_grpc1Response(const convert_grpc1Response& from);
  convert_grpc1Response(convert_grpc1Response&& from) noexcept
    : convert_grpc1Response() {
    *this = ::std::move(from);
  }

  inline convert_grpc1Response& operator=(const convert_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline convert_grpc1Response& operator=(convert_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const convert_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const convert_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const convert_grpc1Response*>(
               &_convert_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(convert_grpc1Response& a, convert_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(convert_grpc1Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(convert_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline convert_grpc1Response* New() const final {
    return new convert_grpc1Response();
  }

  convert_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<convert_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const convert_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const convert_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(convert_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImageConvertor.convert_grpc1Response";
  }
  protected:
  explicit convert_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgDstFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes imgDst = 1;
  void clear_imgdst();
  const std::string& imgdst() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgdst(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgdst();
  PROTOBUF_MUST_USE_RESULT std::string* release_imgdst();
  void set_allocated_imgdst(std::string* imgdst);
  private:
  const std::string& _internal_imgdst() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgdst(const std::string& value);
  std::string* _internal_mutable_imgdst();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIImageConvertor.convert_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgdst_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImageConvertorService_2eproto;
};
// -------------------------------------------------------------------

class convertLookUpTableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImageConvertor.convertLookUpTableRequest) */ {
 public:
  inline convertLookUpTableRequest() : convertLookUpTableRequest(nullptr) {}
  ~convertLookUpTableRequest() override;
  explicit constexpr convertLookUpTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  convertLookUpTableRequest(const convertLookUpTableRequest& from);
  convertLookUpTableRequest(convertLookUpTableRequest&& from) noexcept
    : convertLookUpTableRequest() {
    *this = ::std::move(from);
  }

  inline convertLookUpTableRequest& operator=(const convertLookUpTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline convertLookUpTableRequest& operator=(convertLookUpTableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const convertLookUpTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const convertLookUpTableRequest* internal_default_instance() {
    return reinterpret_cast<const convertLookUpTableRequest*>(
               &_convertLookUpTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(convertLookUpTableRequest& a, convertLookUpTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(convertLookUpTableRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(convertLookUpTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline convertLookUpTableRequest* New() const final {
    return new convertLookUpTableRequest();
  }

  convertLookUpTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<convertLookUpTableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const convertLookUpTableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const convertLookUpTableRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(convertLookUpTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImageConvertor.convertLookUpTableRequest";
  }
  protected:
  explicit convertLookUpTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgSrcFieldNumber = 1,
    kImgDstFieldNumber = 2,
  };
  // bytes imgSrc = 1;
  void clear_imgsrc();
  const std::string& imgsrc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgsrc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgsrc();
  PROTOBUF_MUST_USE_RESULT std::string* release_imgsrc();
  void set_allocated_imgsrc(std::string* imgsrc);
  private:
  const std::string& _internal_imgsrc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgsrc(const std::string& value);
  std::string* _internal_mutable_imgsrc();
  public:

  // bytes imgDst = 2;
  void clear_imgdst();
  const std::string& imgdst() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgdst(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgdst();
  PROTOBUF_MUST_USE_RESULT std::string* release_imgdst();
  void set_allocated_imgdst(std::string* imgdst);
  private:
  const std::string& _internal_imgdst() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgdst(const std::string& value);
  std::string* _internal_mutable_imgdst();
  public:

  // @@protoc_insertion_point(class_scope:grpcIImageConvertor.convertLookUpTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgsrc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgdst_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImageConvertorService_2eproto;
};
// -------------------------------------------------------------------

class convertLookUpTableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIImageConvertor.convertLookUpTableResponse) */ {
 public:
  inline convertLookUpTableResponse() : convertLookUpTableResponse(nullptr) {}
  ~convertLookUpTableResponse() override;
  explicit constexpr convertLookUpTableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  convertLookUpTableResponse(const convertLookUpTableResponse& from);
  convertLookUpTableResponse(convertLookUpTableResponse&& from) noexcept
    : convertLookUpTableResponse() {
    *this = ::std::move(from);
  }

  inline convertLookUpTableResponse& operator=(const convertLookUpTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline convertLookUpTableResponse& operator=(convertLookUpTableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const convertLookUpTableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const convertLookUpTableResponse* internal_default_instance() {
    return reinterpret_cast<const convertLookUpTableResponse*>(
               &_convertLookUpTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(convertLookUpTableResponse& a, convertLookUpTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(convertLookUpTableResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(convertLookUpTableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline convertLookUpTableResponse* New() const final {
    return new convertLookUpTableResponse();
  }

  convertLookUpTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<convertLookUpTableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const convertLookUpTableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const convertLookUpTableResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(convertLookUpTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIImageConvertor.convertLookUpTableResponse";
  }
  protected:
  explicit convertLookUpTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImgDstFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes imgDst = 1;
  void clear_imgdst();
  const std::string& imgdst() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imgdst(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imgdst();
  PROTOBUF_MUST_USE_RESULT std::string* release_imgdst();
  void set_allocated_imgdst(std::string* imgdst);
  private:
  const std::string& _internal_imgdst() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imgdst(const std::string& value);
  std::string* _internal_mutable_imgdst();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIImageConvertor.convertLookUpTableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgdst_;
  ::PROTOBUF_NAMESPACE_ID::int32 xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIImageConvertorService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// convert_grpc0Request

// bytes imgSrc = 1;
inline void convert_grpc0Request::clear_imgsrc() {
  imgsrc_.ClearToEmpty();
}
inline const std::string& convert_grpc0Request::imgsrc() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convert_grpc0Request.imgSrc)
  return _internal_imgsrc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void convert_grpc0Request::set_imgsrc(ArgT0&& arg0, ArgT... args) {
 
 imgsrc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convert_grpc0Request.imgSrc)
}
inline std::string* convert_grpc0Request::mutable_imgsrc() {
  std::string* _s = _internal_mutable_imgsrc();
  // @@protoc_insertion_point(field_mutable:grpcIImageConvertor.convert_grpc0Request.imgSrc)
  return _s;
}
inline const std::string& convert_grpc0Request::_internal_imgsrc() const {
  return imgsrc_.Get();
}
inline void convert_grpc0Request::_internal_set_imgsrc(const std::string& value) {
  
  imgsrc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* convert_grpc0Request::_internal_mutable_imgsrc() {
  
  return imgsrc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* convert_grpc0Request::release_imgsrc() {
  // @@protoc_insertion_point(field_release:grpcIImageConvertor.convert_grpc0Request.imgSrc)
  return imgsrc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void convert_grpc0Request::set_allocated_imgsrc(std::string* imgsrc) {
  if (imgsrc != nullptr) {
    
  } else {
    
  }
  imgsrc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgsrc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIImageConvertor.convert_grpc0Request.imgSrc)
}

// bytes imgDst = 2;
inline void convert_grpc0Request::clear_imgdst() {
  imgdst_.ClearToEmpty();
}
inline const std::string& convert_grpc0Request::imgdst() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convert_grpc0Request.imgDst)
  return _internal_imgdst();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void convert_grpc0Request::set_imgdst(ArgT0&& arg0, ArgT... args) {
 
 imgdst_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convert_grpc0Request.imgDst)
}
inline std::string* convert_grpc0Request::mutable_imgdst() {
  std::string* _s = _internal_mutable_imgdst();
  // @@protoc_insertion_point(field_mutable:grpcIImageConvertor.convert_grpc0Request.imgDst)
  return _s;
}
inline const std::string& convert_grpc0Request::_internal_imgdst() const {
  return imgdst_.Get();
}
inline void convert_grpc0Request::_internal_set_imgdst(const std::string& value) {
  
  imgdst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* convert_grpc0Request::_internal_mutable_imgdst() {
  
  return imgdst_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* convert_grpc0Request::release_imgdst() {
  // @@protoc_insertion_point(field_release:grpcIImageConvertor.convert_grpc0Request.imgDst)
  return imgdst_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void convert_grpc0Request::set_allocated_imgdst(std::string* imgdst) {
  if (imgdst != nullptr) {
    
  } else {
    
  }
  imgdst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgdst,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIImageConvertor.convert_grpc0Request.imgDst)
}

// -------------------------------------------------------------------

// convert_grpc0Response

// bytes imgDst = 1;
inline void convert_grpc0Response::clear_imgdst() {
  imgdst_.ClearToEmpty();
}
inline const std::string& convert_grpc0Response::imgdst() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convert_grpc0Response.imgDst)
  return _internal_imgdst();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void convert_grpc0Response::set_imgdst(ArgT0&& arg0, ArgT... args) {
 
 imgdst_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convert_grpc0Response.imgDst)
}
inline std::string* convert_grpc0Response::mutable_imgdst() {
  std::string* _s = _internal_mutable_imgdst();
  // @@protoc_insertion_point(field_mutable:grpcIImageConvertor.convert_grpc0Response.imgDst)
  return _s;
}
inline const std::string& convert_grpc0Response::_internal_imgdst() const {
  return imgdst_.Get();
}
inline void convert_grpc0Response::_internal_set_imgdst(const std::string& value) {
  
  imgdst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* convert_grpc0Response::_internal_mutable_imgdst() {
  
  return imgdst_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* convert_grpc0Response::release_imgdst() {
  // @@protoc_insertion_point(field_release:grpcIImageConvertor.convert_grpc0Response.imgDst)
  return imgdst_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void convert_grpc0Response::set_allocated_imgdst(std::string* imgdst) {
  if (imgdst != nullptr) {
    
  } else {
    
  }
  imgdst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgdst,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIImageConvertor.convert_grpc0Response.imgDst)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void convert_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 convert_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 convert_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convert_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void convert_grpc0Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void convert_grpc0Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convert_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// convert_grpc1Request

// bytes imgSrc = 1;
inline void convert_grpc1Request::clear_imgsrc() {
  imgsrc_.ClearToEmpty();
}
inline const std::string& convert_grpc1Request::imgsrc() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convert_grpc1Request.imgSrc)
  return _internal_imgsrc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void convert_grpc1Request::set_imgsrc(ArgT0&& arg0, ArgT... args) {
 
 imgsrc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convert_grpc1Request.imgSrc)
}
inline std::string* convert_grpc1Request::mutable_imgsrc() {
  std::string* _s = _internal_mutable_imgsrc();
  // @@protoc_insertion_point(field_mutable:grpcIImageConvertor.convert_grpc1Request.imgSrc)
  return _s;
}
inline const std::string& convert_grpc1Request::_internal_imgsrc() const {
  return imgsrc_.Get();
}
inline void convert_grpc1Request::_internal_set_imgsrc(const std::string& value) {
  
  imgsrc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* convert_grpc1Request::_internal_mutable_imgsrc() {
  
  return imgsrc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* convert_grpc1Request::release_imgsrc() {
  // @@protoc_insertion_point(field_release:grpcIImageConvertor.convert_grpc1Request.imgSrc)
  return imgsrc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void convert_grpc1Request::set_allocated_imgsrc(std::string* imgsrc) {
  if (imgsrc != nullptr) {
    
  } else {
    
  }
  imgsrc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgsrc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIImageConvertor.convert_grpc1Request.imgSrc)
}

// sint32 destLayout = 2;
inline void convert_grpc1Request::clear_destlayout() {
  destlayout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 convert_grpc1Request::_internal_destlayout() const {
  return destlayout_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 convert_grpc1Request::destlayout() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convert_grpc1Request.destLayout)
  return _internal_destlayout();
}
inline void convert_grpc1Request::_internal_set_destlayout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  destlayout_ = value;
}
inline void convert_grpc1Request::set_destlayout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_destlayout(value);
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convert_grpc1Request.destLayout)
}

// bytes imgDst = 3;
inline void convert_grpc1Request::clear_imgdst() {
  imgdst_.ClearToEmpty();
}
inline const std::string& convert_grpc1Request::imgdst() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convert_grpc1Request.imgDst)
  return _internal_imgdst();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void convert_grpc1Request::set_imgdst(ArgT0&& arg0, ArgT... args) {
 
 imgdst_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convert_grpc1Request.imgDst)
}
inline std::string* convert_grpc1Request::mutable_imgdst() {
  std::string* _s = _internal_mutable_imgdst();
  // @@protoc_insertion_point(field_mutable:grpcIImageConvertor.convert_grpc1Request.imgDst)
  return _s;
}
inline const std::string& convert_grpc1Request::_internal_imgdst() const {
  return imgdst_.Get();
}
inline void convert_grpc1Request::_internal_set_imgdst(const std::string& value) {
  
  imgdst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* convert_grpc1Request::_internal_mutable_imgdst() {
  
  return imgdst_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* convert_grpc1Request::release_imgdst() {
  // @@protoc_insertion_point(field_release:grpcIImageConvertor.convert_grpc1Request.imgDst)
  return imgdst_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void convert_grpc1Request::set_allocated_imgdst(std::string* imgdst) {
  if (imgdst != nullptr) {
    
  } else {
    
  }
  imgdst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgdst,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIImageConvertor.convert_grpc1Request.imgDst)
}

// -------------------------------------------------------------------

// convert_grpc1Response

// bytes imgDst = 1;
inline void convert_grpc1Response::clear_imgdst() {
  imgdst_.ClearToEmpty();
}
inline const std::string& convert_grpc1Response::imgdst() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convert_grpc1Response.imgDst)
  return _internal_imgdst();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void convert_grpc1Response::set_imgdst(ArgT0&& arg0, ArgT... args) {
 
 imgdst_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convert_grpc1Response.imgDst)
}
inline std::string* convert_grpc1Response::mutable_imgdst() {
  std::string* _s = _internal_mutable_imgdst();
  // @@protoc_insertion_point(field_mutable:grpcIImageConvertor.convert_grpc1Response.imgDst)
  return _s;
}
inline const std::string& convert_grpc1Response::_internal_imgdst() const {
  return imgdst_.Get();
}
inline void convert_grpc1Response::_internal_set_imgdst(const std::string& value) {
  
  imgdst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* convert_grpc1Response::_internal_mutable_imgdst() {
  
  return imgdst_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* convert_grpc1Response::release_imgdst() {
  // @@protoc_insertion_point(field_release:grpcIImageConvertor.convert_grpc1Response.imgDst)
  return imgdst_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void convert_grpc1Response::set_allocated_imgdst(std::string* imgdst) {
  if (imgdst != nullptr) {
    
  } else {
    
  }
  imgdst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgdst,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIImageConvertor.convert_grpc1Response.imgDst)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void convert_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 convert_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 convert_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convert_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void convert_grpc1Response::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void convert_grpc1Response::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convert_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// convertLookUpTableRequest

// bytes imgSrc = 1;
inline void convertLookUpTableRequest::clear_imgsrc() {
  imgsrc_.ClearToEmpty();
}
inline const std::string& convertLookUpTableRequest::imgsrc() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convertLookUpTableRequest.imgSrc)
  return _internal_imgsrc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void convertLookUpTableRequest::set_imgsrc(ArgT0&& arg0, ArgT... args) {
 
 imgsrc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convertLookUpTableRequest.imgSrc)
}
inline std::string* convertLookUpTableRequest::mutable_imgsrc() {
  std::string* _s = _internal_mutable_imgsrc();
  // @@protoc_insertion_point(field_mutable:grpcIImageConvertor.convertLookUpTableRequest.imgSrc)
  return _s;
}
inline const std::string& convertLookUpTableRequest::_internal_imgsrc() const {
  return imgsrc_.Get();
}
inline void convertLookUpTableRequest::_internal_set_imgsrc(const std::string& value) {
  
  imgsrc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* convertLookUpTableRequest::_internal_mutable_imgsrc() {
  
  return imgsrc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* convertLookUpTableRequest::release_imgsrc() {
  // @@protoc_insertion_point(field_release:grpcIImageConvertor.convertLookUpTableRequest.imgSrc)
  return imgsrc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void convertLookUpTableRequest::set_allocated_imgsrc(std::string* imgsrc) {
  if (imgsrc != nullptr) {
    
  } else {
    
  }
  imgsrc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgsrc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIImageConvertor.convertLookUpTableRequest.imgSrc)
}

// bytes imgDst = 2;
inline void convertLookUpTableRequest::clear_imgdst() {
  imgdst_.ClearToEmpty();
}
inline const std::string& convertLookUpTableRequest::imgdst() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convertLookUpTableRequest.imgDst)
  return _internal_imgdst();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void convertLookUpTableRequest::set_imgdst(ArgT0&& arg0, ArgT... args) {
 
 imgdst_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convertLookUpTableRequest.imgDst)
}
inline std::string* convertLookUpTableRequest::mutable_imgdst() {
  std::string* _s = _internal_mutable_imgdst();
  // @@protoc_insertion_point(field_mutable:grpcIImageConvertor.convertLookUpTableRequest.imgDst)
  return _s;
}
inline const std::string& convertLookUpTableRequest::_internal_imgdst() const {
  return imgdst_.Get();
}
inline void convertLookUpTableRequest::_internal_set_imgdst(const std::string& value) {
  
  imgdst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* convertLookUpTableRequest::_internal_mutable_imgdst() {
  
  return imgdst_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* convertLookUpTableRequest::release_imgdst() {
  // @@protoc_insertion_point(field_release:grpcIImageConvertor.convertLookUpTableRequest.imgDst)
  return imgdst_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void convertLookUpTableRequest::set_allocated_imgdst(std::string* imgdst) {
  if (imgdst != nullptr) {
    
  } else {
    
  }
  imgdst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgdst,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIImageConvertor.convertLookUpTableRequest.imgDst)
}

// -------------------------------------------------------------------

// convertLookUpTableResponse

// bytes imgDst = 1;
inline void convertLookUpTableResponse::clear_imgdst() {
  imgdst_.ClearToEmpty();
}
inline const std::string& convertLookUpTableResponse::imgdst() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convertLookUpTableResponse.imgDst)
  return _internal_imgdst();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void convertLookUpTableResponse::set_imgdst(ArgT0&& arg0, ArgT... args) {
 
 imgdst_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convertLookUpTableResponse.imgDst)
}
inline std::string* convertLookUpTableResponse::mutable_imgdst() {
  std::string* _s = _internal_mutable_imgdst();
  // @@protoc_insertion_point(field_mutable:grpcIImageConvertor.convertLookUpTableResponse.imgDst)
  return _s;
}
inline const std::string& convertLookUpTableResponse::_internal_imgdst() const {
  return imgdst_.Get();
}
inline void convertLookUpTableResponse::_internal_set_imgdst(const std::string& value) {
  
  imgdst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* convertLookUpTableResponse::_internal_mutable_imgdst() {
  
  return imgdst_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* convertLookUpTableResponse::release_imgdst() {
  // @@protoc_insertion_point(field_release:grpcIImageConvertor.convertLookUpTableResponse.imgDst)
  return imgdst_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void convertLookUpTableResponse::set_allocated_imgdst(std::string* imgdst) {
  if (imgdst != nullptr) {
    
  } else {
    
  }
  imgdst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgdst,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:grpcIImageConvertor.convertLookUpTableResponse.imgDst)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void convertLookUpTableResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 convertLookUpTableResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 convertLookUpTableResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIImageConvertor.convertLookUpTableResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void convertLookUpTableResponse::_internal_set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void convertLookUpTableResponse::set_xpcfgrpcreturnvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIImageConvertor.convertLookUpTableResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIImageConvertor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIImageConvertorService_2eproto
