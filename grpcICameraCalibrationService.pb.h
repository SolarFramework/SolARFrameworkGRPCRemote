// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcICameraCalibrationService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcICameraCalibrationService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcICameraCalibrationService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcICameraCalibrationService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcICameraCalibrationService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcICameraCalibrationService_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_grpcICameraCalibrationService_2eproto_metadata_getter(int index);
namespace grpcICameraCalibration {
class calibrate_grpc0Request;
struct calibrate_grpc0RequestDefaultTypeInternal;
extern calibrate_grpc0RequestDefaultTypeInternal _calibrate_grpc0Request_default_instance_;
class calibrate_grpc0Response;
struct calibrate_grpc0ResponseDefaultTypeInternal;
extern calibrate_grpc0ResponseDefaultTypeInternal _calibrate_grpc0Response_default_instance_;
class calibrate_grpc1Request;
struct calibrate_grpc1RequestDefaultTypeInternal;
extern calibrate_grpc1RequestDefaultTypeInternal _calibrate_grpc1Request_default_instance_;
class calibrate_grpc1Response;
struct calibrate_grpc1ResponseDefaultTypeInternal;
extern calibrate_grpc1ResponseDefaultTypeInternal _calibrate_grpc1Response_default_instance_;
class setParametersRequest;
struct setParametersRequestDefaultTypeInternal;
extern setParametersRequestDefaultTypeInternal _setParametersRequest_default_instance_;
class setParametersResponse;
struct setParametersResponseDefaultTypeInternal;
extern setParametersResponseDefaultTypeInternal _setParametersResponse_default_instance_;
}  // namespace grpcICameraCalibration
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcICameraCalibration::calibrate_grpc0Request* Arena::CreateMaybeMessage<::grpcICameraCalibration::calibrate_grpc0Request>(Arena*);
template<> ::grpcICameraCalibration::calibrate_grpc0Response* Arena::CreateMaybeMessage<::grpcICameraCalibration::calibrate_grpc0Response>(Arena*);
template<> ::grpcICameraCalibration::calibrate_grpc1Request* Arena::CreateMaybeMessage<::grpcICameraCalibration::calibrate_grpc1Request>(Arena*);
template<> ::grpcICameraCalibration::calibrate_grpc1Response* Arena::CreateMaybeMessage<::grpcICameraCalibration::calibrate_grpc1Response>(Arena*);
template<> ::grpcICameraCalibration::setParametersRequest* Arena::CreateMaybeMessage<::grpcICameraCalibration::setParametersRequest>(Arena*);
template<> ::grpcICameraCalibration::setParametersResponse* Arena::CreateMaybeMessage<::grpcICameraCalibration::setParametersResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcICameraCalibration {

// ===================================================================

class calibrate_grpc0Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICameraCalibration.calibrate_grpc0Request) */ {
 public:
  inline calibrate_grpc0Request() : calibrate_grpc0Request(nullptr) {}
  virtual ~calibrate_grpc0Request();
  explicit constexpr calibrate_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  calibrate_grpc0Request(const calibrate_grpc0Request& from);
  calibrate_grpc0Request(calibrate_grpc0Request&& from) noexcept
    : calibrate_grpc0Request() {
    *this = ::std::move(from);
  }

  inline calibrate_grpc0Request& operator=(const calibrate_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline calibrate_grpc0Request& operator=(calibrate_grpc0Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const calibrate_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const calibrate_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const calibrate_grpc0Request*>(
               &_calibrate_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(calibrate_grpc0Request& a, calibrate_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(calibrate_grpc0Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(calibrate_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline calibrate_grpc0Request* New() const final {
    return CreateMaybeMessage<calibrate_grpc0Request>(nullptr);
  }

  calibrate_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<calibrate_grpc0Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const calibrate_grpc0Request& from);
  void MergeFrom(const calibrate_grpc0Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(calibrate_grpc0Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICameraCalibration.calibrate_grpc0Request";
  }
  protected:
  explicit calibrate_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraCalibrationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputVideoFieldNumber = 1,
    kCailbrationFilePathFieldNumber = 2,
  };
  // string inputVideo = 1;
  void clear_inputvideo();
  const std::string& inputvideo() const;
  void set_inputvideo(const std::string& value);
  void set_inputvideo(std::string&& value);
  void set_inputvideo(const char* value);
  void set_inputvideo(const char* value, size_t size);
  std::string* mutable_inputvideo();
  std::string* release_inputvideo();
  void set_allocated_inputvideo(std::string* inputvideo);
  private:
  const std::string& _internal_inputvideo() const;
  void _internal_set_inputvideo(const std::string& value);
  std::string* _internal_mutable_inputvideo();
  public:

  // string cailbrationFilePath = 2;
  void clear_cailbrationfilepath();
  const std::string& cailbrationfilepath() const;
  void set_cailbrationfilepath(const std::string& value);
  void set_cailbrationfilepath(std::string&& value);
  void set_cailbrationfilepath(const char* value);
  void set_cailbrationfilepath(const char* value, size_t size);
  std::string* mutable_cailbrationfilepath();
  std::string* release_cailbrationfilepath();
  void set_allocated_cailbrationfilepath(std::string* cailbrationfilepath);
  private:
  const std::string& _internal_cailbrationfilepath() const;
  void _internal_set_cailbrationfilepath(const std::string& value);
  std::string* _internal_mutable_cailbrationfilepath();
  public:

  // @@protoc_insertion_point(class_scope:grpcICameraCalibration.calibrate_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputvideo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cailbrationfilepath_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraCalibrationService_2eproto;
};
// -------------------------------------------------------------------

class calibrate_grpc0Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICameraCalibration.calibrate_grpc0Response) */ {
 public:
  inline calibrate_grpc0Response() : calibrate_grpc0Response(nullptr) {}
  virtual ~calibrate_grpc0Response();
  explicit constexpr calibrate_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  calibrate_grpc0Response(const calibrate_grpc0Response& from);
  calibrate_grpc0Response(calibrate_grpc0Response&& from) noexcept
    : calibrate_grpc0Response() {
    *this = ::std::move(from);
  }

  inline calibrate_grpc0Response& operator=(const calibrate_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline calibrate_grpc0Response& operator=(calibrate_grpc0Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const calibrate_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const calibrate_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const calibrate_grpc0Response*>(
               &_calibrate_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(calibrate_grpc0Response& a, calibrate_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(calibrate_grpc0Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(calibrate_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline calibrate_grpc0Response* New() const final {
    return CreateMaybeMessage<calibrate_grpc0Response>(nullptr);
  }

  calibrate_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<calibrate_grpc0Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const calibrate_grpc0Response& from);
  void MergeFrom(const calibrate_grpc0Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(calibrate_grpc0Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICameraCalibration.calibrate_grpc0Response";
  }
  protected:
  explicit calibrate_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraCalibrationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICameraCalibration.calibrate_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraCalibrationService_2eproto;
};
// -------------------------------------------------------------------

class calibrate_grpc1Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICameraCalibration.calibrate_grpc1Request) */ {
 public:
  inline calibrate_grpc1Request() : calibrate_grpc1Request(nullptr) {}
  virtual ~calibrate_grpc1Request();
  explicit constexpr calibrate_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  calibrate_grpc1Request(const calibrate_grpc1Request& from);
  calibrate_grpc1Request(calibrate_grpc1Request&& from) noexcept
    : calibrate_grpc1Request() {
    *this = ::std::move(from);
  }

  inline calibrate_grpc1Request& operator=(const calibrate_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline calibrate_grpc1Request& operator=(calibrate_grpc1Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const calibrate_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const calibrate_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const calibrate_grpc1Request*>(
               &_calibrate_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(calibrate_grpc1Request& a, calibrate_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(calibrate_grpc1Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(calibrate_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline calibrate_grpc1Request* New() const final {
    return CreateMaybeMessage<calibrate_grpc1Request>(nullptr);
  }

  calibrate_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<calibrate_grpc1Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const calibrate_grpc1Request& from);
  void MergeFrom(const calibrate_grpc1Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(calibrate_grpc1Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICameraCalibration.calibrate_grpc1Request";
  }
  protected:
  explicit calibrate_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraCalibrationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCailbrationFilePathFieldNumber = 2,
    kCameraIdFieldNumber = 1,
  };
  // string cailbrationFilePath = 2;
  void clear_cailbrationfilepath();
  const std::string& cailbrationfilepath() const;
  void set_cailbrationfilepath(const std::string& value);
  void set_cailbrationfilepath(std::string&& value);
  void set_cailbrationfilepath(const char* value);
  void set_cailbrationfilepath(const char* value, size_t size);
  std::string* mutable_cailbrationfilepath();
  std::string* release_cailbrationfilepath();
  void set_allocated_cailbrationfilepath(std::string* cailbrationfilepath);
  private:
  const std::string& _internal_cailbrationfilepath() const;
  void _internal_set_cailbrationfilepath(const std::string& value);
  std::string* _internal_mutable_cailbrationfilepath();
  public:

  // sint32 camera_id = 1;
  void clear_camera_id();
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id() const;
  void set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_camera_id() const;
  void _internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICameraCalibration.calibrate_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cailbrationfilepath_;
  ::PROTOBUF_NAMESPACE_ID::int32 camera_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraCalibrationService_2eproto;
};
// -------------------------------------------------------------------

class calibrate_grpc1Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICameraCalibration.calibrate_grpc1Response) */ {
 public:
  inline calibrate_grpc1Response() : calibrate_grpc1Response(nullptr) {}
  virtual ~calibrate_grpc1Response();
  explicit constexpr calibrate_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  calibrate_grpc1Response(const calibrate_grpc1Response& from);
  calibrate_grpc1Response(calibrate_grpc1Response&& from) noexcept
    : calibrate_grpc1Response() {
    *this = ::std::move(from);
  }

  inline calibrate_grpc1Response& operator=(const calibrate_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline calibrate_grpc1Response& operator=(calibrate_grpc1Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const calibrate_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const calibrate_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const calibrate_grpc1Response*>(
               &_calibrate_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(calibrate_grpc1Response& a, calibrate_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(calibrate_grpc1Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(calibrate_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline calibrate_grpc1Response* New() const final {
    return CreateMaybeMessage<calibrate_grpc1Response>(nullptr);
  }

  calibrate_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<calibrate_grpc1Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const calibrate_grpc1Response& from);
  void MergeFrom(const calibrate_grpc1Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(calibrate_grpc1Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICameraCalibration.calibrate_grpc1Response";
  }
  protected:
  explicit calibrate_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraCalibrationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICameraCalibration.calibrate_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraCalibrationService_2eproto;
};
// -------------------------------------------------------------------

class setParametersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICameraCalibration.setParametersRequest) */ {
 public:
  inline setParametersRequest() : setParametersRequest(nullptr) {}
  virtual ~setParametersRequest();
  explicit constexpr setParametersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setParametersRequest(const setParametersRequest& from);
  setParametersRequest(setParametersRequest&& from) noexcept
    : setParametersRequest() {
    *this = ::std::move(from);
  }

  inline setParametersRequest& operator=(const setParametersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setParametersRequest& operator=(setParametersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setParametersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setParametersRequest* internal_default_instance() {
    return reinterpret_cast<const setParametersRequest*>(
               &_setParametersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(setParametersRequest& a, setParametersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setParametersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setParametersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setParametersRequest* New() const final {
    return CreateMaybeMessage<setParametersRequest>(nullptr);
  }

  setParametersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setParametersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setParametersRequest& from);
  void MergeFrom(const setParametersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setParametersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICameraCalibration.setParametersRequest";
  }
  protected:
  explicit setParametersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraCalibrationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFileFieldNumber = 1,
  };
  // string config_file = 1;
  void clear_config_file();
  const std::string& config_file() const;
  void set_config_file(const std::string& value);
  void set_config_file(std::string&& value);
  void set_config_file(const char* value);
  void set_config_file(const char* value, size_t size);
  std::string* mutable_config_file();
  std::string* release_config_file();
  void set_allocated_config_file(std::string* config_file);
  private:
  const std::string& _internal_config_file() const;
  void _internal_set_config_file(const std::string& value);
  std::string* _internal_mutable_config_file();
  public:

  // @@protoc_insertion_point(class_scope:grpcICameraCalibration.setParametersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraCalibrationService_2eproto;
};
// -------------------------------------------------------------------

class setParametersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcICameraCalibration.setParametersResponse) */ {
 public:
  inline setParametersResponse() : setParametersResponse(nullptr) {}
  virtual ~setParametersResponse();
  explicit constexpr setParametersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setParametersResponse(const setParametersResponse& from);
  setParametersResponse(setParametersResponse&& from) noexcept
    : setParametersResponse() {
    *this = ::std::move(from);
  }

  inline setParametersResponse& operator=(const setParametersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline setParametersResponse& operator=(setParametersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const setParametersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const setParametersResponse* internal_default_instance() {
    return reinterpret_cast<const setParametersResponse*>(
               &_setParametersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(setParametersResponse& a, setParametersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(setParametersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setParametersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline setParametersResponse* New() const final {
    return CreateMaybeMessage<setParametersResponse>(nullptr);
  }

  setParametersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<setParametersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const setParametersResponse& from);
  void MergeFrom(const setParametersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setParametersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcICameraCalibration.setParametersResponse";
  }
  protected:
  explicit setParametersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_grpcICameraCalibrationService_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcICameraCalibration.setParametersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcICameraCalibrationService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// calibrate_grpc0Request

// string inputVideo = 1;
inline void calibrate_grpc0Request::clear_inputvideo() {
  inputvideo_.ClearToEmpty();
}
inline const std::string& calibrate_grpc0Request::inputvideo() const {
  // @@protoc_insertion_point(field_get:grpcICameraCalibration.calibrate_grpc0Request.inputVideo)
  return _internal_inputvideo();
}
inline void calibrate_grpc0Request::set_inputvideo(const std::string& value) {
  _internal_set_inputvideo(value);
  // @@protoc_insertion_point(field_set:grpcICameraCalibration.calibrate_grpc0Request.inputVideo)
}
inline std::string* calibrate_grpc0Request::mutable_inputvideo() {
  // @@protoc_insertion_point(field_mutable:grpcICameraCalibration.calibrate_grpc0Request.inputVideo)
  return _internal_mutable_inputvideo();
}
inline const std::string& calibrate_grpc0Request::_internal_inputvideo() const {
  return inputvideo_.Get();
}
inline void calibrate_grpc0Request::_internal_set_inputvideo(const std::string& value) {
  
  inputvideo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrate_grpc0Request::set_inputvideo(std::string&& value) {
  
  inputvideo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICameraCalibration.calibrate_grpc0Request.inputVideo)
}
inline void calibrate_grpc0Request::set_inputvideo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inputvideo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICameraCalibration.calibrate_grpc0Request.inputVideo)
}
inline void calibrate_grpc0Request::set_inputvideo(const char* value,
    size_t size) {
  
  inputvideo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICameraCalibration.calibrate_grpc0Request.inputVideo)
}
inline std::string* calibrate_grpc0Request::_internal_mutable_inputvideo() {
  
  return inputvideo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrate_grpc0Request::release_inputvideo() {
  // @@protoc_insertion_point(field_release:grpcICameraCalibration.calibrate_grpc0Request.inputVideo)
  return inputvideo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrate_grpc0Request::set_allocated_inputvideo(std::string* inputvideo) {
  if (inputvideo != nullptr) {
    
  } else {
    
  }
  inputvideo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputvideo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICameraCalibration.calibrate_grpc0Request.inputVideo)
}

// string cailbrationFilePath = 2;
inline void calibrate_grpc0Request::clear_cailbrationfilepath() {
  cailbrationfilepath_.ClearToEmpty();
}
inline const std::string& calibrate_grpc0Request::cailbrationfilepath() const {
  // @@protoc_insertion_point(field_get:grpcICameraCalibration.calibrate_grpc0Request.cailbrationFilePath)
  return _internal_cailbrationfilepath();
}
inline void calibrate_grpc0Request::set_cailbrationfilepath(const std::string& value) {
  _internal_set_cailbrationfilepath(value);
  // @@protoc_insertion_point(field_set:grpcICameraCalibration.calibrate_grpc0Request.cailbrationFilePath)
}
inline std::string* calibrate_grpc0Request::mutable_cailbrationfilepath() {
  // @@protoc_insertion_point(field_mutable:grpcICameraCalibration.calibrate_grpc0Request.cailbrationFilePath)
  return _internal_mutable_cailbrationfilepath();
}
inline const std::string& calibrate_grpc0Request::_internal_cailbrationfilepath() const {
  return cailbrationfilepath_.Get();
}
inline void calibrate_grpc0Request::_internal_set_cailbrationfilepath(const std::string& value) {
  
  cailbrationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrate_grpc0Request::set_cailbrationfilepath(std::string&& value) {
  
  cailbrationfilepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICameraCalibration.calibrate_grpc0Request.cailbrationFilePath)
}
inline void calibrate_grpc0Request::set_cailbrationfilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cailbrationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICameraCalibration.calibrate_grpc0Request.cailbrationFilePath)
}
inline void calibrate_grpc0Request::set_cailbrationfilepath(const char* value,
    size_t size) {
  
  cailbrationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICameraCalibration.calibrate_grpc0Request.cailbrationFilePath)
}
inline std::string* calibrate_grpc0Request::_internal_mutable_cailbrationfilepath() {
  
  return cailbrationfilepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrate_grpc0Request::release_cailbrationfilepath() {
  // @@protoc_insertion_point(field_release:grpcICameraCalibration.calibrate_grpc0Request.cailbrationFilePath)
  return cailbrationfilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrate_grpc0Request::set_allocated_cailbrationfilepath(std::string* cailbrationfilepath) {
  if (cailbrationfilepath != nullptr) {
    
  } else {
    
  }
  cailbrationfilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cailbrationfilepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICameraCalibration.calibrate_grpc0Request.cailbrationFilePath)
}

// -------------------------------------------------------------------

// calibrate_grpc0Response

// bool xpcfGrpcReturnValue = 1;
inline void calibrate_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool calibrate_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool calibrate_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICameraCalibration.calibrate_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void calibrate_grpc0Response::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void calibrate_grpc0Response::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICameraCalibration.calibrate_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// calibrate_grpc1Request

// sint32 camera_id = 1;
inline void calibrate_grpc1Request::clear_camera_id() {
  camera_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 calibrate_grpc1Request::_internal_camera_id() const {
  return camera_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 calibrate_grpc1Request::camera_id() const {
  // @@protoc_insertion_point(field_get:grpcICameraCalibration.calibrate_grpc1Request.camera_id)
  return _internal_camera_id();
}
inline void calibrate_grpc1Request::_internal_set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  camera_id_ = value;
}
inline void calibrate_grpc1Request::set_camera_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:grpcICameraCalibration.calibrate_grpc1Request.camera_id)
}

// string cailbrationFilePath = 2;
inline void calibrate_grpc1Request::clear_cailbrationfilepath() {
  cailbrationfilepath_.ClearToEmpty();
}
inline const std::string& calibrate_grpc1Request::cailbrationfilepath() const {
  // @@protoc_insertion_point(field_get:grpcICameraCalibration.calibrate_grpc1Request.cailbrationFilePath)
  return _internal_cailbrationfilepath();
}
inline void calibrate_grpc1Request::set_cailbrationfilepath(const std::string& value) {
  _internal_set_cailbrationfilepath(value);
  // @@protoc_insertion_point(field_set:grpcICameraCalibration.calibrate_grpc1Request.cailbrationFilePath)
}
inline std::string* calibrate_grpc1Request::mutable_cailbrationfilepath() {
  // @@protoc_insertion_point(field_mutable:grpcICameraCalibration.calibrate_grpc1Request.cailbrationFilePath)
  return _internal_mutable_cailbrationfilepath();
}
inline const std::string& calibrate_grpc1Request::_internal_cailbrationfilepath() const {
  return cailbrationfilepath_.Get();
}
inline void calibrate_grpc1Request::_internal_set_cailbrationfilepath(const std::string& value) {
  
  cailbrationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void calibrate_grpc1Request::set_cailbrationfilepath(std::string&& value) {
  
  cailbrationfilepath_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICameraCalibration.calibrate_grpc1Request.cailbrationFilePath)
}
inline void calibrate_grpc1Request::set_cailbrationfilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cailbrationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICameraCalibration.calibrate_grpc1Request.cailbrationFilePath)
}
inline void calibrate_grpc1Request::set_cailbrationfilepath(const char* value,
    size_t size) {
  
  cailbrationfilepath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICameraCalibration.calibrate_grpc1Request.cailbrationFilePath)
}
inline std::string* calibrate_grpc1Request::_internal_mutable_cailbrationfilepath() {
  
  return cailbrationfilepath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* calibrate_grpc1Request::release_cailbrationfilepath() {
  // @@protoc_insertion_point(field_release:grpcICameraCalibration.calibrate_grpc1Request.cailbrationFilePath)
  return cailbrationfilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void calibrate_grpc1Request::set_allocated_cailbrationfilepath(std::string* cailbrationfilepath) {
  if (cailbrationfilepath != nullptr) {
    
  } else {
    
  }
  cailbrationfilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cailbrationfilepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICameraCalibration.calibrate_grpc1Request.cailbrationFilePath)
}

// -------------------------------------------------------------------

// calibrate_grpc1Response

// bool xpcfGrpcReturnValue = 1;
inline void calibrate_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool calibrate_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool calibrate_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICameraCalibration.calibrate_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void calibrate_grpc1Response::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void calibrate_grpc1Response::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICameraCalibration.calibrate_grpc1Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// setParametersRequest

// string config_file = 1;
inline void setParametersRequest::clear_config_file() {
  config_file_.ClearToEmpty();
}
inline const std::string& setParametersRequest::config_file() const {
  // @@protoc_insertion_point(field_get:grpcICameraCalibration.setParametersRequest.config_file)
  return _internal_config_file();
}
inline void setParametersRequest::set_config_file(const std::string& value) {
  _internal_set_config_file(value);
  // @@protoc_insertion_point(field_set:grpcICameraCalibration.setParametersRequest.config_file)
}
inline std::string* setParametersRequest::mutable_config_file() {
  // @@protoc_insertion_point(field_mutable:grpcICameraCalibration.setParametersRequest.config_file)
  return _internal_mutable_config_file();
}
inline const std::string& setParametersRequest::_internal_config_file() const {
  return config_file_.Get();
}
inline void setParametersRequest::_internal_set_config_file(const std::string& value) {
  
  config_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void setParametersRequest::set_config_file(std::string&& value) {
  
  config_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:grpcICameraCalibration.setParametersRequest.config_file)
}
inline void setParametersRequest::set_config_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:grpcICameraCalibration.setParametersRequest.config_file)
}
inline void setParametersRequest::set_config_file(const char* value,
    size_t size) {
  
  config_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:grpcICameraCalibration.setParametersRequest.config_file)
}
inline std::string* setParametersRequest::_internal_mutable_config_file() {
  
  return config_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* setParametersRequest::release_config_file() {
  // @@protoc_insertion_point(field_release:grpcICameraCalibration.setParametersRequest.config_file)
  return config_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void setParametersRequest::set_allocated_config_file(std::string* config_file) {
  if (config_file != nullptr) {
    
  } else {
    
  }
  config_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:grpcICameraCalibration.setParametersRequest.config_file)
}

// -------------------------------------------------------------------

// setParametersResponse

// bool xpcfGrpcReturnValue = 1;
inline void setParametersResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool setParametersResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool setParametersResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcICameraCalibration.setParametersResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void setParametersResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void setParametersResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcICameraCalibration.setParametersResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcICameraCalibration

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcICameraCalibrationService_2eproto
