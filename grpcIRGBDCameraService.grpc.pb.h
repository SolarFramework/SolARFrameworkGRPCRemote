// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIRGBDCameraService.proto
#ifndef GRPC_grpcIRGBDCameraService_2eproto__INCLUDED
#define GRPC_grpcIRGBDCameraService_2eproto__INCLUDED

#include "grpcIRGBDCameraService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpcIRGBDCamera {

class grpcIRGBDCameraService final {
 public:
  static constexpr char const* service_full_name() {
    return "grpcIRGBDCamera.grpcIRGBDCameraService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpcIRGBDCamera::startResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    virtual ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpcIRGBDCamera::stopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    virtual ::grpc::Status getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpcIRGBDCamera::getNextImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextImageResponse>> AsyncgetNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextImageResponse>>(AsyncgetNextImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextImageResponse>> PrepareAsyncgetNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextImageResponse>>(PrepareAsyncgetNextImageRaw(context, request, cq));
    }
    virtual ::grpc::Status setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetResolutionRaw(context, request, cq));
    }
    virtual ::grpc::Status setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetIntrinsicParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetIntrinsicParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetDistortionParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetDistortionParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsetParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsetParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsetParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpcIRGBDCamera::getResolutionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getResolutionResponse>> AsyncgetResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getResolutionResponse>>(AsyncgetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getResolutionResponse>> PrepareAsyncgetResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getResolutionResponse>>(PrepareAsyncgetResolutionRaw(context, request, cq));
    }
    virtual ::grpc::Status getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>> AsyncgetIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>>(AsyncgetIntrinsicsParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>> PrepareAsyncgetIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>>(PrepareAsyncgetIntrinsicsParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpcIRGBDCamera::getParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getParametersResponse>> AsyncgetParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getParametersResponse>>(AsyncgetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getParametersResponse>> PrepareAsyncgetParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getParametersResponse>>(PrepareAsyncgetParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpcIRGBDCamera::getDistortionParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionParametersResponse>> AsyncgetDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionParametersResponse>>(AsyncgetDistortionParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionParametersResponse>> PrepareAsyncgetDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionParametersResponse>>(PrepareAsyncgetDistortionParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextDepthFrameResponse>> AsyncgetNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextDepthFrameResponse>>(AsyncgetNextDepthFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextDepthFrameResponse>> PrepareAsyncgetNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextDepthFrameResponse>>(PrepareAsyncgetNextDepthFrameRaw(context, request, cq));
    }
    virtual ::grpc::Status getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpcIRGBDCamera::getPointCloudResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPointCloudResponse>> AsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPointCloudResponse>>(AsyncgetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPointCloudResponse>> PrepareAsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPointCloudResponse>>(PrepareAsyncgetPointCloudRaw(context, request, cq));
    }
    virtual ::grpc::Status setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpcIRGBDCamera::setDepthResolutionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDepthResolutionResponse>> AsyncsetDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDepthResolutionResponse>>(AsyncsetDepthResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDepthResolutionResponse>> PrepareAsyncsetDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDepthResolutionResponse>>(PrepareAsyncsetDepthResolutionRaw(context, request, cq));
    }
    virtual ::grpc::Status setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>> AsyncsetIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>>(AsyncsetIntrinsicDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>> PrepareAsyncsetIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>>(PrepareAsyncsetIntrinsicDepthParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>> AsyncsetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>>(AsyncsetDistortionDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>> PrepareAsyncsetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>>(PrepareAsyncsetDistortionDepthParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpcIRGBDCamera::getDepthResolutionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthResolutionResponse>> AsyncgetDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthResolutionResponse>>(AsyncgetDepthResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthResolutionResponse>> PrepareAsyncgetDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthResolutionResponse>>(PrepareAsyncgetDepthResolutionRaw(context, request, cq));
    }
    virtual ::grpc::Status getDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthMinDistanceResponse>> AsyncgetDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthMinDistanceResponse>>(AsyncgetDepthMinDistanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthMinDistanceResponse>> PrepareAsyncgetDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthMinDistanceResponse>>(PrepareAsyncgetDepthMinDistanceRaw(context, request, cq));
    }
    virtual ::grpc::Status getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>> AsyncgetIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>>(AsyncgetIntrinsicsDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>> PrepareAsyncgetIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>>(PrepareAsyncgetIntrinsicsDepthParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>> AsyncgetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>>(AsyncgetDistortionDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>> PrepareAsyncgetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>>(PrepareAsyncgetDistortionDepthParametersRaw(context, request, cq));
    }
    virtual ::grpc::Status getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextRGBDFrameResponse>> AsyncgetNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextRGBDFrameResponse>>(AsyncgetNextRGBDFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextRGBDFrameResponse>> PrepareAsyncgetNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextRGBDFrameResponse>>(PrepareAsyncgetNextRGBDFrameRaw(context, request, cq));
    }
    virtual ::grpc::Status alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpcIRGBDCamera::alignDepthToColorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignDepthToColorResponse>> AsyncalignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignDepthToColorResponse>>(AsyncalignDepthToColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignDepthToColorResponse>> PrepareAsyncalignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignDepthToColorResponse>>(PrepareAsyncalignDepthToColorRaw(context, request, cq));
    }
    virtual ::grpc::Status alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpcIRGBDCamera::alignColorToDepthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignColorToDepthResponse>> AsyncalignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignColorToDepthResponse>>(AsyncalignColorToDepthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignColorToDepthResponse>> PrepareAsyncalignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignColorToDepthResponse>>(PrepareAsyncalignColorToDepthRaw(context, request, cq));
    }
    virtual ::grpc::Status getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpcIRGBDCamera::getPixelToWorldResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPixelToWorldResponse>> AsyncgetPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPixelToWorldResponse>>(AsyncgetPixelToWorldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPixelToWorldResponse>> PrepareAsyncgetPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPixelToWorldResponse>>(PrepareAsyncgetPixelToWorldRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpcIRGBDCamera::getWorldToPixelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelResponse>> AsyncgetWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelResponse>>(AsyncgetWorldToPixelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelResponse>> PrepareAsyncgetWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelResponse>>(PrepareAsyncgetWorldToPixelRaw(context, request, cq));
    }
    virtual ::grpc::Status getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelsResponse>> AsyncgetWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelsResponse>>(AsyncgetWorldToPixelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelsResponse>> PrepareAsyncgetWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelsResponse>>(PrepareAsyncgetWorldToPixelsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void start(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest* request, ::grpcIRGBDCamera::startResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void start(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest* request, ::grpcIRGBDCamera::startResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void start(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest* request, ::grpcIRGBDCamera::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void stop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest* request, ::grpcIRGBDCamera::stopResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void stop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest* request, ::grpcIRGBDCamera::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void stop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest* request, ::grpcIRGBDCamera::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest* request, ::grpcIRGBDCamera::getResolutionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest* request, ::grpcIRGBDCamera::getResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest* request, ::grpcIRGBDCamera::getResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest* request, ::grpcIRGBDCamera::getParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest* request, ::grpcIRGBDCamera::getParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest* request, ::grpcIRGBDCamera::getParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextImageResponse>* AsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextImageResponse>* PrepareAsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getResolutionResponse>* AsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getResolutionResponse>* PrepareAsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>* AsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>* PrepareAsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getParametersResponse>* AsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getParametersResponse>* PrepareAsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionParametersResponse>* AsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionParametersResponse>* PrepareAsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextDepthFrameResponse>* AsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextDepthFrameResponse>* PrepareAsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPointCloudResponse>* AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPointCloudResponse>* PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDepthResolutionResponse>* AsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDepthResolutionResponse>* PrepareAsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* AsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* PrepareAsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>* AsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>* PrepareAsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthResolutionResponse>* AsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthResolutionResponse>* PrepareAsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthMinDistanceResponse>* AsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDepthMinDistanceResponse>* PrepareAsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* AsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* PrepareAsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>* AsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>* PrepareAsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextRGBDFrameResponse>* AsyncgetNextRGBDFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getNextRGBDFrameResponse>* PrepareAsyncgetNextRGBDFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignDepthToColorResponse>* AsyncalignDepthToColorRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignDepthToColorResponse>* PrepareAsyncalignDepthToColorRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignColorToDepthResponse>* AsyncalignColorToDepthRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::alignColorToDepthResponse>* PrepareAsyncalignColorToDepthRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPixelToWorldResponse>* AsyncgetPixelToWorldRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getPixelToWorldResponse>* PrepareAsyncgetPixelToWorldRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelResponse>* AsyncgetWorldToPixelRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelResponse>* PrepareAsyncgetWorldToPixelRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelsResponse>* AsyncgetWorldToPixelsRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grpcIRGBDCamera::getWorldToPixelsResponse>* PrepareAsyncgetWorldToPixelsRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status start(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpcIRGBDCamera::startResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::startResponse>> Asyncstart(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::startResponse>>(AsyncstartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::startResponse>> PrepareAsyncstart(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::startResponse>>(PrepareAsyncstartRaw(context, request, cq));
    }
    ::grpc::Status stop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpcIRGBDCamera::stopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::stopResponse>> Asyncstop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::stopResponse>>(AsyncstopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::stopResponse>> PrepareAsyncstop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::stopResponse>>(PrepareAsyncstopRaw(context, request, cq));
    }
    ::grpc::Status getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpcIRGBDCamera::getNextImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextImageResponse>> AsyncgetNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextImageResponse>>(AsyncgetNextImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextImageResponse>> PrepareAsyncgetNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextImageResponse>>(PrepareAsyncgetNextImageRaw(context, request, cq));
    }
    ::grpc::Status setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetResolutionRaw(context, request, cq));
    }
    ::grpc::Status setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetIntrinsicParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetIntrinsicParametersRaw(context, request, cq));
    }
    ::grpc::Status setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetDistortionParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetDistortionParametersRaw(context, request, cq));
    }
    ::grpc::Status setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsetParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsetParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsetParametersRaw(context, request, cq));
    }
    ::grpc::Status getResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpcIRGBDCamera::getResolutionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getResolutionResponse>> AsyncgetResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getResolutionResponse>>(AsyncgetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getResolutionResponse>> PrepareAsyncgetResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getResolutionResponse>>(PrepareAsyncgetResolutionRaw(context, request, cq));
    }
    ::grpc::Status getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>> AsyncgetIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>>(AsyncgetIntrinsicsParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>> PrepareAsyncgetIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>>(PrepareAsyncgetIntrinsicsParametersRaw(context, request, cq));
    }
    ::grpc::Status getParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpcIRGBDCamera::getParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getParametersResponse>> AsyncgetParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getParametersResponse>>(AsyncgetParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getParametersResponse>> PrepareAsyncgetParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getParametersResponse>>(PrepareAsyncgetParametersRaw(context, request, cq));
    }
    ::grpc::Status getDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpcIRGBDCamera::getDistortionParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionParametersResponse>> AsyncgetDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionParametersResponse>>(AsyncgetDistortionParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionParametersResponse>> PrepareAsyncgetDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionParametersResponse>>(PrepareAsyncgetDistortionParametersRaw(context, request, cq));
    }
    ::grpc::Status getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextDepthFrameResponse>> AsyncgetNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextDepthFrameResponse>>(AsyncgetNextDepthFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextDepthFrameResponse>> PrepareAsyncgetNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextDepthFrameResponse>>(PrepareAsyncgetNextDepthFrameRaw(context, request, cq));
    }
    ::grpc::Status getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpcIRGBDCamera::getPointCloudResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPointCloudResponse>> AsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPointCloudResponse>>(AsyncgetPointCloudRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPointCloudResponse>> PrepareAsyncgetPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPointCloudResponse>>(PrepareAsyncgetPointCloudRaw(context, request, cq));
    }
    ::grpc::Status setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpcIRGBDCamera::setDepthResolutionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDepthResolutionResponse>> AsyncsetDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDepthResolutionResponse>>(AsyncsetDepthResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDepthResolutionResponse>> PrepareAsyncsetDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDepthResolutionResponse>>(PrepareAsyncsetDepthResolutionRaw(context, request, cq));
    }
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>> AsyncsetIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>>(AsyncsetIntrinsicDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>> PrepareAsyncsetIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>>(PrepareAsyncsetIntrinsicDepthParametersRaw(context, request, cq));
    }
    ::grpc::Status setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>> AsyncsetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>>(AsyncsetDistortionDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>> PrepareAsyncsetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>>(PrepareAsyncsetDistortionDepthParametersRaw(context, request, cq));
    }
    ::grpc::Status getDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpcIRGBDCamera::getDepthResolutionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthResolutionResponse>> AsyncgetDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthResolutionResponse>>(AsyncgetDepthResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthResolutionResponse>> PrepareAsyncgetDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthResolutionResponse>>(PrepareAsyncgetDepthResolutionRaw(context, request, cq));
    }
    ::grpc::Status getDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthMinDistanceResponse>> AsyncgetDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthMinDistanceResponse>>(AsyncgetDepthMinDistanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthMinDistanceResponse>> PrepareAsyncgetDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthMinDistanceResponse>>(PrepareAsyncgetDepthMinDistanceRaw(context, request, cq));
    }
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>> AsyncgetIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>>(AsyncgetIntrinsicsDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>> PrepareAsyncgetIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>>(PrepareAsyncgetIntrinsicsDepthParametersRaw(context, request, cq));
    }
    ::grpc::Status getDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>> AsyncgetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>>(AsyncgetDistortionDepthParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>> PrepareAsyncgetDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>>(PrepareAsyncgetDistortionDepthParametersRaw(context, request, cq));
    }
    ::grpc::Status getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextRGBDFrameResponse>> AsyncgetNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextRGBDFrameResponse>>(AsyncgetNextRGBDFrameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextRGBDFrameResponse>> PrepareAsyncgetNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextRGBDFrameResponse>>(PrepareAsyncgetNextRGBDFrameRaw(context, request, cq));
    }
    ::grpc::Status alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpcIRGBDCamera::alignDepthToColorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignDepthToColorResponse>> AsyncalignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignDepthToColorResponse>>(AsyncalignDepthToColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignDepthToColorResponse>> PrepareAsyncalignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignDepthToColorResponse>>(PrepareAsyncalignDepthToColorRaw(context, request, cq));
    }
    ::grpc::Status alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpcIRGBDCamera::alignColorToDepthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignColorToDepthResponse>> AsyncalignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignColorToDepthResponse>>(AsyncalignColorToDepthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignColorToDepthResponse>> PrepareAsyncalignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignColorToDepthResponse>>(PrepareAsyncalignColorToDepthRaw(context, request, cq));
    }
    ::grpc::Status getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpcIRGBDCamera::getPixelToWorldResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPixelToWorldResponse>> AsyncgetPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPixelToWorldResponse>>(AsyncgetPixelToWorldRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPixelToWorldResponse>> PrepareAsyncgetPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPixelToWorldResponse>>(PrepareAsyncgetPixelToWorldRaw(context, request, cq));
    }
    ::grpc::Status getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpcIRGBDCamera::getWorldToPixelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelResponse>> AsyncgetWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelResponse>>(AsyncgetWorldToPixelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelResponse>> PrepareAsyncgetWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelResponse>>(PrepareAsyncgetWorldToPixelRaw(context, request, cq));
    }
    ::grpc::Status getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelsResponse>> AsyncgetWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelsResponse>>(AsyncgetWorldToPixelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelsResponse>> PrepareAsyncgetWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelsResponse>>(PrepareAsyncgetWorldToPixelsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void start(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest* request, ::grpcIRGBDCamera::startResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void start(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest* request, ::grpcIRGBDCamera::startResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void start(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest* request, ::grpcIRGBDCamera::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void stop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest* request, ::grpcIRGBDCamera::stopResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void stop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest* request, ::grpcIRGBDCamera::stopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void stop(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest* request, ::grpcIRGBDCamera::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getNextImage(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest* request, ::grpcIRGBDCamera::getResolutionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest* request, ::grpcIRGBDCamera::getResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest* request, ::grpcIRGBDCamera::getResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest* request, ::grpcIRGBDCamera::getParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest* request, ::grpcIRGBDCamera::getParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest* request, ::grpcIRGBDCamera::getParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDistortionParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getNextDepthFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getPointCloud(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setIntrinsicDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDepthResolution(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDepthMinDistance(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getIntrinsicsDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDistortionDepthParameters(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getNextRGBDFrame(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void alignDepthToColor(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void alignColorToDepth(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getPixelToWorld(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getWorldToPixel(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getWorldToPixels(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::startResponse>* AsyncstartRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::startResponse>* PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::startRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::stopResponse>* AsyncstopRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::stopResponse>* PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::stopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextImageResponse>* AsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextImageResponse>* PrepareAsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getResolutionResponse>* AsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getResolutionResponse>* PrepareAsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>* AsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>* PrepareAsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getParametersResponse>* AsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getParametersResponse>* PrepareAsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionParametersResponse>* AsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionParametersResponse>* PrepareAsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextDepthFrameResponse>* AsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextDepthFrameResponse>* PrepareAsyncgetNextDepthFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPointCloudResponse>* AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPointCloudResponse>* PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDepthResolutionResponse>* AsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDepthResolutionResponse>* PrepareAsyncsetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* AsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* PrepareAsyncsetIntrinsicDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>* AsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>* PrepareAsyncsetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthResolutionResponse>* AsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthResolutionResponse>* PrepareAsyncgetDepthResolutionRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthMinDistanceResponse>* AsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDepthMinDistanceResponse>* PrepareAsyncgetDepthMinDistanceRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* AsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* PrepareAsyncgetIntrinsicsDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>* AsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>* PrepareAsyncgetDistortionDepthParametersRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextRGBDFrameResponse>* AsyncgetNextRGBDFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getNextRGBDFrameResponse>* PrepareAsyncgetNextRGBDFrameRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignDepthToColorResponse>* AsyncalignDepthToColorRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignDepthToColorResponse>* PrepareAsyncalignDepthToColorRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignColorToDepthResponse>* AsyncalignColorToDepthRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::alignColorToDepthResponse>* PrepareAsyncalignColorToDepthRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPixelToWorldResponse>* AsyncgetPixelToWorldRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getPixelToWorldResponse>* PrepareAsyncgetPixelToWorldRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelResponse>* AsyncgetWorldToPixelRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelResponse>* PrepareAsyncgetWorldToPixelRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelsResponse>* AsyncgetWorldToPixelsRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grpcIRGBDCamera::getWorldToPixelsResponse>* PrepareAsyncgetWorldToPixelsRaw(::grpc::ClientContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_start_;
    const ::grpc::internal::RpcMethod rpcmethod_stop_;
    const ::grpc::internal::RpcMethod rpcmethod_getNextImage_;
    const ::grpc::internal::RpcMethod rpcmethod_setResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_setIntrinsicParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_setDistortionParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_setParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_getIntrinsicsParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getDistortionParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getNextDepthFrame_;
    const ::grpc::internal::RpcMethod rpcmethod_getPointCloud_;
    const ::grpc::internal::RpcMethod rpcmethod_setDepthResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_setIntrinsicDepthParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_setDistortionDepthParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getDepthResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_getDepthMinDistance_;
    const ::grpc::internal::RpcMethod rpcmethod_getIntrinsicsDepthParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getDistortionDepthParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_getNextRGBDFrame_;
    const ::grpc::internal::RpcMethod rpcmethod_alignDepthToColor_;
    const ::grpc::internal::RpcMethod rpcmethod_alignColorToDepth_;
    const ::grpc::internal::RpcMethod rpcmethod_getPixelToWorld_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldToPixel_;
    const ::grpc::internal::RpcMethod rpcmethod_getWorldToPixels_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status start(::grpc::ServerContext* context, const ::grpcIRGBDCamera::startRequest* request, ::grpcIRGBDCamera::startResponse* response);
    virtual ::grpc::Status stop(::grpc::ServerContext* context, const ::grpcIRGBDCamera::stopRequest* request, ::grpcIRGBDCamera::stopResponse* response);
    virtual ::grpc::Status getNextImage(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response);
    virtual ::grpc::Status setResolution(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status setDistortionParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status setParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status getResolution(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getResolutionRequest* request, ::grpcIRGBDCamera::getResolutionResponse* response);
    virtual ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response);
    virtual ::grpc::Status getParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getParametersRequest* request, ::grpcIRGBDCamera::getParametersResponse* response);
    virtual ::grpc::Status getDistortionParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getDistortionParametersRequest* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response);
    virtual ::grpc::Status getNextDepthFrame(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response);
    virtual ::grpc::Status getPointCloud(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response);
    virtual ::grpc::Status setDepthResolution(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response);
    virtual ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response);
    virtual ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response);
    virtual ::grpc::Status getDepthResolution(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getDepthResolutionRequest* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response);
    virtual ::grpc::Status getDepthMinDistance(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response);
    virtual ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response);
    virtual ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response);
    virtual ::grpc::Status getNextRGBDFrame(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response);
    virtual ::grpc::Status alignDepthToColor(::grpc::ServerContext* context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response);
    virtual ::grpc::Status alignColorToDepth(::grpc::ServerContext* context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response);
    virtual ::grpc::Status getPixelToWorld(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response);
    virtual ::grpc::Status getWorldToPixel(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response);
    virtual ::grpc::Status getWorldToPixels(::grpc::ServerContext* context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_start() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::startRequest* /*request*/, ::grpcIRGBDCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpcIRGBDCamera::startRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::startResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_stop() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::stopRequest* /*request*/, ::grpcIRGBDCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpcIRGBDCamera::stopRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::stopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNextImage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextImageRequest* /*request*/, ::grpcIRGBDCamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextImage(::grpc::ServerContext* context, ::grpcIRGBDCamera::getNextImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getNextImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setResolution() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetResolution(::grpc::ServerContext* context, ::grpcIRGBDCamera::setResolutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetIntrinsicParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDistortionParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setParameters() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::setParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getResolution() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getResolutionRequest* /*request*/, ::grpcIRGBDCamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetResolution(::grpc::ServerContext* context, ::grpcIRGBDCamera::getResolutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getResolutionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIntrinsicsParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::getIntrinsicsParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getIntrinsicsParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getParameters() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getParametersRequest* /*request*/, ::grpcIRGBDCamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::getParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDistortionParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::getDistortionParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getDistortionParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNextDepthFrame() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextDepthFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextDepthFrame(::grpc::ServerContext* context, ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getNextDepthFrameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPointCloud() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPointCloudRequest* /*request*/, ::grpcIRGBDCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloud(::grpc::ServerContext* context, ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getPointCloudResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDepthResolution() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDepthResolution(::grpc::ServerContext* context, ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::setDepthResolutionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setIntrinsicDepthParameters() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetIntrinsicDepthParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDistortionDepthParameters() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDistortionDepthParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::setDistortionDepthParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDepthResolution() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDepthResolution(::grpc::ServerContext* context, ::grpcIRGBDCamera::getDepthResolutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getDepthResolutionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDepthMinDistance() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* /*request*/, ::grpcIRGBDCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDepthMinDistance(::grpc::ServerContext* context, ::grpcIRGBDCamera::getDepthMinDistanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getDepthMinDistanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getIntrinsicsDepthParameters() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIntrinsicsDepthParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDistortionDepthParameters() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDistortionDepthParameters(::grpc::ServerContext* context, ::grpcIRGBDCamera::getDistortionDepthParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getDistortionDepthParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getNextRGBDFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getNextRGBDFrame() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_getNextRGBDFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextRGBDFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextRGBDFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextRGBDFrame(::grpc::ServerContext* context, ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getNextRGBDFrameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_alignDepthToColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_alignDepthToColor() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_alignDepthToColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignDepthToColor(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignDepthToColorRequest* /*request*/, ::grpcIRGBDCamera::alignDepthToColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestalignDepthToColor(::grpc::ServerContext* context, ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::alignDepthToColorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_alignColorToDepth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_alignColorToDepth() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_alignColorToDepth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignColorToDepth(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignColorToDepthRequest* /*request*/, ::grpcIRGBDCamera::alignColorToDepthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestalignColorToDepth(::grpc::ServerContext* context, ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::alignColorToDepthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPixelToWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPixelToWorld() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_getPixelToWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPixelToWorld(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPixelToWorldRequest* /*request*/, ::grpcIRGBDCamera::getPixelToWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPixelToWorld(::grpc::ServerContext* context, ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getPixelToWorldResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldToPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldToPixel() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_getWorldToPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixel(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldToPixel(::grpc::ServerContext* context, ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getWorldToPixelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getWorldToPixels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getWorldToPixels() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_getWorldToPixels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixels(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelsRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldToPixels(::grpc::ServerContext* context, ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::grpcIRGBDCamera::getWorldToPixelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_start<WithAsyncMethod_stop<WithAsyncMethod_getNextImage<WithAsyncMethod_setResolution<WithAsyncMethod_setIntrinsicParameters<WithAsyncMethod_setDistortionParameters<WithAsyncMethod_setParameters<WithAsyncMethod_getResolution<WithAsyncMethod_getIntrinsicsParameters<WithAsyncMethod_getParameters<WithAsyncMethod_getDistortionParameters<WithAsyncMethod_getNextDepthFrame<WithAsyncMethod_getPointCloud<WithAsyncMethod_setDepthResolution<WithAsyncMethod_setIntrinsicDepthParameters<WithAsyncMethod_setDistortionDepthParameters<WithAsyncMethod_getDepthResolution<WithAsyncMethod_getDepthMinDistance<WithAsyncMethod_getIntrinsicsDepthParameters<WithAsyncMethod_getDistortionDepthParameters<WithAsyncMethod_getNextRGBDFrame<WithAsyncMethod_alignDepthToColor<WithAsyncMethod_alignColorToDepth<WithAsyncMethod_getPixelToWorld<WithAsyncMethod_getWorldToPixel<WithAsyncMethod_getWorldToPixels<Service > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::startRequest, ::grpcIRGBDCamera::startResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::startRequest* request, ::grpcIRGBDCamera::startResponse* response) { return this->start(context, request, response); }));}
    void SetMessageAllocatorFor_start(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::startRequest, ::grpcIRGBDCamera::startResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::startRequest, ::grpcIRGBDCamera::startResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::startRequest* /*request*/, ::grpcIRGBDCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::startRequest* /*request*/, ::grpcIRGBDCamera::startResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::startRequest* /*request*/, ::grpcIRGBDCamera::startResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::stopRequest, ::grpcIRGBDCamera::stopResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::stopRequest* request, ::grpcIRGBDCamera::stopResponse* response) { return this->stop(context, request, response); }));}
    void SetMessageAllocatorFor_stop(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::stopRequest, ::grpcIRGBDCamera::stopResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::stopRequest, ::grpcIRGBDCamera::stopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::stopRequest* /*request*/, ::grpcIRGBDCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::stopRequest* /*request*/, ::grpcIRGBDCamera::stopResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::stopRequest* /*request*/, ::grpcIRGBDCamera::stopResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getNextImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getNextImageRequest, ::grpcIRGBDCamera::getNextImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getNextImageRequest* request, ::grpcIRGBDCamera::getNextImageResponse* response) { return this->getNextImage(context, request, response); }));}
    void SetMessageAllocatorFor_getNextImage(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getNextImageRequest, ::grpcIRGBDCamera::getNextImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getNextImageRequest, ::grpcIRGBDCamera::getNextImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextImageRequest* /*request*/, ::grpcIRGBDCamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNextImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getNextImageRequest* /*request*/, ::grpcIRGBDCamera::getNextImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNextImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getNextImageRequest* /*request*/, ::grpcIRGBDCamera::getNextImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setResolutionRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::setResolutionRequest* request, ::google::protobuf::Empty* response) { return this->setResolution(context, request, response); }));}
    void SetMessageAllocatorFor_setResolution(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::setResolutionRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setResolutionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setIntrinsicParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response) { return this->setIntrinsicParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setIntrinsicParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setIntrinsicParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setIntrinsicParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setDistortionParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setDistortionParametersRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response) { return this->setDistortionParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setDistortionParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::setDistortionParametersRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setDistortionParametersRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDistortionParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDistortionParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setParametersRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::setParametersRequest* request, ::google::protobuf::Empty* response) { return this->setParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::setParametersRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setParametersRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getResolutionRequest, ::grpcIRGBDCamera::getResolutionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getResolutionRequest* request, ::grpcIRGBDCamera::getResolutionResponse* response) { return this->getResolution(context, request, response); }));}
    void SetMessageAllocatorFor_getResolution(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getResolutionRequest, ::grpcIRGBDCamera::getResolutionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getResolutionRequest, ::grpcIRGBDCamera::getResolutionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getResolutionRequest* /*request*/, ::grpcIRGBDCamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getResolutionRequest* /*request*/, ::grpcIRGBDCamera::getResolutionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getResolutionRequest* /*request*/, ::grpcIRGBDCamera::getResolutionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getIntrinsicsParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getIntrinsicsParametersRequest, ::grpcIRGBDCamera::getIntrinsicsParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* response) { return this->getIntrinsicsParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getIntrinsicsParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getIntrinsicsParametersRequest, ::grpcIRGBDCamera::getIntrinsicsParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getIntrinsicsParametersRequest, ::grpcIRGBDCamera::getIntrinsicsParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getIntrinsicsParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getIntrinsicsParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getParametersRequest, ::grpcIRGBDCamera::getParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getParametersRequest* request, ::grpcIRGBDCamera::getParametersResponse* response) { return this->getParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getParametersRequest, ::grpcIRGBDCamera::getParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getParametersRequest, ::grpcIRGBDCamera::getParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getParametersRequest* /*request*/, ::grpcIRGBDCamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getParametersRequest* /*request*/, ::grpcIRGBDCamera::getParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getParametersRequest* /*request*/, ::grpcIRGBDCamera::getParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDistortionParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getDistortionParametersRequest, ::grpcIRGBDCamera::getDistortionParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getDistortionParametersRequest* request, ::grpcIRGBDCamera::getDistortionParametersResponse* response) { return this->getDistortionParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getDistortionParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getDistortionParametersRequest, ::grpcIRGBDCamera::getDistortionParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getDistortionParametersRequest, ::grpcIRGBDCamera::getDistortionParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDistortionParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDistortionParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getNextDepthFrame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getNextDepthFrameRequest, ::grpcIRGBDCamera::getNextDepthFrameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getNextDepthFrameRequest* request, ::grpcIRGBDCamera::getNextDepthFrameResponse* response) { return this->getNextDepthFrame(context, request, response); }));}
    void SetMessageAllocatorFor_getNextDepthFrame(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getNextDepthFrameRequest, ::grpcIRGBDCamera::getNextDepthFrameResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getNextDepthFrameRequest, ::grpcIRGBDCamera::getNextDepthFrameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextDepthFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNextDepthFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getNextDepthFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextDepthFrameResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNextDepthFrame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getNextDepthFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextDepthFrameResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getPointCloudRequest, ::grpcIRGBDCamera::getPointCloudResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getPointCloudRequest* request, ::grpcIRGBDCamera::getPointCloudResponse* response) { return this->getPointCloud(context, request, response); }));}
    void SetMessageAllocatorFor_getPointCloud(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getPointCloudRequest, ::grpcIRGBDCamera::getPointCloudResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getPointCloudRequest, ::grpcIRGBDCamera::getPointCloudResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPointCloudRequest* /*request*/, ::grpcIRGBDCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getPointCloudRequest* /*request*/, ::grpcIRGBDCamera::getPointCloudResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getPointCloudRequest* /*request*/, ::grpcIRGBDCamera::getPointCloudResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setDepthResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setDepthResolutionRequest, ::grpcIRGBDCamera::setDepthResolutionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::setDepthResolutionRequest* request, ::grpcIRGBDCamera::setDepthResolutionResponse* response) { return this->setDepthResolution(context, request, response); }));}
    void SetMessageAllocatorFor_setDepthResolution(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::setDepthResolutionRequest, ::grpcIRGBDCamera::setDepthResolutionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setDepthResolutionRequest, ::grpcIRGBDCamera::setDepthResolutionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDepthResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::setDepthResolutionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDepthResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::setDepthResolutionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setIntrinsicDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* request, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* response) { return this->setIntrinsicDepthParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setIntrinsicDepthParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setIntrinsicDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setIntrinsicDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setDistortionDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setDistortionDepthParametersRequest, ::grpcIRGBDCamera::setDistortionDepthParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* response) { return this->setDistortionDepthParameters(context, request, response); }));}
    void SetMessageAllocatorFor_setDistortionDepthParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::setDistortionDepthParametersRequest, ::grpcIRGBDCamera::setDistortionDepthParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::setDistortionDepthParametersRequest, ::grpcIRGBDCamera::setDistortionDepthParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDistortionDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDistortionDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDepthResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getDepthResolutionRequest, ::grpcIRGBDCamera::getDepthResolutionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getDepthResolutionRequest* request, ::grpcIRGBDCamera::getDepthResolutionResponse* response) { return this->getDepthResolution(context, request, response); }));}
    void SetMessageAllocatorFor_getDepthResolution(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getDepthResolutionRequest, ::grpcIRGBDCamera::getDepthResolutionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getDepthResolutionRequest, ::grpcIRGBDCamera::getDepthResolutionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDepthResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::getDepthResolutionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDepthResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::getDepthResolutionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDepthMinDistance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getDepthMinDistanceRequest, ::grpcIRGBDCamera::getDepthMinDistanceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* request, ::grpcIRGBDCamera::getDepthMinDistanceResponse* response) { return this->getDepthMinDistance(context, request, response); }));}
    void SetMessageAllocatorFor_getDepthMinDistance(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getDepthMinDistanceRequest, ::grpcIRGBDCamera::getDepthMinDistanceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getDepthMinDistanceRequest, ::grpcIRGBDCamera::getDepthMinDistanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* /*request*/, ::grpcIRGBDCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDepthMinDistance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* /*request*/, ::grpcIRGBDCamera::getDepthMinDistanceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDepthMinDistance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* /*request*/, ::grpcIRGBDCamera::getDepthMinDistanceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* request, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* response) { return this->getIntrinsicsDepthParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getIntrinsicsDepthParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(18);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getIntrinsicsDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getIntrinsicsDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDistortionDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getDistortionDepthParametersRequest, ::grpcIRGBDCamera::getDistortionDepthParametersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* request, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* response) { return this->getDistortionDepthParameters(context, request, response); }));}
    void SetMessageAllocatorFor_getDistortionDepthParameters(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getDistortionDepthParametersRequest, ::grpcIRGBDCamera::getDistortionDepthParametersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(19);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getDistortionDepthParametersRequest, ::grpcIRGBDCamera::getDistortionDepthParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDistortionDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDistortionDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getNextRGBDFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getNextRGBDFrame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getNextRGBDFrameRequest, ::grpcIRGBDCamera::getNextRGBDFrameResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* request, ::grpcIRGBDCamera::getNextRGBDFrameResponse* response) { return this->getNextRGBDFrame(context, request, response); }));}
    void SetMessageAllocatorFor_getNextRGBDFrame(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getNextRGBDFrameRequest, ::grpcIRGBDCamera::getNextRGBDFrameResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(20);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getNextRGBDFrameRequest, ::grpcIRGBDCamera::getNextRGBDFrameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getNextRGBDFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextRGBDFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextRGBDFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNextRGBDFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextRGBDFrameResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNextRGBDFrame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextRGBDFrameResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_alignDepthToColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_alignDepthToColor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::alignDepthToColorRequest, ::grpcIRGBDCamera::alignDepthToColorResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::alignDepthToColorRequest* request, ::grpcIRGBDCamera::alignDepthToColorResponse* response) { return this->alignDepthToColor(context, request, response); }));}
    void SetMessageAllocatorFor_alignDepthToColor(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::alignDepthToColorRequest, ::grpcIRGBDCamera::alignDepthToColorResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(21);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::alignDepthToColorRequest, ::grpcIRGBDCamera::alignDepthToColorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_alignDepthToColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignDepthToColor(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignDepthToColorRequest* /*request*/, ::grpcIRGBDCamera::alignDepthToColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* alignDepthToColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::alignDepthToColorRequest* /*request*/, ::grpcIRGBDCamera::alignDepthToColorResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* alignDepthToColor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::alignDepthToColorRequest* /*request*/, ::grpcIRGBDCamera::alignDepthToColorResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_alignColorToDepth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_alignColorToDepth() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::alignColorToDepthRequest, ::grpcIRGBDCamera::alignColorToDepthResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::alignColorToDepthRequest* request, ::grpcIRGBDCamera::alignColorToDepthResponse* response) { return this->alignColorToDepth(context, request, response); }));}
    void SetMessageAllocatorFor_alignColorToDepth(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::alignColorToDepthRequest, ::grpcIRGBDCamera::alignColorToDepthResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(22);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::alignColorToDepthRequest, ::grpcIRGBDCamera::alignColorToDepthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_alignColorToDepth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignColorToDepth(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignColorToDepthRequest* /*request*/, ::grpcIRGBDCamera::alignColorToDepthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* alignColorToDepth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::alignColorToDepthRequest* /*request*/, ::grpcIRGBDCamera::alignColorToDepthResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* alignColorToDepth(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::alignColorToDepthRequest* /*request*/, ::grpcIRGBDCamera::alignColorToDepthResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getPixelToWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getPixelToWorld() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getPixelToWorldRequest, ::grpcIRGBDCamera::getPixelToWorldResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getPixelToWorldRequest* request, ::grpcIRGBDCamera::getPixelToWorldResponse* response) { return this->getPixelToWorld(context, request, response); }));}
    void SetMessageAllocatorFor_getPixelToWorld(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getPixelToWorldRequest, ::grpcIRGBDCamera::getPixelToWorldResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(23);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getPixelToWorldRequest, ::grpcIRGBDCamera::getPixelToWorldResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getPixelToWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPixelToWorld(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPixelToWorldRequest* /*request*/, ::grpcIRGBDCamera::getPixelToWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPixelToWorld(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getPixelToWorldRequest* /*request*/, ::grpcIRGBDCamera::getPixelToWorldResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPixelToWorld(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getPixelToWorldRequest* /*request*/, ::grpcIRGBDCamera::getPixelToWorldResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getWorldToPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getWorldToPixel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getWorldToPixelRequest, ::grpcIRGBDCamera::getWorldToPixelResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getWorldToPixelRequest* request, ::grpcIRGBDCamera::getWorldToPixelResponse* response) { return this->getWorldToPixel(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldToPixel(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getWorldToPixelRequest, ::grpcIRGBDCamera::getWorldToPixelResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(24);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getWorldToPixelRequest, ::grpcIRGBDCamera::getWorldToPixelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getWorldToPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixel(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getWorldToPixel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getWorldToPixel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getWorldToPixels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getWorldToPixels() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getWorldToPixelsRequest, ::grpcIRGBDCamera::getWorldToPixelsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpcIRGBDCamera::getWorldToPixelsRequest* request, ::grpcIRGBDCamera::getWorldToPixelsResponse* response) { return this->getWorldToPixels(context, request, response); }));}
    void SetMessageAllocatorFor_getWorldToPixels(
        ::grpc::experimental::MessageAllocator< ::grpcIRGBDCamera::getWorldToPixelsRequest, ::grpcIRGBDCamera::getWorldToPixelsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(25);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grpcIRGBDCamera::getWorldToPixelsRequest, ::grpcIRGBDCamera::getWorldToPixelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getWorldToPixels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixels(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelsRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getWorldToPixels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelsRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getWorldToPixels(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelsRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_start<ExperimentalWithCallbackMethod_stop<ExperimentalWithCallbackMethod_getNextImage<ExperimentalWithCallbackMethod_setResolution<ExperimentalWithCallbackMethod_setIntrinsicParameters<ExperimentalWithCallbackMethod_setDistortionParameters<ExperimentalWithCallbackMethod_setParameters<ExperimentalWithCallbackMethod_getResolution<ExperimentalWithCallbackMethod_getIntrinsicsParameters<ExperimentalWithCallbackMethod_getParameters<ExperimentalWithCallbackMethod_getDistortionParameters<ExperimentalWithCallbackMethod_getNextDepthFrame<ExperimentalWithCallbackMethod_getPointCloud<ExperimentalWithCallbackMethod_setDepthResolution<ExperimentalWithCallbackMethod_setIntrinsicDepthParameters<ExperimentalWithCallbackMethod_setDistortionDepthParameters<ExperimentalWithCallbackMethod_getDepthResolution<ExperimentalWithCallbackMethod_getDepthMinDistance<ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters<ExperimentalWithCallbackMethod_getDistortionDepthParameters<ExperimentalWithCallbackMethod_getNextRGBDFrame<ExperimentalWithCallbackMethod_alignDepthToColor<ExperimentalWithCallbackMethod_alignColorToDepth<ExperimentalWithCallbackMethod_getPixelToWorld<ExperimentalWithCallbackMethod_getWorldToPixel<ExperimentalWithCallbackMethod_getWorldToPixels<Service > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_start<ExperimentalWithCallbackMethod_stop<ExperimentalWithCallbackMethod_getNextImage<ExperimentalWithCallbackMethod_setResolution<ExperimentalWithCallbackMethod_setIntrinsicParameters<ExperimentalWithCallbackMethod_setDistortionParameters<ExperimentalWithCallbackMethod_setParameters<ExperimentalWithCallbackMethod_getResolution<ExperimentalWithCallbackMethod_getIntrinsicsParameters<ExperimentalWithCallbackMethod_getParameters<ExperimentalWithCallbackMethod_getDistortionParameters<ExperimentalWithCallbackMethod_getNextDepthFrame<ExperimentalWithCallbackMethod_getPointCloud<ExperimentalWithCallbackMethod_setDepthResolution<ExperimentalWithCallbackMethod_setIntrinsicDepthParameters<ExperimentalWithCallbackMethod_setDistortionDepthParameters<ExperimentalWithCallbackMethod_getDepthResolution<ExperimentalWithCallbackMethod_getDepthMinDistance<ExperimentalWithCallbackMethod_getIntrinsicsDepthParameters<ExperimentalWithCallbackMethod_getDistortionDepthParameters<ExperimentalWithCallbackMethod_getNextRGBDFrame<ExperimentalWithCallbackMethod_alignDepthToColor<ExperimentalWithCallbackMethod_alignColorToDepth<ExperimentalWithCallbackMethod_getPixelToWorld<ExperimentalWithCallbackMethod_getWorldToPixel<ExperimentalWithCallbackMethod_getWorldToPixels<Service > > > > > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_start() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::startRequest* /*request*/, ::grpcIRGBDCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_stop() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::stopRequest* /*request*/, ::grpcIRGBDCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNextImage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextImageRequest* /*request*/, ::grpcIRGBDCamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setResolution() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setParameters() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getResolution() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getResolutionRequest* /*request*/, ::grpcIRGBDCamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getParameters() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getParametersRequest* /*request*/, ::grpcIRGBDCamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNextDepthFrame() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextDepthFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPointCloud() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPointCloudRequest* /*request*/, ::grpcIRGBDCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDepthResolution() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setIntrinsicDepthParameters() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDistortionDepthParameters() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDepthResolution() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDepthMinDistance() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* /*request*/, ::grpcIRGBDCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getIntrinsicsDepthParameters() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDistortionDepthParameters() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getNextRGBDFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getNextRGBDFrame() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_getNextRGBDFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextRGBDFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextRGBDFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_alignDepthToColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_alignDepthToColor() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_alignDepthToColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignDepthToColor(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignDepthToColorRequest* /*request*/, ::grpcIRGBDCamera::alignDepthToColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_alignColorToDepth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_alignColorToDepth() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_alignColorToDepth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignColorToDepth(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignColorToDepthRequest* /*request*/, ::grpcIRGBDCamera::alignColorToDepthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPixelToWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPixelToWorld() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_getPixelToWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPixelToWorld(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPixelToWorldRequest* /*request*/, ::grpcIRGBDCamera::getPixelToWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldToPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldToPixel() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_getWorldToPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixel(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getWorldToPixels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getWorldToPixels() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_getWorldToPixels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixels(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelsRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_start() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::startRequest* /*request*/, ::grpcIRGBDCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_stop() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::stopRequest* /*request*/, ::grpcIRGBDCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requeststop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNextImage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextImageRequest* /*request*/, ::grpcIRGBDCamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setResolution() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetIntrinsicParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDistortionParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setParameters() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getResolution() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getResolutionRequest* /*request*/, ::grpcIRGBDCamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIntrinsicsParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getParameters() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getParametersRequest* /*request*/, ::grpcIRGBDCamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDistortionParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNextDepthFrame() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextDepthFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextDepthFrame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPointCloud() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPointCloudRequest* /*request*/, ::grpcIRGBDCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPointCloud(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDepthResolution() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDepthResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setIntrinsicDepthParameters() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetIntrinsicDepthParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDistortionDepthParameters() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDistortionDepthParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDepthResolution() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDepthResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDepthMinDistance() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* /*request*/, ::grpcIRGBDCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDepthMinDistance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getIntrinsicsDepthParameters() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetIntrinsicsDepthParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDistortionDepthParameters() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDistortionDepthParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getNextRGBDFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getNextRGBDFrame() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_getNextRGBDFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextRGBDFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextRGBDFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetNextRGBDFrame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_alignDepthToColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_alignDepthToColor() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_alignDepthToColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignDepthToColor(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignDepthToColorRequest* /*request*/, ::grpcIRGBDCamera::alignDepthToColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestalignDepthToColor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_alignColorToDepth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_alignColorToDepth() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_alignColorToDepth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignColorToDepth(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignColorToDepthRequest* /*request*/, ::grpcIRGBDCamera::alignColorToDepthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestalignColorToDepth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPixelToWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPixelToWorld() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_getPixelToWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPixelToWorld(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPixelToWorldRequest* /*request*/, ::grpcIRGBDCamera::getPixelToWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPixelToWorld(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldToPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldToPixel() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_getWorldToPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixel(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldToPixel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getWorldToPixels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getWorldToPixels() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_getWorldToPixels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixels(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelsRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetWorldToPixels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_start() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->start(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::startRequest* /*request*/, ::grpcIRGBDCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* start(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_stop() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->stop(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::stopRequest* /*request*/, ::grpcIRGBDCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* stop(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getNextImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNextImage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextImageRequest* /*request*/, ::grpcIRGBDCamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNextImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNextImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setResolution(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setIntrinsicParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setIntrinsicParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setIntrinsicParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setIntrinsicParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setDistortionParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDistortionParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDistortionParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDistortionParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getResolution(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getResolutionRequest* /*request*/, ::grpcIRGBDCamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getIntrinsicsParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getIntrinsicsParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getIntrinsicsParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getIntrinsicsParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getParametersRequest* /*request*/, ::grpcIRGBDCamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDistortionParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDistortionParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDistortionParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDistortionParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getNextDepthFrame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNextDepthFrame(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextDepthFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNextDepthFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNextDepthFrame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getPointCloud() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPointCloud(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPointCloudRequest* /*request*/, ::grpcIRGBDCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPointCloud(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPointCloud(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setDepthResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDepthResolution(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDepthResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDepthResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setIntrinsicDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setIntrinsicDepthParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setIntrinsicDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setIntrinsicDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setDistortionDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDistortionDepthParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDistortionDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDistortionDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDepthResolution() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDepthResolution(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDepthResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDepthResolution(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDepthMinDistance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDepthMinDistance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* /*request*/, ::grpcIRGBDCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDepthMinDistance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDepthMinDistance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getIntrinsicsDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getIntrinsicsDepthParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getIntrinsicsDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getIntrinsicsDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDistortionDepthParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDistortionDepthParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDistortionDepthParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDistortionDepthParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getNextRGBDFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getNextRGBDFrame() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getNextRGBDFrame(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getNextRGBDFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getNextRGBDFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextRGBDFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getNextRGBDFrame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getNextRGBDFrame(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_alignDepthToColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_alignDepthToColor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->alignDepthToColor(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_alignDepthToColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignDepthToColor(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignDepthToColorRequest* /*request*/, ::grpcIRGBDCamera::alignDepthToColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* alignDepthToColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* alignDepthToColor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_alignColorToDepth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_alignColorToDepth() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->alignColorToDepth(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_alignColorToDepth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status alignColorToDepth(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignColorToDepthRequest* /*request*/, ::grpcIRGBDCamera::alignColorToDepthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* alignColorToDepth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* alignColorToDepth(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getPixelToWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getPixelToWorld() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPixelToWorld(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getPixelToWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPixelToWorld(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPixelToWorldRequest* /*request*/, ::grpcIRGBDCamera::getPixelToWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getPixelToWorld(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getPixelToWorld(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getWorldToPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getWorldToPixel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldToPixel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getWorldToPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixel(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getWorldToPixel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getWorldToPixel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getWorldToPixels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getWorldToPixels() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getWorldToPixels(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getWorldToPixels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getWorldToPixels(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelsRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getWorldToPixels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getWorldToPixels(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_start() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::startRequest, ::grpcIRGBDCamera::startResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::startRequest, ::grpcIRGBDCamera::startResponse>* streamer) {
                       return this->Streamedstart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status start(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::startRequest* /*request*/, ::grpcIRGBDCamera::startResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::startRequest,::grpcIRGBDCamera::startResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_stop() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::stopRequest, ::grpcIRGBDCamera::stopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::stopRequest, ::grpcIRGBDCamera::stopResponse>* streamer) {
                       return this->Streamedstop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status stop(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::stopRequest* /*request*/, ::grpcIRGBDCamera::stopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedstop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::stopRequest,::grpcIRGBDCamera::stopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNextImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNextImage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getNextImageRequest, ::grpcIRGBDCamera::getNextImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getNextImageRequest, ::grpcIRGBDCamera::getNextImageResponse>* streamer) {
                       return this->StreamedgetNextImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNextImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNextImage(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextImageRequest* /*request*/, ::grpcIRGBDCamera::getNextImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNextImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getNextImageRequest,::grpcIRGBDCamera::getNextImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setResolution() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::setResolutionRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::setResolutionRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setResolutionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::setResolutionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setIntrinsicParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setIntrinsicParameters() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::setIntrinsicParametersRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetIntrinsicParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setIntrinsicParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setIntrinsicParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetIntrinsicParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::setIntrinsicParametersRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDistortionParameters() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::setDistortionParametersRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::setDistortionParametersRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetDistortionParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDistortionParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::setDistortionParametersRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setParameters() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::setParametersRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::setParametersRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsetParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setParametersRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::setParametersRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getResolution() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getResolutionRequest, ::grpcIRGBDCamera::getResolutionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getResolutionRequest, ::grpcIRGBDCamera::getResolutionResponse>* streamer) {
                       return this->StreamedgetResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getResolutionRequest* /*request*/, ::grpcIRGBDCamera::getResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getResolutionRequest,::grpcIRGBDCamera::getResolutionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getIntrinsicsParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getIntrinsicsParameters() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getIntrinsicsParametersRequest, ::grpcIRGBDCamera::getIntrinsicsParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getIntrinsicsParametersRequest, ::grpcIRGBDCamera::getIntrinsicsParametersResponse>* streamer) {
                       return this->StreamedgetIntrinsicsParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getIntrinsicsParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getIntrinsicsParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetIntrinsicsParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getIntrinsicsParametersRequest,::grpcIRGBDCamera::getIntrinsicsParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getParameters() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getParametersRequest, ::grpcIRGBDCamera::getParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getParametersRequest, ::grpcIRGBDCamera::getParametersResponse>* streamer) {
                       return this->StreamedgetParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getParametersRequest* /*request*/, ::grpcIRGBDCamera::getParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getParametersRequest,::grpcIRGBDCamera::getParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDistortionParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDistortionParameters() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getDistortionParametersRequest, ::grpcIRGBDCamera::getDistortionParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getDistortionParametersRequest, ::grpcIRGBDCamera::getDistortionParametersResponse>* streamer) {
                       return this->StreamedgetDistortionParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDistortionParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDistortionParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDistortionParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getDistortionParametersRequest,::grpcIRGBDCamera::getDistortionParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNextDepthFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNextDepthFrame() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getNextDepthFrameRequest, ::grpcIRGBDCamera::getNextDepthFrameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getNextDepthFrameRequest, ::grpcIRGBDCamera::getNextDepthFrameResponse>* streamer) {
                       return this->StreamedgetNextDepthFrame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNextDepthFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNextDepthFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextDepthFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextDepthFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNextDepthFrame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getNextDepthFrameRequest,::grpcIRGBDCamera::getNextDepthFrameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPointCloud : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPointCloud() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getPointCloudRequest, ::grpcIRGBDCamera::getPointCloudResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getPointCloudRequest, ::grpcIRGBDCamera::getPointCloudResponse>* streamer) {
                       return this->StreamedgetPointCloud(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPointCloud() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPointCloud(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPointCloudRequest* /*request*/, ::grpcIRGBDCamera::getPointCloudResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPointCloud(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getPointCloudRequest,::grpcIRGBDCamera::getPointCloudResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDepthResolution() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::setDepthResolutionRequest, ::grpcIRGBDCamera::setDepthResolutionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::setDepthResolutionRequest, ::grpcIRGBDCamera::setDepthResolutionResponse>* streamer) {
                       return this->StreamedsetDepthResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::setDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDepthResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::setDepthResolutionRequest,::grpcIRGBDCamera::setDepthResolutionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setIntrinsicDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setIntrinsicDepthParameters() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* streamer) {
                       return this->StreamedsetIntrinsicDepthParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setIntrinsicDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setIntrinsicDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setIntrinsicDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetIntrinsicDepthParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::setIntrinsicDepthParametersRequest,::grpcIRGBDCamera::setIntrinsicDepthParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDistortionDepthParameters() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::setDistortionDepthParametersRequest, ::grpcIRGBDCamera::setDistortionDepthParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::setDistortionDepthParametersRequest, ::grpcIRGBDCamera::setDistortionDepthParametersResponse>* streamer) {
                       return this->StreamedsetDistortionDepthParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::setDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::setDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDistortionDepthParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::setDistortionDepthParametersRequest,::grpcIRGBDCamera::setDistortionDepthParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDepthResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDepthResolution() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getDepthResolutionRequest, ::grpcIRGBDCamera::getDepthResolutionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getDepthResolutionRequest, ::grpcIRGBDCamera::getDepthResolutionResponse>* streamer) {
                       return this->StreamedgetDepthResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDepthResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDepthResolution(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthResolutionRequest* /*request*/, ::grpcIRGBDCamera::getDepthResolutionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDepthResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getDepthResolutionRequest,::grpcIRGBDCamera::getDepthResolutionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDepthMinDistance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDepthMinDistance() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getDepthMinDistanceRequest, ::grpcIRGBDCamera::getDepthMinDistanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getDepthMinDistanceRequest, ::grpcIRGBDCamera::getDepthMinDistanceResponse>* streamer) {
                       return this->StreamedgetDepthMinDistance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDepthMinDistance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDepthMinDistance(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDepthMinDistanceRequest* /*request*/, ::grpcIRGBDCamera::getDepthMinDistanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDepthMinDistance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getDepthMinDistanceRequest,::grpcIRGBDCamera::getDepthMinDistanceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getIntrinsicsDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getIntrinsicsDepthParameters() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* streamer) {
                       return this->StreamedgetIntrinsicsDepthParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getIntrinsicsDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getIntrinsicsDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetIntrinsicsDepthParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getIntrinsicsDepthParametersRequest,::grpcIRGBDCamera::getIntrinsicsDepthParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDistortionDepthParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDistortionDepthParameters() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getDistortionDepthParametersRequest, ::grpcIRGBDCamera::getDistortionDepthParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getDistortionDepthParametersRequest, ::grpcIRGBDCamera::getDistortionDepthParametersResponse>* streamer) {
                       return this->StreamedgetDistortionDepthParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDistortionDepthParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDistortionDepthParameters(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getDistortionDepthParametersRequest* /*request*/, ::grpcIRGBDCamera::getDistortionDepthParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDistortionDepthParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getDistortionDepthParametersRequest,::grpcIRGBDCamera::getDistortionDepthParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getNextRGBDFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getNextRGBDFrame() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getNextRGBDFrameRequest, ::grpcIRGBDCamera::getNextRGBDFrameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getNextRGBDFrameRequest, ::grpcIRGBDCamera::getNextRGBDFrameResponse>* streamer) {
                       return this->StreamedgetNextRGBDFrame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getNextRGBDFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getNextRGBDFrame(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getNextRGBDFrameRequest* /*request*/, ::grpcIRGBDCamera::getNextRGBDFrameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetNextRGBDFrame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getNextRGBDFrameRequest,::grpcIRGBDCamera::getNextRGBDFrameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_alignDepthToColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_alignDepthToColor() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::alignDepthToColorRequest, ::grpcIRGBDCamera::alignDepthToColorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::alignDepthToColorRequest, ::grpcIRGBDCamera::alignDepthToColorResponse>* streamer) {
                       return this->StreamedalignDepthToColor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_alignDepthToColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status alignDepthToColor(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignDepthToColorRequest* /*request*/, ::grpcIRGBDCamera::alignDepthToColorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedalignDepthToColor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::alignDepthToColorRequest,::grpcIRGBDCamera::alignDepthToColorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_alignColorToDepth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_alignColorToDepth() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::alignColorToDepthRequest, ::grpcIRGBDCamera::alignColorToDepthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::alignColorToDepthRequest, ::grpcIRGBDCamera::alignColorToDepthResponse>* streamer) {
                       return this->StreamedalignColorToDepth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_alignColorToDepth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status alignColorToDepth(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::alignColorToDepthRequest* /*request*/, ::grpcIRGBDCamera::alignColorToDepthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedalignColorToDepth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::alignColorToDepthRequest,::grpcIRGBDCamera::alignColorToDepthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPixelToWorld : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPixelToWorld() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getPixelToWorldRequest, ::grpcIRGBDCamera::getPixelToWorldResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getPixelToWorldRequest, ::grpcIRGBDCamera::getPixelToWorldResponse>* streamer) {
                       return this->StreamedgetPixelToWorld(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPixelToWorld() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPixelToWorld(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getPixelToWorldRequest* /*request*/, ::grpcIRGBDCamera::getPixelToWorldResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPixelToWorld(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getPixelToWorldRequest,::grpcIRGBDCamera::getPixelToWorldResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldToPixel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldToPixel() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getWorldToPixelRequest, ::grpcIRGBDCamera::getWorldToPixelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getWorldToPixelRequest, ::grpcIRGBDCamera::getWorldToPixelResponse>* streamer) {
                       return this->StreamedgetWorldToPixel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldToPixel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldToPixel(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldToPixel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getWorldToPixelRequest,::grpcIRGBDCamera::getWorldToPixelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getWorldToPixels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getWorldToPixels() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::grpcIRGBDCamera::getWorldToPixelsRequest, ::grpcIRGBDCamera::getWorldToPixelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::grpcIRGBDCamera::getWorldToPixelsRequest, ::grpcIRGBDCamera::getWorldToPixelsResponse>* streamer) {
                       return this->StreamedgetWorldToPixels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getWorldToPixels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getWorldToPixels(::grpc::ServerContext* /*context*/, const ::grpcIRGBDCamera::getWorldToPixelsRequest* /*request*/, ::grpcIRGBDCamera::getWorldToPixelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetWorldToPixels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grpcIRGBDCamera::getWorldToPixelsRequest,::grpcIRGBDCamera::getWorldToPixelsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getNextImage<WithStreamedUnaryMethod_setResolution<WithStreamedUnaryMethod_setIntrinsicParameters<WithStreamedUnaryMethod_setDistortionParameters<WithStreamedUnaryMethod_setParameters<WithStreamedUnaryMethod_getResolution<WithStreamedUnaryMethod_getIntrinsicsParameters<WithStreamedUnaryMethod_getParameters<WithStreamedUnaryMethod_getDistortionParameters<WithStreamedUnaryMethod_getNextDepthFrame<WithStreamedUnaryMethod_getPointCloud<WithStreamedUnaryMethod_setDepthResolution<WithStreamedUnaryMethod_setIntrinsicDepthParameters<WithStreamedUnaryMethod_setDistortionDepthParameters<WithStreamedUnaryMethod_getDepthResolution<WithStreamedUnaryMethod_getDepthMinDistance<WithStreamedUnaryMethod_getIntrinsicsDepthParameters<WithStreamedUnaryMethod_getDistortionDepthParameters<WithStreamedUnaryMethod_getNextRGBDFrame<WithStreamedUnaryMethod_alignDepthToColor<WithStreamedUnaryMethod_alignColorToDepth<WithStreamedUnaryMethod_getPixelToWorld<WithStreamedUnaryMethod_getWorldToPixel<WithStreamedUnaryMethod_getWorldToPixels<Service > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_start<WithStreamedUnaryMethod_stop<WithStreamedUnaryMethod_getNextImage<WithStreamedUnaryMethod_setResolution<WithStreamedUnaryMethod_setIntrinsicParameters<WithStreamedUnaryMethod_setDistortionParameters<WithStreamedUnaryMethod_setParameters<WithStreamedUnaryMethod_getResolution<WithStreamedUnaryMethod_getIntrinsicsParameters<WithStreamedUnaryMethod_getParameters<WithStreamedUnaryMethod_getDistortionParameters<WithStreamedUnaryMethod_getNextDepthFrame<WithStreamedUnaryMethod_getPointCloud<WithStreamedUnaryMethod_setDepthResolution<WithStreamedUnaryMethod_setIntrinsicDepthParameters<WithStreamedUnaryMethod_setDistortionDepthParameters<WithStreamedUnaryMethod_getDepthResolution<WithStreamedUnaryMethod_getDepthMinDistance<WithStreamedUnaryMethod_getIntrinsicsDepthParameters<WithStreamedUnaryMethod_getDistortionDepthParameters<WithStreamedUnaryMethod_getNextRGBDFrame<WithStreamedUnaryMethod_alignDepthToColor<WithStreamedUnaryMethod_alignColorToDepth<WithStreamedUnaryMethod_getPixelToWorld<WithStreamedUnaryMethod_getWorldToPixel<WithStreamedUnaryMethod_getWorldToPixels<Service > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace grpcIRGBDCamera


#endif  // GRPC_grpcIRGBDCameraService_2eproto__INCLUDED
