// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcIPointCloudManagerService.proto

#include "grpcIPointCloudManagerService.pb.h"
#include "grpcIPointCloudManagerService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcIPointCloudManager {

static const char* grpcIPointCloudManagerService_method_names[] = {
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/addPoint_grpc0",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/addPoints_grpc0",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/addPoint_grpc1",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/addPoints_grpc1",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/getPoint",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/getPoints",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/getAllPoints",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/suppressPoint",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/suppressPoints",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/getDescriptorType",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/setDescriptorType",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/isExistPoint",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/getNbPoints",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/saveToFile",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/loadFromFile",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/getConstPointCloud",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/getPointCloud",
  "/grpcIPointCloudManager.grpcIPointCloudManagerService/setPointCloud",
};

std::unique_ptr< grpcIPointCloudManagerService::Stub> grpcIPointCloudManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcIPointCloudManagerService::Stub> stub(new grpcIPointCloudManagerService::Stub(channel, options));
  return stub;
}

grpcIPointCloudManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_addPoint_grpc0_(grpcIPointCloudManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addPoints_grpc0_(grpcIPointCloudManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addPoint_grpc1_(grpcIPointCloudManagerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_addPoints_grpc1_(grpcIPointCloudManagerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPoint_(grpcIPointCloudManagerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPoints_(grpcIPointCloudManagerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAllPoints_(grpcIPointCloudManagerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_suppressPoint_(grpcIPointCloudManagerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_suppressPoints_(grpcIPointCloudManagerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDescriptorType_(grpcIPointCloudManagerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDescriptorType_(grpcIPointCloudManagerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_isExistPoint_(grpcIPointCloudManagerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNbPoints_(grpcIPointCloudManagerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_saveToFile_(grpcIPointCloudManagerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loadFromFile_(grpcIPointCloudManagerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getConstPointCloud_(grpcIPointCloudManagerService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPointCloud_(grpcIPointCloudManagerService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setPointCloud_(grpcIPointCloudManagerService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcIPointCloudManagerService::Stub::addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpcIPointCloudManager::addPoint_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::addPoint_grpc0Request, ::grpcIPointCloudManager::addPoint_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addPoint_grpc0_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::addPoint_grpc0Request, ::grpcIPointCloudManager::addPoint_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoint_grpc0_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::addPoint_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoint_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc0Response>* grpcIPointCloudManagerService::Stub::PrepareAsyncaddPoint_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::addPoint_grpc0Response, ::grpcIPointCloudManager::addPoint_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addPoint_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc0Response>* grpcIPointCloudManagerService::Stub::AsyncaddPoint_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddPoint_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpcIPointCloudManager::addPoints_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::addPoints_grpc0Request, ::grpcIPointCloudManager::addPoints_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addPoints_grpc0_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::addPoints_grpc0Request, ::grpcIPointCloudManager::addPoints_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoints_grpc0_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::addPoints_grpc0(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoints_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc0Response>* grpcIPointCloudManagerService::Stub::PrepareAsyncaddPoints_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::addPoints_grpc0Response, ::grpcIPointCloudManager::addPoints_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addPoints_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc0Response>* grpcIPointCloudManagerService::Stub::AsyncaddPoints_grpc0Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddPoints_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpcIPointCloudManager::addPoint_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::addPoint_grpc1Request, ::grpcIPointCloudManager::addPoint_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addPoint_grpc1_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::addPoint_grpc1Request, ::grpcIPointCloudManager::addPoint_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoint_grpc1_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::addPoint_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoint_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc1Response>* grpcIPointCloudManagerService::Stub::PrepareAsyncaddPoint_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::addPoint_grpc1Response, ::grpcIPointCloudManager::addPoint_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addPoint_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoint_grpc1Response>* grpcIPointCloudManagerService::Stub::AsyncaddPoint_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddPoint_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpcIPointCloudManager::addPoints_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::addPoints_grpc1Request, ::grpcIPointCloudManager::addPoints_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_addPoints_grpc1_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::addPoints_grpc1Request, ::grpcIPointCloudManager::addPoints_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoints_grpc1_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::addPoints_grpc1(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_addPoints_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc1Response>* grpcIPointCloudManagerService::Stub::PrepareAsyncaddPoints_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::addPoints_grpc1Response, ::grpcIPointCloudManager::addPoints_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_addPoints_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::addPoints_grpc1Response>* grpcIPointCloudManagerService::Stub::AsyncaddPoints_grpc1Raw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncaddPoints_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpcIPointCloudManager::getPointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::getPointRequest, ::grpcIPointCloudManager::getPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPoint_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::getPointRequest, ::grpcIPointCloudManager::getPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPoint_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::getPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncgetPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::getPointResponse, ::grpcIPointCloudManager::getPointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointResponse>* grpcIPointCloudManagerService::Stub::AsyncgetPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpcIPointCloudManager::getPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::getPointsRequest, ::grpcIPointCloudManager::getPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPoints_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::getPointsRequest, ::grpcIPointCloudManager::getPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPoints_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::getPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointsResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncgetPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::getPointsResponse, ::grpcIPointCloudManager::getPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointsResponse>* grpcIPointCloudManagerService::Stub::AsyncgetPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpcIPointCloudManager::getAllPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::getAllPointsRequest, ::grpcIPointCloudManager::getAllPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getAllPoints_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::getAllPointsRequest, ::grpcIPointCloudManager::getAllPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllPoints_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::getAllPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getAllPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getAllPointsResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncgetAllPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::getAllPointsResponse, ::grpcIPointCloudManager::getAllPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getAllPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getAllPointsResponse>* grpcIPointCloudManagerService::Stub::AsyncgetAllPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getAllPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetAllPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpcIPointCloudManager::suppressPointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::suppressPointRequest, ::grpcIPointCloudManager::suppressPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_suppressPoint_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::suppressPointRequest, ::grpcIPointCloudManager::suppressPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressPoint_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::suppressPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncsuppressPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::suppressPointResponse, ::grpcIPointCloudManager::suppressPointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_suppressPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointResponse>* grpcIPointCloudManagerService::Stub::AsyncsuppressPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsuppressPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpcIPointCloudManager::suppressPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::suppressPointsRequest, ::grpcIPointCloudManager::suppressPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_suppressPoints_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::suppressPointsRequest, ::grpcIPointCloudManager::suppressPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressPoints_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::suppressPoints(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_suppressPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointsResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncsuppressPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::suppressPointsResponse, ::grpcIPointCloudManager::suppressPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_suppressPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::suppressPointsResponse>* grpcIPointCloudManagerService::Stub::AsyncsuppressPointsRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::suppressPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsuppressPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIPointCloudManager::getDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDescriptorType_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIPointCloudManager::getDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDescriptorType_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::getDescriptorType(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDescriptorType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getDescriptorTypeResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::getDescriptorTypeResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDescriptorType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getDescriptorTypeResponse>* grpcIPointCloudManagerService::Stub::AsyncgetDescriptorTypeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDescriptorTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::setDescriptorTypeRequest, ::grpcIPointCloudManager::setDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDescriptorType_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::setDescriptorTypeRequest, ::grpcIPointCloudManager::setDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDescriptorType_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::setDescriptorType(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDescriptorType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::setDescriptorTypeResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::setDescriptorTypeResponse, ::grpcIPointCloudManager::setDescriptorTypeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDescriptorType_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::setDescriptorTypeResponse>* grpcIPointCloudManagerService::Stub::AsyncsetDescriptorTypeRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDescriptorTypeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpcIPointCloudManager::isExistPointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::isExistPointRequest, ::grpcIPointCloudManager::isExistPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_isExistPoint_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::isExistPointRequest, ::grpcIPointCloudManager::isExistPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isExistPoint_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::isExistPoint(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_isExistPoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::isExistPointResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncisExistPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::isExistPointResponse, ::grpcIPointCloudManager::isExistPointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_isExistPoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::isExistPointResponse>* grpcIPointCloudManagerService::Stub::AsyncisExistPointRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::isExistPointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncisExistPointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIPointCloudManager::getNbPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIPointCloudManager::getNbPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNbPoints_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIPointCloudManager::getNbPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNbPoints_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::getNbPoints(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNbPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getNbPointsResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncgetNbPointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::getNbPointsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNbPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getNbPointsResponse>* grpcIPointCloudManagerService::Stub::AsyncgetNbPointsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNbPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpcIPointCloudManager::saveToFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::saveToFileRequest, ::grpcIPointCloudManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_saveToFile_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::saveToFileRequest, ::grpcIPointCloudManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::saveToFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_saveToFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::saveToFileResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::saveToFileResponse, ::grpcIPointCloudManager::saveToFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_saveToFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::saveToFileResponse>* grpcIPointCloudManagerService::Stub::AsyncsaveToFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::saveToFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsaveToFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpcIPointCloudManager::loadFromFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::loadFromFileRequest, ::grpcIPointCloudManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loadFromFile_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::loadFromFileRequest, ::grpcIPointCloudManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::loadFromFile(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loadFromFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::loadFromFileResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::loadFromFileResponse, ::grpcIPointCloudManager::loadFromFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loadFromFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::loadFromFileResponse>* grpcIPointCloudManagerService::Stub::AsyncloadFromFileRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::loadFromFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloadFromFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpcIPointCloudManager::getConstPointCloudResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::grpcIPointCloudManager::getConstPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getConstPointCloud_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::grpcIPointCloudManager::getConstPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConstPointCloud_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::getConstPointCloud(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getConstPointCloud_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getConstPointCloudResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncgetConstPointCloudRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::getConstPointCloudResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getConstPointCloud_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getConstPointCloudResponse>* grpcIPointCloudManagerService::Stub::AsyncgetConstPointCloudRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetConstPointCloudRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpcIPointCloudManager::getPointCloudResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::getPointCloudRequest, ::grpcIPointCloudManager::getPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPointCloud_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::getPointCloudRequest, ::grpcIPointCloudManager::getPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloud_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::getPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPointCloud_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointCloudResponse>* grpcIPointCloudManagerService::Stub::PrepareAsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcIPointCloudManager::getPointCloudResponse, ::grpcIPointCloudManager::getPointCloudRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPointCloud_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcIPointCloudManager::getPointCloudResponse>* grpcIPointCloudManagerService::Stub::AsyncgetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::getPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPointCloudRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcIPointCloudManagerService::Stub::setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcIPointCloudManager::setPointCloudRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setPointCloud_, context, request, response);
}

void grpcIPointCloudManagerService::Stub::async::setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcIPointCloudManager::setPointCloudRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPointCloud_, context, request, response, std::move(f));
}

void grpcIPointCloudManagerService::Stub::async::setPointCloud(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setPointCloud_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIPointCloudManagerService::Stub::PrepareAsyncsetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcIPointCloudManager::setPointCloudRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setPointCloud_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcIPointCloudManagerService::Stub::AsyncsetPointCloudRaw(::grpc::ClientContext* context, const ::grpcIPointCloudManager::setPointCloudRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetPointCloudRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcIPointCloudManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::addPoint_grpc0Request, ::grpcIPointCloudManager::addPoint_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::addPoint_grpc0Request* req,
             ::grpcIPointCloudManager::addPoint_grpc0Response* resp) {
               return service->addPoint_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::addPoints_grpc0Request, ::grpcIPointCloudManager::addPoints_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::addPoints_grpc0Request* req,
             ::grpcIPointCloudManager::addPoints_grpc0Response* resp) {
               return service->addPoints_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::addPoint_grpc1Request, ::grpcIPointCloudManager::addPoint_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::addPoint_grpc1Request* req,
             ::grpcIPointCloudManager::addPoint_grpc1Response* resp) {
               return service->addPoint_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::addPoints_grpc1Request, ::grpcIPointCloudManager::addPoints_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::addPoints_grpc1Request* req,
             ::grpcIPointCloudManager::addPoints_grpc1Response* resp) {
               return service->addPoints_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::getPointRequest, ::grpcIPointCloudManager::getPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::getPointRequest* req,
             ::grpcIPointCloudManager::getPointResponse* resp) {
               return service->getPoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::getPointsRequest, ::grpcIPointCloudManager::getPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::getPointsRequest* req,
             ::grpcIPointCloudManager::getPointsResponse* resp) {
               return service->getPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::getAllPointsRequest, ::grpcIPointCloudManager::getAllPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::getAllPointsRequest* req,
             ::grpcIPointCloudManager::getAllPointsResponse* resp) {
               return service->getAllPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::suppressPointRequest, ::grpcIPointCloudManager::suppressPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::suppressPointRequest* req,
             ::grpcIPointCloudManager::suppressPointResponse* resp) {
               return service->suppressPoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::suppressPointsRequest, ::grpcIPointCloudManager::suppressPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::suppressPointsRequest* req,
             ::grpcIPointCloudManager::suppressPointsResponse* resp) {
               return service->suppressPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::google::protobuf::Empty, ::grpcIPointCloudManager::getDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIPointCloudManager::getDescriptorTypeResponse* resp) {
               return service->getDescriptorType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::setDescriptorTypeRequest, ::grpcIPointCloudManager::setDescriptorTypeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::setDescriptorTypeRequest* req,
             ::grpcIPointCloudManager::setDescriptorTypeResponse* resp) {
               return service->setDescriptorType(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::isExistPointRequest, ::grpcIPointCloudManager::isExistPointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::isExistPointRequest* req,
             ::grpcIPointCloudManager::isExistPointResponse* resp) {
               return service->isExistPoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::google::protobuf::Empty, ::grpcIPointCloudManager::getNbPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIPointCloudManager::getNbPointsResponse* resp) {
               return service->getNbPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::saveToFileRequest, ::grpcIPointCloudManager::saveToFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::saveToFileRequest* req,
             ::grpcIPointCloudManager::saveToFileResponse* resp) {
               return service->saveToFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::loadFromFileRequest, ::grpcIPointCloudManager::loadFromFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::loadFromFileRequest* req,
             ::grpcIPointCloudManager::loadFromFileResponse* resp) {
               return service->loadFromFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::google::protobuf::Empty, ::grpcIPointCloudManager::getConstPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpcIPointCloudManager::getConstPointCloudResponse* resp) {
               return service->getConstPointCloud(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::getPointCloudRequest, ::grpcIPointCloudManager::getPointCloudResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::getPointCloudRequest* req,
             ::grpcIPointCloudManager::getPointCloudResponse* resp) {
               return service->getPointCloud(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcIPointCloudManagerService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcIPointCloudManagerService::Service, ::grpcIPointCloudManager::setPointCloudRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcIPointCloudManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcIPointCloudManager::setPointCloudRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setPointCloud(ctx, req, resp);
             }, this)));
}

grpcIPointCloudManagerService::Service::~Service() {
}

::grpc::Status grpcIPointCloudManagerService::Service::addPoint_grpc0(::grpc::ServerContext* context, const ::grpcIPointCloudManager::addPoint_grpc0Request* request, ::grpcIPointCloudManager::addPoint_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::addPoints_grpc0(::grpc::ServerContext* context, const ::grpcIPointCloudManager::addPoints_grpc0Request* request, ::grpcIPointCloudManager::addPoints_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::addPoint_grpc1(::grpc::ServerContext* context, const ::grpcIPointCloudManager::addPoint_grpc1Request* request, ::grpcIPointCloudManager::addPoint_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::addPoints_grpc1(::grpc::ServerContext* context, const ::grpcIPointCloudManager::addPoints_grpc1Request* request, ::grpcIPointCloudManager::addPoints_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::getPoint(::grpc::ServerContext* context, const ::grpcIPointCloudManager::getPointRequest* request, ::grpcIPointCloudManager::getPointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::getPoints(::grpc::ServerContext* context, const ::grpcIPointCloudManager::getPointsRequest* request, ::grpcIPointCloudManager::getPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::getAllPoints(::grpc::ServerContext* context, const ::grpcIPointCloudManager::getAllPointsRequest* request, ::grpcIPointCloudManager::getAllPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::suppressPoint(::grpc::ServerContext* context, const ::grpcIPointCloudManager::suppressPointRequest* request, ::grpcIPointCloudManager::suppressPointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::suppressPoints(::grpc::ServerContext* context, const ::grpcIPointCloudManager::suppressPointsRequest* request, ::grpcIPointCloudManager::suppressPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::getDescriptorType(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getDescriptorTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::setDescriptorType(::grpc::ServerContext* context, const ::grpcIPointCloudManager::setDescriptorTypeRequest* request, ::grpcIPointCloudManager::setDescriptorTypeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::isExistPoint(::grpc::ServerContext* context, const ::grpcIPointCloudManager::isExistPointRequest* request, ::grpcIPointCloudManager::isExistPointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::getNbPoints(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getNbPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::saveToFile(::grpc::ServerContext* context, const ::grpcIPointCloudManager::saveToFileRequest* request, ::grpcIPointCloudManager::saveToFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::loadFromFile(::grpc::ServerContext* context, const ::grpcIPointCloudManager::loadFromFileRequest* request, ::grpcIPointCloudManager::loadFromFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::getConstPointCloud(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpcIPointCloudManager::getConstPointCloudResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::getPointCloud(::grpc::ServerContext* context, const ::grpcIPointCloudManager::getPointCloudRequest* request, ::grpcIPointCloudManager::getPointCloudResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcIPointCloudManagerService::Service::setPointCloud(::grpc::ServerContext* context, const ::grpcIPointCloudManager::setPointCloudRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcIPointCloudManager

