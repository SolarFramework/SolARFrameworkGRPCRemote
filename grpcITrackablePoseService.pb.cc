// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcITrackablePoseService.proto

#include "grpcITrackablePoseService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grpcITrackablePose {
PROTOBUF_CONSTEXPR setTrackableRequest::setTrackableRequest(
    ::_pbi::ConstantInitialized)
  : trackable_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct setTrackableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setTrackableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setTrackableRequestDefaultTypeInternal() {}
  union {
    setTrackableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setTrackableRequestDefaultTypeInternal _setTrackableRequest_default_instance_;
PROTOBUF_CONSTEXPR setTrackableResponse::setTrackableResponse(
    ::_pbi::ConstantInitialized)
  : xpcfgrpcreturnvalue_(0){}
struct setTrackableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR setTrackableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~setTrackableResponseDefaultTypeInternal() {}
  union {
    setTrackableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 setTrackableResponseDefaultTypeInternal _setTrackableResponse_default_instance_;
PROTOBUF_CONSTEXPR estimateRequest::estimateRequest(
    ::_pbi::ConstantInitialized)
  : image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camparams_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pose_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , grpcservercompressionformat_(0){}
struct estimateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR estimateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~estimateRequestDefaultTypeInternal() {}
  union {
    estimateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 estimateRequestDefaultTypeInternal _estimateRequest_default_instance_;
PROTOBUF_CONSTEXPR estimateResponse::estimateResponse(
    ::_pbi::ConstantInitialized)
  : pose_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , xpcfgrpcreturnvalue_(0){}
struct estimateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR estimateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~estimateResponseDefaultTypeInternal() {}
  union {
    estimateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 estimateResponseDefaultTypeInternal _estimateResponse_default_instance_;
}  // namespace grpcITrackablePose
static ::_pb::Metadata file_level_metadata_grpcITrackablePoseService_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_grpcITrackablePoseService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_grpcITrackablePoseService_2eproto = nullptr;

const uint32_t TableStruct_grpcITrackablePoseService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::setTrackableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::setTrackableRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::setTrackableRequest, trackable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::setTrackableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::setTrackableResponse, xpcfgrpcreturnvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::estimateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::estimateRequest, grpcservercompressionformat_),
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::estimateRequest, image_),
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::estimateRequest, camparams_),
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::estimateRequest, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::estimateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::estimateResponse, pose_),
  PROTOBUF_FIELD_OFFSET(::grpcITrackablePose::estimateResponse, xpcfgrpcreturnvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grpcITrackablePose::setTrackableRequest)},
  { 8, -1, -1, sizeof(::grpcITrackablePose::setTrackableResponse)},
  { 15, -1, -1, sizeof(::grpcITrackablePose::estimateRequest)},
  { 25, -1, -1, sizeof(::grpcITrackablePose::estimateResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grpcITrackablePose::_setTrackableRequest_default_instance_._instance,
  &::grpcITrackablePose::_setTrackableResponse_default_instance_._instance,
  &::grpcITrackablePose::_estimateRequest_default_instance_._instance,
  &::grpcITrackablePose::_estimateResponse_default_instance_._instance,
};

const char descriptor_table_protodef_grpcITrackablePoseService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037grpcITrackablePoseService.proto\022\022grpcI"
  "TrackablePose\032\033google/protobuf/empty.pro"
  "to\"M\n\023setTrackableRequest\022#\n\033grpcServerC"
  "ompressionFormat\030\001 \001(\005\022\021\n\ttrackable\030\002 \001("
  "\014\"3\n\024setTrackableResponse\022\033\n\023xpcfGrpcRet"
  "urnValue\030\001 \001(\021\"f\n\017estimateRequest\022#\n\033grp"
  "cServerCompressionFormat\030\001 \001(\005\022\r\n\005image\030"
  "\002 \001(\014\022\021\n\tcamParams\030\003 \001(\014\022\014\n\004pose\030\004 \001(\014\"="
  "\n\020estimateResponse\022\014\n\004pose\030\001 \001(\014\022\033\n\023xpcf"
  "GrpcReturnValue\030\002 \001(\0212\331\001\n\031grpcITrackable"
  "PoseService\022c\n\014setTrackable\022\'.grpcITrack"
  "ablePose.setTrackableRequest\032(.grpcITrac"
  "kablePose.setTrackableResponse\"\000\022W\n\010esti"
  "mate\022#.grpcITrackablePose.estimateReques"
  "t\032$.grpcITrackablePose.estimateResponse\""
  "\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_grpcITrackablePoseService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_grpcITrackablePoseService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_grpcITrackablePoseService_2eproto = {
    false, false, 609, descriptor_table_protodef_grpcITrackablePoseService_2eproto,
    "grpcITrackablePoseService.proto",
    &descriptor_table_grpcITrackablePoseService_2eproto_once, descriptor_table_grpcITrackablePoseService_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_grpcITrackablePoseService_2eproto::offsets,
    file_level_metadata_grpcITrackablePoseService_2eproto, file_level_enum_descriptors_grpcITrackablePoseService_2eproto,
    file_level_service_descriptors_grpcITrackablePoseService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_grpcITrackablePoseService_2eproto_getter() {
  return &descriptor_table_grpcITrackablePoseService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_grpcITrackablePoseService_2eproto(&descriptor_table_grpcITrackablePoseService_2eproto);
namespace grpcITrackablePose {

// ===================================================================

class setTrackableRequest::_Internal {
 public:
};

setTrackableRequest::setTrackableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcITrackablePose.setTrackableRequest)
}
setTrackableRequest::setTrackableRequest(const setTrackableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trackable_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trackable_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trackable().empty()) {
    trackable_.Set(from._internal_trackable(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcITrackablePose.setTrackableRequest)
}

inline void setTrackableRequest::SharedCtor() {
trackable_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trackable_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

setTrackableRequest::~setTrackableRequest() {
  // @@protoc_insertion_point(destructor:grpcITrackablePose.setTrackableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setTrackableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trackable_.Destroy();
}

void setTrackableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setTrackableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITrackablePose.setTrackableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackable_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setTrackableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes trackable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_trackable();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setTrackableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITrackablePose.setTrackableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes trackable = 2;
  if (!this->_internal_trackable().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_trackable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITrackablePose.setTrackableRequest)
  return target;
}

size_t setTrackableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITrackablePose.setTrackableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes trackable = 2;
  if (!this->_internal_trackable().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_trackable());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setTrackableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    setTrackableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setTrackableRequest::GetClassData() const { return &_class_data_; }

void setTrackableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<setTrackableRequest *>(to)->MergeFrom(
      static_cast<const setTrackableRequest &>(from));
}


void setTrackableRequest::MergeFrom(const setTrackableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITrackablePose.setTrackableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trackable().empty()) {
    _internal_set_trackable(from._internal_trackable());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setTrackableRequest::CopyFrom(const setTrackableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITrackablePose.setTrackableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setTrackableRequest::IsInitialized() const {
  return true;
}

void setTrackableRequest::InternalSwap(setTrackableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trackable_, lhs_arena,
      &other->trackable_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setTrackableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcITrackablePoseService_2eproto_getter, &descriptor_table_grpcITrackablePoseService_2eproto_once,
      file_level_metadata_grpcITrackablePoseService_2eproto[0]);
}

// ===================================================================

class setTrackableResponse::_Internal {
 public:
};

setTrackableResponse::setTrackableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcITrackablePose.setTrackableResponse)
}
setTrackableResponse::setTrackableResponse(const setTrackableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcITrackablePose.setTrackableResponse)
}

inline void setTrackableResponse::SharedCtor() {
xpcfgrpcreturnvalue_ = 0;
}

setTrackableResponse::~setTrackableResponse() {
  // @@protoc_insertion_point(destructor:grpcITrackablePose.setTrackableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void setTrackableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void setTrackableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void setTrackableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITrackablePose.setTrackableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* setTrackableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 xpcfGrpcReturnValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* setTrackableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITrackablePose.setTrackableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITrackablePose.setTrackableResponse)
  return target;
}

size_t setTrackableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITrackablePose.setTrackableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 xpcfGrpcReturnValue = 1;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData setTrackableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    setTrackableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*setTrackableResponse::GetClassData() const { return &_class_data_; }

void setTrackableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<setTrackableResponse *>(to)->MergeFrom(
      static_cast<const setTrackableResponse &>(from));
}


void setTrackableResponse::MergeFrom(const setTrackableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITrackablePose.setTrackableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void setTrackableResponse::CopyFrom(const setTrackableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITrackablePose.setTrackableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool setTrackableResponse::IsInitialized() const {
  return true;
}

void setTrackableResponse::InternalSwap(setTrackableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata setTrackableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcITrackablePoseService_2eproto_getter, &descriptor_table_grpcITrackablePoseService_2eproto_once,
      file_level_metadata_grpcITrackablePoseService_2eproto[1]);
}

// ===================================================================

class estimateRequest::_Internal {
 public:
};

estimateRequest::estimateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcITrackablePose.estimateRequest)
}
estimateRequest::estimateRequest(const estimateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  camparams_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camparams_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camparams().empty()) {
    camparams_.Set(from._internal_camparams(), 
      GetArenaForAllocation());
  }
  pose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pose().empty()) {
    pose_.Set(from._internal_pose(), 
      GetArenaForAllocation());
  }
  grpcservercompressionformat_ = from.grpcservercompressionformat_;
  // @@protoc_insertion_point(copy_constructor:grpcITrackablePose.estimateRequest)
}

inline void estimateRequest::SharedCtor() {
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camparams_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camparams_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pose_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pose_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
grpcservercompressionformat_ = 0;
}

estimateRequest::~estimateRequest() {
  // @@protoc_insertion_point(destructor:grpcITrackablePose.estimateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void estimateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_.Destroy();
  camparams_.Destroy();
  pose_.Destroy();
}

void estimateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void estimateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITrackablePose.estimateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmpty();
  camparams_.ClearToEmpty();
  pose_.ClearToEmpty();
  grpcservercompressionformat_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* estimateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 grpcServerCompressionFormat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          grpcservercompressionformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes camParams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_camparams();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pose();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* estimateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITrackablePose.estimateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_grpcservercompressionformat(), target);
  }

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  // bytes camParams = 3;
  if (!this->_internal_camparams().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_camparams(), target);
  }

  // bytes pose = 4;
  if (!this->_internal_pose().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITrackablePose.estimateRequest)
  return target;
}

size_t estimateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITrackablePose.estimateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 2;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // bytes camParams = 3;
  if (!this->_internal_camparams().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_camparams());
  }

  // bytes pose = 4;
  if (!this->_internal_pose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pose());
  }

  // int32 grpcServerCompressionFormat = 1;
  if (this->_internal_grpcservercompressionformat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grpcservercompressionformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData estimateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    estimateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*estimateRequest::GetClassData() const { return &_class_data_; }

void estimateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<estimateRequest *>(to)->MergeFrom(
      static_cast<const estimateRequest &>(from));
}


void estimateRequest::MergeFrom(const estimateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITrackablePose.estimateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_camparams().empty()) {
    _internal_set_camparams(from._internal_camparams());
  }
  if (!from._internal_pose().empty()) {
    _internal_set_pose(from._internal_pose());
  }
  if (from._internal_grpcservercompressionformat() != 0) {
    _internal_set_grpcservercompressionformat(from._internal_grpcservercompressionformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void estimateRequest::CopyFrom(const estimateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITrackablePose.estimateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estimateRequest::IsInitialized() const {
  return true;
}

void estimateRequest::InternalSwap(estimateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camparams_, lhs_arena,
      &other->camparams_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pose_, lhs_arena,
      &other->pose_, rhs_arena
  );
  swap(grpcservercompressionformat_, other->grpcservercompressionformat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata estimateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcITrackablePoseService_2eproto_getter, &descriptor_table_grpcITrackablePoseService_2eproto_once,
      file_level_metadata_grpcITrackablePoseService_2eproto[2]);
}

// ===================================================================

class estimateResponse::_Internal {
 public:
};

estimateResponse::estimateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:grpcITrackablePose.estimateResponse)
}
estimateResponse::estimateResponse(const estimateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pose().empty()) {
    pose_.Set(from._internal_pose(), 
      GetArenaForAllocation());
  }
  xpcfgrpcreturnvalue_ = from.xpcfgrpcreturnvalue_;
  // @@protoc_insertion_point(copy_constructor:grpcITrackablePose.estimateResponse)
}

inline void estimateResponse::SharedCtor() {
pose_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pose_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
xpcfgrpcreturnvalue_ = 0;
}

estimateResponse::~estimateResponse() {
  // @@protoc_insertion_point(destructor:grpcITrackablePose.estimateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void estimateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pose_.Destroy();
}

void estimateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void estimateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:grpcITrackablePose.estimateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_.ClearToEmpty();
  xpcfgrpcreturnvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* estimateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pose();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 xpcfGrpcReturnValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          xpcfgrpcreturnvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* estimateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grpcITrackablePose.estimateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pose = 1;
  if (!this->_internal_pose().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pose(), target);
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_xpcfgrpcreturnvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grpcITrackablePose.estimateResponse)
  return target;
}

size_t estimateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grpcITrackablePose.estimateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pose = 1;
  if (!this->_internal_pose().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pose());
  }

  // sint32 xpcfGrpcReturnValue = 2;
  if (this->_internal_xpcfgrpcreturnvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_xpcfgrpcreturnvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData estimateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    estimateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*estimateResponse::GetClassData() const { return &_class_data_; }

void estimateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<estimateResponse *>(to)->MergeFrom(
      static_cast<const estimateResponse &>(from));
}


void estimateResponse::MergeFrom(const estimateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grpcITrackablePose.estimateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pose().empty()) {
    _internal_set_pose(from._internal_pose());
  }
  if (from._internal_xpcfgrpcreturnvalue() != 0) {
    _internal_set_xpcfgrpcreturnvalue(from._internal_xpcfgrpcreturnvalue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void estimateResponse::CopyFrom(const estimateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grpcITrackablePose.estimateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool estimateResponse::IsInitialized() const {
  return true;
}

void estimateResponse::InternalSwap(estimateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pose_, lhs_arena,
      &other->pose_, rhs_arena
  );
  swap(xpcfgrpcreturnvalue_, other->xpcfgrpcreturnvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata estimateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_grpcITrackablePoseService_2eproto_getter, &descriptor_table_grpcITrackablePoseService_2eproto_once,
      file_level_metadata_grpcITrackablePoseService_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpcITrackablePose
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grpcITrackablePose::setTrackableRequest*
Arena::CreateMaybeMessage< ::grpcITrackablePose::setTrackableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITrackablePose::setTrackableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcITrackablePose::setTrackableResponse*
Arena::CreateMaybeMessage< ::grpcITrackablePose::setTrackableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITrackablePose::setTrackableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcITrackablePose::estimateRequest*
Arena::CreateMaybeMessage< ::grpcITrackablePose::estimateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITrackablePose::estimateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::grpcITrackablePose::estimateResponse*
Arena::CreateMaybeMessage< ::grpcITrackablePose::estimateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grpcITrackablePose::estimateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
