// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcITrackingService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcITrackingService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcITrackingService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcITrackingService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcITrackingService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcITrackingService_2eproto;
namespace grpcITracking {
class checkNeedNewKeyframeRequest;
struct checkNeedNewKeyframeRequestDefaultTypeInternal;
extern checkNeedNewKeyframeRequestDefaultTypeInternal _checkNeedNewKeyframeRequest_default_instance_;
class checkNeedNewKeyframeResponse;
struct checkNeedNewKeyframeResponseDefaultTypeInternal;
extern checkNeedNewKeyframeResponseDefaultTypeInternal _checkNeedNewKeyframeResponse_default_instance_;
class processRequest;
struct processRequestDefaultTypeInternal;
extern processRequestDefaultTypeInternal _processRequest_default_instance_;
class processResponse;
struct processResponseDefaultTypeInternal;
extern processResponseDefaultTypeInternal _processResponse_default_instance_;
class setNewKeyframeRequest;
struct setNewKeyframeRequestDefaultTypeInternal;
extern setNewKeyframeRequestDefaultTypeInternal _setNewKeyframeRequest_default_instance_;
}  // namespace grpcITracking
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcITracking::checkNeedNewKeyframeRequest* Arena::CreateMaybeMessage<::grpcITracking::checkNeedNewKeyframeRequest>(Arena*);
template<> ::grpcITracking::checkNeedNewKeyframeResponse* Arena::CreateMaybeMessage<::grpcITracking::checkNeedNewKeyframeResponse>(Arena*);
template<> ::grpcITracking::processRequest* Arena::CreateMaybeMessage<::grpcITracking::processRequest>(Arena*);
template<> ::grpcITracking::processResponse* Arena::CreateMaybeMessage<::grpcITracking::processResponse>(Arena*);
template<> ::grpcITracking::setNewKeyframeRequest* Arena::CreateMaybeMessage<::grpcITracking::setNewKeyframeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcITracking {

// ===================================================================

class setNewKeyframeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITracking.setNewKeyframeRequest) */ {
 public:
  inline setNewKeyframeRequest() : setNewKeyframeRequest(nullptr) {}
  ~setNewKeyframeRequest() override;
  explicit PROTOBUF_CONSTEXPR setNewKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  setNewKeyframeRequest(const setNewKeyframeRequest& from);
  setNewKeyframeRequest(setNewKeyframeRequest&& from) noexcept
    : setNewKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline setNewKeyframeRequest& operator=(const setNewKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline setNewKeyframeRequest& operator=(setNewKeyframeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const setNewKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const setNewKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const setNewKeyframeRequest*>(
               &_setNewKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(setNewKeyframeRequest& a, setNewKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(setNewKeyframeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(setNewKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  setNewKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<setNewKeyframeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const setNewKeyframeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const setNewKeyframeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(setNewKeyframeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITracking.setNewKeyframeRequest";
  }
  protected:
  explicit setNewKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewKeyframeFieldNumber = 1,
  };
  // bytes newKeyframe = 1;
  void clear_newkeyframe();
  const std::string& newkeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_newkeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_newkeyframe();
  PROTOBUF_NODISCARD std::string* release_newkeyframe();
  void set_allocated_newkeyframe(std::string* newkeyframe);
  private:
  const std::string& _internal_newkeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newkeyframe(const std::string& value);
  std::string* _internal_mutable_newkeyframe();
  public:

  // @@protoc_insertion_point(class_scope:grpcITracking.setNewKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newkeyframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITrackingService_2eproto;
};
// -------------------------------------------------------------------

class checkNeedNewKeyframeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITracking.checkNeedNewKeyframeRequest) */ {
 public:
  inline checkNeedNewKeyframeRequest() : checkNeedNewKeyframeRequest(nullptr) {}
  ~checkNeedNewKeyframeRequest() override;
  explicit PROTOBUF_CONSTEXPR checkNeedNewKeyframeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  checkNeedNewKeyframeRequest(const checkNeedNewKeyframeRequest& from);
  checkNeedNewKeyframeRequest(checkNeedNewKeyframeRequest&& from) noexcept
    : checkNeedNewKeyframeRequest() {
    *this = ::std::move(from);
  }

  inline checkNeedNewKeyframeRequest& operator=(const checkNeedNewKeyframeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline checkNeedNewKeyframeRequest& operator=(checkNeedNewKeyframeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const checkNeedNewKeyframeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const checkNeedNewKeyframeRequest* internal_default_instance() {
    return reinterpret_cast<const checkNeedNewKeyframeRequest*>(
               &_checkNeedNewKeyframeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(checkNeedNewKeyframeRequest& a, checkNeedNewKeyframeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(checkNeedNewKeyframeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(checkNeedNewKeyframeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  checkNeedNewKeyframeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<checkNeedNewKeyframeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const checkNeedNewKeyframeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const checkNeedNewKeyframeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(checkNeedNewKeyframeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITracking.checkNeedNewKeyframeRequest";
  }
  protected:
  explicit checkNeedNewKeyframeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITracking.checkNeedNewKeyframeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITrackingService_2eproto;
};
// -------------------------------------------------------------------

class checkNeedNewKeyframeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITracking.checkNeedNewKeyframeResponse) */ {
 public:
  inline checkNeedNewKeyframeResponse() : checkNeedNewKeyframeResponse(nullptr) {}
  ~checkNeedNewKeyframeResponse() override;
  explicit PROTOBUF_CONSTEXPR checkNeedNewKeyframeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  checkNeedNewKeyframeResponse(const checkNeedNewKeyframeResponse& from);
  checkNeedNewKeyframeResponse(checkNeedNewKeyframeResponse&& from) noexcept
    : checkNeedNewKeyframeResponse() {
    *this = ::std::move(from);
  }

  inline checkNeedNewKeyframeResponse& operator=(const checkNeedNewKeyframeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline checkNeedNewKeyframeResponse& operator=(checkNeedNewKeyframeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const checkNeedNewKeyframeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const checkNeedNewKeyframeResponse* internal_default_instance() {
    return reinterpret_cast<const checkNeedNewKeyframeResponse*>(
               &_checkNeedNewKeyframeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(checkNeedNewKeyframeResponse& a, checkNeedNewKeyframeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(checkNeedNewKeyframeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(checkNeedNewKeyframeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  checkNeedNewKeyframeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<checkNeedNewKeyframeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const checkNeedNewKeyframeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const checkNeedNewKeyframeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(checkNeedNewKeyframeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITracking.checkNeedNewKeyframeResponse";
  }
  protected:
  explicit checkNeedNewKeyframeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXpcfGrpcReturnValueFieldNumber = 1,
  };
  // bool xpcfGrpcReturnValue = 1;
  void clear_xpcfgrpcreturnvalue();
  bool xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(bool value);
  private:
  bool _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(bool value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITracking.checkNeedNewKeyframeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITrackingService_2eproto;
};
// -------------------------------------------------------------------

class processRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITracking.processRequest) */ {
 public:
  inline processRequest() : processRequest(nullptr) {}
  ~processRequest() override;
  explicit PROTOBUF_CONSTEXPR processRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  processRequest(const processRequest& from);
  processRequest(processRequest&& from) noexcept
    : processRequest() {
    *this = ::std::move(from);
  }

  inline processRequest& operator=(const processRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline processRequest& operator=(processRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const processRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const processRequest* internal_default_instance() {
    return reinterpret_cast<const processRequest*>(
               &_processRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(processRequest& a, processRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(processRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(processRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  processRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<processRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const processRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const processRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(processRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITracking.processRequest";
  }
  protected:
  explicit processRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kDisplayImageFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes frame = 2;
  void clear_frame();
  const std::string& frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame();
  PROTOBUF_NODISCARD std::string* release_frame();
  void set_allocated_frame(std::string* frame);
  private:
  const std::string& _internal_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame(const std::string& value);
  std::string* _internal_mutable_frame();
  public:

  // bytes displayImage = 3;
  void clear_displayimage();
  const std::string& displayimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_displayimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_displayimage();
  PROTOBUF_NODISCARD std::string* release_displayimage();
  void set_allocated_displayimage(std::string* displayimage);
  private:
  const std::string& _internal_displayimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_displayimage(const std::string& value);
  std::string* _internal_mutable_displayimage();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITracking.processRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayimage_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITrackingService_2eproto;
};
// -------------------------------------------------------------------

class processResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcITracking.processResponse) */ {
 public:
  inline processResponse() : processResponse(nullptr) {}
  ~processResponse() override;
  explicit PROTOBUF_CONSTEXPR processResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  processResponse(const processResponse& from);
  processResponse(processResponse&& from) noexcept
    : processResponse() {
    *this = ::std::move(from);
  }

  inline processResponse& operator=(const processResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline processResponse& operator=(processResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const processResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const processResponse* internal_default_instance() {
    return reinterpret_cast<const processResponse*>(
               &_processResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(processResponse& a, processResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(processResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(processResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  processResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<processResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const processResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const processResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(processResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcITracking.processResponse";
  }
  protected:
  explicit processResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayImageFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes displayImage = 1;
  void clear_displayimage();
  const std::string& displayimage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_displayimage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_displayimage();
  PROTOBUF_NODISCARD std::string* release_displayimage();
  void set_allocated_displayimage(std::string* displayimage);
  private:
  const std::string& _internal_displayimage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_displayimage(const std::string& value);
  std::string* _internal_mutable_displayimage();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcITracking.processResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayimage_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcITrackingService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// setNewKeyframeRequest

// bytes newKeyframe = 1;
inline void setNewKeyframeRequest::clear_newkeyframe() {
  newkeyframe_.ClearToEmpty();
}
inline const std::string& setNewKeyframeRequest::newkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcITracking.setNewKeyframeRequest.newKeyframe)
  return _internal_newkeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void setNewKeyframeRequest::set_newkeyframe(ArgT0&& arg0, ArgT... args) {
 
 newkeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITracking.setNewKeyframeRequest.newKeyframe)
}
inline std::string* setNewKeyframeRequest::mutable_newkeyframe() {
  std::string* _s = _internal_mutable_newkeyframe();
  // @@protoc_insertion_point(field_mutable:grpcITracking.setNewKeyframeRequest.newKeyframe)
  return _s;
}
inline const std::string& setNewKeyframeRequest::_internal_newkeyframe() const {
  return newkeyframe_.Get();
}
inline void setNewKeyframeRequest::_internal_set_newkeyframe(const std::string& value) {
  
  newkeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* setNewKeyframeRequest::_internal_mutable_newkeyframe() {
  
  return newkeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* setNewKeyframeRequest::release_newkeyframe() {
  // @@protoc_insertion_point(field_release:grpcITracking.setNewKeyframeRequest.newKeyframe)
  return newkeyframe_.Release();
}
inline void setNewKeyframeRequest::set_allocated_newkeyframe(std::string* newkeyframe) {
  if (newkeyframe != nullptr) {
    
  } else {
    
  }
  newkeyframe_.SetAllocated(newkeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (newkeyframe_.IsDefault()) {
    newkeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITracking.setNewKeyframeRequest.newKeyframe)
}

// -------------------------------------------------------------------

// checkNeedNewKeyframeRequest

// int32 grpcServerCompressionFormat = 1;
inline void checkNeedNewKeyframeRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t checkNeedNewKeyframeRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t checkNeedNewKeyframeRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcITracking.checkNeedNewKeyframeRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void checkNeedNewKeyframeRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void checkNeedNewKeyframeRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcITracking.checkNeedNewKeyframeRequest.grpcServerCompressionFormat)
}

// -------------------------------------------------------------------

// checkNeedNewKeyframeResponse

// bool xpcfGrpcReturnValue = 1;
inline void checkNeedNewKeyframeResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = false;
}
inline bool checkNeedNewKeyframeResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline bool checkNeedNewKeyframeResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcITracking.checkNeedNewKeyframeResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void checkNeedNewKeyframeResponse::_internal_set_xpcfgrpcreturnvalue(bool value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void checkNeedNewKeyframeResponse::set_xpcfgrpcreturnvalue(bool value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcITracking.checkNeedNewKeyframeResponse.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// processRequest

// int32 grpcServerCompressionFormat = 1;
inline void processRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t processRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t processRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcITracking.processRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void processRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void processRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcITracking.processRequest.grpcServerCompressionFormat)
}

// bytes frame = 2;
inline void processRequest::clear_frame() {
  frame_.ClearToEmpty();
}
inline const std::string& processRequest::frame() const {
  // @@protoc_insertion_point(field_get:grpcITracking.processRequest.frame)
  return _internal_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void processRequest::set_frame(ArgT0&& arg0, ArgT... args) {
 
 frame_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITracking.processRequest.frame)
}
inline std::string* processRequest::mutable_frame() {
  std::string* _s = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:grpcITracking.processRequest.frame)
  return _s;
}
inline const std::string& processRequest::_internal_frame() const {
  return frame_.Get();
}
inline void processRequest::_internal_set_frame(const std::string& value) {
  
  frame_.Set(value, GetArenaForAllocation());
}
inline std::string* processRequest::_internal_mutable_frame() {
  
  return frame_.Mutable(GetArenaForAllocation());
}
inline std::string* processRequest::release_frame() {
  // @@protoc_insertion_point(field_release:grpcITracking.processRequest.frame)
  return frame_.Release();
}
inline void processRequest::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    
  } else {
    
  }
  frame_.SetAllocated(frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_.IsDefault()) {
    frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITracking.processRequest.frame)
}

// bytes displayImage = 3;
inline void processRequest::clear_displayimage() {
  displayimage_.ClearToEmpty();
}
inline const std::string& processRequest::displayimage() const {
  // @@protoc_insertion_point(field_get:grpcITracking.processRequest.displayImage)
  return _internal_displayimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void processRequest::set_displayimage(ArgT0&& arg0, ArgT... args) {
 
 displayimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITracking.processRequest.displayImage)
}
inline std::string* processRequest::mutable_displayimage() {
  std::string* _s = _internal_mutable_displayimage();
  // @@protoc_insertion_point(field_mutable:grpcITracking.processRequest.displayImage)
  return _s;
}
inline const std::string& processRequest::_internal_displayimage() const {
  return displayimage_.Get();
}
inline void processRequest::_internal_set_displayimage(const std::string& value) {
  
  displayimage_.Set(value, GetArenaForAllocation());
}
inline std::string* processRequest::_internal_mutable_displayimage() {
  
  return displayimage_.Mutable(GetArenaForAllocation());
}
inline std::string* processRequest::release_displayimage() {
  // @@protoc_insertion_point(field_release:grpcITracking.processRequest.displayImage)
  return displayimage_.Release();
}
inline void processRequest::set_allocated_displayimage(std::string* displayimage) {
  if (displayimage != nullptr) {
    
  } else {
    
  }
  displayimage_.SetAllocated(displayimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (displayimage_.IsDefault()) {
    displayimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITracking.processRequest.displayImage)
}

// -------------------------------------------------------------------

// processResponse

// bytes displayImage = 1;
inline void processResponse::clear_displayimage() {
  displayimage_.ClearToEmpty();
}
inline const std::string& processResponse::displayimage() const {
  // @@protoc_insertion_point(field_get:grpcITracking.processResponse.displayImage)
  return _internal_displayimage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void processResponse::set_displayimage(ArgT0&& arg0, ArgT... args) {
 
 displayimage_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcITracking.processResponse.displayImage)
}
inline std::string* processResponse::mutable_displayimage() {
  std::string* _s = _internal_mutable_displayimage();
  // @@protoc_insertion_point(field_mutable:grpcITracking.processResponse.displayImage)
  return _s;
}
inline const std::string& processResponse::_internal_displayimage() const {
  return displayimage_.Get();
}
inline void processResponse::_internal_set_displayimage(const std::string& value) {
  
  displayimage_.Set(value, GetArenaForAllocation());
}
inline std::string* processResponse::_internal_mutable_displayimage() {
  
  return displayimage_.Mutable(GetArenaForAllocation());
}
inline std::string* processResponse::release_displayimage() {
  // @@protoc_insertion_point(field_release:grpcITracking.processResponse.displayImage)
  return displayimage_.Release();
}
inline void processResponse::set_allocated_displayimage(std::string* displayimage) {
  if (displayimage != nullptr) {
    
  } else {
    
  }
  displayimage_.SetAllocated(displayimage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (displayimage_.IsDefault()) {
    displayimage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcITracking.processResponse.displayImage)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void processResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t processResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t processResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcITracking.processResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void processResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void processResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcITracking.processResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcITracking

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcITrackingService_2eproto
