// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcI3DTransformSACFinderFrom3D3DService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcI3DTransformSACFinderFrom3D3DService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcI3DTransformSACFinderFrom3D3DService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcI3DTransformSACFinderFrom3D3DService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcI3DTransformSACFinderFrom3D3DService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcI3DTransformSACFinderFrom3D3DService_2eproto;
namespace grpcI3DTransformSACFinderFrom3D3D {
class estimate_grpc0Request;
struct estimate_grpc0RequestDefaultTypeInternal;
extern estimate_grpc0RequestDefaultTypeInternal _estimate_grpc0Request_default_instance_;
class estimate_grpc0Response;
struct estimate_grpc0ResponseDefaultTypeInternal;
extern estimate_grpc0ResponseDefaultTypeInternal _estimate_grpc0Response_default_instance_;
class estimate_grpc1Request;
struct estimate_grpc1RequestDefaultTypeInternal;
extern estimate_grpc1RequestDefaultTypeInternal _estimate_grpc1Request_default_instance_;
class estimate_grpc1Response;
struct estimate_grpc1ResponseDefaultTypeInternal;
extern estimate_grpc1ResponseDefaultTypeInternal _estimate_grpc1Response_default_instance_;
}  // namespace grpcI3DTransformSACFinderFrom3D3D
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcI3DTransformSACFinderFrom3D3D::estimate_grpc0Request* Arena::CreateMaybeMessage<::grpcI3DTransformSACFinderFrom3D3D::estimate_grpc0Request>(Arena*);
template<> ::grpcI3DTransformSACFinderFrom3D3D::estimate_grpc0Response* Arena::CreateMaybeMessage<::grpcI3DTransformSACFinderFrom3D3D::estimate_grpc0Response>(Arena*);
template<> ::grpcI3DTransformSACFinderFrom3D3D::estimate_grpc1Request* Arena::CreateMaybeMessage<::grpcI3DTransformSACFinderFrom3D3D::estimate_grpc1Request>(Arena*);
template<> ::grpcI3DTransformSACFinderFrom3D3D::estimate_grpc1Response* Arena::CreateMaybeMessage<::grpcI3DTransformSACFinderFrom3D3D::estimate_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcI3DTransformSACFinderFrom3D3D {

// ===================================================================

class estimate_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request) */ {
 public:
  inline estimate_grpc0Request() : estimate_grpc0Request(nullptr) {}
  ~estimate_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR estimate_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc0Request(const estimate_grpc0Request& from);
  estimate_grpc0Request(estimate_grpc0Request&& from) noexcept
    : estimate_grpc0Request() {
    *this = ::std::move(from);
  }

  inline estimate_grpc0Request& operator=(const estimate_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc0Request& operator=(estimate_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimate_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc0Request*>(
               &_estimate_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(estimate_grpc0Request& a, estimate_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimate_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimate_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimate_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const estimate_grpc0Request& from) {
    estimate_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request";
  }
  protected:
  explicit estimate_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstPoints3DFieldNumber = 2,
    kSecondPoints3DFieldNumber = 3,
    kPoseFieldNumber = 4,
    kInliersFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes firstPoints3D = 2;
  void clear_firstpoints3d();
  const std::string& firstpoints3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstpoints3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstpoints3d();
  PROTOBUF_NODISCARD std::string* release_firstpoints3d();
  void set_allocated_firstpoints3d(std::string* firstpoints3d);
  private:
  const std::string& _internal_firstpoints3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstpoints3d(const std::string& value);
  std::string* _internal_mutable_firstpoints3d();
  public:

  // bytes secondPoints3D = 3;
  void clear_secondpoints3d();
  const std::string& secondpoints3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondpoints3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondpoints3d();
  PROTOBUF_NODISCARD std::string* release_secondpoints3d();
  void set_allocated_secondpoints3d(std::string* secondpoints3d);
  private:
  const std::string& _internal_secondpoints3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondpoints3d(const std::string& value);
  std::string* _internal_mutable_secondpoints3d();
  public:

  // bytes pose = 4;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes inliers = 5;
  void clear_inliers();
  const std::string& inliers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inliers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inliers();
  PROTOBUF_NODISCARD std::string* release_inliers();
  void set_allocated_inliers(std::string* inliers);
  private:
  const std::string& _internal_inliers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inliers(const std::string& value);
  std::string* _internal_mutable_inliers();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstpoints3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondpoints3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inliers_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI3DTransformSACFinderFrom3D3DService_2eproto;
};
// -------------------------------------------------------------------

class estimate_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response) */ {
 public:
  inline estimate_grpc0Response() : estimate_grpc0Response(nullptr) {}
  ~estimate_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR estimate_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc0Response(const estimate_grpc0Response& from);
  estimate_grpc0Response(estimate_grpc0Response&& from) noexcept
    : estimate_grpc0Response() {
    *this = ::std::move(from);
  }

  inline estimate_grpc0Response& operator=(const estimate_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc0Response& operator=(estimate_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimate_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc0Response*>(
               &_estimate_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(estimate_grpc0Response& a, estimate_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimate_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimate_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimate_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const estimate_grpc0Response& from) {
    estimate_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response";
  }
  protected:
  explicit estimate_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kInliersFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes pose = 1;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes inliers = 2;
  void clear_inliers();
  const std::string& inliers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inliers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inliers();
  PROTOBUF_NODISCARD std::string* release_inliers();
  void set_allocated_inliers(std::string* inliers);
  private:
  const std::string& _internal_inliers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inliers(const std::string& value);
  std::string* _internal_mutable_inliers();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inliers_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI3DTransformSACFinderFrom3D3DService_2eproto;
};
// -------------------------------------------------------------------

class estimate_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request) */ {
 public:
  inline estimate_grpc1Request() : estimate_grpc1Request(nullptr) {}
  ~estimate_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR estimate_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc1Request(const estimate_grpc1Request& from);
  estimate_grpc1Request(estimate_grpc1Request&& from) noexcept
    : estimate_grpc1Request() {
    *this = ::std::move(from);
  }

  inline estimate_grpc1Request& operator=(const estimate_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc1Request& operator=(estimate_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimate_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc1Request*>(
               &_estimate_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(estimate_grpc1Request& a, estimate_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimate_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimate_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimate_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const estimate_grpc1Request& from) {
    estimate_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request";
  }
  protected:
  explicit estimate_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstKeyframeFieldNumber = 2,
    kSecondKeyframeFieldNumber = 3,
    kFirstCameraParametersFieldNumber = 4,
    kSecondCameraParametersFieldNumber = 5,
    kMatchesFieldNumber = 6,
    kFirstPoints3DFieldNumber = 7,
    kSecondPoints3DFieldNumber = 8,
    kPoseFieldNumber = 9,
    kInliersFieldNumber = 10,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes firstKeyframe = 2;
  void clear_firstkeyframe();
  const std::string& firstkeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstkeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstkeyframe();
  PROTOBUF_NODISCARD std::string* release_firstkeyframe();
  void set_allocated_firstkeyframe(std::string* firstkeyframe);
  private:
  const std::string& _internal_firstkeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstkeyframe(const std::string& value);
  std::string* _internal_mutable_firstkeyframe();
  public:

  // bytes secondKeyframe = 3;
  void clear_secondkeyframe();
  const std::string& secondkeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondkeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondkeyframe();
  PROTOBUF_NODISCARD std::string* release_secondkeyframe();
  void set_allocated_secondkeyframe(std::string* secondkeyframe);
  private:
  const std::string& _internal_secondkeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondkeyframe(const std::string& value);
  std::string* _internal_mutable_secondkeyframe();
  public:

  // bytes firstCameraParameters = 4;
  void clear_firstcameraparameters();
  const std::string& firstcameraparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstcameraparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstcameraparameters();
  PROTOBUF_NODISCARD std::string* release_firstcameraparameters();
  void set_allocated_firstcameraparameters(std::string* firstcameraparameters);
  private:
  const std::string& _internal_firstcameraparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstcameraparameters(const std::string& value);
  std::string* _internal_mutable_firstcameraparameters();
  public:

  // bytes secondCameraParameters = 5;
  void clear_secondcameraparameters();
  const std::string& secondcameraparameters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondcameraparameters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondcameraparameters();
  PROTOBUF_NODISCARD std::string* release_secondcameraparameters();
  void set_allocated_secondcameraparameters(std::string* secondcameraparameters);
  private:
  const std::string& _internal_secondcameraparameters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondcameraparameters(const std::string& value);
  std::string* _internal_mutable_secondcameraparameters();
  public:

  // bytes matches = 6;
  void clear_matches();
  const std::string& matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_matches();
  PROTOBUF_NODISCARD std::string* release_matches();
  void set_allocated_matches(std::string* matches);
  private:
  const std::string& _internal_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_matches(const std::string& value);
  std::string* _internal_mutable_matches();
  public:

  // bytes firstPoints3D = 7;
  void clear_firstpoints3d();
  const std::string& firstpoints3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstpoints3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstpoints3d();
  PROTOBUF_NODISCARD std::string* release_firstpoints3d();
  void set_allocated_firstpoints3d(std::string* firstpoints3d);
  private:
  const std::string& _internal_firstpoints3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstpoints3d(const std::string& value);
  std::string* _internal_mutable_firstpoints3d();
  public:

  // bytes secondPoints3D = 8;
  void clear_secondpoints3d();
  const std::string& secondpoints3d() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondpoints3d(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondpoints3d();
  PROTOBUF_NODISCARD std::string* release_secondpoints3d();
  void set_allocated_secondpoints3d(std::string* secondpoints3d);
  private:
  const std::string& _internal_secondpoints3d() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondpoints3d(const std::string& value);
  std::string* _internal_mutable_secondpoints3d();
  public:

  // bytes pose = 9;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes inliers = 10;
  void clear_inliers();
  const std::string& inliers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inliers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inliers();
  PROTOBUF_NODISCARD std::string* release_inliers();
  void set_allocated_inliers(std::string* inliers);
  private:
  const std::string& _internal_inliers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inliers(const std::string& value);
  std::string* _internal_mutable_inliers();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstkeyframe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondkeyframe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstcameraparameters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondcameraparameters_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr matches_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstpoints3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondpoints3d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inliers_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI3DTransformSACFinderFrom3D3DService_2eproto;
};
// -------------------------------------------------------------------

class estimate_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response) */ {
 public:
  inline estimate_grpc1Response() : estimate_grpc1Response(nullptr) {}
  ~estimate_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR estimate_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  estimate_grpc1Response(const estimate_grpc1Response& from);
  estimate_grpc1Response(estimate_grpc1Response&& from) noexcept
    : estimate_grpc1Response() {
    *this = ::std::move(from);
  }

  inline estimate_grpc1Response& operator=(const estimate_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline estimate_grpc1Response& operator=(estimate_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const estimate_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const estimate_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const estimate_grpc1Response*>(
               &_estimate_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(estimate_grpc1Response& a, estimate_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(estimate_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(estimate_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  estimate_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<estimate_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const estimate_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const estimate_grpc1Response& from) {
    estimate_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(estimate_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response";
  }
  protected:
  explicit estimate_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kInliersFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes pose = 1;
  void clear_pose();
  const std::string& pose() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pose(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pose();
  PROTOBUF_NODISCARD std::string* release_pose();
  void set_allocated_pose(std::string* pose);
  private:
  const std::string& _internal_pose() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pose(const std::string& value);
  std::string* _internal_mutable_pose();
  public:

  // bytes inliers = 2;
  void clear_inliers();
  const std::string& inliers() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inliers(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inliers();
  PROTOBUF_NODISCARD std::string* release_inliers();
  void set_allocated_inliers(std::string* inliers);
  private:
  const std::string& _internal_inliers() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inliers(const std::string& value);
  std::string* _internal_mutable_inliers();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pose_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inliers_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI3DTransformSACFinderFrom3D3DService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// estimate_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void estimate_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t estimate_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t estimate_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void estimate_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void estimate_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.grpcServerCompressionFormat)
}

// bytes firstPoints3D = 2;
inline void estimate_grpc0Request::clear_firstpoints3d() {
  _impl_.firstpoints3d_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::firstpoints3d() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.firstPoints3D)
  return _internal_firstpoints3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_firstpoints3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstpoints3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.firstPoints3D)
}
inline std::string* estimate_grpc0Request::mutable_firstpoints3d() {
  std::string* _s = _internal_mutable_firstpoints3d();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.firstPoints3D)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_firstpoints3d() const {
  return _impl_.firstpoints3d_.Get();
}
inline void estimate_grpc0Request::_internal_set_firstpoints3d(const std::string& value) {
  
  _impl_.firstpoints3d_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_firstpoints3d() {
  
  return _impl_.firstpoints3d_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_firstpoints3d() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.firstPoints3D)
  return _impl_.firstpoints3d_.Release();
}
inline void estimate_grpc0Request::set_allocated_firstpoints3d(std::string* firstpoints3d) {
  if (firstpoints3d != nullptr) {
    
  } else {
    
  }
  _impl_.firstpoints3d_.SetAllocated(firstpoints3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstpoints3d_.IsDefault()) {
    _impl_.firstpoints3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.firstPoints3D)
}

// bytes secondPoints3D = 3;
inline void estimate_grpc0Request::clear_secondpoints3d() {
  _impl_.secondpoints3d_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::secondpoints3d() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.secondPoints3D)
  return _internal_secondpoints3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_secondpoints3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondpoints3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.secondPoints3D)
}
inline std::string* estimate_grpc0Request::mutable_secondpoints3d() {
  std::string* _s = _internal_mutable_secondpoints3d();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.secondPoints3D)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_secondpoints3d() const {
  return _impl_.secondpoints3d_.Get();
}
inline void estimate_grpc0Request::_internal_set_secondpoints3d(const std::string& value) {
  
  _impl_.secondpoints3d_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_secondpoints3d() {
  
  return _impl_.secondpoints3d_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_secondpoints3d() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.secondPoints3D)
  return _impl_.secondpoints3d_.Release();
}
inline void estimate_grpc0Request::set_allocated_secondpoints3d(std::string* secondpoints3d) {
  if (secondpoints3d != nullptr) {
    
  } else {
    
  }
  _impl_.secondpoints3d_.SetAllocated(secondpoints3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondpoints3d_.IsDefault()) {
    _impl_.secondpoints3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.secondPoints3D)
}

// bytes pose = 4;
inline void estimate_grpc0Request::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::pose() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.pose)
}
inline std::string* estimate_grpc0Request::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.pose)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void estimate_grpc0Request::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_pose() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.pose)
  return _impl_.pose_.Release();
}
inline void estimate_grpc0Request::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.pose)
}

// bytes inliers = 5;
inline void estimate_grpc0Request::clear_inliers() {
  _impl_.inliers_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Request::inliers() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.inliers)
  return _internal_inliers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Request::set_inliers(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inliers_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.inliers)
}
inline std::string* estimate_grpc0Request::mutable_inliers() {
  std::string* _s = _internal_mutable_inliers();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.inliers)
  return _s;
}
inline const std::string& estimate_grpc0Request::_internal_inliers() const {
  return _impl_.inliers_.Get();
}
inline void estimate_grpc0Request::_internal_set_inliers(const std::string& value) {
  
  _impl_.inliers_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::_internal_mutable_inliers() {
  
  return _impl_.inliers_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Request::release_inliers() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.inliers)
  return _impl_.inliers_.Release();
}
inline void estimate_grpc0Request::set_allocated_inliers(std::string* inliers) {
  if (inliers != nullptr) {
    
  } else {
    
  }
  _impl_.inliers_.SetAllocated(inliers, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inliers_.IsDefault()) {
    _impl_.inliers_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Request.inliers)
}

// -------------------------------------------------------------------

// estimate_grpc0Response

// bytes pose = 1;
inline void estimate_grpc0Response::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Response::pose() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Response::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.pose)
}
inline std::string* estimate_grpc0Response::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.pose)
  return _s;
}
inline const std::string& estimate_grpc0Response::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void estimate_grpc0Response::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::release_pose() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.pose)
  return _impl_.pose_.Release();
}
inline void estimate_grpc0Response::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.pose)
}

// bytes inliers = 2;
inline void estimate_grpc0Response::clear_inliers() {
  _impl_.inliers_.ClearToEmpty();
}
inline const std::string& estimate_grpc0Response::inliers() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.inliers)
  return _internal_inliers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc0Response::set_inliers(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inliers_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.inliers)
}
inline std::string* estimate_grpc0Response::mutable_inliers() {
  std::string* _s = _internal_mutable_inliers();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.inliers)
  return _s;
}
inline const std::string& estimate_grpc0Response::_internal_inliers() const {
  return _impl_.inliers_.Get();
}
inline void estimate_grpc0Response::_internal_set_inliers(const std::string& value) {
  
  _impl_.inliers_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::_internal_mutable_inliers() {
  
  return _impl_.inliers_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc0Response::release_inliers() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.inliers)
  return _impl_.inliers_.Release();
}
inline void estimate_grpc0Response::set_allocated_inliers(std::string* inliers) {
  if (inliers != nullptr) {
    
  } else {
    
  }
  _impl_.inliers_.SetAllocated(inliers, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inliers_.IsDefault()) {
    _impl_.inliers_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.inliers)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void estimate_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t estimate_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t estimate_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void estimate_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void estimate_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// estimate_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void estimate_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t estimate_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t estimate_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void estimate_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void estimate_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.grpcServerCompressionFormat)
}

// bytes firstKeyframe = 2;
inline void estimate_grpc1Request::clear_firstkeyframe() {
  _impl_.firstkeyframe_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::firstkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstKeyframe)
  return _internal_firstkeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_firstkeyframe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstkeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstKeyframe)
}
inline std::string* estimate_grpc1Request::mutable_firstkeyframe() {
  std::string* _s = _internal_mutable_firstkeyframe();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstKeyframe)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_firstkeyframe() const {
  return _impl_.firstkeyframe_.Get();
}
inline void estimate_grpc1Request::_internal_set_firstkeyframe(const std::string& value) {
  
  _impl_.firstkeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_firstkeyframe() {
  
  return _impl_.firstkeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_firstkeyframe() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstKeyframe)
  return _impl_.firstkeyframe_.Release();
}
inline void estimate_grpc1Request::set_allocated_firstkeyframe(std::string* firstkeyframe) {
  if (firstkeyframe != nullptr) {
    
  } else {
    
  }
  _impl_.firstkeyframe_.SetAllocated(firstkeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstkeyframe_.IsDefault()) {
    _impl_.firstkeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstKeyframe)
}

// bytes secondKeyframe = 3;
inline void estimate_grpc1Request::clear_secondkeyframe() {
  _impl_.secondkeyframe_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::secondkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondKeyframe)
  return _internal_secondkeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_secondkeyframe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondkeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondKeyframe)
}
inline std::string* estimate_grpc1Request::mutable_secondkeyframe() {
  std::string* _s = _internal_mutable_secondkeyframe();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondKeyframe)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_secondkeyframe() const {
  return _impl_.secondkeyframe_.Get();
}
inline void estimate_grpc1Request::_internal_set_secondkeyframe(const std::string& value) {
  
  _impl_.secondkeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_secondkeyframe() {
  
  return _impl_.secondkeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_secondkeyframe() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondKeyframe)
  return _impl_.secondkeyframe_.Release();
}
inline void estimate_grpc1Request::set_allocated_secondkeyframe(std::string* secondkeyframe) {
  if (secondkeyframe != nullptr) {
    
  } else {
    
  }
  _impl_.secondkeyframe_.SetAllocated(secondkeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondkeyframe_.IsDefault()) {
    _impl_.secondkeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondKeyframe)
}

// bytes firstCameraParameters = 4;
inline void estimate_grpc1Request::clear_firstcameraparameters() {
  _impl_.firstcameraparameters_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::firstcameraparameters() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstCameraParameters)
  return _internal_firstcameraparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_firstcameraparameters(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstcameraparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstCameraParameters)
}
inline std::string* estimate_grpc1Request::mutable_firstcameraparameters() {
  std::string* _s = _internal_mutable_firstcameraparameters();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstCameraParameters)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_firstcameraparameters() const {
  return _impl_.firstcameraparameters_.Get();
}
inline void estimate_grpc1Request::_internal_set_firstcameraparameters(const std::string& value) {
  
  _impl_.firstcameraparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_firstcameraparameters() {
  
  return _impl_.firstcameraparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_firstcameraparameters() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstCameraParameters)
  return _impl_.firstcameraparameters_.Release();
}
inline void estimate_grpc1Request::set_allocated_firstcameraparameters(std::string* firstcameraparameters) {
  if (firstcameraparameters != nullptr) {
    
  } else {
    
  }
  _impl_.firstcameraparameters_.SetAllocated(firstcameraparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstcameraparameters_.IsDefault()) {
    _impl_.firstcameraparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstCameraParameters)
}

// bytes secondCameraParameters = 5;
inline void estimate_grpc1Request::clear_secondcameraparameters() {
  _impl_.secondcameraparameters_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::secondcameraparameters() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondCameraParameters)
  return _internal_secondcameraparameters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_secondcameraparameters(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondcameraparameters_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondCameraParameters)
}
inline std::string* estimate_grpc1Request::mutable_secondcameraparameters() {
  std::string* _s = _internal_mutable_secondcameraparameters();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondCameraParameters)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_secondcameraparameters() const {
  return _impl_.secondcameraparameters_.Get();
}
inline void estimate_grpc1Request::_internal_set_secondcameraparameters(const std::string& value) {
  
  _impl_.secondcameraparameters_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_secondcameraparameters() {
  
  return _impl_.secondcameraparameters_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_secondcameraparameters() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondCameraParameters)
  return _impl_.secondcameraparameters_.Release();
}
inline void estimate_grpc1Request::set_allocated_secondcameraparameters(std::string* secondcameraparameters) {
  if (secondcameraparameters != nullptr) {
    
  } else {
    
  }
  _impl_.secondcameraparameters_.SetAllocated(secondcameraparameters, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondcameraparameters_.IsDefault()) {
    _impl_.secondcameraparameters_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondCameraParameters)
}

// bytes matches = 6;
inline void estimate_grpc1Request::clear_matches() {
  _impl_.matches_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::matches() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.matches)
  return _internal_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.matches)
}
inline std::string* estimate_grpc1Request::mutable_matches() {
  std::string* _s = _internal_mutable_matches();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.matches)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_matches() const {
  return _impl_.matches_.Get();
}
inline void estimate_grpc1Request::_internal_set_matches(const std::string& value) {
  
  _impl_.matches_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_matches() {
  
  return _impl_.matches_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_matches() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.matches)
  return _impl_.matches_.Release();
}
inline void estimate_grpc1Request::set_allocated_matches(std::string* matches) {
  if (matches != nullptr) {
    
  } else {
    
  }
  _impl_.matches_.SetAllocated(matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.matches_.IsDefault()) {
    _impl_.matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.matches)
}

// bytes firstPoints3D = 7;
inline void estimate_grpc1Request::clear_firstpoints3d() {
  _impl_.firstpoints3d_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::firstpoints3d() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstPoints3D)
  return _internal_firstpoints3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_firstpoints3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstpoints3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstPoints3D)
}
inline std::string* estimate_grpc1Request::mutable_firstpoints3d() {
  std::string* _s = _internal_mutable_firstpoints3d();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstPoints3D)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_firstpoints3d() const {
  return _impl_.firstpoints3d_.Get();
}
inline void estimate_grpc1Request::_internal_set_firstpoints3d(const std::string& value) {
  
  _impl_.firstpoints3d_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_firstpoints3d() {
  
  return _impl_.firstpoints3d_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_firstpoints3d() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstPoints3D)
  return _impl_.firstpoints3d_.Release();
}
inline void estimate_grpc1Request::set_allocated_firstpoints3d(std::string* firstpoints3d) {
  if (firstpoints3d != nullptr) {
    
  } else {
    
  }
  _impl_.firstpoints3d_.SetAllocated(firstpoints3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstpoints3d_.IsDefault()) {
    _impl_.firstpoints3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.firstPoints3D)
}

// bytes secondPoints3D = 8;
inline void estimate_grpc1Request::clear_secondpoints3d() {
  _impl_.secondpoints3d_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::secondpoints3d() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondPoints3D)
  return _internal_secondpoints3d();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_secondpoints3d(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondpoints3d_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondPoints3D)
}
inline std::string* estimate_grpc1Request::mutable_secondpoints3d() {
  std::string* _s = _internal_mutable_secondpoints3d();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondPoints3D)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_secondpoints3d() const {
  return _impl_.secondpoints3d_.Get();
}
inline void estimate_grpc1Request::_internal_set_secondpoints3d(const std::string& value) {
  
  _impl_.secondpoints3d_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_secondpoints3d() {
  
  return _impl_.secondpoints3d_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_secondpoints3d() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondPoints3D)
  return _impl_.secondpoints3d_.Release();
}
inline void estimate_grpc1Request::set_allocated_secondpoints3d(std::string* secondpoints3d) {
  if (secondpoints3d != nullptr) {
    
  } else {
    
  }
  _impl_.secondpoints3d_.SetAllocated(secondpoints3d, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondpoints3d_.IsDefault()) {
    _impl_.secondpoints3d_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.secondPoints3D)
}

// bytes pose = 9;
inline void estimate_grpc1Request::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::pose() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.pose)
}
inline std::string* estimate_grpc1Request::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.pose)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void estimate_grpc1Request::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_pose() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.pose)
  return _impl_.pose_.Release();
}
inline void estimate_grpc1Request::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.pose)
}

// bytes inliers = 10;
inline void estimate_grpc1Request::clear_inliers() {
  _impl_.inliers_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Request::inliers() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.inliers)
  return _internal_inliers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Request::set_inliers(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inliers_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.inliers)
}
inline std::string* estimate_grpc1Request::mutable_inliers() {
  std::string* _s = _internal_mutable_inliers();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.inliers)
  return _s;
}
inline const std::string& estimate_grpc1Request::_internal_inliers() const {
  return _impl_.inliers_.Get();
}
inline void estimate_grpc1Request::_internal_set_inliers(const std::string& value) {
  
  _impl_.inliers_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::_internal_mutable_inliers() {
  
  return _impl_.inliers_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Request::release_inliers() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.inliers)
  return _impl_.inliers_.Release();
}
inline void estimate_grpc1Request::set_allocated_inliers(std::string* inliers) {
  if (inliers != nullptr) {
    
  } else {
    
  }
  _impl_.inliers_.SetAllocated(inliers, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inliers_.IsDefault()) {
    _impl_.inliers_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Request.inliers)
}

// -------------------------------------------------------------------

// estimate_grpc1Response

// bytes pose = 1;
inline void estimate_grpc1Response::clear_pose() {
  _impl_.pose_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Response::pose() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.pose)
  return _internal_pose();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Response::set_pose(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pose_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.pose)
}
inline std::string* estimate_grpc1Response::mutable_pose() {
  std::string* _s = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.pose)
  return _s;
}
inline const std::string& estimate_grpc1Response::_internal_pose() const {
  return _impl_.pose_.Get();
}
inline void estimate_grpc1Response::_internal_set_pose(const std::string& value) {
  
  _impl_.pose_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::_internal_mutable_pose() {
  
  return _impl_.pose_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::release_pose() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.pose)
  return _impl_.pose_.Release();
}
inline void estimate_grpc1Response::set_allocated_pose(std::string* pose) {
  if (pose != nullptr) {
    
  } else {
    
  }
  _impl_.pose_.SetAllocated(pose, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pose_.IsDefault()) {
    _impl_.pose_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.pose)
}

// bytes inliers = 2;
inline void estimate_grpc1Response::clear_inliers() {
  _impl_.inliers_.ClearToEmpty();
}
inline const std::string& estimate_grpc1Response::inliers() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.inliers)
  return _internal_inliers();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void estimate_grpc1Response::set_inliers(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inliers_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.inliers)
}
inline std::string* estimate_grpc1Response::mutable_inliers() {
  std::string* _s = _internal_mutable_inliers();
  // @@protoc_insertion_point(field_mutable:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.inliers)
  return _s;
}
inline const std::string& estimate_grpc1Response::_internal_inliers() const {
  return _impl_.inliers_.Get();
}
inline void estimate_grpc1Response::_internal_set_inliers(const std::string& value) {
  
  _impl_.inliers_.Set(value, GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::_internal_mutable_inliers() {
  
  return _impl_.inliers_.Mutable(GetArenaForAllocation());
}
inline std::string* estimate_grpc1Response::release_inliers() {
  // @@protoc_insertion_point(field_release:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.inliers)
  return _impl_.inliers_.Release();
}
inline void estimate_grpc1Response::set_allocated_inliers(std::string* inliers) {
  if (inliers != nullptr) {
    
  } else {
    
  }
  _impl_.inliers_.SetAllocated(inliers, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inliers_.IsDefault()) {
    _impl_.inliers_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.inliers)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void estimate_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t estimate_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t estimate_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void estimate_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void estimate_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI3DTransformSACFinderFrom3D3D.estimate_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcI3DTransformSACFinderFrom3D3D

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcI3DTransformSACFinderFrom3D3DService_2eproto
