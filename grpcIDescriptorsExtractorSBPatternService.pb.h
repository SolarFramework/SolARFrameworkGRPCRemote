// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIDescriptorsExtractorSBPatternService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIDescriptorsExtractorSBPatternService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIDescriptorsExtractorSBPatternService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIDescriptorsExtractorSBPatternService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIDescriptorsExtractorSBPatternService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIDescriptorsExtractorSBPatternService_2eproto;
namespace grpcIDescriptorsExtractorSBPattern {
class extract_grpc0Request;
struct extract_grpc0RequestDefaultTypeInternal;
extern extract_grpc0RequestDefaultTypeInternal _extract_grpc0Request_default_instance_;
class extract_grpc0Response;
struct extract_grpc0ResponseDefaultTypeInternal;
extern extract_grpc0ResponseDefaultTypeInternal _extract_grpc0Response_default_instance_;
class extract_grpc1Request;
struct extract_grpc1RequestDefaultTypeInternal;
extern extract_grpc1RequestDefaultTypeInternal _extract_grpc1Request_default_instance_;
class extract_grpc1Response;
struct extract_grpc1ResponseDefaultTypeInternal;
extern extract_grpc1ResponseDefaultTypeInternal _extract_grpc1Response_default_instance_;
}  // namespace grpcIDescriptorsExtractorSBPattern
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIDescriptorsExtractorSBPattern::extract_grpc0Request* Arena::CreateMaybeMessage<::grpcIDescriptorsExtractorSBPattern::extract_grpc0Request>(Arena*);
template<> ::grpcIDescriptorsExtractorSBPattern::extract_grpc0Response* Arena::CreateMaybeMessage<::grpcIDescriptorsExtractorSBPattern::extract_grpc0Response>(Arena*);
template<> ::grpcIDescriptorsExtractorSBPattern::extract_grpc1Request* Arena::CreateMaybeMessage<::grpcIDescriptorsExtractorSBPattern::extract_grpc1Request>(Arena*);
template<> ::grpcIDescriptorsExtractorSBPattern::extract_grpc1Response* Arena::CreateMaybeMessage<::grpcIDescriptorsExtractorSBPattern::extract_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIDescriptorsExtractorSBPattern {

// ===================================================================

class extract_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request) */ {
 public:
  inline extract_grpc0Request() : extract_grpc0Request(nullptr) {}
  ~extract_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR extract_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  extract_grpc0Request(const extract_grpc0Request& from);
  extract_grpc0Request(extract_grpc0Request&& from) noexcept
    : extract_grpc0Request() {
    *this = ::std::move(from);
  }

  inline extract_grpc0Request& operator=(const extract_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline extract_grpc0Request& operator=(extract_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const extract_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const extract_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const extract_grpc0Request*>(
               &_extract_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(extract_grpc0Request& a, extract_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(extract_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(extract_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  extract_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<extract_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const extract_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const extract_grpc0Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(extract_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorsExtractorSBPattern.extract_grpc0Request";
  }
  protected:
  explicit extract_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kInContoursFieldNumber = 3,
    kDescriptorsFieldNumber = 4,
    kOutContoursFieldNumber = 5,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes images = 2;
  void clear_images();
  const std::string& images() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_images(ArgT0&& arg0, ArgT... args);
  std::string* mutable_images();
  PROTOBUF_NODISCARD std::string* release_images();
  void set_allocated_images(std::string* images);
  private:
  const std::string& _internal_images() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_images(const std::string& value);
  std::string* _internal_mutable_images();
  public:

  // bytes inContours = 3;
  void clear_incontours();
  const std::string& incontours() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_incontours(ArgT0&& arg0, ArgT... args);
  std::string* mutable_incontours();
  PROTOBUF_NODISCARD std::string* release_incontours();
  void set_allocated_incontours(std::string* incontours);
  private:
  const std::string& _internal_incontours() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_incontours(const std::string& value);
  std::string* _internal_mutable_incontours();
  public:

  // bytes descriptors = 4;
  void clear_descriptors();
  const std::string& descriptors() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptors(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptors();
  PROTOBUF_NODISCARD std::string* release_descriptors();
  void set_allocated_descriptors(std::string* descriptors);
  private:
  const std::string& _internal_descriptors() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptors(const std::string& value);
  std::string* _internal_mutable_descriptors();
  public:

  // bytes outContours = 5;
  void clear_outcontours();
  const std::string& outcontours() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outcontours(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outcontours();
  PROTOBUF_NODISCARD std::string* release_outcontours();
  void set_allocated_outcontours(std::string* outcontours);
  private:
  const std::string& _internal_outcontours() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outcontours(const std::string& value);
  std::string* _internal_mutable_outcontours();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr incontours_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outcontours_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorsExtractorSBPatternService_2eproto;
};
// -------------------------------------------------------------------

class extract_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response) */ {
 public:
  inline extract_grpc0Response() : extract_grpc0Response(nullptr) {}
  ~extract_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR extract_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  extract_grpc0Response(const extract_grpc0Response& from);
  extract_grpc0Response(extract_grpc0Response&& from) noexcept
    : extract_grpc0Response() {
    *this = ::std::move(from);
  }

  inline extract_grpc0Response& operator=(const extract_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline extract_grpc0Response& operator=(extract_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const extract_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const extract_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const extract_grpc0Response*>(
               &_extract_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(extract_grpc0Response& a, extract_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(extract_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(extract_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  extract_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<extract_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const extract_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const extract_grpc0Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(extract_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorsExtractorSBPattern.extract_grpc0Response";
  }
  protected:
  explicit extract_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorsFieldNumber = 1,
    kOutContoursFieldNumber = 2,
    kXpcfGrpcReturnValueFieldNumber = 3,
  };
  // bytes descriptors = 1;
  void clear_descriptors();
  const std::string& descriptors() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptors(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptors();
  PROTOBUF_NODISCARD std::string* release_descriptors();
  void set_allocated_descriptors(std::string* descriptors);
  private:
  const std::string& _internal_descriptors() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptors(const std::string& value);
  std::string* _internal_mutable_descriptors();
  public:

  // bytes outContours = 2;
  void clear_outcontours();
  const std::string& outcontours() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outcontours(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outcontours();
  PROTOBUF_NODISCARD std::string* release_outcontours();
  void set_allocated_outcontours(std::string* outcontours);
  private:
  const std::string& _internal_outcontours() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outcontours(const std::string& value);
  std::string* _internal_mutable_outcontours();
  public:

  // sint32 xpcfGrpcReturnValue = 3;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outcontours_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorsExtractorSBPatternService_2eproto;
};
// -------------------------------------------------------------------

class extract_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request) */ {
 public:
  inline extract_grpc1Request() : extract_grpc1Request(nullptr) {}
  ~extract_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR extract_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  extract_grpc1Request(const extract_grpc1Request& from);
  extract_grpc1Request(extract_grpc1Request&& from) noexcept
    : extract_grpc1Request() {
    *this = ::std::move(from);
  }

  inline extract_grpc1Request& operator=(const extract_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline extract_grpc1Request& operator=(extract_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const extract_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const extract_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const extract_grpc1Request*>(
               &_extract_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(extract_grpc1Request& a, extract_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(extract_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(extract_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  extract_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<extract_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const extract_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const extract_grpc1Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(extract_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorsExtractorSBPattern.extract_grpc1Request";
  }
  protected:
  explicit extract_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 2,
    kDescriptorParamFieldNumber = 3,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes pattern = 2;
  void clear_pattern();
  const std::string& pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pattern();
  PROTOBUF_NODISCARD std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // bytes descriptorParam = 3;
  void clear_descriptorparam();
  const std::string& descriptorparam() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptorparam(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptorparam();
  PROTOBUF_NODISCARD std::string* release_descriptorparam();
  void set_allocated_descriptorparam(std::string* descriptorparam);
  private:
  const std::string& _internal_descriptorparam() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptorparam(const std::string& value);
  std::string* _internal_mutable_descriptorparam();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptorparam_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorsExtractorSBPatternService_2eproto;
};
// -------------------------------------------------------------------

class extract_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIDescriptorsExtractorSBPattern.extract_grpc1Response) */ {
 public:
  inline extract_grpc1Response() : extract_grpc1Response(nullptr) {}
  ~extract_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR extract_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  extract_grpc1Response(const extract_grpc1Response& from);
  extract_grpc1Response(extract_grpc1Response&& from) noexcept
    : extract_grpc1Response() {
    *this = ::std::move(from);
  }

  inline extract_grpc1Response& operator=(const extract_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline extract_grpc1Response& operator=(extract_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const extract_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const extract_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const extract_grpc1Response*>(
               &_extract_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(extract_grpc1Response& a, extract_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(extract_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(extract_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  extract_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<extract_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const extract_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const extract_grpc1Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(extract_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIDescriptorsExtractorSBPattern.extract_grpc1Response";
  }
  protected:
  explicit extract_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorParamFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes descriptorParam = 1;
  void clear_descriptorparam();
  const std::string& descriptorparam() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_descriptorparam(ArgT0&& arg0, ArgT... args);
  std::string* mutable_descriptorparam();
  PROTOBUF_NODISCARD std::string* release_descriptorparam();
  void set_allocated_descriptorparam(std::string* descriptorparam);
  private:
  const std::string& _internal_descriptorparam() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_descriptorparam(const std::string& value);
  std::string* _internal_mutable_descriptorparam();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIDescriptorsExtractorSBPattern.extract_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr descriptorparam_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIDescriptorsExtractorSBPatternService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// extract_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void extract_grpc0Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t extract_grpc0Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t extract_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void extract_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void extract_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.grpcServerCompressionFormat)
}

// bytes images = 2;
inline void extract_grpc0Request::clear_images() {
  images_.ClearToEmpty();
}
inline const std::string& extract_grpc0Request::images() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.images)
  return _internal_images();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void extract_grpc0Request::set_images(ArgT0&& arg0, ArgT... args) {
 
 images_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.images)
}
inline std::string* extract_grpc0Request::mutable_images() {
  std::string* _s = _internal_mutable_images();
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.images)
  return _s;
}
inline const std::string& extract_grpc0Request::_internal_images() const {
  return images_.Get();
}
inline void extract_grpc0Request::_internal_set_images(const std::string& value) {
  
  images_.Set(value, GetArenaForAllocation());
}
inline std::string* extract_grpc0Request::_internal_mutable_images() {
  
  return images_.Mutable(GetArenaForAllocation());
}
inline std::string* extract_grpc0Request::release_images() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.images)
  return images_.Release();
}
inline void extract_grpc0Request::set_allocated_images(std::string* images) {
  if (images != nullptr) {
    
  } else {
    
  }
  images_.SetAllocated(images, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (images_.IsDefault()) {
    images_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.images)
}

// bytes inContours = 3;
inline void extract_grpc0Request::clear_incontours() {
  incontours_.ClearToEmpty();
}
inline const std::string& extract_grpc0Request::incontours() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.inContours)
  return _internal_incontours();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void extract_grpc0Request::set_incontours(ArgT0&& arg0, ArgT... args) {
 
 incontours_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.inContours)
}
inline std::string* extract_grpc0Request::mutable_incontours() {
  std::string* _s = _internal_mutable_incontours();
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.inContours)
  return _s;
}
inline const std::string& extract_grpc0Request::_internal_incontours() const {
  return incontours_.Get();
}
inline void extract_grpc0Request::_internal_set_incontours(const std::string& value) {
  
  incontours_.Set(value, GetArenaForAllocation());
}
inline std::string* extract_grpc0Request::_internal_mutable_incontours() {
  
  return incontours_.Mutable(GetArenaForAllocation());
}
inline std::string* extract_grpc0Request::release_incontours() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.inContours)
  return incontours_.Release();
}
inline void extract_grpc0Request::set_allocated_incontours(std::string* incontours) {
  if (incontours != nullptr) {
    
  } else {
    
  }
  incontours_.SetAllocated(incontours, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (incontours_.IsDefault()) {
    incontours_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.inContours)
}

// bytes descriptors = 4;
inline void extract_grpc0Request::clear_descriptors() {
  descriptors_.ClearToEmpty();
}
inline const std::string& extract_grpc0Request::descriptors() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.descriptors)
  return _internal_descriptors();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void extract_grpc0Request::set_descriptors(ArgT0&& arg0, ArgT... args) {
 
 descriptors_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.descriptors)
}
inline std::string* extract_grpc0Request::mutable_descriptors() {
  std::string* _s = _internal_mutable_descriptors();
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.descriptors)
  return _s;
}
inline const std::string& extract_grpc0Request::_internal_descriptors() const {
  return descriptors_.Get();
}
inline void extract_grpc0Request::_internal_set_descriptors(const std::string& value) {
  
  descriptors_.Set(value, GetArenaForAllocation());
}
inline std::string* extract_grpc0Request::_internal_mutable_descriptors() {
  
  return descriptors_.Mutable(GetArenaForAllocation());
}
inline std::string* extract_grpc0Request::release_descriptors() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.descriptors)
  return descriptors_.Release();
}
inline void extract_grpc0Request::set_allocated_descriptors(std::string* descriptors) {
  if (descriptors != nullptr) {
    
  } else {
    
  }
  descriptors_.SetAllocated(descriptors, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (descriptors_.IsDefault()) {
    descriptors_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.descriptors)
}

// bytes outContours = 5;
inline void extract_grpc0Request::clear_outcontours() {
  outcontours_.ClearToEmpty();
}
inline const std::string& extract_grpc0Request::outcontours() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.outContours)
  return _internal_outcontours();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void extract_grpc0Request::set_outcontours(ArgT0&& arg0, ArgT... args) {
 
 outcontours_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.outContours)
}
inline std::string* extract_grpc0Request::mutable_outcontours() {
  std::string* _s = _internal_mutable_outcontours();
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.outContours)
  return _s;
}
inline const std::string& extract_grpc0Request::_internal_outcontours() const {
  return outcontours_.Get();
}
inline void extract_grpc0Request::_internal_set_outcontours(const std::string& value) {
  
  outcontours_.Set(value, GetArenaForAllocation());
}
inline std::string* extract_grpc0Request::_internal_mutable_outcontours() {
  
  return outcontours_.Mutable(GetArenaForAllocation());
}
inline std::string* extract_grpc0Request::release_outcontours() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.outContours)
  return outcontours_.Release();
}
inline void extract_grpc0Request::set_allocated_outcontours(std::string* outcontours) {
  if (outcontours != nullptr) {
    
  } else {
    
  }
  outcontours_.SetAllocated(outcontours, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outcontours_.IsDefault()) {
    outcontours_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractorSBPattern.extract_grpc0Request.outContours)
}

// -------------------------------------------------------------------

// extract_grpc0Response

// bytes descriptors = 1;
inline void extract_grpc0Response::clear_descriptors() {
  descriptors_.ClearToEmpty();
}
inline const std::string& extract_grpc0Response::descriptors() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.descriptors)
  return _internal_descriptors();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void extract_grpc0Response::set_descriptors(ArgT0&& arg0, ArgT... args) {
 
 descriptors_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.descriptors)
}
inline std::string* extract_grpc0Response::mutable_descriptors() {
  std::string* _s = _internal_mutable_descriptors();
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.descriptors)
  return _s;
}
inline const std::string& extract_grpc0Response::_internal_descriptors() const {
  return descriptors_.Get();
}
inline void extract_grpc0Response::_internal_set_descriptors(const std::string& value) {
  
  descriptors_.Set(value, GetArenaForAllocation());
}
inline std::string* extract_grpc0Response::_internal_mutable_descriptors() {
  
  return descriptors_.Mutable(GetArenaForAllocation());
}
inline std::string* extract_grpc0Response::release_descriptors() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.descriptors)
  return descriptors_.Release();
}
inline void extract_grpc0Response::set_allocated_descriptors(std::string* descriptors) {
  if (descriptors != nullptr) {
    
  } else {
    
  }
  descriptors_.SetAllocated(descriptors, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (descriptors_.IsDefault()) {
    descriptors_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.descriptors)
}

// bytes outContours = 2;
inline void extract_grpc0Response::clear_outcontours() {
  outcontours_.ClearToEmpty();
}
inline const std::string& extract_grpc0Response::outcontours() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.outContours)
  return _internal_outcontours();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void extract_grpc0Response::set_outcontours(ArgT0&& arg0, ArgT... args) {
 
 outcontours_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.outContours)
}
inline std::string* extract_grpc0Response::mutable_outcontours() {
  std::string* _s = _internal_mutable_outcontours();
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.outContours)
  return _s;
}
inline const std::string& extract_grpc0Response::_internal_outcontours() const {
  return outcontours_.Get();
}
inline void extract_grpc0Response::_internal_set_outcontours(const std::string& value) {
  
  outcontours_.Set(value, GetArenaForAllocation());
}
inline std::string* extract_grpc0Response::_internal_mutable_outcontours() {
  
  return outcontours_.Mutable(GetArenaForAllocation());
}
inline std::string* extract_grpc0Response::release_outcontours() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.outContours)
  return outcontours_.Release();
}
inline void extract_grpc0Response::set_allocated_outcontours(std::string* outcontours) {
  if (outcontours != nullptr) {
    
  } else {
    
  }
  outcontours_.SetAllocated(outcontours, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outcontours_.IsDefault()) {
    outcontours_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.outContours)
}

// sint32 xpcfGrpcReturnValue = 3;
inline void extract_grpc0Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t extract_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t extract_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void extract_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void extract_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// extract_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void extract_grpc1Request::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t extract_grpc1Request::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t extract_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void extract_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void extract_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.grpcServerCompressionFormat)
}

// bytes pattern = 2;
inline void extract_grpc1Request::clear_pattern() {
  pattern_.ClearToEmpty();
}
inline const std::string& extract_grpc1Request::pattern() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.pattern)
  return _internal_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void extract_grpc1Request::set_pattern(ArgT0&& arg0, ArgT... args) {
 
 pattern_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.pattern)
}
inline std::string* extract_grpc1Request::mutable_pattern() {
  std::string* _s = _internal_mutable_pattern();
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.pattern)
  return _s;
}
inline const std::string& extract_grpc1Request::_internal_pattern() const {
  return pattern_.Get();
}
inline void extract_grpc1Request::_internal_set_pattern(const std::string& value) {
  
  pattern_.Set(value, GetArenaForAllocation());
}
inline std::string* extract_grpc1Request::_internal_mutable_pattern() {
  
  return pattern_.Mutable(GetArenaForAllocation());
}
inline std::string* extract_grpc1Request::release_pattern() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.pattern)
  return pattern_.Release();
}
inline void extract_grpc1Request::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    
  } else {
    
  }
  pattern_.SetAllocated(pattern, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pattern_.IsDefault()) {
    pattern_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.pattern)
}

// bytes descriptorParam = 3;
inline void extract_grpc1Request::clear_descriptorparam() {
  descriptorparam_.ClearToEmpty();
}
inline const std::string& extract_grpc1Request::descriptorparam() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.descriptorParam)
  return _internal_descriptorparam();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void extract_grpc1Request::set_descriptorparam(ArgT0&& arg0, ArgT... args) {
 
 descriptorparam_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.descriptorParam)
}
inline std::string* extract_grpc1Request::mutable_descriptorparam() {
  std::string* _s = _internal_mutable_descriptorparam();
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.descriptorParam)
  return _s;
}
inline const std::string& extract_grpc1Request::_internal_descriptorparam() const {
  return descriptorparam_.Get();
}
inline void extract_grpc1Request::_internal_set_descriptorparam(const std::string& value) {
  
  descriptorparam_.Set(value, GetArenaForAllocation());
}
inline std::string* extract_grpc1Request::_internal_mutable_descriptorparam() {
  
  return descriptorparam_.Mutable(GetArenaForAllocation());
}
inline std::string* extract_grpc1Request::release_descriptorparam() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.descriptorParam)
  return descriptorparam_.Release();
}
inline void extract_grpc1Request::set_allocated_descriptorparam(std::string* descriptorparam) {
  if (descriptorparam != nullptr) {
    
  } else {
    
  }
  descriptorparam_.SetAllocated(descriptorparam, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (descriptorparam_.IsDefault()) {
    descriptorparam_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractorSBPattern.extract_grpc1Request.descriptorParam)
}

// -------------------------------------------------------------------

// extract_grpc1Response

// bytes descriptorParam = 1;
inline void extract_grpc1Response::clear_descriptorparam() {
  descriptorparam_.ClearToEmpty();
}
inline const std::string& extract_grpc1Response::descriptorparam() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc1Response.descriptorParam)
  return _internal_descriptorparam();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void extract_grpc1Response::set_descriptorparam(ArgT0&& arg0, ArgT... args) {
 
 descriptorparam_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc1Response.descriptorParam)
}
inline std::string* extract_grpc1Response::mutable_descriptorparam() {
  std::string* _s = _internal_mutable_descriptorparam();
  // @@protoc_insertion_point(field_mutable:grpcIDescriptorsExtractorSBPattern.extract_grpc1Response.descriptorParam)
  return _s;
}
inline const std::string& extract_grpc1Response::_internal_descriptorparam() const {
  return descriptorparam_.Get();
}
inline void extract_grpc1Response::_internal_set_descriptorparam(const std::string& value) {
  
  descriptorparam_.Set(value, GetArenaForAllocation());
}
inline std::string* extract_grpc1Response::_internal_mutable_descriptorparam() {
  
  return descriptorparam_.Mutable(GetArenaForAllocation());
}
inline std::string* extract_grpc1Response::release_descriptorparam() {
  // @@protoc_insertion_point(field_release:grpcIDescriptorsExtractorSBPattern.extract_grpc1Response.descriptorParam)
  return descriptorparam_.Release();
}
inline void extract_grpc1Response::set_allocated_descriptorparam(std::string* descriptorparam) {
  if (descriptorparam != nullptr) {
    
  } else {
    
  }
  descriptorparam_.SetAllocated(descriptorparam, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (descriptorparam_.IsDefault()) {
    descriptorparam_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIDescriptorsExtractorSBPattern.extract_grpc1Response.descriptorParam)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void extract_grpc1Response::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t extract_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t extract_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIDescriptorsExtractorSBPattern.extract_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void extract_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void extract_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIDescriptorsExtractorSBPattern.extract_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIDescriptorsExtractorSBPattern

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIDescriptorsExtractorSBPatternService_2eproto
