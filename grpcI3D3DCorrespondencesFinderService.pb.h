// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcI3D3DCorrespondencesFinderService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcI3D3DCorrespondencesFinderService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcI3D3DCorrespondencesFinderService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcI3D3DCorrespondencesFinderService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcI3D3DCorrespondencesFinderService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcI3D3DCorrespondencesFinderService_2eproto;
namespace grpcI3D3DCorrespondencesFinder {
class find_grpc0Request;
struct find_grpc0RequestDefaultTypeInternal;
extern find_grpc0RequestDefaultTypeInternal _find_grpc0Request_default_instance_;
class find_grpc0Response;
struct find_grpc0ResponseDefaultTypeInternal;
extern find_grpc0ResponseDefaultTypeInternal _find_grpc0Response_default_instance_;
class find_grpc1Request;
struct find_grpc1RequestDefaultTypeInternal;
extern find_grpc1RequestDefaultTypeInternal _find_grpc1Request_default_instance_;
class find_grpc1Response;
struct find_grpc1ResponseDefaultTypeInternal;
extern find_grpc1ResponseDefaultTypeInternal _find_grpc1Response_default_instance_;
}  // namespace grpcI3D3DCorrespondencesFinder
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcI3D3DCorrespondencesFinder::find_grpc0Request* Arena::CreateMaybeMessage<::grpcI3D3DCorrespondencesFinder::find_grpc0Request>(Arena*);
template<> ::grpcI3D3DCorrespondencesFinder::find_grpc0Response* Arena::CreateMaybeMessage<::grpcI3D3DCorrespondencesFinder::find_grpc0Response>(Arena*);
template<> ::grpcI3D3DCorrespondencesFinder::find_grpc1Request* Arena::CreateMaybeMessage<::grpcI3D3DCorrespondencesFinder::find_grpc1Request>(Arena*);
template<> ::grpcI3D3DCorrespondencesFinder::find_grpc1Response* Arena::CreateMaybeMessage<::grpcI3D3DCorrespondencesFinder::find_grpc1Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcI3D3DCorrespondencesFinder {

// ===================================================================

class find_grpc0Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3D3DCorrespondencesFinder.find_grpc0Request) */ {
 public:
  inline find_grpc0Request() : find_grpc0Request(nullptr) {}
  ~find_grpc0Request() override;
  explicit PROTOBUF_CONSTEXPR find_grpc0Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  find_grpc0Request(const find_grpc0Request& from);
  find_grpc0Request(find_grpc0Request&& from) noexcept
    : find_grpc0Request() {
    *this = ::std::move(from);
  }

  inline find_grpc0Request& operator=(const find_grpc0Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline find_grpc0Request& operator=(find_grpc0Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const find_grpc0Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const find_grpc0Request* internal_default_instance() {
    return reinterpret_cast<const find_grpc0Request*>(
               &_find_grpc0Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(find_grpc0Request& a, find_grpc0Request& b) {
    a.Swap(&b);
  }
  inline void Swap(find_grpc0Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(find_grpc0Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  find_grpc0Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<find_grpc0Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const find_grpc0Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const find_grpc0Request& from) {
    find_grpc0Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(find_grpc0Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3D3DCorrespondencesFinder.find_grpc0Request";
  }
  protected:
  explicit find_grpc0Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstKeyframeFieldNumber = 2,
    kSecondKeyframeFieldNumber = 3,
    kCurrentMatchesFieldNumber = 4,
    kFirstCloudPointsFieldNumber = 5,
    kSecondCloudPointsFieldNumber = 6,
    kFoundMatchesFieldNumber = 7,
    kRemainingMatchesFieldNumber = 8,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes firstKeyframe = 2;
  void clear_firstkeyframe();
  const std::string& firstkeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstkeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstkeyframe();
  PROTOBUF_NODISCARD std::string* release_firstkeyframe();
  void set_allocated_firstkeyframe(std::string* firstkeyframe);
  private:
  const std::string& _internal_firstkeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstkeyframe(const std::string& value);
  std::string* _internal_mutable_firstkeyframe();
  public:

  // bytes secondKeyframe = 3;
  void clear_secondkeyframe();
  const std::string& secondkeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondkeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondkeyframe();
  PROTOBUF_NODISCARD std::string* release_secondkeyframe();
  void set_allocated_secondkeyframe(std::string* secondkeyframe);
  private:
  const std::string& _internal_secondkeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondkeyframe(const std::string& value);
  std::string* _internal_mutable_secondkeyframe();
  public:

  // bytes current_matches = 4;
  void clear_current_matches();
  const std::string& current_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_matches();
  PROTOBUF_NODISCARD std::string* release_current_matches();
  void set_allocated_current_matches(std::string* current_matches);
  private:
  const std::string& _internal_current_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_matches(const std::string& value);
  std::string* _internal_mutable_current_matches();
  public:

  // bytes firstCloudPoints = 5;
  void clear_firstcloudpoints();
  const std::string& firstcloudpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstcloudpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstcloudpoints();
  PROTOBUF_NODISCARD std::string* release_firstcloudpoints();
  void set_allocated_firstcloudpoints(std::string* firstcloudpoints);
  private:
  const std::string& _internal_firstcloudpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstcloudpoints(const std::string& value);
  std::string* _internal_mutable_firstcloudpoints();
  public:

  // bytes secondCloudPoints = 6;
  void clear_secondcloudpoints();
  const std::string& secondcloudpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondcloudpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondcloudpoints();
  PROTOBUF_NODISCARD std::string* release_secondcloudpoints();
  void set_allocated_secondcloudpoints(std::string* secondcloudpoints);
  private:
  const std::string& _internal_secondcloudpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondcloudpoints(const std::string& value);
  std::string* _internal_mutable_secondcloudpoints();
  public:

  // bytes found_matches = 7;
  void clear_found_matches();
  const std::string& found_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_found_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_found_matches();
  PROTOBUF_NODISCARD std::string* release_found_matches();
  void set_allocated_found_matches(std::string* found_matches);
  private:
  const std::string& _internal_found_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_found_matches(const std::string& value);
  std::string* _internal_mutable_found_matches();
  public:

  // bytes remaining_matches = 8;
  void clear_remaining_matches();
  const std::string& remaining_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remaining_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remaining_matches();
  PROTOBUF_NODISCARD std::string* release_remaining_matches();
  void set_allocated_remaining_matches(std::string* remaining_matches);
  private:
  const std::string& _internal_remaining_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remaining_matches(const std::string& value);
  std::string* _internal_mutable_remaining_matches();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3D3DCorrespondencesFinder.find_grpc0Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstkeyframe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondkeyframe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_matches_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstcloudpoints_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondcloudpoints_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr found_matches_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remaining_matches_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI3D3DCorrespondencesFinderService_2eproto;
};
// -------------------------------------------------------------------

class find_grpc0Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3D3DCorrespondencesFinder.find_grpc0Response) */ {
 public:
  inline find_grpc0Response() : find_grpc0Response(nullptr) {}
  ~find_grpc0Response() override;
  explicit PROTOBUF_CONSTEXPR find_grpc0Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  find_grpc0Response(const find_grpc0Response& from);
  find_grpc0Response(find_grpc0Response&& from) noexcept
    : find_grpc0Response() {
    *this = ::std::move(from);
  }

  inline find_grpc0Response& operator=(const find_grpc0Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline find_grpc0Response& operator=(find_grpc0Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const find_grpc0Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const find_grpc0Response* internal_default_instance() {
    return reinterpret_cast<const find_grpc0Response*>(
               &_find_grpc0Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(find_grpc0Response& a, find_grpc0Response& b) {
    a.Swap(&b);
  }
  inline void Swap(find_grpc0Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(find_grpc0Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  find_grpc0Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<find_grpc0Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const find_grpc0Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const find_grpc0Response& from) {
    find_grpc0Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(find_grpc0Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3D3DCorrespondencesFinder.find_grpc0Response";
  }
  protected:
  explicit find_grpc0Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstCloudPointsFieldNumber = 1,
    kSecondCloudPointsFieldNumber = 2,
    kFoundMatchesFieldNumber = 3,
    kRemainingMatchesFieldNumber = 4,
    kXpcfGrpcReturnValueFieldNumber = 5,
  };
  // bytes firstCloudPoints = 1;
  void clear_firstcloudpoints();
  const std::string& firstcloudpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstcloudpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstcloudpoints();
  PROTOBUF_NODISCARD std::string* release_firstcloudpoints();
  void set_allocated_firstcloudpoints(std::string* firstcloudpoints);
  private:
  const std::string& _internal_firstcloudpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstcloudpoints(const std::string& value);
  std::string* _internal_mutable_firstcloudpoints();
  public:

  // bytes secondCloudPoints = 2;
  void clear_secondcloudpoints();
  const std::string& secondcloudpoints() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondcloudpoints(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondcloudpoints();
  PROTOBUF_NODISCARD std::string* release_secondcloudpoints();
  void set_allocated_secondcloudpoints(std::string* secondcloudpoints);
  private:
  const std::string& _internal_secondcloudpoints() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondcloudpoints(const std::string& value);
  std::string* _internal_mutable_secondcloudpoints();
  public:

  // bytes found_matches = 3;
  void clear_found_matches();
  const std::string& found_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_found_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_found_matches();
  PROTOBUF_NODISCARD std::string* release_found_matches();
  void set_allocated_found_matches(std::string* found_matches);
  private:
  const std::string& _internal_found_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_found_matches(const std::string& value);
  std::string* _internal_mutable_found_matches();
  public:

  // bytes remaining_matches = 4;
  void clear_remaining_matches();
  const std::string& remaining_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remaining_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remaining_matches();
  PROTOBUF_NODISCARD std::string* release_remaining_matches();
  void set_allocated_remaining_matches(std::string* remaining_matches);
  private:
  const std::string& _internal_remaining_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remaining_matches(const std::string& value);
  std::string* _internal_mutable_remaining_matches();
  public:

  // sint32 xpcfGrpcReturnValue = 5;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3D3DCorrespondencesFinder.find_grpc0Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstcloudpoints_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondcloudpoints_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr found_matches_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remaining_matches_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI3D3DCorrespondencesFinderService_2eproto;
};
// -------------------------------------------------------------------

class find_grpc1Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3D3DCorrespondencesFinder.find_grpc1Request) */ {
 public:
  inline find_grpc1Request() : find_grpc1Request(nullptr) {}
  ~find_grpc1Request() override;
  explicit PROTOBUF_CONSTEXPR find_grpc1Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  find_grpc1Request(const find_grpc1Request& from);
  find_grpc1Request(find_grpc1Request&& from) noexcept
    : find_grpc1Request() {
    *this = ::std::move(from);
  }

  inline find_grpc1Request& operator=(const find_grpc1Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline find_grpc1Request& operator=(find_grpc1Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const find_grpc1Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const find_grpc1Request* internal_default_instance() {
    return reinterpret_cast<const find_grpc1Request*>(
               &_find_grpc1Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(find_grpc1Request& a, find_grpc1Request& b) {
    a.Swap(&b);
  }
  inline void Swap(find_grpc1Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(find_grpc1Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  find_grpc1Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<find_grpc1Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const find_grpc1Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const find_grpc1Request& from) {
    find_grpc1Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(find_grpc1Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3D3DCorrespondencesFinder.find_grpc1Request";
  }
  protected:
  explicit find_grpc1Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstKeyframeFieldNumber = 2,
    kSecondKeyframeFieldNumber = 3,
    kCurrentMatchesFieldNumber = 4,
    kFirstCloudPointsIndicesFieldNumber = 5,
    kSecondCloudPointsIndicesFieldNumber = 6,
    kFoundMatchesFieldNumber = 7,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes firstKeyframe = 2;
  void clear_firstkeyframe();
  const std::string& firstkeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstkeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstkeyframe();
  PROTOBUF_NODISCARD std::string* release_firstkeyframe();
  void set_allocated_firstkeyframe(std::string* firstkeyframe);
  private:
  const std::string& _internal_firstkeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstkeyframe(const std::string& value);
  std::string* _internal_mutable_firstkeyframe();
  public:

  // bytes secondKeyframe = 3;
  void clear_secondkeyframe();
  const std::string& secondkeyframe() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondkeyframe(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondkeyframe();
  PROTOBUF_NODISCARD std::string* release_secondkeyframe();
  void set_allocated_secondkeyframe(std::string* secondkeyframe);
  private:
  const std::string& _internal_secondkeyframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondkeyframe(const std::string& value);
  std::string* _internal_mutable_secondkeyframe();
  public:

  // bytes current_matches = 4;
  void clear_current_matches();
  const std::string& current_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_matches();
  PROTOBUF_NODISCARD std::string* release_current_matches();
  void set_allocated_current_matches(std::string* current_matches);
  private:
  const std::string& _internal_current_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_matches(const std::string& value);
  std::string* _internal_mutable_current_matches();
  public:

  // bytes firstCloudPointsIndices = 5;
  void clear_firstcloudpointsindices();
  const std::string& firstcloudpointsindices() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstcloudpointsindices(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstcloudpointsindices();
  PROTOBUF_NODISCARD std::string* release_firstcloudpointsindices();
  void set_allocated_firstcloudpointsindices(std::string* firstcloudpointsindices);
  private:
  const std::string& _internal_firstcloudpointsindices() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstcloudpointsindices(const std::string& value);
  std::string* _internal_mutable_firstcloudpointsindices();
  public:

  // bytes secondCloudPointsIndices = 6;
  void clear_secondcloudpointsindices();
  const std::string& secondcloudpointsindices() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondcloudpointsindices(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondcloudpointsindices();
  PROTOBUF_NODISCARD std::string* release_secondcloudpointsindices();
  void set_allocated_secondcloudpointsindices(std::string* secondcloudpointsindices);
  private:
  const std::string& _internal_secondcloudpointsindices() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondcloudpointsindices(const std::string& value);
  std::string* _internal_mutable_secondcloudpointsindices();
  public:

  // bytes found_matches = 7;
  void clear_found_matches();
  const std::string& found_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_found_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_found_matches();
  PROTOBUF_NODISCARD std::string* release_found_matches();
  void set_allocated_found_matches(std::string* found_matches);
  private:
  const std::string& _internal_found_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_found_matches(const std::string& value);
  std::string* _internal_mutable_found_matches();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3D3DCorrespondencesFinder.find_grpc1Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstkeyframe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondkeyframe_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_matches_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstcloudpointsindices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondcloudpointsindices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr found_matches_;
    int32_t grpcservercompressionformat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI3D3DCorrespondencesFinderService_2eproto;
};
// -------------------------------------------------------------------

class find_grpc1Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcI3D3DCorrespondencesFinder.find_grpc1Response) */ {
 public:
  inline find_grpc1Response() : find_grpc1Response(nullptr) {}
  ~find_grpc1Response() override;
  explicit PROTOBUF_CONSTEXPR find_grpc1Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  find_grpc1Response(const find_grpc1Response& from);
  find_grpc1Response(find_grpc1Response&& from) noexcept
    : find_grpc1Response() {
    *this = ::std::move(from);
  }

  inline find_grpc1Response& operator=(const find_grpc1Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline find_grpc1Response& operator=(find_grpc1Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const find_grpc1Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const find_grpc1Response* internal_default_instance() {
    return reinterpret_cast<const find_grpc1Response*>(
               &_find_grpc1Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(find_grpc1Response& a, find_grpc1Response& b) {
    a.Swap(&b);
  }
  inline void Swap(find_grpc1Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(find_grpc1Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  find_grpc1Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<find_grpc1Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const find_grpc1Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const find_grpc1Response& from) {
    find_grpc1Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(find_grpc1Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcI3D3DCorrespondencesFinder.find_grpc1Response";
  }
  protected:
  explicit find_grpc1Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstCloudPointsIndicesFieldNumber = 1,
    kSecondCloudPointsIndicesFieldNumber = 2,
    kFoundMatchesFieldNumber = 3,
    kXpcfGrpcReturnValueFieldNumber = 4,
  };
  // bytes firstCloudPointsIndices = 1;
  void clear_firstcloudpointsindices();
  const std::string& firstcloudpointsindices() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstcloudpointsindices(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstcloudpointsindices();
  PROTOBUF_NODISCARD std::string* release_firstcloudpointsindices();
  void set_allocated_firstcloudpointsindices(std::string* firstcloudpointsindices);
  private:
  const std::string& _internal_firstcloudpointsindices() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstcloudpointsindices(const std::string& value);
  std::string* _internal_mutable_firstcloudpointsindices();
  public:

  // bytes secondCloudPointsIndices = 2;
  void clear_secondcloudpointsindices();
  const std::string& secondcloudpointsindices() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secondcloudpointsindices(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secondcloudpointsindices();
  PROTOBUF_NODISCARD std::string* release_secondcloudpointsindices();
  void set_allocated_secondcloudpointsindices(std::string* secondcloudpointsindices);
  private:
  const std::string& _internal_secondcloudpointsindices() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondcloudpointsindices(const std::string& value);
  std::string* _internal_mutable_secondcloudpointsindices();
  public:

  // bytes found_matches = 3;
  void clear_found_matches();
  const std::string& found_matches() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_found_matches(ArgT0&& arg0, ArgT... args);
  std::string* mutable_found_matches();
  PROTOBUF_NODISCARD std::string* release_found_matches();
  void set_allocated_found_matches(std::string* found_matches);
  private:
  const std::string& _internal_found_matches() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_found_matches(const std::string& value);
  std::string* _internal_mutable_found_matches();
  public:

  // sint32 xpcfGrpcReturnValue = 4;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcI3D3DCorrespondencesFinder.find_grpc1Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstcloudpointsindices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondcloudpointsindices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr found_matches_;
    int32_t xpcfgrpcreturnvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_grpcI3D3DCorrespondencesFinderService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// find_grpc0Request

// int32 grpcServerCompressionFormat = 1;
inline void find_grpc0Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t find_grpc0Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t find_grpc0Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void find_grpc0Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void find_grpc0Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Request.grpcServerCompressionFormat)
}

// bytes firstKeyframe = 2;
inline void find_grpc0Request::clear_firstkeyframe() {
  _impl_.firstkeyframe_.ClearToEmpty();
}
inline const std::string& find_grpc0Request::firstkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstKeyframe)
  return _internal_firstkeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Request::set_firstkeyframe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstkeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstKeyframe)
}
inline std::string* find_grpc0Request::mutable_firstkeyframe() {
  std::string* _s = _internal_mutable_firstkeyframe();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstKeyframe)
  return _s;
}
inline const std::string& find_grpc0Request::_internal_firstkeyframe() const {
  return _impl_.firstkeyframe_.Get();
}
inline void find_grpc0Request::_internal_set_firstkeyframe(const std::string& value) {
  
  _impl_.firstkeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Request::_internal_mutable_firstkeyframe() {
  
  return _impl_.firstkeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Request::release_firstkeyframe() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstKeyframe)
  return _impl_.firstkeyframe_.Release();
}
inline void find_grpc0Request::set_allocated_firstkeyframe(std::string* firstkeyframe) {
  if (firstkeyframe != nullptr) {
    
  } else {
    
  }
  _impl_.firstkeyframe_.SetAllocated(firstkeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstkeyframe_.IsDefault()) {
    _impl_.firstkeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstKeyframe)
}

// bytes secondKeyframe = 3;
inline void find_grpc0Request::clear_secondkeyframe() {
  _impl_.secondkeyframe_.ClearToEmpty();
}
inline const std::string& find_grpc0Request::secondkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondKeyframe)
  return _internal_secondkeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Request::set_secondkeyframe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondkeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondKeyframe)
}
inline std::string* find_grpc0Request::mutable_secondkeyframe() {
  std::string* _s = _internal_mutable_secondkeyframe();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondKeyframe)
  return _s;
}
inline const std::string& find_grpc0Request::_internal_secondkeyframe() const {
  return _impl_.secondkeyframe_.Get();
}
inline void find_grpc0Request::_internal_set_secondkeyframe(const std::string& value) {
  
  _impl_.secondkeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Request::_internal_mutable_secondkeyframe() {
  
  return _impl_.secondkeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Request::release_secondkeyframe() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondKeyframe)
  return _impl_.secondkeyframe_.Release();
}
inline void find_grpc0Request::set_allocated_secondkeyframe(std::string* secondkeyframe) {
  if (secondkeyframe != nullptr) {
    
  } else {
    
  }
  _impl_.secondkeyframe_.SetAllocated(secondkeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondkeyframe_.IsDefault()) {
    _impl_.secondkeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondKeyframe)
}

// bytes current_matches = 4;
inline void find_grpc0Request::clear_current_matches() {
  _impl_.current_matches_.ClearToEmpty();
}
inline const std::string& find_grpc0Request::current_matches() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Request.current_matches)
  return _internal_current_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Request::set_current_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.current_matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Request.current_matches)
}
inline std::string* find_grpc0Request::mutable_current_matches() {
  std::string* _s = _internal_mutable_current_matches();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Request.current_matches)
  return _s;
}
inline const std::string& find_grpc0Request::_internal_current_matches() const {
  return _impl_.current_matches_.Get();
}
inline void find_grpc0Request::_internal_set_current_matches(const std::string& value) {
  
  _impl_.current_matches_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Request::_internal_mutable_current_matches() {
  
  return _impl_.current_matches_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Request::release_current_matches() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Request.current_matches)
  return _impl_.current_matches_.Release();
}
inline void find_grpc0Request::set_allocated_current_matches(std::string* current_matches) {
  if (current_matches != nullptr) {
    
  } else {
    
  }
  _impl_.current_matches_.SetAllocated(current_matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_matches_.IsDefault()) {
    _impl_.current_matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Request.current_matches)
}

// bytes firstCloudPoints = 5;
inline void find_grpc0Request::clear_firstcloudpoints() {
  _impl_.firstcloudpoints_.ClearToEmpty();
}
inline const std::string& find_grpc0Request::firstcloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstCloudPoints)
  return _internal_firstcloudpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Request::set_firstcloudpoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstcloudpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstCloudPoints)
}
inline std::string* find_grpc0Request::mutable_firstcloudpoints() {
  std::string* _s = _internal_mutable_firstcloudpoints();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstCloudPoints)
  return _s;
}
inline const std::string& find_grpc0Request::_internal_firstcloudpoints() const {
  return _impl_.firstcloudpoints_.Get();
}
inline void find_grpc0Request::_internal_set_firstcloudpoints(const std::string& value) {
  
  _impl_.firstcloudpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Request::_internal_mutable_firstcloudpoints() {
  
  return _impl_.firstcloudpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Request::release_firstcloudpoints() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstCloudPoints)
  return _impl_.firstcloudpoints_.Release();
}
inline void find_grpc0Request::set_allocated_firstcloudpoints(std::string* firstcloudpoints) {
  if (firstcloudpoints != nullptr) {
    
  } else {
    
  }
  _impl_.firstcloudpoints_.SetAllocated(firstcloudpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstcloudpoints_.IsDefault()) {
    _impl_.firstcloudpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Request.firstCloudPoints)
}

// bytes secondCloudPoints = 6;
inline void find_grpc0Request::clear_secondcloudpoints() {
  _impl_.secondcloudpoints_.ClearToEmpty();
}
inline const std::string& find_grpc0Request::secondcloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondCloudPoints)
  return _internal_secondcloudpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Request::set_secondcloudpoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondcloudpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondCloudPoints)
}
inline std::string* find_grpc0Request::mutable_secondcloudpoints() {
  std::string* _s = _internal_mutable_secondcloudpoints();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondCloudPoints)
  return _s;
}
inline const std::string& find_grpc0Request::_internal_secondcloudpoints() const {
  return _impl_.secondcloudpoints_.Get();
}
inline void find_grpc0Request::_internal_set_secondcloudpoints(const std::string& value) {
  
  _impl_.secondcloudpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Request::_internal_mutable_secondcloudpoints() {
  
  return _impl_.secondcloudpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Request::release_secondcloudpoints() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondCloudPoints)
  return _impl_.secondcloudpoints_.Release();
}
inline void find_grpc0Request::set_allocated_secondcloudpoints(std::string* secondcloudpoints) {
  if (secondcloudpoints != nullptr) {
    
  } else {
    
  }
  _impl_.secondcloudpoints_.SetAllocated(secondcloudpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondcloudpoints_.IsDefault()) {
    _impl_.secondcloudpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Request.secondCloudPoints)
}

// bytes found_matches = 7;
inline void find_grpc0Request::clear_found_matches() {
  _impl_.found_matches_.ClearToEmpty();
}
inline const std::string& find_grpc0Request::found_matches() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Request.found_matches)
  return _internal_found_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Request::set_found_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.found_matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Request.found_matches)
}
inline std::string* find_grpc0Request::mutable_found_matches() {
  std::string* _s = _internal_mutable_found_matches();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Request.found_matches)
  return _s;
}
inline const std::string& find_grpc0Request::_internal_found_matches() const {
  return _impl_.found_matches_.Get();
}
inline void find_grpc0Request::_internal_set_found_matches(const std::string& value) {
  
  _impl_.found_matches_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Request::_internal_mutable_found_matches() {
  
  return _impl_.found_matches_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Request::release_found_matches() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Request.found_matches)
  return _impl_.found_matches_.Release();
}
inline void find_grpc0Request::set_allocated_found_matches(std::string* found_matches) {
  if (found_matches != nullptr) {
    
  } else {
    
  }
  _impl_.found_matches_.SetAllocated(found_matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.found_matches_.IsDefault()) {
    _impl_.found_matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Request.found_matches)
}

// bytes remaining_matches = 8;
inline void find_grpc0Request::clear_remaining_matches() {
  _impl_.remaining_matches_.ClearToEmpty();
}
inline const std::string& find_grpc0Request::remaining_matches() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Request.remaining_matches)
  return _internal_remaining_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Request::set_remaining_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.remaining_matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Request.remaining_matches)
}
inline std::string* find_grpc0Request::mutable_remaining_matches() {
  std::string* _s = _internal_mutable_remaining_matches();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Request.remaining_matches)
  return _s;
}
inline const std::string& find_grpc0Request::_internal_remaining_matches() const {
  return _impl_.remaining_matches_.Get();
}
inline void find_grpc0Request::_internal_set_remaining_matches(const std::string& value) {
  
  _impl_.remaining_matches_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Request::_internal_mutable_remaining_matches() {
  
  return _impl_.remaining_matches_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Request::release_remaining_matches() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Request.remaining_matches)
  return _impl_.remaining_matches_.Release();
}
inline void find_grpc0Request::set_allocated_remaining_matches(std::string* remaining_matches) {
  if (remaining_matches != nullptr) {
    
  } else {
    
  }
  _impl_.remaining_matches_.SetAllocated(remaining_matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remaining_matches_.IsDefault()) {
    _impl_.remaining_matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Request.remaining_matches)
}

// -------------------------------------------------------------------

// find_grpc0Response

// bytes firstCloudPoints = 1;
inline void find_grpc0Response::clear_firstcloudpoints() {
  _impl_.firstcloudpoints_.ClearToEmpty();
}
inline const std::string& find_grpc0Response::firstcloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Response.firstCloudPoints)
  return _internal_firstcloudpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Response::set_firstcloudpoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstcloudpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Response.firstCloudPoints)
}
inline std::string* find_grpc0Response::mutable_firstcloudpoints() {
  std::string* _s = _internal_mutable_firstcloudpoints();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Response.firstCloudPoints)
  return _s;
}
inline const std::string& find_grpc0Response::_internal_firstcloudpoints() const {
  return _impl_.firstcloudpoints_.Get();
}
inline void find_grpc0Response::_internal_set_firstcloudpoints(const std::string& value) {
  
  _impl_.firstcloudpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Response::_internal_mutable_firstcloudpoints() {
  
  return _impl_.firstcloudpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Response::release_firstcloudpoints() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Response.firstCloudPoints)
  return _impl_.firstcloudpoints_.Release();
}
inline void find_grpc0Response::set_allocated_firstcloudpoints(std::string* firstcloudpoints) {
  if (firstcloudpoints != nullptr) {
    
  } else {
    
  }
  _impl_.firstcloudpoints_.SetAllocated(firstcloudpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstcloudpoints_.IsDefault()) {
    _impl_.firstcloudpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Response.firstCloudPoints)
}

// bytes secondCloudPoints = 2;
inline void find_grpc0Response::clear_secondcloudpoints() {
  _impl_.secondcloudpoints_.ClearToEmpty();
}
inline const std::string& find_grpc0Response::secondcloudpoints() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Response.secondCloudPoints)
  return _internal_secondcloudpoints();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Response::set_secondcloudpoints(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondcloudpoints_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Response.secondCloudPoints)
}
inline std::string* find_grpc0Response::mutable_secondcloudpoints() {
  std::string* _s = _internal_mutable_secondcloudpoints();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Response.secondCloudPoints)
  return _s;
}
inline const std::string& find_grpc0Response::_internal_secondcloudpoints() const {
  return _impl_.secondcloudpoints_.Get();
}
inline void find_grpc0Response::_internal_set_secondcloudpoints(const std::string& value) {
  
  _impl_.secondcloudpoints_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Response::_internal_mutable_secondcloudpoints() {
  
  return _impl_.secondcloudpoints_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Response::release_secondcloudpoints() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Response.secondCloudPoints)
  return _impl_.secondcloudpoints_.Release();
}
inline void find_grpc0Response::set_allocated_secondcloudpoints(std::string* secondcloudpoints) {
  if (secondcloudpoints != nullptr) {
    
  } else {
    
  }
  _impl_.secondcloudpoints_.SetAllocated(secondcloudpoints, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondcloudpoints_.IsDefault()) {
    _impl_.secondcloudpoints_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Response.secondCloudPoints)
}

// bytes found_matches = 3;
inline void find_grpc0Response::clear_found_matches() {
  _impl_.found_matches_.ClearToEmpty();
}
inline const std::string& find_grpc0Response::found_matches() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Response.found_matches)
  return _internal_found_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Response::set_found_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.found_matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Response.found_matches)
}
inline std::string* find_grpc0Response::mutable_found_matches() {
  std::string* _s = _internal_mutable_found_matches();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Response.found_matches)
  return _s;
}
inline const std::string& find_grpc0Response::_internal_found_matches() const {
  return _impl_.found_matches_.Get();
}
inline void find_grpc0Response::_internal_set_found_matches(const std::string& value) {
  
  _impl_.found_matches_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Response::_internal_mutable_found_matches() {
  
  return _impl_.found_matches_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Response::release_found_matches() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Response.found_matches)
  return _impl_.found_matches_.Release();
}
inline void find_grpc0Response::set_allocated_found_matches(std::string* found_matches) {
  if (found_matches != nullptr) {
    
  } else {
    
  }
  _impl_.found_matches_.SetAllocated(found_matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.found_matches_.IsDefault()) {
    _impl_.found_matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Response.found_matches)
}

// bytes remaining_matches = 4;
inline void find_grpc0Response::clear_remaining_matches() {
  _impl_.remaining_matches_.ClearToEmpty();
}
inline const std::string& find_grpc0Response::remaining_matches() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Response.remaining_matches)
  return _internal_remaining_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc0Response::set_remaining_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.remaining_matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Response.remaining_matches)
}
inline std::string* find_grpc0Response::mutable_remaining_matches() {
  std::string* _s = _internal_mutable_remaining_matches();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc0Response.remaining_matches)
  return _s;
}
inline const std::string& find_grpc0Response::_internal_remaining_matches() const {
  return _impl_.remaining_matches_.Get();
}
inline void find_grpc0Response::_internal_set_remaining_matches(const std::string& value) {
  
  _impl_.remaining_matches_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc0Response::_internal_mutable_remaining_matches() {
  
  return _impl_.remaining_matches_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc0Response::release_remaining_matches() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc0Response.remaining_matches)
  return _impl_.remaining_matches_.Release();
}
inline void find_grpc0Response::set_allocated_remaining_matches(std::string* remaining_matches) {
  if (remaining_matches != nullptr) {
    
  } else {
    
  }
  _impl_.remaining_matches_.SetAllocated(remaining_matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remaining_matches_.IsDefault()) {
    _impl_.remaining_matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc0Response.remaining_matches)
}

// sint32 xpcfGrpcReturnValue = 5;
inline void find_grpc0Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t find_grpc0Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t find_grpc0Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc0Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void find_grpc0Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void find_grpc0Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc0Response.xpcfGrpcReturnValue)
}

// -------------------------------------------------------------------

// find_grpc1Request

// int32 grpcServerCompressionFormat = 1;
inline void find_grpc1Request::clear_grpcservercompressionformat() {
  _impl_.grpcservercompressionformat_ = 0;
}
inline int32_t find_grpc1Request::_internal_grpcservercompressionformat() const {
  return _impl_.grpcservercompressionformat_;
}
inline int32_t find_grpc1Request::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Request.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void find_grpc1Request::_internal_set_grpcservercompressionformat(int32_t value) {
  
  _impl_.grpcservercompressionformat_ = value;
}
inline void find_grpc1Request::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Request.grpcServerCompressionFormat)
}

// bytes firstKeyframe = 2;
inline void find_grpc1Request::clear_firstkeyframe() {
  _impl_.firstkeyframe_.ClearToEmpty();
}
inline const std::string& find_grpc1Request::firstkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstKeyframe)
  return _internal_firstkeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc1Request::set_firstkeyframe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstkeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstKeyframe)
}
inline std::string* find_grpc1Request::mutable_firstkeyframe() {
  std::string* _s = _internal_mutable_firstkeyframe();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstKeyframe)
  return _s;
}
inline const std::string& find_grpc1Request::_internal_firstkeyframe() const {
  return _impl_.firstkeyframe_.Get();
}
inline void find_grpc1Request::_internal_set_firstkeyframe(const std::string& value) {
  
  _impl_.firstkeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc1Request::_internal_mutable_firstkeyframe() {
  
  return _impl_.firstkeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc1Request::release_firstkeyframe() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstKeyframe)
  return _impl_.firstkeyframe_.Release();
}
inline void find_grpc1Request::set_allocated_firstkeyframe(std::string* firstkeyframe) {
  if (firstkeyframe != nullptr) {
    
  } else {
    
  }
  _impl_.firstkeyframe_.SetAllocated(firstkeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstkeyframe_.IsDefault()) {
    _impl_.firstkeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstKeyframe)
}

// bytes secondKeyframe = 3;
inline void find_grpc1Request::clear_secondkeyframe() {
  _impl_.secondkeyframe_.ClearToEmpty();
}
inline const std::string& find_grpc1Request::secondkeyframe() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondKeyframe)
  return _internal_secondkeyframe();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc1Request::set_secondkeyframe(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondkeyframe_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondKeyframe)
}
inline std::string* find_grpc1Request::mutable_secondkeyframe() {
  std::string* _s = _internal_mutable_secondkeyframe();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondKeyframe)
  return _s;
}
inline const std::string& find_grpc1Request::_internal_secondkeyframe() const {
  return _impl_.secondkeyframe_.Get();
}
inline void find_grpc1Request::_internal_set_secondkeyframe(const std::string& value) {
  
  _impl_.secondkeyframe_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc1Request::_internal_mutable_secondkeyframe() {
  
  return _impl_.secondkeyframe_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc1Request::release_secondkeyframe() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondKeyframe)
  return _impl_.secondkeyframe_.Release();
}
inline void find_grpc1Request::set_allocated_secondkeyframe(std::string* secondkeyframe) {
  if (secondkeyframe != nullptr) {
    
  } else {
    
  }
  _impl_.secondkeyframe_.SetAllocated(secondkeyframe, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondkeyframe_.IsDefault()) {
    _impl_.secondkeyframe_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondKeyframe)
}

// bytes current_matches = 4;
inline void find_grpc1Request::clear_current_matches() {
  _impl_.current_matches_.ClearToEmpty();
}
inline const std::string& find_grpc1Request::current_matches() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Request.current_matches)
  return _internal_current_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc1Request::set_current_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.current_matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Request.current_matches)
}
inline std::string* find_grpc1Request::mutable_current_matches() {
  std::string* _s = _internal_mutable_current_matches();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc1Request.current_matches)
  return _s;
}
inline const std::string& find_grpc1Request::_internal_current_matches() const {
  return _impl_.current_matches_.Get();
}
inline void find_grpc1Request::_internal_set_current_matches(const std::string& value) {
  
  _impl_.current_matches_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc1Request::_internal_mutable_current_matches() {
  
  return _impl_.current_matches_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc1Request::release_current_matches() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc1Request.current_matches)
  return _impl_.current_matches_.Release();
}
inline void find_grpc1Request::set_allocated_current_matches(std::string* current_matches) {
  if (current_matches != nullptr) {
    
  } else {
    
  }
  _impl_.current_matches_.SetAllocated(current_matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_matches_.IsDefault()) {
    _impl_.current_matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc1Request.current_matches)
}

// bytes firstCloudPointsIndices = 5;
inline void find_grpc1Request::clear_firstcloudpointsindices() {
  _impl_.firstcloudpointsindices_.ClearToEmpty();
}
inline const std::string& find_grpc1Request::firstcloudpointsindices() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstCloudPointsIndices)
  return _internal_firstcloudpointsindices();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc1Request::set_firstcloudpointsindices(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstcloudpointsindices_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstCloudPointsIndices)
}
inline std::string* find_grpc1Request::mutable_firstcloudpointsindices() {
  std::string* _s = _internal_mutable_firstcloudpointsindices();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstCloudPointsIndices)
  return _s;
}
inline const std::string& find_grpc1Request::_internal_firstcloudpointsindices() const {
  return _impl_.firstcloudpointsindices_.Get();
}
inline void find_grpc1Request::_internal_set_firstcloudpointsindices(const std::string& value) {
  
  _impl_.firstcloudpointsindices_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc1Request::_internal_mutable_firstcloudpointsindices() {
  
  return _impl_.firstcloudpointsindices_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc1Request::release_firstcloudpointsindices() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstCloudPointsIndices)
  return _impl_.firstcloudpointsindices_.Release();
}
inline void find_grpc1Request::set_allocated_firstcloudpointsindices(std::string* firstcloudpointsindices) {
  if (firstcloudpointsindices != nullptr) {
    
  } else {
    
  }
  _impl_.firstcloudpointsindices_.SetAllocated(firstcloudpointsindices, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstcloudpointsindices_.IsDefault()) {
    _impl_.firstcloudpointsindices_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc1Request.firstCloudPointsIndices)
}

// bytes secondCloudPointsIndices = 6;
inline void find_grpc1Request::clear_secondcloudpointsindices() {
  _impl_.secondcloudpointsindices_.ClearToEmpty();
}
inline const std::string& find_grpc1Request::secondcloudpointsindices() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondCloudPointsIndices)
  return _internal_secondcloudpointsindices();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc1Request::set_secondcloudpointsindices(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondcloudpointsindices_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondCloudPointsIndices)
}
inline std::string* find_grpc1Request::mutable_secondcloudpointsindices() {
  std::string* _s = _internal_mutable_secondcloudpointsindices();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondCloudPointsIndices)
  return _s;
}
inline const std::string& find_grpc1Request::_internal_secondcloudpointsindices() const {
  return _impl_.secondcloudpointsindices_.Get();
}
inline void find_grpc1Request::_internal_set_secondcloudpointsindices(const std::string& value) {
  
  _impl_.secondcloudpointsindices_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc1Request::_internal_mutable_secondcloudpointsindices() {
  
  return _impl_.secondcloudpointsindices_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc1Request::release_secondcloudpointsindices() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondCloudPointsIndices)
  return _impl_.secondcloudpointsindices_.Release();
}
inline void find_grpc1Request::set_allocated_secondcloudpointsindices(std::string* secondcloudpointsindices) {
  if (secondcloudpointsindices != nullptr) {
    
  } else {
    
  }
  _impl_.secondcloudpointsindices_.SetAllocated(secondcloudpointsindices, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondcloudpointsindices_.IsDefault()) {
    _impl_.secondcloudpointsindices_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc1Request.secondCloudPointsIndices)
}

// bytes found_matches = 7;
inline void find_grpc1Request::clear_found_matches() {
  _impl_.found_matches_.ClearToEmpty();
}
inline const std::string& find_grpc1Request::found_matches() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Request.found_matches)
  return _internal_found_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc1Request::set_found_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.found_matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Request.found_matches)
}
inline std::string* find_grpc1Request::mutable_found_matches() {
  std::string* _s = _internal_mutable_found_matches();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc1Request.found_matches)
  return _s;
}
inline const std::string& find_grpc1Request::_internal_found_matches() const {
  return _impl_.found_matches_.Get();
}
inline void find_grpc1Request::_internal_set_found_matches(const std::string& value) {
  
  _impl_.found_matches_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc1Request::_internal_mutable_found_matches() {
  
  return _impl_.found_matches_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc1Request::release_found_matches() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc1Request.found_matches)
  return _impl_.found_matches_.Release();
}
inline void find_grpc1Request::set_allocated_found_matches(std::string* found_matches) {
  if (found_matches != nullptr) {
    
  } else {
    
  }
  _impl_.found_matches_.SetAllocated(found_matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.found_matches_.IsDefault()) {
    _impl_.found_matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc1Request.found_matches)
}

// -------------------------------------------------------------------

// find_grpc1Response

// bytes firstCloudPointsIndices = 1;
inline void find_grpc1Response::clear_firstcloudpointsindices() {
  _impl_.firstcloudpointsindices_.ClearToEmpty();
}
inline const std::string& find_grpc1Response::firstcloudpointsindices() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Response.firstCloudPointsIndices)
  return _internal_firstcloudpointsindices();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc1Response::set_firstcloudpointsindices(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstcloudpointsindices_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Response.firstCloudPointsIndices)
}
inline std::string* find_grpc1Response::mutable_firstcloudpointsindices() {
  std::string* _s = _internal_mutable_firstcloudpointsindices();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc1Response.firstCloudPointsIndices)
  return _s;
}
inline const std::string& find_grpc1Response::_internal_firstcloudpointsindices() const {
  return _impl_.firstcloudpointsindices_.Get();
}
inline void find_grpc1Response::_internal_set_firstcloudpointsindices(const std::string& value) {
  
  _impl_.firstcloudpointsindices_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc1Response::_internal_mutable_firstcloudpointsindices() {
  
  return _impl_.firstcloudpointsindices_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc1Response::release_firstcloudpointsindices() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc1Response.firstCloudPointsIndices)
  return _impl_.firstcloudpointsindices_.Release();
}
inline void find_grpc1Response::set_allocated_firstcloudpointsindices(std::string* firstcloudpointsindices) {
  if (firstcloudpointsindices != nullptr) {
    
  } else {
    
  }
  _impl_.firstcloudpointsindices_.SetAllocated(firstcloudpointsindices, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstcloudpointsindices_.IsDefault()) {
    _impl_.firstcloudpointsindices_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc1Response.firstCloudPointsIndices)
}

// bytes secondCloudPointsIndices = 2;
inline void find_grpc1Response::clear_secondcloudpointsindices() {
  _impl_.secondcloudpointsindices_.ClearToEmpty();
}
inline const std::string& find_grpc1Response::secondcloudpointsindices() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Response.secondCloudPointsIndices)
  return _internal_secondcloudpointsindices();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc1Response::set_secondcloudpointsindices(ArgT0&& arg0, ArgT... args) {
 
 _impl_.secondcloudpointsindices_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Response.secondCloudPointsIndices)
}
inline std::string* find_grpc1Response::mutable_secondcloudpointsindices() {
  std::string* _s = _internal_mutable_secondcloudpointsindices();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc1Response.secondCloudPointsIndices)
  return _s;
}
inline const std::string& find_grpc1Response::_internal_secondcloudpointsindices() const {
  return _impl_.secondcloudpointsindices_.Get();
}
inline void find_grpc1Response::_internal_set_secondcloudpointsindices(const std::string& value) {
  
  _impl_.secondcloudpointsindices_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc1Response::_internal_mutable_secondcloudpointsindices() {
  
  return _impl_.secondcloudpointsindices_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc1Response::release_secondcloudpointsindices() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc1Response.secondCloudPointsIndices)
  return _impl_.secondcloudpointsindices_.Release();
}
inline void find_grpc1Response::set_allocated_secondcloudpointsindices(std::string* secondcloudpointsindices) {
  if (secondcloudpointsindices != nullptr) {
    
  } else {
    
  }
  _impl_.secondcloudpointsindices_.SetAllocated(secondcloudpointsindices, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.secondcloudpointsindices_.IsDefault()) {
    _impl_.secondcloudpointsindices_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc1Response.secondCloudPointsIndices)
}

// bytes found_matches = 3;
inline void find_grpc1Response::clear_found_matches() {
  _impl_.found_matches_.ClearToEmpty();
}
inline const std::string& find_grpc1Response::found_matches() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Response.found_matches)
  return _internal_found_matches();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void find_grpc1Response::set_found_matches(ArgT0&& arg0, ArgT... args) {
 
 _impl_.found_matches_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Response.found_matches)
}
inline std::string* find_grpc1Response::mutable_found_matches() {
  std::string* _s = _internal_mutable_found_matches();
  // @@protoc_insertion_point(field_mutable:grpcI3D3DCorrespondencesFinder.find_grpc1Response.found_matches)
  return _s;
}
inline const std::string& find_grpc1Response::_internal_found_matches() const {
  return _impl_.found_matches_.Get();
}
inline void find_grpc1Response::_internal_set_found_matches(const std::string& value) {
  
  _impl_.found_matches_.Set(value, GetArenaForAllocation());
}
inline std::string* find_grpc1Response::_internal_mutable_found_matches() {
  
  return _impl_.found_matches_.Mutable(GetArenaForAllocation());
}
inline std::string* find_grpc1Response::release_found_matches() {
  // @@protoc_insertion_point(field_release:grpcI3D3DCorrespondencesFinder.find_grpc1Response.found_matches)
  return _impl_.found_matches_.Release();
}
inline void find_grpc1Response::set_allocated_found_matches(std::string* found_matches) {
  if (found_matches != nullptr) {
    
  } else {
    
  }
  _impl_.found_matches_.SetAllocated(found_matches, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.found_matches_.IsDefault()) {
    _impl_.found_matches_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcI3D3DCorrespondencesFinder.find_grpc1Response.found_matches)
}

// sint32 xpcfGrpcReturnValue = 4;
inline void find_grpc1Response::clear_xpcfgrpcreturnvalue() {
  _impl_.xpcfgrpcreturnvalue_ = 0;
}
inline int32_t find_grpc1Response::_internal_xpcfgrpcreturnvalue() const {
  return _impl_.xpcfgrpcreturnvalue_;
}
inline int32_t find_grpc1Response::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcI3D3DCorrespondencesFinder.find_grpc1Response.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void find_grpc1Response::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  _impl_.xpcfgrpcreturnvalue_ = value;
}
inline void find_grpc1Response::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcI3D3DCorrespondencesFinder.find_grpc1Response.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcI3D3DCorrespondencesFinder

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcI3D3DCorrespondencesFinderService_2eproto
