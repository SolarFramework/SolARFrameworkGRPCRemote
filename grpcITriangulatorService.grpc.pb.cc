// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcITriangulatorService.proto

#include "grpcITriangulatorService.pb.h"
#include "grpcITriangulatorService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcITriangulator {

static const char* grpcITriangulatorService_method_names[] = {
  "/grpcITriangulator.grpcITriangulatorService/triangulate_grpc0",
  "/grpcITriangulator.grpcITriangulatorService/triangulate_grpc1",
  "/grpcITriangulator.grpcITriangulatorService/triangulate_grpc2",
  "/grpcITriangulator.grpcITriangulatorService/triangulate_grpc3",
};

std::unique_ptr< grpcITriangulatorService::Stub> grpcITriangulatorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcITriangulatorService::Stub> stub(new grpcITriangulatorService::Stub(channel));
  return stub;
}

grpcITriangulatorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_triangulate_grpc0_(grpcITriangulatorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_triangulate_grpc1_(grpcITriangulatorService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_triangulate_grpc2_(grpcITriangulatorService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_triangulate_grpc3_(grpcITriangulatorService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcITriangulatorService::Stub::triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpcITriangulator::triangulate_grpc0Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcITriangulator::triangulate_grpc0Request, ::grpcITriangulator::triangulate_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_triangulate_grpc0_, context, request, response);
}

void grpcITriangulatorService::Stub::experimental_async::triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcITriangulator::triangulate_grpc0Request, ::grpcITriangulator::triangulate_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triangulate_grpc0_, context, request, response, std::move(f));
}

void grpcITriangulatorService::Stub::experimental_async::triangulate_grpc0(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triangulate_grpc0_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc0Response>* grpcITriangulatorService::Stub::PrepareAsynctriangulate_grpc0Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcITriangulator::triangulate_grpc0Response, ::grpcITriangulator::triangulate_grpc0Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_triangulate_grpc0_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc0Response>* grpcITriangulatorService::Stub::Asynctriangulate_grpc0Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc0Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctriangulate_grpc0Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcITriangulatorService::Stub::triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpcITriangulator::triangulate_grpc1Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcITriangulator::triangulate_grpc1Request, ::grpcITriangulator::triangulate_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_triangulate_grpc1_, context, request, response);
}

void grpcITriangulatorService::Stub::experimental_async::triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcITriangulator::triangulate_grpc1Request, ::grpcITriangulator::triangulate_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triangulate_grpc1_, context, request, response, std::move(f));
}

void grpcITriangulatorService::Stub::experimental_async::triangulate_grpc1(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triangulate_grpc1_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc1Response>* grpcITriangulatorService::Stub::PrepareAsynctriangulate_grpc1Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcITriangulator::triangulate_grpc1Response, ::grpcITriangulator::triangulate_grpc1Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_triangulate_grpc1_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc1Response>* grpcITriangulatorService::Stub::Asynctriangulate_grpc1Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc1Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctriangulate_grpc1Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcITriangulatorService::Stub::triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpcITriangulator::triangulate_grpc2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcITriangulator::triangulate_grpc2Request, ::grpcITriangulator::triangulate_grpc2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_triangulate_grpc2_, context, request, response);
}

void grpcITriangulatorService::Stub::experimental_async::triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcITriangulator::triangulate_grpc2Request, ::grpcITriangulator::triangulate_grpc2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triangulate_grpc2_, context, request, response, std::move(f));
}

void grpcITriangulatorService::Stub::experimental_async::triangulate_grpc2(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triangulate_grpc2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc2Response>* grpcITriangulatorService::Stub::PrepareAsynctriangulate_grpc2Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcITriangulator::triangulate_grpc2Response, ::grpcITriangulator::triangulate_grpc2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_triangulate_grpc2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc2Response>* grpcITriangulatorService::Stub::Asynctriangulate_grpc2Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctriangulate_grpc2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcITriangulatorService::Stub::triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpcITriangulator::triangulate_grpc3Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcITriangulator::triangulate_grpc3Request, ::grpcITriangulator::triangulate_grpc3Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_triangulate_grpc3_, context, request, response);
}

void grpcITriangulatorService::Stub::experimental_async::triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcITriangulator::triangulate_grpc3Request, ::grpcITriangulator::triangulate_grpc3Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triangulate_grpc3_, context, request, response, std::move(f));
}

void grpcITriangulatorService::Stub::experimental_async::triangulate_grpc3(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_triangulate_grpc3_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc3Response>* grpcITriangulatorService::Stub::PrepareAsynctriangulate_grpc3Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcITriangulator::triangulate_grpc3Response, ::grpcITriangulator::triangulate_grpc3Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_triangulate_grpc3_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcITriangulator::triangulate_grpc3Response>* grpcITriangulatorService::Stub::Asynctriangulate_grpc3Raw(::grpc::ClientContext* context, const ::grpcITriangulator::triangulate_grpc3Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynctriangulate_grpc3Raw(context, request, cq);
  result->StartCall();
  return result;
}

grpcITriangulatorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcITriangulatorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcITriangulatorService::Service, ::grpcITriangulator::triangulate_grpc0Request, ::grpcITriangulator::triangulate_grpc0Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcITriangulatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcITriangulator::triangulate_grpc0Request* req,
             ::grpcITriangulator::triangulate_grpc0Response* resp) {
               return service->triangulate_grpc0(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcITriangulatorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcITriangulatorService::Service, ::grpcITriangulator::triangulate_grpc1Request, ::grpcITriangulator::triangulate_grpc1Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcITriangulatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcITriangulator::triangulate_grpc1Request* req,
             ::grpcITriangulator::triangulate_grpc1Response* resp) {
               return service->triangulate_grpc1(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcITriangulatorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcITriangulatorService::Service, ::grpcITriangulator::triangulate_grpc2Request, ::grpcITriangulator::triangulate_grpc2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcITriangulatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcITriangulator::triangulate_grpc2Request* req,
             ::grpcITriangulator::triangulate_grpc2Response* resp) {
               return service->triangulate_grpc2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcITriangulatorService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcITriangulatorService::Service, ::grpcITriangulator::triangulate_grpc3Request, ::grpcITriangulator::triangulate_grpc3Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcITriangulatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcITriangulator::triangulate_grpc3Request* req,
             ::grpcITriangulator::triangulate_grpc3Response* resp) {
               return service->triangulate_grpc3(ctx, req, resp);
             }, this)));
}

grpcITriangulatorService::Service::~Service() {
}

::grpc::Status grpcITriangulatorService::Service::triangulate_grpc0(::grpc::ServerContext* context, const ::grpcITriangulator::triangulate_grpc0Request* request, ::grpcITriangulator::triangulate_grpc0Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcITriangulatorService::Service::triangulate_grpc1(::grpc::ServerContext* context, const ::grpcITriangulator::triangulate_grpc1Request* request, ::grpcITriangulator::triangulate_grpc1Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcITriangulatorService::Service::triangulate_grpc2(::grpc::ServerContext* context, const ::grpcITriangulator::triangulate_grpc2Request* request, ::grpcITriangulator::triangulate_grpc2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcITriangulatorService::Service::triangulate_grpc3(::grpc::ServerContext* context, const ::grpcITriangulator::triangulate_grpc3Request* request, ::grpcITriangulator::triangulate_grpc3Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcITriangulator

