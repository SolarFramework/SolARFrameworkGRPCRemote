// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: grpcICameraService.proto

#include "grpcICameraService.pb.h"
#include "grpcICameraService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grpcICamera {

static const char* grpcICameraService_method_names[] = {
  "/grpcICamera.grpcICameraService/start",
  "/grpcICamera.grpcICameraService/stop",
  "/grpcICamera.grpcICameraService/getNextImage",
  "/grpcICamera.grpcICameraService/setResolution",
  "/grpcICamera.grpcICameraService/setIntrinsicParameters",
  "/grpcICamera.grpcICameraService/setDistortionParameters",
  "/grpcICamera.grpcICameraService/setParameters",
  "/grpcICamera.grpcICameraService/getResolution",
  "/grpcICamera.grpcICameraService/getIntrinsicsParameters",
  "/grpcICamera.grpcICameraService/getParameters",
  "/grpcICamera.grpcICameraService/getDistortionParameters",
};

std::unique_ptr< grpcICameraService::Stub> grpcICameraService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< grpcICameraService::Stub> stub(new grpcICameraService::Stub(channel));
  return stub;
}

grpcICameraService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_start_(grpcICameraService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_stop_(grpcICameraService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getNextImage_(grpcICameraService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setResolution_(grpcICameraService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setIntrinsicParameters_(grpcICameraService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDistortionParameters_(grpcICameraService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setParameters_(grpcICameraService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getResolution_(grpcICameraService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getIntrinsicsParameters_(grpcICameraService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getParameters_(grpcICameraService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getDistortionParameters_(grpcICameraService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status grpcICameraService::Stub::start(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpcICamera::startResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::startRequest, ::grpcICamera::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_start_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::grpcICamera::startRequest* request, ::grpcICamera::startResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::startRequest, ::grpcICamera::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::start(::grpc::ClientContext* context, const ::grpcICamera::startRequest* request, ::grpcICamera::startResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::startResponse>* grpcICameraService::Stub::PrepareAsyncstartRaw(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICamera::startResponse, ::grpcICamera::startRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::startResponse>* grpcICameraService::Stub::AsyncstartRaw(::grpc::ClientContext* context, const ::grpcICamera::startRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::stop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpcICamera::stopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::stopRequest, ::grpcICamera::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_stop_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest* request, ::grpcICamera::stopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::stopRequest, ::grpcICamera::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::stop(::grpc::ClientContext* context, const ::grpcICamera::stopRequest* request, ::grpcICamera::stopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::stopResponse>* grpcICameraService::Stub::PrepareAsyncstopRaw(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICamera::stopResponse, ::grpcICamera::stopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::stopResponse>* grpcICameraService::Stub::AsyncstopRaw(::grpc::ClientContext* context, const ::grpcICamera::stopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncstopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::getNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpcICamera::getNextImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::getNextImageRequest, ::grpcICamera::getNextImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getNextImage_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::getNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest* request, ::grpcICamera::getNextImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::getNextImageRequest, ::grpcICamera::getNextImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextImage_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::getNextImage(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest* request, ::grpcICamera::getNextImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getNextImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getNextImageResponse>* grpcICameraService::Stub::PrepareAsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICamera::getNextImageResponse, ::grpcICamera::getNextImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getNextImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getNextImageResponse>* grpcICameraService::Stub::AsyncgetNextImageRaw(::grpc::ClientContext* context, const ::grpcICamera::getNextImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetNextImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::setResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::setResolutionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setResolution_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::setResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::setResolutionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setResolution_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::setResolution(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICameraService::Stub::PrepareAsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcICamera::setResolutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICameraService::Stub::AsyncsetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::setResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::setIntrinsicParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setIntrinsicParameters_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::setIntrinsicParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setIntrinsicParameters_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::setIntrinsicParameters(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setIntrinsicParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICameraService::Stub::PrepareAsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcICamera::setIntrinsicParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setIntrinsicParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICameraService::Stub::AsyncsetIntrinsicParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setIntrinsicParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetIntrinsicParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::setDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::setDistortionParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDistortionParameters_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::setDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::setDistortionParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDistortionParameters_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::setDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDistortionParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICameraService::Stub::PrepareAsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcICamera::setDistortionParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDistortionParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICameraService::Stub::AsyncsetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDistortionParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::setParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::setParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setParameters_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::setParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::setParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setParameters_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::setParameters(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICameraService::Stub::PrepareAsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::grpcICamera::setParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* grpcICameraService::Stub::AsyncsetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::setParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::getResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpcICamera::getResolutionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::getResolutionRequest, ::grpcICamera::getResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getResolution_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::getResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest* request, ::grpcICamera::getResolutionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::getResolutionRequest, ::grpcICamera::getResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getResolution_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::getResolution(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest* request, ::grpcICamera::getResolutionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getResolutionResponse>* grpcICameraService::Stub::PrepareAsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICamera::getResolutionResponse, ::grpcICamera::getResolutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getResolutionResponse>* grpcICameraService::Stub::AsyncgetResolutionRaw(::grpc::ClientContext* context, const ::grpcICamera::getResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpcICamera::getIntrinsicsParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::getIntrinsicsParametersRequest, ::grpcICamera::getIntrinsicsParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getIntrinsicsParameters_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpcICamera::getIntrinsicsParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::getIntrinsicsParametersRequest, ::grpcICamera::getIntrinsicsParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIntrinsicsParameters_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::getIntrinsicsParameters(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpcICamera::getIntrinsicsParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getIntrinsicsParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getIntrinsicsParametersResponse>* grpcICameraService::Stub::PrepareAsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICamera::getIntrinsicsParametersResponse, ::grpcICamera::getIntrinsicsParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getIntrinsicsParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getIntrinsicsParametersResponse>* grpcICameraService::Stub::AsyncgetIntrinsicsParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getIntrinsicsParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetIntrinsicsParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::getParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpcICamera::getParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::getParametersRequest, ::grpcICamera::getParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getParameters_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::getParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest* request, ::grpcICamera::getParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::getParametersRequest, ::grpcICamera::getParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getParameters_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::getParameters(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest* request, ::grpcICamera::getParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getParametersResponse>* grpcICameraService::Stub::PrepareAsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICamera::getParametersResponse, ::grpcICamera::getParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getParametersResponse>* grpcICameraService::Stub::AsyncgetParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status grpcICameraService::Stub::getDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpcICamera::getDistortionParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::grpcICamera::getDistortionParametersRequest, ::grpcICamera::getDistortionParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getDistortionParameters_, context, request, response);
}

void grpcICameraService::Stub::experimental_async::getDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest* request, ::grpcICamera::getDistortionParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::grpcICamera::getDistortionParametersRequest, ::grpcICamera::getDistortionParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDistortionParameters_, context, request, response, std::move(f));
}

void grpcICameraService::Stub::experimental_async::getDistortionParameters(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest* request, ::grpcICamera::getDistortionParametersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getDistortionParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getDistortionParametersResponse>* grpcICameraService::Stub::PrepareAsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::grpcICamera::getDistortionParametersResponse, ::grpcICamera::getDistortionParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getDistortionParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::grpcICamera::getDistortionParametersResponse>* grpcICameraService::Stub::AsyncgetDistortionParametersRaw(::grpc::ClientContext* context, const ::grpcICamera::getDistortionParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetDistortionParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

grpcICameraService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::startRequest, ::grpcICamera::startResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::startRequest* req,
             ::grpcICamera::startResponse* resp) {
               return service->start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::stopRequest, ::grpcICamera::stopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::stopRequest* req,
             ::grpcICamera::stopResponse* resp) {
               return service->stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::getNextImageRequest, ::grpcICamera::getNextImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::getNextImageRequest* req,
             ::grpcICamera::getNextImageResponse* resp) {
               return service->getNextImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::setResolutionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::setResolutionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::setIntrinsicParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::setIntrinsicParametersRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setIntrinsicParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::setDistortionParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::setDistortionParametersRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setDistortionParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::setParametersRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::setParametersRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->setParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::getResolutionRequest, ::grpcICamera::getResolutionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::getResolutionRequest* req,
             ::grpcICamera::getResolutionResponse* resp) {
               return service->getResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::getIntrinsicsParametersRequest, ::grpcICamera::getIntrinsicsParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::getIntrinsicsParametersRequest* req,
             ::grpcICamera::getIntrinsicsParametersResponse* resp) {
               return service->getIntrinsicsParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::getParametersRequest, ::grpcICamera::getParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::getParametersRequest* req,
             ::grpcICamera::getParametersResponse* resp) {
               return service->getParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      grpcICameraService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< grpcICameraService::Service, ::grpcICamera::getDistortionParametersRequest, ::grpcICamera::getDistortionParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](grpcICameraService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::grpcICamera::getDistortionParametersRequest* req,
             ::grpcICamera::getDistortionParametersResponse* resp) {
               return service->getDistortionParameters(ctx, req, resp);
             }, this)));
}

grpcICameraService::Service::~Service() {
}

::grpc::Status grpcICameraService::Service::start(::grpc::ServerContext* context, const ::grpcICamera::startRequest* request, ::grpcICamera::startResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::stop(::grpc::ServerContext* context, const ::grpcICamera::stopRequest* request, ::grpcICamera::stopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::getNextImage(::grpc::ServerContext* context, const ::grpcICamera::getNextImageRequest* request, ::grpcICamera::getNextImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::setResolution(::grpc::ServerContext* context, const ::grpcICamera::setResolutionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::setIntrinsicParameters(::grpc::ServerContext* context, const ::grpcICamera::setIntrinsicParametersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::setDistortionParameters(::grpc::ServerContext* context, const ::grpcICamera::setDistortionParametersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::setParameters(::grpc::ServerContext* context, const ::grpcICamera::setParametersRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::getResolution(::grpc::ServerContext* context, const ::grpcICamera::getResolutionRequest* request, ::grpcICamera::getResolutionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::getIntrinsicsParameters(::grpc::ServerContext* context, const ::grpcICamera::getIntrinsicsParametersRequest* request, ::grpcICamera::getIntrinsicsParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::getParameters(::grpc::ServerContext* context, const ::grpcICamera::getParametersRequest* request, ::grpcICamera::getParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status grpcICameraService::Service::getDistortionParameters(::grpc::ServerContext* context, const ::grpcICamera::getDistortionParametersRequest* request, ::grpcICamera::getDistortionParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grpcICamera

