// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcIVisualInertialFusionService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grpcIVisualInertialFusionService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grpcIVisualInertialFusionService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grpcIVisualInertialFusionService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grpcIVisualInertialFusionService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpcIVisualInertialFusionService_2eproto;
namespace grpcIVisualInertialFusion {
class addInertialDataRequest;
struct addInertialDataRequestDefaultTypeInternal;
extern addInertialDataRequestDefaultTypeInternal _addInertialDataRequest_default_instance_;
class addVisionDataRequest;
struct addVisionDataRequestDefaultTypeInternal;
extern addVisionDataRequestDefaultTypeInternal _addVisionDataRequest_default_instance_;
class initRequest;
struct initRequestDefaultTypeInternal;
extern initRequestDefaultTypeInternal _initRequest_default_instance_;
class processRequest;
struct processRequestDefaultTypeInternal;
extern processRequestDefaultTypeInternal _processRequest_default_instance_;
class processResponse;
struct processResponseDefaultTypeInternal;
extern processResponseDefaultTypeInternal _processResponse_default_instance_;
}  // namespace grpcIVisualInertialFusion
PROTOBUF_NAMESPACE_OPEN
template<> ::grpcIVisualInertialFusion::addInertialDataRequest* Arena::CreateMaybeMessage<::grpcIVisualInertialFusion::addInertialDataRequest>(Arena*);
template<> ::grpcIVisualInertialFusion::addVisionDataRequest* Arena::CreateMaybeMessage<::grpcIVisualInertialFusion::addVisionDataRequest>(Arena*);
template<> ::grpcIVisualInertialFusion::initRequest* Arena::CreateMaybeMessage<::grpcIVisualInertialFusion::initRequest>(Arena*);
template<> ::grpcIVisualInertialFusion::processRequest* Arena::CreateMaybeMessage<::grpcIVisualInertialFusion::processRequest>(Arena*);
template<> ::grpcIVisualInertialFusion::processResponse* Arena::CreateMaybeMessage<::grpcIVisualInertialFusion::processResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace grpcIVisualInertialFusion {

// ===================================================================

class initRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIVisualInertialFusion.initRequest) */ {
 public:
  inline initRequest() : initRequest(nullptr) {}
  ~initRequest() override;
  explicit PROTOBUF_CONSTEXPR initRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  initRequest(const initRequest& from);
  initRequest(initRequest&& from) noexcept
    : initRequest() {
    *this = ::std::move(from);
  }

  inline initRequest& operator=(const initRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline initRequest& operator=(initRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const initRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const initRequest* internal_default_instance() {
    return reinterpret_cast<const initRequest*>(
               &_initRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(initRequest& a, initRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(initRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(initRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  initRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<initRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const initRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const initRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(initRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIVisualInertialFusion.initRequest";
  }
  protected:
  explicit initRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitialVisionDataFieldNumber = 1,
  };
  // bytes initialVisionData = 1;
  void clear_initialvisiondata();
  const std::string& initialvisiondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_initialvisiondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_initialvisiondata();
  PROTOBUF_NODISCARD std::string* release_initialvisiondata();
  void set_allocated_initialvisiondata(std::string* initialvisiondata);
  private:
  const std::string& _internal_initialvisiondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_initialvisiondata(const std::string& value);
  std::string* _internal_mutable_initialvisiondata();
  public:

  // @@protoc_insertion_point(class_scope:grpcIVisualInertialFusion.initRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr initialvisiondata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIVisualInertialFusionService_2eproto;
};
// -------------------------------------------------------------------

class addInertialDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIVisualInertialFusion.addInertialDataRequest) */ {
 public:
  inline addInertialDataRequest() : addInertialDataRequest(nullptr) {}
  ~addInertialDataRequest() override;
  explicit PROTOBUF_CONSTEXPR addInertialDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addInertialDataRequest(const addInertialDataRequest& from);
  addInertialDataRequest(addInertialDataRequest&& from) noexcept
    : addInertialDataRequest() {
    *this = ::std::move(from);
  }

  inline addInertialDataRequest& operator=(const addInertialDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addInertialDataRequest& operator=(addInertialDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addInertialDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addInertialDataRequest* internal_default_instance() {
    return reinterpret_cast<const addInertialDataRequest*>(
               &_addInertialDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(addInertialDataRequest& a, addInertialDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addInertialDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addInertialDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addInertialDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addInertialDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addInertialDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addInertialDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addInertialDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIVisualInertialFusion.addInertialDataRequest";
  }
  protected:
  explicit addInertialDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInertialDataFieldNumber = 1,
  };
  // bytes inertialData = 1;
  void clear_inertialdata();
  const std::string& inertialdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inertialdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inertialdata();
  PROTOBUF_NODISCARD std::string* release_inertialdata();
  void set_allocated_inertialdata(std::string* inertialdata);
  private:
  const std::string& _internal_inertialdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inertialdata(const std::string& value);
  std::string* _internal_mutable_inertialdata();
  public:

  // @@protoc_insertion_point(class_scope:grpcIVisualInertialFusion.addInertialDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inertialdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIVisualInertialFusionService_2eproto;
};
// -------------------------------------------------------------------

class addVisionDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIVisualInertialFusion.addVisionDataRequest) */ {
 public:
  inline addVisionDataRequest() : addVisionDataRequest(nullptr) {}
  ~addVisionDataRequest() override;
  explicit PROTOBUF_CONSTEXPR addVisionDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  addVisionDataRequest(const addVisionDataRequest& from);
  addVisionDataRequest(addVisionDataRequest&& from) noexcept
    : addVisionDataRequest() {
    *this = ::std::move(from);
  }

  inline addVisionDataRequest& operator=(const addVisionDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline addVisionDataRequest& operator=(addVisionDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const addVisionDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const addVisionDataRequest* internal_default_instance() {
    return reinterpret_cast<const addVisionDataRequest*>(
               &_addVisionDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(addVisionDataRequest& a, addVisionDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(addVisionDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(addVisionDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  addVisionDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<addVisionDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const addVisionDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const addVisionDataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(addVisionDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIVisualInertialFusion.addVisionDataRequest";
  }
  protected:
  explicit addVisionDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisionDataFieldNumber = 1,
  };
  // bytes visionData = 1;
  void clear_visiondata();
  const std::string& visiondata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_visiondata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_visiondata();
  PROTOBUF_NODISCARD std::string* release_visiondata();
  void set_allocated_visiondata(std::string* visiondata);
  private:
  const std::string& _internal_visiondata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_visiondata(const std::string& value);
  std::string* _internal_mutable_visiondata();
  public:

  // @@protoc_insertion_point(class_scope:grpcIVisualInertialFusion.addVisionDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visiondata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIVisualInertialFusionService_2eproto;
};
// -------------------------------------------------------------------

class processRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIVisualInertialFusion.processRequest) */ {
 public:
  inline processRequest() : processRequest(nullptr) {}
  ~processRequest() override;
  explicit PROTOBUF_CONSTEXPR processRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  processRequest(const processRequest& from);
  processRequest(processRequest&& from) noexcept
    : processRequest() {
    *this = ::std::move(from);
  }

  inline processRequest& operator=(const processRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline processRequest& operator=(processRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const processRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const processRequest* internal_default_instance() {
    return reinterpret_cast<const processRequest*>(
               &_processRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(processRequest& a, processRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(processRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(processRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  processRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<processRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const processRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const processRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(processRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIVisualInertialFusion.processRequest";
  }
  protected:
  explicit processRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputDataFieldNumber = 2,
    kGrpcServerCompressionFormatFieldNumber = 1,
  };
  // bytes outputData = 2;
  void clear_outputdata();
  const std::string& outputdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputdata();
  PROTOBUF_NODISCARD std::string* release_outputdata();
  void set_allocated_outputdata(std::string* outputdata);
  private:
  const std::string& _internal_outputdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputdata(const std::string& value);
  std::string* _internal_mutable_outputdata();
  public:

  // int32 grpcServerCompressionFormat = 1;
  void clear_grpcservercompressionformat();
  int32_t grpcservercompressionformat() const;
  void set_grpcservercompressionformat(int32_t value);
  private:
  int32_t _internal_grpcservercompressionformat() const;
  void _internal_set_grpcservercompressionformat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIVisualInertialFusion.processRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputdata_;
  int32_t grpcservercompressionformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIVisualInertialFusionService_2eproto;
};
// -------------------------------------------------------------------

class processResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:grpcIVisualInertialFusion.processResponse) */ {
 public:
  inline processResponse() : processResponse(nullptr) {}
  ~processResponse() override;
  explicit PROTOBUF_CONSTEXPR processResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  processResponse(const processResponse& from);
  processResponse(processResponse&& from) noexcept
    : processResponse() {
    *this = ::std::move(from);
  }

  inline processResponse& operator=(const processResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline processResponse& operator=(processResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const processResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const processResponse* internal_default_instance() {
    return reinterpret_cast<const processResponse*>(
               &_processResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(processResponse& a, processResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(processResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(processResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  processResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<processResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const processResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const processResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(processResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "grpcIVisualInertialFusion.processResponse";
  }
  protected:
  explicit processResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputDataFieldNumber = 1,
    kXpcfGrpcReturnValueFieldNumber = 2,
  };
  // bytes outputData = 1;
  void clear_outputdata();
  const std::string& outputdata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_outputdata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_outputdata();
  PROTOBUF_NODISCARD std::string* release_outputdata();
  void set_allocated_outputdata(std::string* outputdata);
  private:
  const std::string& _internal_outputdata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outputdata(const std::string& value);
  std::string* _internal_mutable_outputdata();
  public:

  // sint32 xpcfGrpcReturnValue = 2;
  void clear_xpcfgrpcreturnvalue();
  int32_t xpcfgrpcreturnvalue() const;
  void set_xpcfgrpcreturnvalue(int32_t value);
  private:
  int32_t _internal_xpcfgrpcreturnvalue() const;
  void _internal_set_xpcfgrpcreturnvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:grpcIVisualInertialFusion.processResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputdata_;
  int32_t xpcfgrpcreturnvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grpcIVisualInertialFusionService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// initRequest

// bytes initialVisionData = 1;
inline void initRequest::clear_initialvisiondata() {
  initialvisiondata_.ClearToEmpty();
}
inline const std::string& initRequest::initialvisiondata() const {
  // @@protoc_insertion_point(field_get:grpcIVisualInertialFusion.initRequest.initialVisionData)
  return _internal_initialvisiondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void initRequest::set_initialvisiondata(ArgT0&& arg0, ArgT... args) {
 
 initialvisiondata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIVisualInertialFusion.initRequest.initialVisionData)
}
inline std::string* initRequest::mutable_initialvisiondata() {
  std::string* _s = _internal_mutable_initialvisiondata();
  // @@protoc_insertion_point(field_mutable:grpcIVisualInertialFusion.initRequest.initialVisionData)
  return _s;
}
inline const std::string& initRequest::_internal_initialvisiondata() const {
  return initialvisiondata_.Get();
}
inline void initRequest::_internal_set_initialvisiondata(const std::string& value) {
  
  initialvisiondata_.Set(value, GetArenaForAllocation());
}
inline std::string* initRequest::_internal_mutable_initialvisiondata() {
  
  return initialvisiondata_.Mutable(GetArenaForAllocation());
}
inline std::string* initRequest::release_initialvisiondata() {
  // @@protoc_insertion_point(field_release:grpcIVisualInertialFusion.initRequest.initialVisionData)
  return initialvisiondata_.Release();
}
inline void initRequest::set_allocated_initialvisiondata(std::string* initialvisiondata) {
  if (initialvisiondata != nullptr) {
    
  } else {
    
  }
  initialvisiondata_.SetAllocated(initialvisiondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (initialvisiondata_.IsDefault()) {
    initialvisiondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIVisualInertialFusion.initRequest.initialVisionData)
}

// -------------------------------------------------------------------

// addInertialDataRequest

// bytes inertialData = 1;
inline void addInertialDataRequest::clear_inertialdata() {
  inertialdata_.ClearToEmpty();
}
inline const std::string& addInertialDataRequest::inertialdata() const {
  // @@protoc_insertion_point(field_get:grpcIVisualInertialFusion.addInertialDataRequest.inertialData)
  return _internal_inertialdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addInertialDataRequest::set_inertialdata(ArgT0&& arg0, ArgT... args) {
 
 inertialdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIVisualInertialFusion.addInertialDataRequest.inertialData)
}
inline std::string* addInertialDataRequest::mutable_inertialdata() {
  std::string* _s = _internal_mutable_inertialdata();
  // @@protoc_insertion_point(field_mutable:grpcIVisualInertialFusion.addInertialDataRequest.inertialData)
  return _s;
}
inline const std::string& addInertialDataRequest::_internal_inertialdata() const {
  return inertialdata_.Get();
}
inline void addInertialDataRequest::_internal_set_inertialdata(const std::string& value) {
  
  inertialdata_.Set(value, GetArenaForAllocation());
}
inline std::string* addInertialDataRequest::_internal_mutable_inertialdata() {
  
  return inertialdata_.Mutable(GetArenaForAllocation());
}
inline std::string* addInertialDataRequest::release_inertialdata() {
  // @@protoc_insertion_point(field_release:grpcIVisualInertialFusion.addInertialDataRequest.inertialData)
  return inertialdata_.Release();
}
inline void addInertialDataRequest::set_allocated_inertialdata(std::string* inertialdata) {
  if (inertialdata != nullptr) {
    
  } else {
    
  }
  inertialdata_.SetAllocated(inertialdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (inertialdata_.IsDefault()) {
    inertialdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIVisualInertialFusion.addInertialDataRequest.inertialData)
}

// -------------------------------------------------------------------

// addVisionDataRequest

// bytes visionData = 1;
inline void addVisionDataRequest::clear_visiondata() {
  visiondata_.ClearToEmpty();
}
inline const std::string& addVisionDataRequest::visiondata() const {
  // @@protoc_insertion_point(field_get:grpcIVisualInertialFusion.addVisionDataRequest.visionData)
  return _internal_visiondata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void addVisionDataRequest::set_visiondata(ArgT0&& arg0, ArgT... args) {
 
 visiondata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIVisualInertialFusion.addVisionDataRequest.visionData)
}
inline std::string* addVisionDataRequest::mutable_visiondata() {
  std::string* _s = _internal_mutable_visiondata();
  // @@protoc_insertion_point(field_mutable:grpcIVisualInertialFusion.addVisionDataRequest.visionData)
  return _s;
}
inline const std::string& addVisionDataRequest::_internal_visiondata() const {
  return visiondata_.Get();
}
inline void addVisionDataRequest::_internal_set_visiondata(const std::string& value) {
  
  visiondata_.Set(value, GetArenaForAllocation());
}
inline std::string* addVisionDataRequest::_internal_mutable_visiondata() {
  
  return visiondata_.Mutable(GetArenaForAllocation());
}
inline std::string* addVisionDataRequest::release_visiondata() {
  // @@protoc_insertion_point(field_release:grpcIVisualInertialFusion.addVisionDataRequest.visionData)
  return visiondata_.Release();
}
inline void addVisionDataRequest::set_allocated_visiondata(std::string* visiondata) {
  if (visiondata != nullptr) {
    
  } else {
    
  }
  visiondata_.SetAllocated(visiondata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (visiondata_.IsDefault()) {
    visiondata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIVisualInertialFusion.addVisionDataRequest.visionData)
}

// -------------------------------------------------------------------

// processRequest

// int32 grpcServerCompressionFormat = 1;
inline void processRequest::clear_grpcservercompressionformat() {
  grpcservercompressionformat_ = 0;
}
inline int32_t processRequest::_internal_grpcservercompressionformat() const {
  return grpcservercompressionformat_;
}
inline int32_t processRequest::grpcservercompressionformat() const {
  // @@protoc_insertion_point(field_get:grpcIVisualInertialFusion.processRequest.grpcServerCompressionFormat)
  return _internal_grpcservercompressionformat();
}
inline void processRequest::_internal_set_grpcservercompressionformat(int32_t value) {
  
  grpcservercompressionformat_ = value;
}
inline void processRequest::set_grpcservercompressionformat(int32_t value) {
  _internal_set_grpcservercompressionformat(value);
  // @@protoc_insertion_point(field_set:grpcIVisualInertialFusion.processRequest.grpcServerCompressionFormat)
}

// bytes outputData = 2;
inline void processRequest::clear_outputdata() {
  outputdata_.ClearToEmpty();
}
inline const std::string& processRequest::outputdata() const {
  // @@protoc_insertion_point(field_get:grpcIVisualInertialFusion.processRequest.outputData)
  return _internal_outputdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void processRequest::set_outputdata(ArgT0&& arg0, ArgT... args) {
 
 outputdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIVisualInertialFusion.processRequest.outputData)
}
inline std::string* processRequest::mutable_outputdata() {
  std::string* _s = _internal_mutable_outputdata();
  // @@protoc_insertion_point(field_mutable:grpcIVisualInertialFusion.processRequest.outputData)
  return _s;
}
inline const std::string& processRequest::_internal_outputdata() const {
  return outputdata_.Get();
}
inline void processRequest::_internal_set_outputdata(const std::string& value) {
  
  outputdata_.Set(value, GetArenaForAllocation());
}
inline std::string* processRequest::_internal_mutable_outputdata() {
  
  return outputdata_.Mutable(GetArenaForAllocation());
}
inline std::string* processRequest::release_outputdata() {
  // @@protoc_insertion_point(field_release:grpcIVisualInertialFusion.processRequest.outputData)
  return outputdata_.Release();
}
inline void processRequest::set_allocated_outputdata(std::string* outputdata) {
  if (outputdata != nullptr) {
    
  } else {
    
  }
  outputdata_.SetAllocated(outputdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outputdata_.IsDefault()) {
    outputdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIVisualInertialFusion.processRequest.outputData)
}

// -------------------------------------------------------------------

// processResponse

// bytes outputData = 1;
inline void processResponse::clear_outputdata() {
  outputdata_.ClearToEmpty();
}
inline const std::string& processResponse::outputdata() const {
  // @@protoc_insertion_point(field_get:grpcIVisualInertialFusion.processResponse.outputData)
  return _internal_outputdata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void processResponse::set_outputdata(ArgT0&& arg0, ArgT... args) {
 
 outputdata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:grpcIVisualInertialFusion.processResponse.outputData)
}
inline std::string* processResponse::mutable_outputdata() {
  std::string* _s = _internal_mutable_outputdata();
  // @@protoc_insertion_point(field_mutable:grpcIVisualInertialFusion.processResponse.outputData)
  return _s;
}
inline const std::string& processResponse::_internal_outputdata() const {
  return outputdata_.Get();
}
inline void processResponse::_internal_set_outputdata(const std::string& value) {
  
  outputdata_.Set(value, GetArenaForAllocation());
}
inline std::string* processResponse::_internal_mutable_outputdata() {
  
  return outputdata_.Mutable(GetArenaForAllocation());
}
inline std::string* processResponse::release_outputdata() {
  // @@protoc_insertion_point(field_release:grpcIVisualInertialFusion.processResponse.outputData)
  return outputdata_.Release();
}
inline void processResponse::set_allocated_outputdata(std::string* outputdata) {
  if (outputdata != nullptr) {
    
  } else {
    
  }
  outputdata_.SetAllocated(outputdata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (outputdata_.IsDefault()) {
    outputdata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:grpcIVisualInertialFusion.processResponse.outputData)
}

// sint32 xpcfGrpcReturnValue = 2;
inline void processResponse::clear_xpcfgrpcreturnvalue() {
  xpcfgrpcreturnvalue_ = 0;
}
inline int32_t processResponse::_internal_xpcfgrpcreturnvalue() const {
  return xpcfgrpcreturnvalue_;
}
inline int32_t processResponse::xpcfgrpcreturnvalue() const {
  // @@protoc_insertion_point(field_get:grpcIVisualInertialFusion.processResponse.xpcfGrpcReturnValue)
  return _internal_xpcfgrpcreturnvalue();
}
inline void processResponse::_internal_set_xpcfgrpcreturnvalue(int32_t value) {
  
  xpcfgrpcreturnvalue_ = value;
}
inline void processResponse::set_xpcfgrpcreturnvalue(int32_t value) {
  _internal_set_xpcfgrpcreturnvalue(value);
  // @@protoc_insertion_point(field_set:grpcIVisualInertialFusion.processResponse.xpcfGrpcReturnValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace grpcIVisualInertialFusion

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grpcIVisualInertialFusionService_2eproto
